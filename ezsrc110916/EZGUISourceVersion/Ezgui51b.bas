' Compiles DLL to name ezgui50cust.dll
' Compile and then rename DLL if needed to work with Visual Designer
' *************************************************************************************
'                     Copyright (c) 2001 to 2016 Christopher R. Boss
'                          Official version of EZGUI 5.1
'                     This is the current file for development !!!
'
'    Last Date worked on:  06/07/2016
' *************************************************************************************

#REGISTER NONE
#DIM ALL
#DEBUG ERROR OFF
' *************************************************************************************
' *************************************************************************************

'  NOTE:    EZGUI 5.1 must maintain the same file name for backward compatibility of
'           OpenGL control and any components compiled using EZGUI 5.0


%BuildSLL               =   0

%UseDlgTemplateEx       =   1

%EZ_Version     = 511   ' set version number (ie. 101 = version 1.01)

%DoImageListSwap    = 0 ' this code must be removed

%MakeDLL        = 1
%MakeDemo       = 0
%SPLASH         = 0        ' display Beta messagebox


#IF %BuildSLL
    #COMPILE SLL "ezgui50.sll"
    MACRO EXPORT10 = COMMON
    ' supposely these commands were replace with MAK function in PB 10, but it appears they still work
'    MACRO MAKDWD(x,y) = MAK(DWORD,x,y)
'    MACRO MAKLNG(x,y) = MAK(LONG,x,y)

#ELSE
    #TOOLS OFF
    #COMPILE DLL "ezgui50cust.dll"
    MACRO EXPORT10 = EXPORT
#ENDIF


#INCLUDE ".\WinapiEZ\Winclean.inc"

' #INCLUDE "C:\Pbdll60\WinapiEZ\win32api.inc"


#IF %BuildSLL
    ' add Masked edit control
    #INCLUDE "c:\PBDLL60\ezgui\ezturtle\Ezmedit5.bas"
#ENDIF


' *************************************************************************************

' Equates for conditional compiling of code
%YESCOMMON      = 1     ' Set to 1 if you want to use Common Controls

' *************************************************************************************
#IF %YESCOMMON
    '  This disables the PowerBasic Subs in the commctrl.inc file
    ' %NOANIMATE    = 1
     %NOBUTTON     = 1
     %NOCOMBO      = 1
     '   %NODRAGLIST   = 1
    ' %NOHEADER     = 1
    ' %NOIMAGELIST  = 1
     %NOLIST       = 1
    '    %NOLISTVIEW   = 1
    '    %NOSTATUSBAR  = 1
    '    %NOTABCONTROL = 1
    '    %NOTOOLBAR    = 1
    '    %NOTOOLTIPS   = 1
    '    %NOTRACKBAR   = 1
    '    %NOTREEVIEW   = 1
    '    %NOUPDOWN     = 1
    '    %NODATETIMEPICK = 1

'    #INCLUDE "C:\Pbdll60\WinapiEZ\commctrl.inc"   ' was "commctrl.inc" before
#ENDIF

'#INCLUDE "C:\Pbdll60\WinapiEZ\comdlg32.inc"

'#INCLUDE "C:\Pbdll60\WinapiEZ\richedit.inc"

' *************************************************************************************
#IF %BuildSLL
    ' need alternate way of handling resources !
#ELSE
    #RESOURCE "ezgui51.pbr"
#ENDIF

' *************************************************************************************
$EZComponent              =   "EZGUI_TYPE3_32"
$DragHandleControl      =   "EZGUI50_DRAGHANDLES_32"

$OPENGLCLASS        =   "EZGLCANVAS32"  ' new EZGUI 5.0 OpenGL control

DECLARE SUB EZ_UseSuperClass (BYVAL SClass$)

DECLARE SUB zDefSuperClassAtoms(BYVAL mode&)
DECLARE FUNCTION IsNotSimpleCombobox(BYVAL hWnd&) AS LONG
DECLARE SUB EZ_FreeCursor(BYVAL CurNum&)
DECLARE FUNCTION EZ_GetDrawMacro(BYVAL T$) AS LONG
DECLARE SUB EZ_DCDrawMacro(BYVAL hDC&, BYVAL Obj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL TC&, BYVAL LC&)
DECLARE SUB ZInitSprites()
DECLARE SUB ZDeleteSprites()
DECLARE FUNCTION ZIsThereSprites(BYVAL hCtrl&,BYVAL Mode&) AS LONG
DECLARE SUB ZCreateBDIV(BYVAL Mode&)
DECLARE SUB ZFreeBDIV()
DECLARE SUB ZCallLoaded()
DECLARE SUB EZ_SelectFormHandleEX(BYVAL N&)
DECLARE SUB EZ_SetSpriteDefTColor(BYVAL C&)
' --------------------------------------------------------
' New Custom Classes for 3.5
' --------------------------------------------------------
    DECLARE SUB RegisterAllCustom()
    DECLARE SUB UnRegisterAllCustom()
' --------------------------------------------------------
$PLISTCLASS                 =   "EZGUI_PLIST32"
%PLB_SETERASEFLAG           =   %WM_USER+100
%PLB_GETERASEFLAG           =   %WM_USER+101
%PLB_SETCURSEL              =   %WM_USER+102

%PLB_CHILDFOCUS             =   %WM_USER+110    ' must be in increment by 1 sequence the following messages
%PLB_CHILDNOFOCUS           =   %WM_USER+111
%PLB_CHILDRETURN            =   %WM_USER+112
%PLB_CHILDESCAPE            =   %WM_USER+113
%PLB_CHILDSHOW              =   %WM_USER+114
%PLB_CHILDHIDE              =   %WM_USER+115
%PLB_CHILDUPDATE            =   %WM_USER+116

$FLISTCLASS                 =   "EZGUI_FLIST32"
%FLB_GETIMAGELIST           =   %WM_USER+100
%FLB_SETIMAGELIST           =   %WM_USER+101    ' ImageList handle in lparam
%FLB_GETDIRFILTER           =   %WM_USER+102    ' if lParam=0 filter 1, lparam=1 filter 2
%FLB_SETDIRFILTER           =   %WM_USER+103    ' Filter1 in wparam, filter2 in lparam
%FLB_DCLICKON               =   %WM_USER+104
%FLB_GETCUSTOMFLAG          =   %WM_USER+105
%FLB_SETREMOVEFLAG          =   %WM_USER+106
%FLB_GETREMOVEFLAG          =   %WM_USER+107

DECLARE FUNCTION ZGetSystemImageIndex(BYVAL F$, BYVAL Mode&) AS LONG
DECLARE FUNCTION ZIsLastBlock(BYVAL hCtrl&) AS LONG
DECLARE SUB EZ_ColorRGB(BYVAL FGC&, BYVAL BGC&)
DECLARE SUB ZFlagSpriteRect(BYVAL N&)

$DCOMBOCLASS                =   "EZGUI_DCOMBO32"

' --------------------------------------------------------
'GLOBAL App_EZ_HandleFlag&
GLOBAL App_EZ_HandlehWnd&
GLOBAL App_FixedCorner&
GLOBAL App_TrapESCKey&
GLOBAL App_PolyStyle$
'GLOBAL App_PolyRDeg!

GLOBAL App_UseAlternateClass$

GLOBAL App_SnapToDFlag&
GLOBAL App_LoadC!
GLOBAL App_LoadR!
GLOBAL App_LoadW!
GLOBAL App_LoadH!
GLOBAL App_LoadTxt$
GLOBAL App_LoadPict$
GLOBAL App_LoadProp$
GLOBAL App_AllowLoading&

GLOBAL App_FirstStackFont&
GLOBAL App_StackFont$()
GLOBAL App_StackFontN&()
GLOBAL App_CurrentOwnerDrawhWnd&

GLOBAL App_CurrentOS&
GLOBAL App_CurrentPlatform&

TYPE EZ_NMHDR
  hwndFrom AS LONG
  idfrom AS LONG
  CODE AS LONG
END TYPE

TYPE RGBSW
    R AS BYTE
    G AS BYTE
    B AS BYTE
    RS AS BYTE
END TYPE

UNION CVRGBBGR
    C AS RGBSW
    L AS LONG
END UNION
' --------------------------------------------------------
DECLARE SUB ZSetCalendarColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&, BYVAL Mode&)
DECLARE SUB EZ_DefCalendarExColors(BYVAL TFG&, BYVAL TBG&, BYVAL TT&)

%CTRL_BUTTON        =   1
%CTRL_FRAME         =   2
%CTRL_RADIO         =   3
%CTRL_CHECKBOX      =   4
%CTRL_COMBOBOX      =   5
%CTRL_LISTBOX       =   6
%CTRL_TEXT          =   7
%CTRL_RICHTEXT      =   8
%CTRL_LABEL         =   9
%CTRL_IMAGE         =   10
%CTRL_HSCROLL       =   11
%CTRL_VSCROLL       =   12
%CTRL_TAB           =   13
%CTRL_PROGRESS      =   14
%CTRL_UPDOWN        =   15
%CTRL_TURTLE        =   16
%CTRL_DRAGHANDLE    =   17
%CTRL_LISTVIEW      =   18
%CTRL_TREEVIEW      =   19
%CTRL_VTRACKBAR     =   20
%CTRL_HTRACKBAR     =   21
%CTRL_CANVAS        =   22
%CTRL_MCI           =   23
%CTRL_DBOX          =   24
%CTRL_ANIMATE       =   25
%CTRL_DATETIME      =   26
%CTRL_SHAPE         =   27
%CTRL_REBAR         =   28
%CTRL_PAGER         =   29
%CTRL_MONTH         =   30
%CTRL_TOOLBAR       =   31
%CTRL_HEADER        =   32

%CTRL_PLIST         =   50      ' new custom control group
%CTRL_FLIST         =   51

' Drag Handle Control Equates

%EZDC_SETCOLOR              =   %WM_USER+100
%EZDC_SETBUDDY              =   %WM_USER+101
%EZDC_SETSIZE               =   %WM_USER+102
%EZDC_GETCOLOR              =   %WM_USER+120
%EZDC_GETBUDDY              =   %WM_USER+121
%EZDC_GETSIZE               =   %WM_USER+122
%EZDC_GETOFFSET             =   %WM_USER+123
%EZDC_FAKE_NCLBD            =   %WM_USER+124    ' pass %WM_NCLBUTTONDOWN parameters

' %EZDC_MOUSEEVENT            =   %WM_USER+130    ' wParam = Msg, lParam = xyPos

' Masked Edit control Equates
#IF %BuildSLL
     ' should already defined in masked edit control code which is included in SLL
     #IF %DEF(%EZME_SETMASK)
     #ELSE
          %EZME_SETMASK               =   %WM_USER+100    ' wParam = asciiz pointer
          %EZME_SETTEXTMODE           =   %WM_USER+101    ' wParam = 0 or 1 (1= Ret=Tab mode)
     #ENDIF
#ELSE
     %EZME_SETMASK               =   %WM_USER+100    ' wParam = asciiz pointer
     %EZME_SETTEXTMODE           =   %WM_USER+101    ' wParam = 0 or 1 (1= Ret=Tab mode)
#ENDIF

' Turtle Graphic Equates

%EZTG_GETLASTXPOS               =   %WM_USER+100
%EZTG_GETLASTYPOS               =   %WM_USER+101
%EZTG_GETBITMAP                 =   %WM_USER+102
%EZTG_CLEAR                     =   %WM_USER+103


' missing win32api equates

%NFR_ANSI                       =   1
%NFR_UNICODE                    =   2


%WM_EZGUI_TRAYICON              = %WM_USER + 400
%WM_USER_EVENT                  = %WM_USER + 500
%WM_USER_EVENTP                 = %WM_USER + 505
%WM_USER_CEVENT                 = %WM_USER + 510
%WM_EZMDICHANGE                 = %WM_USER + 399
%WM_STARTFORM                   = %WM_USER + 401
%WM_SETCMPVAL                   = %WM_USER + 402
%WM_GETCMPVAL                   = %WM_USER + 403
%WM_SETCMPTEXT                  = %WM_USER + 404
%WM_SETCMPSTATE                 = %WM_USER + 405
%WM_SETCMPBYSTR                 = %WM_USER + 406
%WM_GETCMPBYSTR                 = %WM_USER + 407
%WM_SETCMPVALUP                 = %WM_USER + 408
%WM_FORCEDRAGSTOP               = %WM_USER + 420

%CanvasClassExtraData       = 10

$CanvasClassName            = "EZGUI_CANVAS_32"

' -------------------------------------------------------------------------------------------
'                           EZGUI Canvas Library Declares
' -------------------------------------------------------------------------------------------
DECLARE FUNCTION ZDrawPoly(BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL FillFlag&, BYVAL PolyType&) AS LONG
DECLARE SUB EZ_SaveMenu(BYVAL FormName$, BYVAL N&, BYVAL V&)
DECLARE SUB PBVRegisterCanvasClass()
DECLARE SUB PBVClearCanvasAndShapeClass()
DECLARE FUNCTION TestVisible(BYVAL hCtrl AS LONG) AS LONG

DECLARE FUNCTION ZGetWindowLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG
DECLARE SUB ZSetWindowLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
DECLARE SUB PBVCanvasClassPaint(BYVAL hWnd AS LONG, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)
DECLARE SUB PBVBuildCanvasBitmap(BYVAL hWnd AS LONG, BYVAL CFlag&, BYVAL NW&, BYVAL NH&)

GLOBAL App_CanvasCursor1 AS LONG
GLOBAL App_CanvasCursor2 AS LONG
GLOBAL App_CanvasDC&
GLOBAL App_CanvasOldhBmp1&
GLOBAL App_CanvasOldhBmp2&
GLOBAL App_CanvasDirtyFlag&
GLOBAL App_CanvasDirtyRgn&
GLOBAL App_DrawTextFormat&
GLOBAL App_Par1&
GLOBAL App_Par2&
GLOBAL App_Par3&
GLOBAL App_Par4&
GLOBAL App_FixedFontScale&
GLOBAL App_ClipFormat&
GLOBAL App_ForceRichVer&

' -------------------------------------------------------------------------------------------

$TurtleClassName           = "EZGUI50_TURTLE_32"
$ShapeClassName            = "EZGUI50_SHAPE_32"
$MCIClassName              = "EZGUI50_MCI_32"

'DECLARE FUNCTION GetShapeLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG
'DECLARE SUB SetShapeLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
DECLARE SUB RegisterShapeClass()
DECLARE SUB ShapeClassPaint(BYVAL hWnd AS LONG, BYVAL PFlag&, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)

' *************************************************************************************
'                      calls into EXE from DLL


DECLARE SUB ProcessStartupX(VerNum&)
DECLARE SUB EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
DECLARE SUB EZ_DesignWindowX(FormName$)
DECLARE FUNCTION EZ_DlgProcX(BYVAL hDlg AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
DECLARE FUNCTION EZ_DlgProcXEx(BYVAL hDlg AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG, RV&) AS LONG
DECLARE FUNCTION EZ_MsgLoopX(BYVAL hCurDlg AS LONG, Msg AS tagMsg) AS LONG

' *************************************************************************************

DECLARE FUNCTION DlgProc(BYVAL hDlg   AS LONG, _
                         BYVAL Msg    AS LONG, _
                         BYVAL wParam AS LONG, _
                         BYVAL lParam AS LONG) AS LONG

' *************************************************************************************
'                      EZGUI Internal functions
' *************************************************************************************

DECLARE SUB EZ_Events(FormName$, CID&, CMsg&, CVal&, Cancel&)
DECLARE SUB EZ_DesignWindow(FormName$)
DECLARE FUNCTION ZParse(D1$, D2$) AS STRING

DECLARE FUNCTION IsStyleSetEx(BYVAL WS&, BYVAL WStyle&) AS LONG

DECLARE FUNCTION EZ_CX(BYVAL X&) AS SINGLE
DECLARE FUNCTION EZ_CY(BYVAL Y&) AS SINGLE

' *************************************************************************************
'                      EZGUI External functions    - copy these to skeleton
' *************************************************************************************

%EZ_Window      =   0
%EZ_Close       =   0
%EZ_Click       =   1
%EZ_DClick      =   2
%EZ_Focus       =   3
%EZ_NoFocus     =   4
%EZ_Disable     =   5
%EZ_Change      =   6
%EZ_Timer       =   7
%EZ_ToolTip     =   8
%EZ_UnKnown     =   9
%EZ_Command     =   9       ' same as %EZ_UnKnown
%EZ_Notify      =   10
%EZ_CtrlError   =   -1      ' Custom Controls can use this indicate an error occurred
%EZ_PrintError  =   -1
%EZ_Redraw      =   11      ' request for manual redraw of control
%EZ_AllowEdit   =   20      ' for ListView control
%EZ_DragForm    =   21
%EZ_SysMenu     =   22
%EZ_DClickCap   =   23
%EZ_NoDClick    =   24
%EZ_DoMDIMsg    =   28
%EZ_GameLoop    =   29

%EZ_KeyDown     =   30
%EZ_KeyUp       =   31
%EZ_KeyPress    =   32
%EZ_Enable      =   34   ' not used yet so add to WM_COMMAND code
' ---------------------
' new to 5.0
' ---------------------
%EZ_HelpShow    =   35
%EZ_HelpShowC   =   36
%EZ_HelpShowM   =   37
%EZ_HelpShowID  =   38
' ---------------------
%EZ_SysKeyDown  =   40
%EZ_SysKeyUp    =   41
%EZ_SysKeyPress =   42
%EZ_ActivateMe  =   43

%EZ_FinishMCI   =   50
%EZ_FlagMCI     =   51

%EZ_AppFocus    =   55
%EZ_NoAppFocus  =   56
%EZ_CBDropDown  =  57
%EZ_CBDropUp    =  58

%EZ_NoAutoSize  =   59

%EZ_ChangeZOrder =   60
%EZ_ChangeSize   =   61
%EZ_ChangePos    =   62
%EZ_PollCtrl     =   63
%EZ_NextCtrl     =   64
%EZ_CaptureOff  =   65
%EZ_AllowFirstCtrl= 66
%EZ_RTFLink     =   70
%EZ_Updated     =   75
%EZ_ConvBtnPos  =   77
%EZ_DoDefFocus  =   78
%EZ_Compare     =   81
%EZ_InitPropDlg =   82
%EZ_Loading     =   85
%EZ_Started     =   86
%EZ_Loaded      =   87

%EZ_FreeNow     =   88
%EZ_LButtonDown =   89
%EZ_LButtonUp   =   90

%EZ_LButtonDC   =   93
%EZ_MButtonUp   =   94
%EZ_RButtonUp   =   95
%EZ_DragClear   =   97   ' EZGUI 5.0 event
%EZ_DragPos     =   98   ' EZGUI 5.0 event
%EZ_SubClass    =   99

%EZ_Drag        =   100
%EZ_Drop        =   101
%EZ_Size        =   102
%EZ_DropFiles   =   103
%EZ_Cancel      =   104
%EZ_NoDrag      =   105
%EZ_DragItem    =   106
%EZ_Move        =   107
%EZ_Dropping    =   108
%EZ_DragItemDrop =  109

' --------------------------------------
' new 3.0 events
%EZ_Maximize    =   110
%EZ_Minimize    =   111
%EZ_Restore     =   112
%EZ_MouseMove   =   120
%EZ_MouseEnter  =   122
%EZ_MouseLeave  =   123
%EZ_Sizing      =   125
%EZ_AutoSizeStart   =     126
%EZ_AutoSizeEnd     =    127
%EZ_ScaleMe         =    128
%EZ_NoRedraw        =  129

%EZ_SelectCursor        =   130
%EZ_AfterSize           =   137    ' new to EZGUI 5.1
%EZ_TrayLButtonDown     =   200
%EZ_TrayLButtonUp       =   205
%EZ_TrayRButtonDown     =   210
%EZ_TrayRButtonUp       =   215
%EZ_TrayDClick          =   220

%EZ_HotMouseMove        =   221    ' new to 5.0
%EZ_HotMouseEnter       =   222    ' new to 5.0
%EZ_HotMouseLeave       =   223    ' new to 5.0

%EZ_FormSizable         =   229
%EZ_TextUpdated         =   230
%EZ_AttrUpdated         =   231
%EZ_ColorUpdated        =   232
%EZ_FontUpdated         =   233
%EZ_SelUpdated          =   234
%EZ_ClearUpdated        =   235
%EZ_BitmapUpdated       =   236
%EZ_IconUpdated         =   237
%EZ_CmpSet              =   238
%EZ_CmpGet              =   239

%EZ_OwnerDraw           =   300
%EZ_OwnerSize           =   310
%EZ_NoCustomDraw        =   315
%EZ_CustomDraw          =   316
%EZ_PaintBG             =   320
%EZ_EraseBG             =   %EZ_PaintBG
%EZ_PaintSP             =   322
%EZ_EraseSP             =   %EZ_PaintSP
%EZ_Thread              =   400
%EZ_ThreadP             =   405
%EZ_ThreadCode          =   407
%EZ_Post                =   410
%EZ_Collapse            =   500
%EZ_Expand              =   510
%EZ_Selected            =   520
%EZ_SMSelected          =   522
%EZ_MenuClose           =   523
%EZ_MenuShow            =   524
%EZ_UnSelected          =   530
%EZ_Terminate           =   -100
%EZ_ScrollBG            =   600
%EZ_ScrollBGKey         =   610
%EZ_DragItemID          =   611
%EZ_DragItemDraw        =   612

%EZ_NoLeftSize          =   700
%EZ_NoRightSize         =   701
%EZ_NoTopSize           =   702
%EZ_NoBottomSize        =   703
%EZ_MinMax              =   750
%EZ_EditSetSel          =   800
%EZ_SaveSetSel          =   801

%EZ_LVClickInfo         =   900
%EZ_LVDClickInfo        =   910
%EZ_SetODChildID        =   920
' --------------------------------------
'    EZGUI 3.5 Events
' --------------------------------------
%EZ_FindDlgTerminate    =   950
%EZ_FindDlgFindNext     =   951
%EZ_FindDlgReplace      =   952
%EZ_FindDlgReplaceAll   =   953
%EZ_ShowCommonDlg       =   960

' --------------------------------------
'    EZGUI 4.5 Events
' --------------------------------------
%EZ_CHILDFOCUS             =  970   ' must be in increment by 1 sequence the following events
%EZ_CHILDNOFOCUS           =  971
%EZ_CHILDRETURN            =  972
%EZ_CHILDESCAPE            =  973
%EZ_CHILDSHOW              =  974
%EZ_CHILDHIDE              =  975
%EZ_CHILDUPDATE            =  976
' --------------------------------------
'   EZGUI 5.1 events
' --------------------------------------
%EZ_Touch                  = 990
%EZ_Gesture                = 991
%EZ_MouseWheel             = 992


%EZ_NoTheme                =  -9
%EZ_NoVirtualSize          =  -10
%EZ_SysChange              =  -11
%EZ_PTimer                 =  -12


%EZ_Top         =   1
%EZ_Bottom      =   2
%EZ_Left        =   4
%EZ_Right       =   8
%EZ_Center      =   16
%EZ_VCenter     =   32

%EZ_WordBreak                                = &H10
%EZ_UseTabs                                  = &H40
%EZ_NoPrefix                                 = &H800


%APP_64KB       = 65530


%APP_LowBrush   =   -57     ' 56 extra bitmap brushes
%APP_LowBrushN  =   -58     ' one extra for NULL brush

TYPE EZLVSI
    Ax AS LONG
    Ay AS LONG
    Ix AS LONG
    Iy AS LONG
    Col AS LONG
    ITEM AS LONG
END TYPE

DECLARE SUB ezSetRegion(BYVAL hWnd&, BYVAL RType&, BYVAL MyRgn&, BYVAL IFlag&, BYVAL NW&, BYVAL NH&)
DECLARE FUNCTION zIsHot(BYVAL hCtrl&) AS LONG
DECLARE FUNCTION EZ_IsHot(BYVAL FormName$, BYVAL IDNum&) AS LONG
DECLARE SUB EZ_HotTrackControl (BYVAL FormName$, BYVAL IDNum&, BYVAL HProp$)
DECLARE SUB zHotTrackControl(BYVAL hCtrl&, BYVAL HProp$)
DECLARE SUB zAddResizeInfo(BYVAL N&, BYVAL hCtrl&, BYVAL RFlag&)
DECLARE SUB ZCleanUpHHelp()
DECLARE SUB ZAddTabItems(BYVAL hCtrl&, BYVAL CText$, BYVAL TB&)
DECLARE SUB EZ_Form (BYVAL FormName$, BYVAL Parent$, BYVAL Caption$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL Style$)
DECLARE SUB EZ_SetForm (BYVAL FormName$, BYVAL FmFocus&)
DECLARE SUB EZ_ShowForm (BYVAL FormName$)
DECLARE SUB EZ_HideForm (BYVAL FormName$)
DECLARE SUB EZ_UnloadForm (BYVAL FormName$)
DECLARE SUB EZ_SetRowCol (BYVAL Flag&)
DECLARE SUB EZ_DefCharSize (BYVAL W&, BYVAL H&)
DECLARE SUB EZ_GetScreenSize ( SW&, SH&)
DECLARE SUB EZ_Delay(BYVAL S!)

' --------------------------------------------------------------

DECLARE SUB EZ_SetText (BYVAL FormName$, BYVAL ID&, BYVAL CText$)
DECLARE FUNCTION EZ_GetText (BYVAL FormName$, BYVAL ID&) AS STRING
DECLARE SUB EZ_SetCheck (BYVAL FormName$, BYVAL ID&, BYVAL V&)
DECLARE FUNCTION EZ_GetCheck (BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE FUNCTION EZ_LoadPicture (BYVAL BName$) AS STRING
DECLARE FUNCTION EZ_LoadIcon (BYVAL BName$) AS STRING
DECLARE SUB EZ_FreeImage(BYVAL IName$)
DECLARE SUB EZ_SetVScroll(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&, BYVAL SJmp&)
DECLARE SUB EZ_SetHScroll(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&, BYVAL SJmp&)
DECLARE SUB EZ_DefHColor(BYVAL N&, BYVAL H&, BYVAL R&, BYVAL G&, BYVAL B&)
DECLARE SUB EZ_DefColor(BYVAL N&, BYVAL R&, BYVAL G&, BYVAL B&)
DECLARE SUB EZ_Color (BYVAL FG&, BYVAL BG&)
DECLARE SUB EZ_Sleep(BYVAL S!)
DECLARE FUNCTION EZ_SendMessageR(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&) AS LONG
DECLARE SUB EZ_SendMessage(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&)
DECLARE FUNCTION EZ_GetTextLen (BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_AddItems(BYVAL FormName$, BYVAL IDNum&, BYVAL LText$)
DECLARE SUB EZ_SetImage(BYVAL FormName$, BYVAL ID&, BYVAL IName$)
DECLARE SUB EZ_SwapImage(BYVAL FormName$, BYVAL ID&, BYVAL IName$, BYVAL IName2$)
DECLARE SUB EZ_Clear(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_SelectItem(BYVAL FormName$, BYVAL ID&, BYVAL N&)
DECLARE SUB EZ_ShowC(BYVAL FormName$, BYVAL ID1&, OPTIONAL BYVAL ID2&)
DECLARE SUB EZ_HideC(BYVAL FormName$, BYVAL ID1&, OPTIONAL BYVAL ID2&)
DECLARE SUB EZ_DChar (BYVAL C$)
DECLARE FUNCTION EZ_Handle(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_AddList (BYVAL FormName$, BYVAL ID&, AList$(), BYVAL P1&, BYVAL P2&)
DECLARE FUNCTION EZ_GetItemText (BYVAL FormName$, BYVAL ID&, BYVAL N&) AS STRING
DECLARE SUB EZ_DeleteItem (BYVAL FormName$, BYVAL ID&, BYVAL N&)
DECLARE FUNCTION EZ_FindNext(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextLeft(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextLeftNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextAny(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextAnyNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindNextSel(BYVAL FormName$, BYVAL ID&, BYVAL SIndex&) AS LONG
DECLARE FUNCTION EZ_FindLast(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_SetSelect(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&)
DECLARE SUB EZ_ShowPage (BYVAL FormName$)
DECLARE SUB EZ_SetEditLen(BYVAL FormName$, BYVAL ID&, BYVAL L&)
DECLARE SUB EZ_SetFocus(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_SetNextTab(BYVAL FormName$)
DECLARE SUB EZ_SetPrevTab(BYVAL FormName$)
DECLARE FUNCTION EZ_DefMainMenu(BYVAL ID&, BYVAL MText$, BYVAL CProp$) AS LONG
DECLARE SUB EZ_AddMenuItem(BYVAL hMenu&, BYVAL ID&, BYVAL ID2&, BYVAL MText$, BYVAL CProp$)
DECLARE SUB EZ_UpdateMenu(BYVAL FormName$)
DECLARE FUNCTION EZ_DefSubMenu(BYVAL ID&, BYVAL MText$, BYVAL CProp$) AS LONG
DECLARE SUB EZ_SetSubMenu(BYVAL hMenu&, BYVAL ID&, BYVAL hSubMenu&)
DECLARE SUB EZ_SetMenuItem(BYVAL hMenu&, BYVAL ID&, BYVAL MText$, BYVAL CProp$)
DECLARE SUB EZ_DelMenuItem(BYVAL hMenu&, BYVAL ID&)
DECLARE SUB EZ_DelMenu (BYVAL hMenu&)
DECLARE FUNCTION EZ_MsgBox (BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL CProp$) AS LONG
DECLARE SUB EZ_SubClass (BYVAL V&)
DECLARE SUB EZ_ToolBar(BYVAL ID&, BYVAL BName$, BYVAL BInfo$, BYVAL CProp$)
DECLARE SUB EZ_UnloadControl (BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_SubClassMode(BYVAL N&)
DECLARE SUB EZ_SetGrid (BYVAL X&, BYVAL Y&)
DECLARE SUB EZ_SetClipboard(BYVAL D$)
DECLARE FUNCTION EZ_GetClipboard() AS STRING
DECLARE SUB EZ_DefFont (BYVAL N&, BYVAL TFace$, BYVAL APSize!, BYVAL FProp$)
DECLARE SUB EZ_SetFont (BYVAL FormName$, BYVAL ID&, BYVAL N&)
DECLARE SUB EZ_UseFont (BYVAL N&)
DECLARE SUB EZ_ResizeC(BYVAL FormName$, BYVAL ID&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!)
DECLARE SUB EZ_StartTimer (BYVAL FormName$, BYVAL ID&, BYVAL TM!)
DECLARE SUB EZ_StopTimer (BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_FreeColor (BYVAL N&)
DECLARE SUB EZ_FreeFont (BYVAL N&)
DECLARE FUNCTION EZ_OpenFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL Filter$, BYVAL DProp$) AS STRING
DECLARE FUNCTION EZ_SaveFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL SFile$, BYVAL Filter$, BYVAL DExt$, BYVAL DProp$) AS STRING
DECLARE FUNCTION EZ_ChooseColor(BYVAL FormName$, MyColor&, BYVAL CProp$) AS LONG
DECLARE SUB EZ_DefColorL(BYVAL N&, BYVAL C&)
DECLARE FUNCTION EZ_ChooseFont(BYVAL FormName$, MyColor&, BYVAL DProp$) AS LONG
DECLARE SUB EZ_DefSFont(BYVAL N&)
DECLARE SUB EZ_DefAccel(BYVAL FormName$, BYVAL myaccel$)
DECLARE SUB EZ_GetSizeC(BYVAL FormName$, BYVAL ID&, C!, R!, W!, H!)
DECLARE FUNCTION EZ_ControlEX(BYVAL FormName$, BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CName$, BYVAL Caption$, BYVAL CStyle&, BYVAL CEXStyle&) AS LONG
DECLARE SUB EZ_SetToolTip (BYVAL TT$)
DECLARE SUB EZ_SetZorder(BYVAL FormName$, BYVAL IDList$)
DECLARE SUB EZ_GetSFont(TFace$, PSize&, FProp$)
DECLARE SUB EZ_GetSize(BYVAL FormName$, W!, H!, BYVAL SMode&)
DECLARE SUB EZ_SetDepth(BYVAL FormName$, BYVAL ID&, BYVAL D$)

DECLARE SUB EZ_Enable(BYVAL FormName$)
DECLARE SUB EZ_Disable(BYVAL FormName$)
DECLARE SUB EZ_EnableC(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_DisableC(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_EnableTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&)
DECLARE SUB EZ_DisableTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&)
DECLARE SUB EZ_SetCheckTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&, BYVAL CV&)
DECLARE SUB EZ_ShowTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&)
DECLARE SUB EZ_HideTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&)
DECLARE SUB EZ_ShowPopups(BYVAL FormName$)
DECLARE SUB EZ_HidePopups(BYVAL FormName$)
DECLARE SUB EZ_ResizeForm (BYVAL FormName$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL MFlag&)
DECLARE SUB EZ_DragForm(BYVAL FormName$)
DECLARE SUB EZ_SetFormIcon(BYVAL FormName$, BYVAL IName$)
DECLARE SUB EZ_SetLayer(BYVAL Layer&)
DECLARE SUB EZ_DisplayLayer(BYVAL FormName$, BYVAL Layer&, BYVAL Mode&)
DECLARE FUNCTION EZ_CopyFile(BYVAL Source$, BYVAL Dest$) AS LONG
DECLARE FUNCTION EZ_GetAppPathName() AS STRING
DECLARE FUNCTION EZ_GetPathText(BYVAL P$) AS STRING
DECLARE FUNCTION EZ_GetFileText(BYVAL P$) AS STRING
DECLARE SUB EZ_SetTextMode(BYVAL Mode&)
DECLARE SUB EZ_MinimizeForm (BYVAL FormName$)
DECLARE SUB EZ_MaximizeForm (BYVAL FormName$)
DECLARE FUNCTION EZ_ImageHandle(BYVAL IName$) AS LONG
DECLARE FUNCTION EZ_IconHandle(BYVAL IName$) AS LONG
DECLARE FUNCTION EZ_BrushHandle(BYVAL N&) AS LONG
DECLARE FUNCTION EZ_FontHandle(BYVAL N&) AS LONG
DECLARE SUB EZ_RedrawForm(BYVAL FormName$)
DECLARE SUB EZ_DoEvents(BYVAL N&)
DECLARE SUB EZ_PopupMenu(BYVAL hMenu&, BYVAL FormName$, BYVAL X!, BYVAL Y!, BYVAL MProp$)
DECLARE FUNCTION EZ_CharX(BYVAL CV&, BYVAL OFlag&) AS SINGLE
DECLARE FUNCTION EZ_CharY(BYVAL CV&, BYVAL OFlag&) AS SINGLE
DECLARE SUB EZ_HookDialogProc(CP AS DWORD)
DECLARE SUB EZ_SetFGrid(BYVAL N&)

DECLARE SUB EZ_AddToolTip(BYVAL FormName$, BYVAL ID&)

DECLARE FUNCTION EZ_DProc()AS DWORD

DECLARE SUB EZ_HookMsgLoopProc(CP AS DWORD)

DECLARE SUB EZ_MoveControls(BYVAL FormName$, BYVAL IDList$, BYVAL X&, BYVAL Y&)

DECLARE FUNCTION EZ_GetDropList()AS STRING

DECLARE SUB EZ_SetDropFiles(BYVAL FormName$, BYVAL DFlag&)


DECLARE FUNCTION EZ_SaveRegString(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, BYVAL VText$) AS LONG
DECLARE FUNCTION EZ_SaveRegDWord(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, BYVAL VNum AS DWORD) AS LONG
DECLARE FUNCTION EZ_ReadReg(BYVAL MKey$, BYVAL SKey$, BYVAL VName$, VText$, VNum AS DWORD) AS LONG
DECLARE FUNCTION EZ_RegExist(BYVAL MKey$, BYVAL SKey$) AS LONG

DECLARE FUNCTION EZ_RegDelete(BYVAL MKey$, BYVAL SKey$) AS LONG

DECLARE SUB EZ_DPrint(BYVAL D$)
DECLARE SUB EZ_DebugForm(BYVAL FormName$)

DECLARE SUB EZ_Reg(BYVAL ID&, BYVAL RNum&)

DECLARE FUNCTION EZ_WinHelp(BYVAL FormName$, BYVAL HelpName$, BYVAL KeyName$, BYVAL HProp$) AS LONG

DECLARE FUNCTION EZ_AnsiToUnicode(BYVAL Text$, BYVAL NFlag&) AS STRING
DECLARE FUNCTION EZ_UnicodeToAnsi(BYVAL Text$, BYVAL NFlag&) AS STRING
DECLARE FUNCTION EZ_ScaleToCharSize(BYVAL SV!, BYVAL SMode$) AS SINGLE

DECLARE FUNCTION EZ_GetBestColorMatch(BYVAL C&, BYVAL N1&, BYVAL N2&) AS LONG

DECLARE SUB EZ_GetPos(BYVAL FormName$, C!, R!, BYVAL SMode&)


DECLARE SUB EZ_GetCharSize(BYVAL FontNum&, W&, H&, BYVAL Mode&)
DECLARE SUB EZ_GetTextSize(BYVAL FontNum&, BYVAL Text$, W!, H!, BYVAL Mode&)
DECLARE SUB EZ_SetCharSize(BYVAL FontNum&, BYVAL Mode&)

DECLARE SUB EZ_SetGridCharSize(BYVAL FontNum&, BYVAL Mode&)
DECLARE SUB EZ_SetGridPosByChar(BYVAL Mode&)


DECLARE SUB EZ_SetCursor(BYVAL Mode$, BYVAL CurNum&)

DECLARE FUNCTION EZ_SetCapture(BYVAL FormName$) AS LONG

DECLARE SUB EZ_SnapControl(BYVAL FormName$, BYVAL ID&)

DECLARE SUB EZ_AllowNotifyEvents(BYVAL NFlag&)
DECLARE SUB EZ_AllowCommandEvents(BYVAL NFlag&)


DECLARE SUB EZ_RichText1 (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_SetRichText(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL RTF_Flag&, BYVAL Sel_Flag&)
DECLARE FUNCTION EZ_GetRichText(BYVAL FormName$, BYVAL IDNum&, BYVAL RTF_Flag&, BYVAL Sel_Flag&) AS STRING
DECLARE FUNCTION EZ_GetRichTextLen(BYVAL FormName$, BYVAL IDNum&, BYVAL RTF_Flag&, BYVAL Sel_Flag&) AS LONG
DECLARE SUB EZ_SetRichTextLen(BYVAL FormName$, BYVAL ID&, BYVAL L&)

DECLARE SUB EZ_HandleCtrl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_SetHCtrlColor (BYVAL FormName$, BYVAL ID&, BYVAL ColorNum&)
DECLARE SUB EZ_SetHCtrlBuddy (BYVAL FormName$, BYVAL ID&, BYVAL IDBuddy&, BYVAL AFlag&)

DECLARE FUNCTION EZ_skHolderProc() AS DWORD

DECLARE FUNCTION EZ_X(BYVAL CX!) AS LONG
DECLARE FUNCTION EZ_Y(BYVAL CY!) AS LONG
DECLARE SUB EZ_SetFormHandle (BYVAL FormName$, BYVAL hWnd AS LONG)

DECLARE SUB EZ_SetDragRectAttributes(BYVAL PenWidth&, BYVAL PenColor&, BYVAL RectStyle&)

DECLARE SUB EZ_AddLVColumn(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&)
DECLARE SUB EZ_SetLVColumn(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&)
DECLARE SUB EZ_ListView (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_AddLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$)
DECLARE SUB EZ_SetLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$)


DECLARE SUB EZ_LoadCursor(BYVAL CName$, BYVAL CurNum&)
DECLARE SUB EZ_LoadImageLib(BYVAL StubFileName$)
DECLARE SUB EZ_AppendStyle(BYVAL WStyle&)
DECLARE SUB EZ_SetTBar(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&)

DECLARE SUB EZ_SetGridDisplay(BYVAL FormName$, BYVAL GridVal&)

DECLARE FUNCTION EZ_Row(BYVAL CVal&) AS LONG
DECLARE FUNCTION EZ_Col(BYVAL CVal&) AS LONG

DECLARE SUB EZ_SetAutoRedrawState(BYVAL ARState&)
DECLARE SUB EZ_SetReDrawState(BYVAL FormName$, BYVAL IDNum&, BYVAL FDState&)
DECLARE SUB EZ_RedrawControl(BYVAL FormName$, BYVAL IDNum&)

DECLARE SUB EZ_LoadPatternLib(BYVAL PFileName$, BYVAL IProp$)

DECLARE SUB EZ_SetColor (BYVAL FormName$, BYVAL IDNum&, BYVAL FG&, BYVAL BG&)

DECLARE SUB EZ_GetTurtleXY(BYVAL FormName$, BYVAL ID&, X&, Y&, BYVAL XView&, BYVAL YView&)

DECLARE SUB EZ_AllowKeyEvents(BYVAL KFlag&)

DECLARE FUNCTION EZ_GetKeyState(BYVAL VKey&, BYVAL Async&) AS LONG

DECLARE SUB EZ_SetHCtrlLastEvent(BYVAL FormName$, BYVAL ID&, BYVAL EZEvent&)

DECLARE SUB EZ_SetGridColor(BYVAL ColNum&, BYVAL ColMode&)

%EZ_PRINTALL        =    1
%EZ_PRINTPAGES      =    2
%EZ_PRINTSELECT     =    3
%EZ_RETURNDEFAULT   =    0

%EZ_PIXELS          =    0
%EZ_LOINCH          =    1
%EZ_HIINCH          =    2
%EZ_LOMM            =    3
%EZ_HIMM            =    4
%EZ_TWIPS           =    5

TYPE EZPRINTER
    hDC AS LONG
    FromPage AS INTEGER
    ToPage AS INTEGER
    MinPage AS INTEGER
    MaxPage AS INTEGER
    COPIES AS INTEGER
    PrintWhat AS LONG       ' 1=All, 2=Pages, 3=Selection , 0=Just Return Default Printer DC
    AllowPages AS LONG
    AllowSelection AS LONG
    CollateFlag AS LONG
    PUnits AS LONG          ' 0 = Pixels, 1 - .01 inch, 2 - .001 inch, 3 - .1 mm , 4 - .01 mm
    PWidth AS LONG
    PHeight AS LONG
    AWidth AS LONG
    AHeight AS LONG
    DPIx AS LONG
    DPIy AS LONG
    PrnName AS ASCIIZ*256
    PrnNameSetup AS LONG        ' 0 = Use Defaults, 1 = Display Setup Dlg, 2 =  Customize
    ' following members only good for PrnNameSetup = 2 and PrnName defined
    ' only items not zero get set
    PrnOrientation AS LONG      ' 1 = Portrait, 2 = LandScape
    PrnPaperSize AS LONG        ' 1 = Letter, 5 = Legal or any %DMPAPER_ API constants
    PrnPaperWidth AS LONG       ' custom size if not zero
    PrnPaperLength AS LONG      ' custom size if not zero
    PrnBin AS LONG              ' Bin ID - any %DMBIN_ API constants
    PrnQuality AS LONG          ' 1 = Draft, 2 = Low, 3 = Medium, 4 = High
    PrnColor AS LONG            ' 1 = Monochrome, 2 = Color
    PrnVerifyName AS LONG
    ' new members
    PrnDuplex AS LONG           ' duplex setting
END TYPE

'  duplex enable
'%DMDUP_SIMPLEX                               = 1
'%DMDUP_VERTICAL                              = 2
'%DMDUP_HORIZONTAL                            = 3


%EZ_CPError     =   -9999       ' EZ_ChoosePrinter Error code

DECLARE FUNCTION EZ_ChoosePrinter(BYVAL FormName$, EZP AS EZPRINTER) AS LONG
DECLARE SUB EZ_StartDoc(BYVAL  DocName$)
DECLARE SUB EZ_StartPage()
DECLARE SUB EZ_EndPage()
DECLARE SUB EZ_EndDoc()

DECLARE SUB EZ_LPrint (BYVAL X&, BYVAL Y&, BYVAL MyText$)

TYPE EZPAGE
    UseMetric AS LONG
    UseDefaultMargins AS LONG
    DisableMargins AS LONG
    LeftMargin AS SINGLE
    TopMargin AS SINGLE
    RightMargin AS SINGLE
    BottomMargin AS SINGLE
END TYPE


DECLARE FUNCTION EZ_PageSetup(BYVAL FormName$, EZP AS EZPAGE) AS LONG

%EZ_CUSTOBJ     = -9999

%EZ_NOPRINTOBJ  =   -3
%EZ_FLOODFILL   =   -3
%EZ_FLOODFILLB  =   -2
%EZ_XLINE       =   5   ' changed from 3.0 (was -1)

%EZ_LINE        =   0
%EZ_RECT        =   1
%EZ_RRECT       =   2
%EZ_ELLIPSE     =   3
%EZ_FILL        =   4

%EZ_EDGE_B      =   10
%EZ_EDGE_E      =   11
%EZ_EDGE_R      =   12
%EZ_EDGE_S      =   13

%EZ_BTNDEF      =   17
%EZ_BTNHOT      =   18
%EZ_BTNDIS      =   19
%EZ_BTNUP       =   20
%EZ_BTNDN       =   21
%EZ_CHECK_0     =   22
%EZ_CHECK_1     =   23
%EZ_RADIO_0     =   24
%EZ_RADIO_1     =   25
%EZ_BULLET      =   26
%EZ_MCHECK      =   27
%EZ_MARROW      =   28
%EZ_DROPDN      =   29
%EZ_DROPUP      =   30
%EZ_DROPLF      =   31
%EZ_DROPRT      =   32
' New in 5.0
%EZ_XBTNUP        =   33
%EZ_XBTNDN        =   34
%EZ_HBTNUP        =   35
%EZ_HBTNDN        =   36
%EZ_MXBTNUP       =   37
%EZ_MXBTNDN       =   38
%EZ_MNBTNUP       =   39
%EZ_MNBTNDN       =   40
%EZ_RBTNUP        =   41
%EZ_RBTNDN        =   42
%EZ_CAPA          =   43
%EZ_CAPI          =   44
%EZ_CAPAR         =   45
%EZ_CAPIR         =   46
%EZ_TABBG         =   47
%EZ_TABBGF        =   48
%EZ_REBARBG       =   49
%EZ_POLY        =   50
%EZ_POLYBEZ     =   51

%EZ_DOTS        =   256

DECLARE SUB EZ_LDraw (BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&)
DECLARE SUB EZ_AbortDoc()
DECLARE SUB EZ_HookComDialogProc(CP AS DWORD)

DECLARE FUNCTION EZ_ColorVal(BYVAL N&, BYVAL Mode&) AS LONG

DECLARE SUB EZ_ScrollTo(BYVAL FormName$, BYVAL IDNum&, BYVAL PosFlag&, BYVAL OffSet&)

DECLARE SUB EZ_skPutOnLayer(BYVAL FormName$, BYVAL IDNum&)
DECLARE SUB EZ_skAssignID (BYVAL hCtrl&, BYVAL NewIDNum&)
DECLARE SUB EZ_DefLayerGroup(BYVAL LayerMin&, BYVAL LayerMax&, BYVAL EFlag&)

DECLARE SUB EZ_UseDialogProc (CP AS DWORD)

DECLARE FUNCTION EZ_CurrentForm() AS STRING

DECLARE SUB EZ_SetOnLayer(BYVAL FormName$, BYVAL IDNum&, BYVAL L&)
DECLARE SUB EZ_InitWLFCallbacks(BYVAL CB1 AS DWORD, BYVAL CB2 AS DWORD, BYVAL CB3 AS DWORD)

DECLARE SUB EZ_StatusBar(BYVAL ID&, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_SetSBParts(BYVAL FormName$, BYVAL ID&, BYVAL Parts&, BYVAL PPerc$)
DECLARE SUB EZ_SetSBText(BYVAL FormName$, BYVAL ID&, BYVAL Part&, BYVAL CText$, BYVAL CProp$)

DECLARE SUB EZ_LDrawPicture (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$)

DECLARE SUB EZ_LoadMaskEditLib(BYVAL F$, BYVAL CName$)

' --------------------------------------------------------------

DECLARE SUB EZ_Button (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_CheckBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_Radio (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_VScroll (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_HScroll (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_ListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_ComboBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_Frame (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_Text (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_Label (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_Picture (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL BName$, BYVAL CProp$)
DECLARE SUB EZ_Icon (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL IName$, BYVAL CProp$)
DECLARE SUB EZ_PButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL BName$, BYVAL CProp$)
DECLARE SUB EZ_IButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL IName$, BYVAL CProp$)
DECLARE SUB EZ_TabControl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)

DECLARE SUB EZ_ProgressBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_SetPBar(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&)

DECLARE SUB EZ_UpDown (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_SetUpDown(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&)
DECLARE SUB EZ_TurtlePicture(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)

DECLARE SUB EZ_VTrackBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_HTrackBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)

'------------------------------------------------------------------------------

' New commands in EZGUI 3.0
DECLARE SUB EZ_MDIClient ()
DECLARE SUB EZ_ResizeMDI (BYVAL FormName$, BYVAL C!, BYVAL R!, BYVAL W!,  BYVAL H!, BYVAL Mode&)
DECLARE FUNCTION EZ_MDIClientHandle(BYVAL FormName$) AS LONG
DECLARE SUB EZ_ArrangeMDI(BYVAL FormName$, BYVAL Mode$)
DECLARE SUB EZ_AllowMouseMoveEvents (BYVAL KFlag&)
DECLARE SUB EZ_TreeView (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE FUNCTION EZ_ToolTipHandle(BYVAL FormName$, BYVAL IsTBarFlag&) AS LONG
DECLARE FUNCTION EZ_StatusBarHandle(BYVAL FormName$) AS LONG
DECLARE FUNCTION EZ_AccelHandle(BYVAL FormName$) AS LONG
DECLARE SUB EZ_Canvas(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)

%EZCV_GETLASTXPOS               =   %WM_USER+100
%EZCV_GETLASTYPOS               =   %WM_USER+101
%EZCV_GETMEMDC                  =   %WM_USER+102
%EZCV_SETVIEW                   =   %WM_USER+103
%EZCV_GETDIBPOINTER             =   %WM_USER+104
%EZCV_CLEAR                     =   %WM_USER+105
%EZCV_SELECTBUFFER              =   %WM_USER+106
%EZCV_COPYBUFFER                =   %WM_USER+107
%EZCV_DRAW                      =   %WM_USER+108
%EZCV_GETBITMAP                 =   %WM_USER+109

' do not go higher than %WM_USER + 399 so not to conflict with Canvas control

%EZCVS_DIBSECTION    =   8      ' style for DIB section
%EZCVS_DOUBLEBUFFER  =   16
%EZCVS_16BIT         =   2
%EZCVS_24BIT         =   4
%EZCVS_32BIT         =   6


DECLARE SUB EZ_GetCanvasXY(BYVAL FormName$, BYVAL ID&, X&, Y&, BYVAL XView&, BYVAL YView&)
DECLARE SUB EZ_StartDraw(BYVAL FormName$, BYVAL CanvasID&, BYVAL W&, BYVAL H&, BYVAL CProp$)
DECLARE SUB EZ_EndDraw()
DECLARE SUB EZ_CDraw (BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&)
DECLARE SUB EZ_CDrawPicture (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$)
DECLARE SUB EZ_CPrint (BYVAL X&, BYVAL Y&, BYVAL MyText$)

DECLARE SUB EZ_LDrawGradient (BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Mode&)
DECLARE SUB EZ_CDrawGradient (BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Mode&)

DECLARE SUB EZ_StartCList(BYVAL FormName$, BYVAL ClassName$)
DECLARE SUB EZ_EndCList()
DECLARE FUNCTION EZ_GetCListCount() AS LONG
DECLARE FUNCTION EZ_GetCListID(BYVAL N&) AS LONG
DECLARE FUNCTION EZ_GetCListHandle(BYVAL N&) AS LONG
DECLARE FUNCTION EZ_GetCListClass(BYVAL N&, BYVAL Mode&) AS STRING
DECLARE SUB EZ_GetCanvasSize(BYVAL FormName$, BYVAL CanvasID&, W&, H&)

DECLARE FUNCTION EZ_ActiveCanvasDC() AS LONG
DECLARE SUB EZ_DCPrint(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL MyText$)
DECLARE SUB EZ_DCDrawPicture(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&)
DECLARE SUB EZ_DCDraw (BYVAL CurrentDC&, BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&)
DECLARE SUB EZ_DCDrawGradient(BYVAL hDC AS LONG, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL N1&)
DECLARE SUB EZ_AllowCursorEvents(BYVAL CFlag&)
DECLARE SUB EZ_DefMDIDefaultID (BYVAL ID&)
DECLARE SUB EZ_CScroll(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL HScrollU&, BYVAL VScrollU&)
DECLARE SUB EZ_DCScroll(BYVAL CurrentDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL HScrollU&, BYVAL VScrollU&)
DECLARE SUB EZ_CalcPoint (BYVAL AX&,BYVAL AY&,BYVAL AL&,BYVAL ADG&,RX&,RY&)
DECLARE FUNCTION EZ_AddTVItem (BYVAL FormName$, BYVAL IDNum&, BYVAL hParent&, BYVAL hAfter&, BYVAL IText$, BYVAL NSImage1&, BYVAL SImage&, BYVAL TVProp$) AS LONG
DECLARE SUB EZ_SetTVItem (BYVAL FormName$, BYVAL IDNum&, BYVAL hItem&, BYVAL IText$, BYVAL NSImage1&, BYVAL SImage&, BYVAL TVProp$)
%EZTV_LAST               =  0
%EZTV_FIRST              = &HFFFF0001&
%EZTV_SORT               = &HFFFF0003&

DECLARE FUNCTION EZ_StartDrawByPtr(BYVAL FormName$, BYVAL CanvasID&, BYVAL Buffer2Flag&) AS LONG
DECLARE SUB EZ_GetBitmapSize(BYVAL hBmp&, W&, H&)
DECLARE SUB EZ_GetPictureSize(BYVAL PName$, W&, H&)

DECLARE SUB EZ_EndDrawByPtr()
DECLARE SUB EZ_DIBPut16(BYVAL X&, BYVAL Y&, BYVAL ColorV%)
DECLARE FUNCTION EZ_DIBGet16(BYVAL X&, BYVAL Y&) AS INTEGER
DECLARE SUB EZ_DIBPut24(BYVAL X&, BYVAL Y&, BYVAL ColorV&)
DECLARE FUNCTION EZ_DIBGet24(BYVAL X&, BYVAL Y&) AS LONG
DECLARE SUB EZ_DIBPut32(BYVAL X&, BYVAL Y&, BYVAL ColorV&)
DECLARE FUNCTION EZ_DIBGet32(BYVAL X&, BYVAL Y&) AS LONG
DECLARE FUNCTION EZ_DIBOffsetY(BYVAL Y&) AS LONG
DECLARE FUNCTION EZ_DIBPtrY(BYVAL Y&) AS LONG
DECLARE SUB EZ_SetTrayIcon (BYVAL FormName$, BYVAL IName$, BYVAL TText$)
DECLARE SUB EZ_CSelectBuffer(BYVAL BufferN&)
DECLARE SUB EZ_CCopyBuffer(BYVAL SrcBuf&, BYVAL DestBuf&, BYVAL RasterMode&)
DECLARE SUB EZ_ShapeFormToPicture(BYVAL FPicture$, BYVAL TColor&)
DECLARE SUB EZ_SetWDragMode(BYVAL Mode&)
DECLARE FUNCTION EZ_IsForm(BYVAL FormName$, BYVAL FState$) AS LONG
DECLARE SUB EZ_PlayBeep(BYVAL Mode$)
DECLARE SUB EZ_SetPrintFormat(BYVAL Mode&, BYVAL Par1&, BYVAL Par2&, BYVAL Par3&, BYVAL Par4&)
DECLARE SUB EZ_SetWFontSmoothMode(BYVAL Mode&)
DECLARE SUB EZ_ODButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE FUNCTION EZ_StartOwnerDraw(BYVAL CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) AS LONG
DECLARE SUB EZ_EndOwnerDraw()
DECLARE FUNCTION EZ_AppPath() AS STRING
DECLARE FUNCTION EZ_GetMenuItem (BYVAL hMenu&, ID&, MText$, CProp$, hSubMenu&, BYVAL PosFlag&) AS LONG
DECLARE FUNCTION EZ_GetMenuCount(BYVAL hMenu&) AS LONG
DECLARE FUNCTION EZ_StartOwnerSize(BYVAL CVal&, W&, H&, Item1&, Item2&) AS LONG
DECLARE SUB EZ_EndOwnerSize(BYVAL CVal&, BYVAL W&, BYVAL H&)
DECLARE FUNCTION EZ_SendThreadEvent(BYVAL hDlg&, BYVAL IDNum&, BYVAL CVal&) AS LONG
DECLARE SUB EZ_MCIControl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_CDrawIcon (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL IName$, BYVAL DProp$)
DECLARE SUB EZ_DCDrawIcon(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hIcon&, BYVAL DProp$)
DECLARE SUB EZ_DBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)

DECLARE FUNCTION EZ_NamePicture(BYVAL hBmp&) AS STRING
DECLARE FUNCTION EZ_CreatePicture(BYVAL W&, BYVAL H&) AS STRING
DECLARE FUNCTION EZ_CreateDIBPicture(BYVAL BPP&, BYVAL W&, BYVAL H&, BYVAL DProp$, PA&) AS STRING
DECLARE FUNCTION EZ_StartPictureDraw(BYVAL PName$) AS LONG
DECLARE SUB EZ_EndPictureDraw()
DECLARE SUB EZ_ODListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB EZ_GetODItem(BYVAL CVal&, X1&, Y1&, Item1&, IsEdit&)
DECLARE FUNCTION EZ_StartEraseBG(BYVAL CVal&, MyhDC&, X2&, Y2&) AS LONG
DECLARE SUB EZ_EndEraseBG(Cancel&)

DECLARE SUB EZ_DCDrawTurtle(BYVAL hDC&, BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&)
DECLARE SUB EZ_LDrawTurtle(BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&)
DECLARE SUB EZ_CDrawTurtle(BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&)
DECLARE FUNCTION EZ_GetClass(BYVAL Form$, BYVAL IDNum&, BYVAL Mode&) AS STRING
DECLARE SUB EZ_Animate (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL AFile$, BYVAL CProp$)
DECLARE SUB EZ_SetAnimate(BYVAL Form$, BYVAL IDNum&, BYVAL Action$)
DECLARE SUB EZ_FillWithSystemColors(BYVAL N&)

DECLARE FUNCTION EZ_GetPostThreadStr(BYVAL CVal&) AS STRING
DECLARE FUNCTION EZ_GetPostThreadCount() AS LONG
DECLARE FUNCTION EZ_PostThreadEvent(BYVAL hDlg&, BYVAL IDNum&, BYVAL D$) AS LONG
DECLARE FUNCTION EZ_ConvertMousePos(BYVAL hWnd1&, BYVAL hWnd2&, BYVAL CVal&) AS LONG
DECLARE SUB EZ_PostMessage(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&)
DECLARE SUB EZ_PostEvent(BYVAL FormName$, BYVAL ID&, BYVAL CVal&)

DECLARE FUNCTION EZ_FG() AS LONG
DECLARE FUNCTION EZ_BG() AS LONG
DECLARE SUB EZ_SaveColors(BYVAL N1&, BYVAL N2&)
DECLARE SUB EZ_RestoreColors()

DECLARE FUNCTION EZ_GetFormName(BYVAL hWnd&) AS STRING
DECLARE FUNCTION EZ_GetFormParent(BYVAL FormName$) AS STRING
DECLARE FUNCTION EZ_GetParentForm(BYVAL hCtrl&) AS STRING
DECLARE FUNCTION EZ_ActiveMDIChild() AS STRING

DECLARE FUNCTION EZ_GetTVRoot(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE FUNCTION EZ_GetTVNext(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVChild(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVParent(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVPrevious(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVFirstV(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE FUNCTION EZ_GetTVNextV(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVPreviousV(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE FUNCTION EZ_GetTVSel(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_StartTVEdit(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE SUB EZ_EndTVEdit(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_TVExpand(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE SUB EZ_TVCollapse(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE SUB EZ_TVClearChildren(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE FUNCTION EZ_GetTVCount(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE FUNCTION EZ_GetTVCountV(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_TVSelect(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE SUB EZ_TVPosTop(BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE SUB EZ_TVSortChildren((BYVAL FormName$, BYVAL ID&, BYVAL hTV&)
DECLARE FUNCTION EZ_GetTVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL hTVItem&, TXT$, Pict1&, Pict2&, Prop$) AS LONG

DECLARE SUB EZ_DefImageList(BYVAL N&, BYVAL XY&, BYVAL MaxI&)
DECLARE SUB EZ_FreeImageList(BYVAL N&)
DECLARE FUNCTION EZ_AddImage(BYVAL N&, BYVAL Pict$, BYVAL TColor&) AS LONG
DECLARE SUB EZ_TVUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&)
DECLARE SUB EZ_LVUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&)
DECLARE FUNCTION EZ_GetLVItem(BYVAL FormName$, BYVAL IDNum&, IText$, IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, LVProp$) AS LONG


DECLARE SUB EZ_SearchLVCol(BYVAL ColN&)
DECLARE SUB EZ_DelLVColumn(BYVAL FormName$, BYVAL ID&, BYVAL CIndex&)
%EZ_LVBitCol            =   65536&
DECLARE SUB EZ_StartLVEdit(BYVAL FormName$, BYVAL ID&, BYVAL ITEM&)
DECLARE SUB EZ_EndLVEdit(BYVAL FormName$, BYVAL ID&)

DECLARE FUNCTION EZ_GetLVSelCount(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE FUNCTION EZ_GetLVTopV(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_SetLVMaxCount(BYVAL FormName$, BYVAL ID&, BYVAL MaxItems&)
DECLARE SUB EZ_SortLV(BYVAL FormName$, BYVAL ID&, BYVAL DFlag&)

DECLARE SUB EZ_TABSetImage(BYVAL FormName$, BYVAL ID&, BYVAL TIndex&, BYVAL ImgIndex&)
DECLARE SUB EZ_TABUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&)
DECLARE FUNCTION EZ_ImgListHandle(BYVAL N&) AS LONG

DECLARE SUB EZ_SelTab(BYVAL FormName$, BYVAL ID&, BYVAL TIndex&)
DECLARE FUNCTION EZ_GetTabSel(BYVAL FormName$, BYVAL ID&)  AS LONG
DECLARE FUNCTION EZ_GetTabRows(BYVAL FormName$, BYVAL ID&) AS LONG
DECLARE SUB EZ_DCTilePicture(BYVAL CurrentDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL hBmp&)
DECLARE SUB EZ_CTilePicture(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Pict$)
DECLARE SUB EZ_RichText2 (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_RestoreForm (BYVAL FormName$)
DECLARE SUB EZ_DateTime (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$)
DECLARE SUB EZ_SetDateTime (BYVAL FormName$, BYVAL ID&, BYVAL MN%, BYVAL DY%, BYVAL YR%, BYVAL HR%, BYVAL Mnt%, BYVAL Sec%)
DECLARE SUB EZ_GetDateTime (BYVAL FormName$, BYVAL ID&, MN%, DY%, YR%, HR%, Mnt%, Sec%, WDay%, MSec%)
DECLARE SUB EZ_SetDateTimeMinMax (BYVAL FormName$, BYVAL ID&, BYVAL MN1%, BYVAL DY1%, BYVAL YR1%, BYVAL HR1%, BYVAL Mnt1%, BYVAL Sec1%,_
                                                              BYVAL MN2%, BYVAL DY2%, BYVAL YR2%, BYVAL HR2%, BYVAL Mnt2%, BYVAL Sec2%)
DECLARE SUB EZ_SetLVTransparentBG(BYVAL FormName$, BYVAL ID&)
DECLARE SUB EZ_DCDrawImage(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL ImgListNum&, BYVAL ImgIndex&, BYVAL Mode&)
DECLARE SUB EZ_CDrawImage(BYVAL X&, BYVAL Y&, BYVAL ImgListNum&, BYVAL ImgIndex&, BYVAL Mode&)
DECLARE SUB EZ_DefCharSizeA (BYVAL W&, BYVAL H&)
DECLARE SUB EZ_GetTBPos(BYVAL FormName$, BYVAL IDNum&, BYVAL ButtonID&, BYVAL DForm$, X1!, Y1!, X2!, Y2!)
DECLARE SUB EZ_SetFormSysMenu(BYVAL FormName$, BYVAL MItem$, BYVAL EFlag&)
DECLARE FUNCTION EZ_LoadLibrary(BYVAL DLLName$) AS LONG
DECLARE SUB EZ_LVEnsureVisible(BYVAL FormName$, BYVAL ID&, BYVAL ITEM&)
DECLARE SUB EZ_SetHCtrlSize (BYVAL FormName$, BYVAL ID&, BYVAL HSize&, BYVAL PFlag&)
DECLARE SUB EZ_LDrawCanvas (BYVAL FormName$, BYVAL CanvasID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&)
DECLARE SUB EZ_Shape (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL DotText$, BYVAL CProp$)
DECLARE SUB EZ_ChangeParent(BYVAL FormName$, BYVAL IDNum&, BYVAL NewParentName$)
DECLARE SUB EZ_SetRichFont(BYVAL FormName$, BYVAL IDNum&, BYVAL TFace$, BYVAL APSize!, BYVAL FProp$, BYVAL FColor&, BYVAL FMask$, BYVAL Mode&)
DECLARE SUB EZ_GetRichFont(BYVAL FormName$, BYVAL IDNum&, TFace$, APSize!, FProp$, FColor&, BYVAL Mode&)
DECLARE FUNCTION EZ_LPrintRichText(BYVAL FormName$, BYVAL RichID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CharStart&, BYVAL CharEnd&, BYVAL LFlag&) AS LONG
DECLARE SUB EZ_GetRichSel(BYVAL FormName$, BYVAL RichID&, P1&, P2&)
DECLARE SUB EZ_SetRichSel(BYVAL FormName$, BYVAL RichID&, BYVAL P1&, BYVAL P2&)
DECLARE SUB EZ_SetFormMinMax(BYVAL FormName$,BYVAL MinW!, BYVAL MinH!, BYVAL MaxW!, BYVAL MaxH!)
DECLARE SUB EZ_DelayDrawClient(BYVAL FormName$, BYVAL IDNum&)
DECLARE SUB EZ_GetMinMax(BYVAL CVal&, MinW!, MinH!, MaxW!, MaxH!)
DECLARE SUB EZ_SetMinMax(BYVAL CVal&, BYVAL MinW!, BYVAL MinH!, BYVAL MaxW!, BYVAL MaxH!)
DECLARE SUB EZ_DefAutoStartDoc(BYVAL D$)
DECLARE SUB EZ_SetSelVal(BYVAL CVal&, BYVAL SMin&, BYVAL SMax&)
DECLARE SUB EZ_GetSelVal(BYVAL CVal&, SMin&, SMax&)
DECLARE FUNCTION EZ_MsgBoxEx(BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL B1$, BYVAL B2$, BYVAL B3$, BYVAL Pict$, BYVAL Prop$, BYVAL Font1&, BYVAL Font2&) AS LONG
DECLARE FUNCTION EZ_Font() AS LONG
DECLARE SUB EZ_Draw3DButton(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL DKColor&, BYVAL TXColor&, BYVAL FontN&)
DECLARE SUB EZ_DrawColorButton(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL BColor&, BYVAL TXColor&, BYVAL FontN&)
DECLARE SUB EZ_CShowRect(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&)
DECLARE FUNCTION EZ_GetPrinter(BYVAL I&) AS STRING
DECLARE FUNCTION EZ_GetFont(BYVAL I&, BYVAL FaceName$, BYVAL Prop$) AS STRING
DECLARE SUB EZ_SaveState()
DECLARE SUB EZ_RestoreState()
DECLARE FUNCTION EZ_GetLVColWidth(BYVAL FormName$, BYVAL ID&, BYVAL ColIndex&) AS LONG
DECLARE SUB EZ_GetLVClickInfo(BYVAL CVal&, AxPos&, AyPos&, SubXPos&, SubYPos&, ACol&, I&)
DECLARE SUB EZ_DCPrintVText(BYVAL hMyDC&, BYVAL T$, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL RFlag&)
DECLARE FUNCTION EZ_GetResourceNames(BYVAL Src&, BYVAL RType&, BYVAL hMod&) AS STRING
DECLARE SUB EZ_SetTVLong(BYVAL FormName$, BYVAL ID&, BYVAL hTV&, BYVAL N&)
DECLARE FUNCTION EZ_GetTVLong(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) AS LONG
DECLARE SUB EZ_SetRegion(BYVAL FormName$, BYVAL ID&, BYVAL RType&, BYVAL MyRgn&)
DECLARE SUB EZ_AssignID (BYVAL hCtrl&, BYVAL NewIDNum&)
DECLARE SUB EZ_PutOnLayer(BYVAL FormName$, BYVAL IDNum&)
DECLARE SUB EZ_DefMaxLayer(BYVAL MaxL&)
DECLARE FUNCTION EZ_GetLVColOrder(BYVAL FormName$, BYVAL IDNum&, BYVAL Columns&) AS STRING
DECLARE SUB EZ_SetClipboardFormat(BYVAL Mode&)
DECLARE SUB EZ_SetIconCursor(BYVAL FormName$, BYVAL ID&, BYVAL CursorNum&)
DECLARE FUNCTION EZ_GetOS(BYVAL Mode&) AS LONG
DECLARE SUB EZ_StartCSect(BYVAL N&)
DECLARE SUB EZ_EndCSect(BYVAL N&)
DECLARE SUB EZ_AppendTBPict(BYVAL PName$)
DECLARE FUNCTION EZ_AddPictToImgList(BYVAL N&, BYVAL Pict$, BYVAL TColor&) AS LONG
DECLARE FUNCTION EZ_GetCDrawItem(BYVAL CVal&, SubItem&) AS LONG
DECLARE SUB EZ_SetCDrawItem(BYVAL CVal&, BYVAL FontN&, BYVAL FGC&, BYVAL BGC&)

' -----------------------------------------------------------------------------
' New commands in EZGUI 3.5
DECLARE FUNCTION EZ_StartWindowDraw(BYVAL Form$, BYVAL ID&, BYVAL DProp$) AS LONG
DECLARE SUB EZ_EndWindowDraw()
DECLARE SUB EZ_DCCopyBlock(BYVAL hDC& ,BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hDCDest&, BYVAL DX&, BYVAL DY&)
DECLARE SUB ZSubClassChildren(BYVAL hWnd&)
DECLARE SUB ZMakeSCAtom()
DECLARE SUB ZDelSCAtom()
DECLARE SUB EZ_SetDrawMode(BYVAL ITEM&, BYVAL Mode&)

'------------------------------------------------------------------------------
' New Internal commands in EZGUI 3.0
DECLARE SUB ZTerminateAllThreads()
DECLARE SUB ZInitThreadTrack()
DECLARE SUB ZEraseThreadTrack()
DECLARE SUB PBVMdiSetMenu(BYVAL hDlg&, BYVAL Mode&)
DECLARE SUB PBVSuperClass()
DECLARE FUNCTION PBVFindTParent(BYVAL hWnd AS LONG) AS LONG
DECLARE FUNCTION ZHitTest2(BYVAL hCtrl&, BYVAL lParam&) AS LONG
DECLARE SUB ZSetPagerColor(BYVAL hCtrl&, BYVAL BG&)

DECLARE FUNCTION ezResizeForm(BYVAL N&, BYVAL hDlg&) AS LONG

$MDIClientClassName =   "EZGUI_MDICLIENT"

' *************************************************************************************
'                                PBVDef.INC code block
' *************************************************************************************
DECLARE FUNCTION ProcessStartup() AS LONG
DECLARE FUNCTION ProcessWinClose(BYVAL FormName$, BYVAL hWnd AS LONG) AS LONG
DECLARE FUNCTION ProcessWinInitialize(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL RFlag&) AS LONG
DECLARE FUNCTION ProcessWinCommands(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL NCode&, BYVAL CtrlNum&, BYVAL hCtrl AS LONG) AS LONG
DECLARE FUNCTION ProcessWinScrollChange(BYVAL FormName$,BYVAL  hWnd AS LONG, BYVAL CtrlNum&, BYVAL hScroll AS LONG, BYVAL AP&) AS LONG
' DECLARE FUNCTION ProcessWinColors(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL CtrlNum&, BYVAL hCtrl AS LONG, FGC&, BGC&, BRH&, WLFlag&) AS LONG
DECLARE FUNCTION ProcessWinColors(BYVAL hWnd AS LONG, BYVAL CtrlNum&, BYVAL hCtrl AS LONG, FGC&, BGC&, BRH&, WLFlag&) AS LONG
DECLARE FUNCTION ProcessDMessage(BYVAL hWnd AS LONG, BYVAL V&, BYVAL XY&) AS LONG
DECLARE FUNCTION ProcessEZCommands(BYVAL hWnd AS LONG, BYVAL CMsg&, BYVAL hCtrl AS LONG, BYVAL CVal&) AS LONG

' -------------------------------------------------------------------------------------
'                        Internal PBV functions
DECLARE FUNCTION ZFindReplace(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
DECLARE FUNCTION ZGetClassHandle(BYVAL FormName$, BYVAL IDNum&, BYVAL CName$) AS LONG
DECLARE FUNCTION ZClassName(BYVAL FormName$) AS STRING
DECLARE FUNCTION ZGetClass(BYVAL hWnd AS LONG) AS STRING
DECLARE FUNCTION ZFormNum(FormName$) AS LONG
DECLARE FUNCTION ZFormNumH(BYVAL hWnd AS LONG) AS LONG
DECLARE FUNCTION ZFormNameH(BYVAL hWnd AS LONG) AS STRING
DECLARE FUNCTION ZScrollProc(BYVAL hWnd AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
DECLARE FUNCTION ZColorProc(BYVAL hWnd AS LONG, BYVAL hDC AS LONG, BYVAL hCtrl AS LONG, DLGFlag&) AS LONG
DECLARE FUNCTION ZFormAnyLeft() AS LONG
DECLARE SUB ZFormClearHandle(BYVAL hDlg AS LONG)
DECLARE SUB ZQBColors(BYVAL FG&, BYVAL BG&)
DECLARE FUNCTION ZNewForm(FormName$) AS LONG
DECLARE FUNCTION ZParseMask (BYVAL D$) AS STRING
DECLARE FUNCTION ZName(BYVAL D$) AS STRING
DECLARE FUNCTION ZNameF(D$) AS STRING
DECLARE SUB ZInitFonts(BYVAL Mode&)
DECLARE SUB ZDelFont(BYVAL N&)
DECLARE SUB ZTimer(BYVAL hWnd AS LONG, BYVAL wParam AS LONG)
DECLARE SUB ZSizeWindow(BYVAL hWnd AS LONG, BYVAL lParam AS LONG, BYVAL wParam AS LONG, MovedFlag&)
DECLARE FUNCTION ZNotify(BYVAL hWnd AS LONG, BYVAL lParam AS LONG, MyRV&) AS LONG
DECLARE SUB ZSetCurrent(BYVAL hWnd AS LONG)
DECLARE FUNCTION ZParseIProp(D$) AS STRING
DECLARE SUB ZSetSelectLV(BYVAL hCtrl&, BYVAL I&, BYVAL SFlag&, BYVAL Mode&)
DECLARE SUB ZProcessMsg(Msg AS tagMsg)
DECLARE SUB ZDropFiles(BYVAL hWnd AS LONG, BYVAL hDF AS LONG)

DECLARE FUNCTION ZRForm()AS LONG

DECLARE SUB ZSetInitCharSize()
DECLARE SUB ZCalcControlDrag(BYVAL hDlg AS LONG, BYVAL lParam AS LONG)

DECLARE FUNCTION ZLOWRD(BYVAL L AS LONG) AS LONG
DECLARE FUNCTION ZHIWRD(BYVAL L AS LONG) AS LONG
DECLARE FUNCTION ZEraseBG(BYVAL hWnd AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG, BYVAL Mode&) AS LONG
DECLARE FUNCTION ZDragList(BYVAL hWnd&, BYVAL wParam AS LONG,BYVAL lParam AS LONG) AS LONG
DECLARE FUNCTION ZGetListText(BYVAL hCtrl AS LONG, BYVAL I&, BYVAL Info&) AS STRING
DECLARE FUNCTION ZGetDlgItem(BYVAL hWnd AS LONG, BYVAL ID&) AS LONG
DECLARE SUB ZModalLoop(BYVAL SFlag&)

DECLARE SUB ZSetRichTextColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
DECLARE SUB ZSetListViewColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
DECLARE SUB ZSetTreeViewColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
DECLARE SUB ZSetProgressColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
DECLARE SUB ZCleanUPPrint(BYVAL Mode&)
DECLARE FUNCTION ZGetChildFocus(BYVAL hDlg AS LONG) AS LONG
DECLARE FUNCTION ZFGColorNum(BYVAL FG&) AS LONG
DECLARE FUNCTION ZSetSystemColors(BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG

DECLARE SUB ZRedrawForm(BYVAL hWnd AS LONG)
DECLARE SUB ZSetSBEqualParts(BYVAL hWnd AS LONG, BYVAL hCtrl AS LONG, BYVAL N&, Perc&())
DECLARE FUNCTION ZGetCListClass(BYVAL hCtrl&, BYVAL Mode&) AS STRING

' -------------------------------------------------------------------------------------
'                            PBV Functions
' some of these functions may have not used BYVAL on purpose to speed them up
DECLARE FUNCTION PBVGetCheck(FormName$, ID&) AS LONG
DECLARE FUNCTION PBVGetText(FormName$, ID&, Info&) AS STRING
DECLARE FUNCTION PBVBrush(N&) AS LONG
DECLARE FUNCTION PBVGetClass(FormName$, ID&) AS STRING
DECLARE FUNCTION PBVFormHandle(FormName$) AS LONG
DECLARE FUNCTION PBVActiveImage(FormName$, ID&, IName$) AS LONG
DECLARE SUB PBVGetSetDateTime(BYVAL FormName$, BYVAL ID&, ST AS SYSTEMTIME, BYVAL Mode&)

' -------------------------------------------------------------------------------------
DECLARE FUNCTION QBColor(N&) AS LONG
DECLARE FUNCTION PBVFindItem (BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SP&, BYVAL MFlag&) AS LONG
DECLARE FUNCTION PBVSendMessageR(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&, BYVAL CType$) AS LONG
DECLARE FUNCTION PBVMenu(BYVAL hMenu&, BYVAL ID&, BYVAL EID&, BYVAL MText$, BYVAL hSubMenu&, BYVAL MAction&, BYVAL CProp$) AS LONG
DECLARE SUB PBVDoMenu(BYVAL hMenu&, BYVAL ID&, BYVAL EID&, BYVAL MText$, BYVAL hSubMenu&, BYVAL MAction&, BYVAL CProp$)
DECLARE SUB PBVShowC(BYVAL FormName$, BYVAL ID1&, BYVAL ID2&, BYVAL SFlag&)
DECLARE SUB PBVCleanUp()
DECLARE FUNCTION PBVFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL SFile$, BYVAL Filter$, BYVAL DExt$, BYVAL DProp$, BYVAL FMode&) AS STRING
DECLARE SUB PBVTrackMenu(BYVAL hMenu&, BYVAL hMenuP&, BYVAL hWnd&, BYVAL MFlag&)
DECLARE SUB PBVDelFormMenus (BYVAL hWnd AS LONG)
DECLARE FUNCTION App_EZ_PixelSY(BYVAL Mode&)AS LONG
DECLARE SUB PBVSetOrder(BYVAL FormName$, BYVAL IDList$, BYVAL Mode&, BYVAL X&, BYVAL Y&)
DECLARE SUB PBVRegistry(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, VText$, VNum AS DWORD, BYVAL Mode&, RV&)

DECLARE SUB PBV_AddLVColumnX(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&, BYVAL AFlag&)
DECLARE SUB PBV_AddLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$, BYVAL AFlag&)
DECLARE SUB PBV_SetLVStyle(BYVAL FormName$, BYVAL IDNum&, BYVAL LVStyle$)
DECLARE FUNCTION PBVGetLVText(BYVAL hCtrl&, BYVAL LVIndex&) AS STRING

' -------------------------------------------------------------------------------------
'                            PBV Subroutines
DECLARE SUB PBVDefDialogT (BYVAL FormName$, BYVAL Parent$, BYVAL Caption$, BYVAL X!, BYVAL Y!, BYVAL W!, BYVAL H!, BYVAL WTP$, BYVAL MD&, BYVAL CMPFlag&)
DECLARE SUB PBVControlEX (BYVAL FormName$, BYVAL IDNum&, BYVAL CName$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CText$, BYVAL CStyle&, BYVAL CEXStyle&, BYVAL SCFlag&, BYVAL EMask$, hCtrl AS LONG)
' DECLARE SUB PBVControl (BYVAL FormName$, BYVAL IDNum&, BYVAL CName$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CText$, BYVAL CProp$, BYVAL WStyle$)
DECLARE SUB PBVControl (BYVAL IDNum&, BYVAL CName&, BYVAL C!, BYVAL R!, BYVAL CW!, BYVAL CH!, BYVAL CText$, BYVAL CProp$)
DECLARE SUB PBVLoad (FormName$)
DECLARE SUB PBVShow (FormName$, BYVAL CS&)
DECLARE SUB PBVUnload (BYVAL FormName$)
DECLARE SUB PBVHide (BYVAL FormName$)

DECLARE SUB PBVSetCheck(BYVAL FormName$, BYVAL ID&, BYVAL V&)
DECLARE SUB PBVSetText(BYVAL FormName$, BYVAL ID&, BYVAL Text$)

DECLARE SUB PBVPosWindow(BYVAL FormName$, BYVAL PMode&, BYVAL DMode&, BYVAL SMFlag&)
DECLARE SUB PBVDefImage(RName$, BYVAL FName$, BYVAL IType&, BYVAL ISource&, BYVAL IProp$, BYVAL ResID&, BYVAL DIBFlag&, BYVAL ReqW&, BYVAL ReqH&)
DECLARE SUB PBVFreeImage(BYVAL IName$)

DECLARE SUB PBVSetScroll(BYVAL FormName$, BYVAL ID&, BYVAL ST$, BYVAL SMin&, BYVAL SMax&, BYVAL SPage&, BYVAL SPos&)

DECLARE SUB PBVDefBrush(BYVAL N&, BYVAL C&)
DECLARE SUB PBVDefHBrush(BYVAL N&,BYVAL H&,BYVAL C&)
DECLARE SUB PBVFreeBrushes(BYVAL N1&,BYVAL N2&)

DECLARE FUNCTION PBVMsgBox (BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL MType&) AS LONG
DECLARE SUB PBVSetState(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL EV&, BYVAL Mode&)

DECLARE SUB PBV_RgbToHsv(BYVAL C&, H!, S!, V!)

DECLARE SUB PBVGetRect(X1&, Y1&, X2&, Y2&)
DECLARE SUB PBVDrawDragRect(BYVAL hWnd AS LONG, BYVAL Mode&)

DECLARE FUNCTION PBV_ScreenToClient(BYVAL hWnd AS LONG, BYVAL lParam AS LONG) AS LONG
DECLARE FUNCTION PBV_ControlToParentClient(BYVAL hWnd AS LONG, BYVAL hCtrl AS LONG, BYVAL lParam AS LONG) AS LONG
DECLARE SUB PBVRegDialog (BYVAL CName$)
DECLARE SUB PBVNewDialog (BYVAL hParent&, BYVAL AFNum&)
DECLARE SUB SetMyWindowLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
DECLARE FUNCTION GetMyWindowLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG

DECLARE FUNCTION PBVEnumChildWindows(BYVAL hWndParent AS LONG, BYVAL mode&) AS LONG
DECLARE SUB PBVSetDefButton(BYVAL hWnd AS LONG, BYVAL DVal&, BYVAL NewhWnd AS LONG)
DECLARE FUNCTION ZGetParentForm(BYVAL hWnd AS LONG) AS LONG

DECLARE SUB MakeRgnBitmap(BYVAL hWnd&, BYVAL W&, BYVAL H&, BYVAL hBmpImage&, BYVAL TColor&, hRgn&, hBmp&, BYVAL Mode&)
DECLARE FUNCTION CreateNewDib(BYVAL hDC AS LONG, BYVAL BPP&, BYVAL W&, BYVAL H&, PA&) AS LONG

DECLARE FUNCTION ZGetPrnDC() AS LONG
DECLARE SUB EZ_GetAPITextSize(BYVAL TesthDC&, BYVAL hFont&, BYVAL Text$, W!, H!, BYVAL Mode&)
DECLARE FUNCTION EZ_GetMe() AS STRING
' -------------------------------------------------------------------------------------

TYPE ColorLong
   red AS BYTE
   green AS BYTE
   blue AS BYTE
   hb AS BYTE
END TYPE

UNION ColorCode
   n AS LONG
   b AS ColorLong
END UNION

TYPE EZPAINT
    hDC AS LONG
    W AS LONG
    H AS LONG
END TYPE

%MaxFormListSize    =   404
%MaxFormNameSize    =   32

TYPE PBVForm
   FType AS LONG
   FhWnd AS LONG
   FParentName AS STRING*%MaxFormNameSize
   FName AS STRING*%MaxFormNameSize
   FMenuHandle AS LONG
   FCaption AS STRING*255
   FBackColor AS LONG
   FWidth AS SINGLE
   FHeight AS SINGLE
   FTop AS SINGLE
   FLeft AS SINGLE
   FCol AS SINGLE
   FRow AS SINGLE
   FColLeft AS SINGLE
   FRowTop AS SINGLE
   FStartUpPosition AS LONG
   FModal AS LONG
   FStyle AS DWORD
   FEXStyle AS DWORD
   FSpecial AS LONG
   FBrush AS LONG
   FAccel AS LONG
   FhToolbar AS LONG
   FhStatusbar AS LONG
   FSizable AS LONG
   FhToolTip AS LONG
   FDotBG AS LONG
   FhWnd2 AS LONG       ' for MDI Client
   FhWnd3 AS LONG       ' for other parent type control (1)
   FhWnd4 AS LONG       ' for other parent type control (2)
   FhWnd5 AS LONG       ' for other parent type control (3)
   FhWnd6 AS LONG       ' for other parent type control (4)
   FSnapMode AS LONG
   FTray AS NOTIFYICONDATA5
   FBitmap AS LONG
   FRegion AS LONG
   FTColor AS LONG
   FMinW AS LONG    ' in pixels
   FMinH AS LONG    ' in pixels
   FMaxW AS LONG    ' in pixels
   FMaxH AS LONG    ' in pixels
   FUserList AS STRING*%MaxFormListSize
   FCloseFlag AS LONG
END TYPE

GLOBAL App_CustomDCDraw AS DWORD

GLOBAL App_LastPrinterDC AS LONG
GLOBAL App_FakePrinterDC AS LONG
GLOBAL App_FakePrinterPage AS LONG
GLOBAL App_FakePrinterCount AS LONG
GLOBAL App_FakePrinterForm$
GLOBAL App_FakePrinterID&

'
GLOBAL App_FTray AS NOTIFYICONDATA5  ' use to zero out structure
GLOBAL App_FTray5Ver AS NOTIFYICONDATA5  ' use set version

GLOBAL App_FormShapeBitmap&
GLOBAL App_FormShapeTColor&

UNION Word2Int
    W AS WORD
    I AS INTEGER
END UNION

TYPE IMGLISTX
    hImg AS LONG
    x AS LONG
    y AS LONG
END TYPE

' -------------------------------------------------------------------------------------
%App_ExtraColors        =   25

GLOBAL App_UseHotTrack&
' find text dialog globals
GLOBAL App_FindBufferStr$
GLOBAL App_ReplaceBufferStr$
GLOBAL App_FindMsgBoxStr$
GLOBAL App_FindMsgBoxCaption$
GLOBAL App_FindhWnd&
GLOBAL App_FindhParentClose&

' common dialogs Form info
GLOBAL App_CommonDlgInitType&
GLOBAL App_CommonDlgHandle_OF&
GLOBAL App_CommonDlgHandle_SF&
GLOBAL App_CommonDlgHandle_OFX&
GLOBAL App_CommonDlgHandle_SFX&
GLOBAL App_CommonDlgExType&
GLOBAL App_CommonDlgHandle_CL&
GLOBAL App_CommonDlgHandle_FNT&
GLOBAL App_CommonDlgHandle_PR&
GLOBAL App_CommonDlgHandle_PG&
GLOBAL App_CommonDlgHandle_FT&
GLOBAL App_CommonDlgHandle_BW&
GLOBAL App_CommonDlgParent$
GLOBAL App_CommonDlgTitle$

GLOBAL App_UseIsDialogMessage&

GLOBAL App_ChooseCanvasDPIx&
GLOBAL App_ChooseCanvasDPIy&

GLOBAL App_CanvasHandle&
GLOBAL App_ExtraColorAFlag&
GLOBAL App_TopColor&
GLOBAL App_ExtraFontAFlag&
GLOBAL App_TopFont&
GLOBAL App_ImgList() AS IMGLISTX
GLOBAL AppInstance&
GLOBAL AppStubInstance&
GLOBAL AppForms() AS PBVForm
GLOBAL AppFormResize$()
GLOBAL AppFormStringData$()
%MaxFormStrings     =    50
GLOBAL AppBrush() AS LONG
GLOBAL AppColor() AS LONG
GLOBAL AppFont() AS LONG
GLOBAL AppLastForm&
GLOBAL AppWinNumber&
GLOBAL AppCmdShow&
GLOBAL AppCmdShowFlag&
GLOBAL AppCurrentDlg AS LONG
GLOBAL AppCurrentDlgIsWLift AS LONG
GLOBAL AppCurrentAccel AS LONG
GLOBAL AppCurrentClient AS LONG
GLOBAL AppCurrentMDIChild AS LONG
GLOBAL AppImage() AS LONG
GLOBAL AppImageName$()
GLOBAL AppImageType() AS LONG
GLOBAL AppCursor() AS LONG
GLOBAL App_SplitterCursor1&
GLOBAL App_SplitterCursor2&


GLOBAL AppDLLInstance&

GLOBAL AppSubMenus() AS LONG
GLOBAL AppSubMenusP() AS LONG
GLOBAL AppSubMenusW() AS LONG
GLOBAL AppSubMenusMDIFlag() AS LONG

DECLARE SUB EZ_SubClassEx(BYVAL hCtrl&, BYVAL SCFlag&)
' ------------------------------------
GLOBAL AppControlTNum () AS LONG
GLOBAL AppControlFG() AS LONG
GLOBAL AppControlBG() AS LONG
GLOBAL AppControlFont() AS LONG
GLOBAL AppControlHandle() AS LONG
GLOBAL AppControlOrigAddress() AS LONG
GLOBAL AppControlForm$()
GLOBAL AppControlMode() AS LONG
GLOBAL AppControlLayer() AS LONG
GLOBAL AppControlState() AS LONG
' ------------------------------------
GLOBAL AppControlGAtom1&
GLOBAL AppControlGAtom2&
GLOBAL AppControlGAtom3&
GLOBAL AppControlGAtom4&
GLOBAL AppControlGAtom5&
GLOBAL AppControlGAtom6&
GLOBAL AppControlGAtom7& ' hot tracking property
GLOBAL AppControlGAtomT1&  ' touch mode

GLOBAL AppPropListAtom1&
GLOBAL AppFormStateAtom1&
GLOBAL AppFormStateAtom2&
' ------------------------------------
GLOBAL AppFormGAtom1&
GLOBAL AppFormGAtom2&
GLOBAL App_FormJumpAddress1 AS DWORD
GLOBAL App_FormJumpAddress2 AS DWORD
' ------------------------------------

GLOBAL AppLibrariesH&()
GLOBAL AppLibrariesN$()
%MaxLoadLibrary     =    200

GLOBAL AppTTipText$
GLOBAL AppTTipTextZ AS ASCIIZ*1025

' temporary variable

GLOBAL APP_EZ_UnRegistered&
GLOBAL App_EZ_RegText$

GLOBAL App_EZ_CharH AS SINGLE
GLOBAL App_EZ_CharW AS SINGLE


GLOBAL App_EZ_GridH AS LONG
GLOBAL App_EZ_GridW AS LONG
GLOBAL App_EZ_CurForm$
GLOBAL App_EZ_DChar$
GLOBAL App_EZ_PCount AS QUAD
GLOBAL App_EZ_RCMode&
GLOBAL App_EZ_AFGColor&
GLOBAL App_EZ_ABGColor&
GLOBAL App_EZ_CurMenu&
'GLOBAL App_EZ_CurSubMenu&
GLOBAL App_EZ_SubClass&
GLOBAL App_EZ_SubClassMode&
GLOBAL App_EZ_CurMask$
GLOBAL App_EZ_CurTextLen&
GLOBAL App_EZ_AFont&
GLOBAL App_EZ_AppendStyle&
GLOBAL App_EZ_UsingStyles&
GLOBAL App_EZ_UseStyle&
GLOBAL App_EZ_UseExStyle&

DECLARE SUB zModifyStyles(WS&, EX&, BYVAL SMode&)

GLOBAL App_EZ_CurLayer&
GLOBAL App_EZ_MaskMode&


GLOBAL App_EZ_ChooseFont AS LOGFONT
GLOBAL App_EZ_LastFont AS LOGFONT
GLOBAL App_EZ_ChoseFont&

'GLOBAL App_EditAddress&

GLOBAL App_EZ_LastCtrl&

GLOBAL App_EZ_TopCtrl&


GLOBAL App_WedgeMLoop AS DWORD
GLOBAL App_WedgeDProc AS DWORD
GLOBAL App_WedgeDProcEx AS DWORD
GLOBAL App_WedgeComDProc AS DWORD

GLOBAL App_FormDialogProc AS DWORD

GLOBAL App_FormSizeMode&
GLOBAL App_FormSizeOffset&

GLOBAL App_WIcon&

GLOBAL App_EZ_SubClassStyle&
GLOBAL App_EZ_SubClassStyleOld&
GLOBAL App_DropFile$

GLOBAL App_DebugForm$
GLOBAL App_Debug&
GLOBAL App_DebugHandle&

GLOBAL App_CharIsGrid&

GLOBAL App_BCursor&
GLOBAL App_CCursor&
GLOBAL App_WCursor&
GLOBAL App_DCursor1&
GLOBAL App_DCursor2&

GLOBAL App_Capture&
GLOBAL App_Capture_hWnd&
GLOBAL App_DragX1&
GLOBAL App_DragY1&
GLOBAL App_DragX2&
GLOBAL App_DragY2&

GLOBAL App_DragXA&
GLOBAL App_DragYA&
GLOBAL App_DragXB&
GLOBAL App_DragYB&
GLOBAL App_DragControl&
GLOBAL App_DragIsPageForm&
GLOBAL App_DragOX1&
GLOBAL App_DragOY1&
GLOBAL App_DragHitTest&

GLOBAL App_DragListMsg&
GLOBAL App_DragRectWidth&
GLOBAL App_DragRectColor&
GLOBAL App_DragRectStyle&
GLOBAL App_DragRectImgList&
GLOBAL App_DragRectImgNum&

GLOBAL App_IsEZ_Main&

GLOBAL App_RedrawState&

GLOBAL PBVAddress() AS DWORD

GLOBAL App_AllowNotify&
GLOBAL App_AllowCommand&
GLOBAL App_AllowKeyEvent&
GLOBAL App_AllowMouseEvent&
GLOBAL App_AllowCursorEvent&


GLOBAL App_hRichEd1&
GLOBAL App_RichEditType&
GLOBAL App_RichFontBKColorSet&
GLOBAL App_hTurtle1&
GLOBAL App_hVideoFW&
GLOBAL App_DragHandleClass&
GLOBAL App_hMaskEdit&
GLOBAL App_hPatterns&
GLOBAL App_PatternsLoaded&
GLOBAL App_PatternsProp$

'GLOBAL App_RichText$
'GLOBAL App_RichTextFlag&
'GLOBAL App_RichTextCount&

GLOBAL App_ToolbarImage1&
GLOBAL App_ToolbarImage2&
GLOBAL App_ToolbarImage3&
GLOBAL App_ToolbarImage4&


GLOBAL App_LastBMsg&
GLOBAL App_LastBwParam&
GLOBAL App_LastBlParam&

GLOBAL App_DDT_CHARX&
GLOBAL App_DDT_CHARY&
GLOBAL App_DDT_FontNum&

GLOBAL App_BG_Dot_Color&
GLOBAL App_BG_Dot_Mode&

GLOBAL App_hSystemDialog AS LONG
GLOBAL App_SystemFG AS LONG
GLOBAL App_SystemBG AS LONG
GLOBAL App_SystemDlgFreeze AS LONG

GLOBAL App_MakeOwnedForm&

GLOBAL App_LayerMin&
GLOBAL App_LayerMax&

GLOBAL App_MaximumLayer&

GLOBAL App_LayerMode&

GLOBAL App_Rect1 AS RECT
GLOBAL App_Rect2 AS RECT

GLOBAL App_MaskEditDLL$
GLOBAL App_MaskEditClass$


' -----------------------------
'  New Globals for EZGUI 3.0
' -----------------------------
GLOBAL App_RichEditClass$
GLOBAL App_LastTabKey&

GLOBAL App_CListFlag&
GLOBAL App_CListCount&
GLOBAL App_CListhWnd&
GLOBAL App_CListClass$
GLOBAL App_CListControl&()
GLOBAL App_MDIClientID&
GLOBAL App_CriticalSect AS Critical_Section
GLOBAL App_CriticalSectP AS Critical_Section
GLOBAL App_CriticalSectU() AS Critical_Section
GLOBAL App_hEZGUI_MCI&

GLOBAL App_hEZGUI_GL&
GLOBAL App_InitGLClassAddr&
GLOBAL App_FreeGLClassAddr&
DECLARE SUB InitGLClassX()
DECLARE SUB FreeGLClassX()


GLOBAL App_hEZGUI_DBOX&
GLOBAL App_ThreadPCount&

' ------------------------------------
'  New EZGUI 3.5 Globals
' ------------------------------------
GLOBAL App_StretchMode&
GLOBAL App_DrawMode&
GLOBAL App_FindBuffer AS ASCIIZ*256
GLOBAL App_ReplaceBuffer AS ASCIIZ*256
GLOBAL App_FindReplaceMsg&
GLOBAL App_FindReplaceActive&
GLOBAL App_TempFormParent&
GLOBAL App_ToolTipStyle&
GLOBAL App_ToolTipFGC&
GLOBAL App_ToolTipBGC&
GLOBAL App_ToolTipWidth&
GLOBAL App_Allow_Ctrl_Clipping&
GLOBAL App_UseAlternateParent&
GLOBAL App_RegFileExtID() AS LONG
GLOBAL App_RegFileExtPN() AS LONG
GLOBAL App_RGBColorFlag&
GLOBAL App_RGBColorFG&
GLOBAL App_RGBColorBG&

GLOBAL App_EXEAddress1 AS DWORD
GLOBAL App_EXEAddress2 AS DWORD
GLOBAL App_EXEAddress3 AS DWORD

GLOBAL App_ComponentID&

' *************************************************************************************
'     Application Global Variables and Types and New Declares for EZGUI 5.0
' *************************************************************************************
DECLARE FUNCTION ZGetControlIndex(BYVAL hCtrl AS LONG) AS LONG
DECLARE SUB ZInitCCList()
DECLARE SUB zClearCCList()

DECLARE SUB zInitCMPData()
DECLARE SUB zClearCMPData()
DECLARE SUB zSetCustomClasslParam(CName$)
DECLARE SUB zClearCustomClasslParam()
DECLARE FUNCTION zGetCustomClasslParam() AS LONG
DECLARE FUNCTION zIsControlCustom(BYVAL hCtrl&) AS LONG
DECLARE FUNCTION zCustomEventAddress(BYVAL hCtrl&) AS DWORD
DECLARE SUB zForwardCustomEvent(hCtrl&,FormName$, CID&, CMsg&, CVal&, Cancel&, BYVAL IFlag&)
' faster internal routine which passes string BYREF
DECLARE FUNCTION ezHandle(FormName$, BYVAL ID&, BYVAL HMode&) AS LONG
DECLARE SUB zInitUserdata(BYVAL hCtrl&)
DECLARE FUNCTION zGetNewControlIndex() AS LONG
DECLARE SUB zSubClassEx(BYVAL hCtrl&, BYVAL SCFlag&, BYVAL I&)

GLOBAL App_CustomControlFlag&
GLOBAL App_CustomClassReplace$

GLOBAL App_CustomUniversalAtom1&
GLOBAL App_CustomPrivateAtom1&
GLOBAL App_CustomUserDataAtom1&

GLOBAL App_NewCustomControlIndex&

TYPE PListData
    CurrentType AS LONG
    CurrentI AS LONG
    hEdit AS LONG
    hEditN AS LONG
    hCombo AS LONG
    hButton AS LONG
    EFlag AS LONG
END TYPE

TYPE FLISTData
    CustFlag AS LONG
    DIRImageList AS LONG
    DIRFilter1 AS LONG
    DIRFilter2 AS LONG
    RemoveFlag AS LONG
    Dummy1 AS LONG
    Dummy2 AS LONG
END TYPE
%MaxCDataItems  =   7
TYPE CCTRLData
    CCVal(1 TO 7) AS LONG
END TYPE

UNION CDataInfo
    PL AS PListData
    FL AS FLISTData
    CC AS CCTRLData
END UNION


%EZ_IsPrivateData   =   0
%EZ_IsUserData      =   1
DECLARE SUB SetControlBlock(BYVAL hWnd AS LONG, D AS CDataInfo, BYVAL N&)
DECLARE SUB GetControlBlock(BYVAL hWnd AS LONG, D AS CDataInfo, BYVAL N&)
DECLARE SUB FreeControlBlock(BYVAL hWnd AS LONG, BYVAL N&)


SUB ZSetControlArray(BYVAL I&, BYVAL V1&, BYVAL V2&, BYVAL V3&, BYVAL V4&, BYVAL V5&, BYVAL V6&, BYVAL FM$, BYVAL V7&, BYVAL V8&, BYVAL V9&)
    AppControlTNum(I&)=V1&
    AppControlFG(I&)=V2&
    AppControlBG(I&)=V3&
    AppControlFont(I&)=V4&
    AppControlHandle(I&)=V5&
    AppControlOrigAddress(I&)=V6&
    AppControlForm$(I&)=ZNameF(FM$)
    AppControlMode(I&)=V7&
    AppControlLayer(I&)=V8&
    AppControlState(I&)=V9&
END SUB


' *************************************************************************************
'                              PBVMain.INC Code Block
' *************************************************************************************
'                 Program Entrance and Main Window/Dialog Procedures
' *************************************************************************************

#IF %BuildSLL

#ELSE
    FUNCTION LIBMAIN(BYVAL hInstance   AS LONG, _
                     BYVAL fwdReason   AS LONG, _
                     BYVAL lpvReserved AS LONG) EXPORT AS LONG
        SELECT CASE AS LONG fwdReason
            CASE 1
                AppDLLInstance&=hInstance
            CASE ELSE
        END SELECT
        LIBMAIN=1
    END FUNCTION
#ENDIF

GLOBAL App_AWAdress() AS DWORD

SUB zLoadWideAddresses()
    LOCAL hLib&, N&, M$
    REDIM App_AWAdress(1 TO 100) AS GLOBAL DWORD
    DIM FName(1 TO 100) AS ASCIIZ*65
    hLib&=GetModuleHandle("advapi32.dll")
    FName(1)="RegCreateKeyExW"
    FName(2)="RegDeleteKeyW"
    FName(3)="RegOpenKeyExW"
    FName(4)="RegQueryValueExW"
    FName(5)="RegSetValueExW"
    FOR N&=1 TO 5
         GOSUB AddAddr
    NEXT N&
    hLib&=GetModuleHandle("comdlg32.dll")
    hLib&=GetModuleHandle("gdi32.dll")
    hLib&=GetModuleHandle("kernal32.dll")
    hLib&=GetModuleHandle("shell32.dll")
    hLib&=GetModuleHandle("user32.dll")

    ' debug code to be removed later
    IF M$<>"" THEN MSGBOX M$
    EXIT SUB

AddAddr:
     IF hLib&<>0 THEN App_AWAdress(N&)=GetProcAddress(hLib&,FName(N&))
    ' debug code to be removed later
     IF App_AWAdress(N&)=0 THEN M$=M$+FName(N&)+CHR$(13)+CHR$(10)
RETURN
END SUB





%DefaultCorner          =   6

SUB EZ_DefCorner(BYVAL N&) EXPORT10
    STATIC LastV&
    SELECT CASE AS LONG N&
        CASE 1 TO 128
            App_FixedCorner&=N&
        CASE -1
            App_FixedCorner&=%DefaultCorner
        CASE -2
            App_FixedCorner&=LastV&
        CASE ELSE
            App_FixedCorner&=0
    END SELECT
    LastV&=App_FixedCorner&
END SUB

FUNCTION ZIsChildForm(BYVAL hWnd&) AS LONG
    LOCAL WS&, RV&
    RV&=0
    WS&=GetWindowLong(hWnd&, %GWL_STYLE)
    WS&=WS& AND %WS_CHILD
    IF WS&=%WS_CHILD THEN RV&=1
    FUNCTION=RV&
END FUNCTION

SUB EZ_AllowLoadingEvent(BYVAL Mode&) EXPORT10
    SELECT CASE AS LONG Mode&
        CASE 1  ' universal loading event
            App_AllowLoading&=1
        CASE 2  ' one time loading event
            App_AllowLoading&=2
        CASE ELSE
            App_AllowLoading&=0
    END SELECT
END SUB

FUNCTION EZ_GetLoadVal(BYVAL I$) EXPORT10 AS SINGLE
    LOCAL RV!
    SELECT CASE AS CONST$ UCASE$(I$)
        CASE "C"
            RV!=App_LoadC!
        CASE "R"
            RV!=App_LoadR!
        CASE "W"
            RV!=App_LoadW!
        CASE "H"
            RV!=App_LoadH!
        CASE ELSE
    END SELECT
    FUNCTION=RV!
END FUNCTION

SUB EZ_SetLoadVal(BYVAL I$, BYVAL V!) EXPORT10
    SELECT CASE AS CONST$ UCASE$(I$)
        CASE "C"
            App_LoadC!=V!
        CASE "R"
            App_LoadR!=V!
        CASE "W"
            App_LoadW!=V!
        CASE "H"
            App_LoadH!=V!
        CASE ELSE
    END SELECT
END SUB

FUNCTION EZ_GetLoadStr(BYVAL I$) EXPORT10 AS STRING
    LOCAL RV$
    SELECT CASE AS CONST$ UCASE$(I$)
        CASE "T"
            RV$=App_LoadTxt$
        CASE "I"    ' images
            RV$=App_LoadPict$
        CASE "P"
            RV$=App_LoadProp$
        CASE ELSE
    END SELECT
    FUNCTION=RV$
END FUNCTION

SUB EZ_SetLoadStr(BYVAL I$, BYVAL V$) EXPORT10
    SELECT CASE  AS CONST$ UCASE$(I$)
        CASE "T"
            App_LoadTxt$=V$
        CASE "I"    ' images
            App_LoadPict$=V$
        CASE "P"
            App_LoadProp$=V$
        CASE ELSE
    END SELECT
END SUB


DECLARE SUB EZ_EventsX2b(CID&, CMsg&, CVal&, Cancel&)

SUB ZLoading(BYVAL FormName$, BYVAL IDNum&, C!, R!, W!, H!, Pict$, TXT$, Prop$)
    LOCAL CMsg&, CVal&, Cancel&
    IF LEN(FormName$)=0 THEN FormName$=App_EZ_CurForm$
    FormName$=UCASE$(FormName$)
    CMsg&=%EZ_Loading
    Cancel&=0
    CVal&=0
    App_LoadC!=C!
    App_LoadR!=R!
    App_LoadW!=W!
    App_LoadH!=H!
    App_LoadPict$=Pict$
    App_LoadTxt$=TXT$
    App_LoadProp$=Prop$
    IF IDNum&=0 AND App_FormJumpAddress2<>0 THEN
        CALL DWORD App_FormJumpAddress2 USING EZ_EventsX2b(IDNum&, CMsg&, CVal&, Cancel&)
    ELSE
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, IDNum&, CMsg&, CVal&, Cancel&)
    END IF
    IF Cancel&=0 THEN
        C!=App_LoadC!
        R!=App_LoadR!
        W!=App_LoadW!
        H!=App_LoadH!
        Pict$=App_LoadPict$
        TXT$=App_LoadTxt$
        Prop$=App_LoadProp$
    END IF
    IF App_AllowLoading&=2 THEN App_AllowLoading&=0     ' single event only
END SUB

SUB zSendAppEvent(BYVAL CMsg&, CVal&, Cancel&)
     LOCAL FormName$, ID&
     FormName$="{APP}"
     ID&=0
     IF PBVAddress(2)<>0 THEN
         CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, ID&, CMsg&, CVal&, Cancel&)
     END IF
END SUB

SUB ZTerminate()
     LOCAL CMsg&, CVal&, Cancel&
     CMsg&=%EZ_Terminate
     CVal&=0
     Cancel&=0
     zSendAppEvent CMsg&, CVal&, Cancel&
END SUB

TYPE EZGUIMAX
    MaxColors AS LONG
    MaxFonts AS LONG
    MaxImages AS LONG
    MaxControls AS LONG
    MaxForms AS LONG
    MaxMenus AS LONG
END TYPE

GLOBAL App_CommandLinehWnd&
GLOBAL App_ChildID&



GLOBAL App_GameLoopForm$
GLOBAL App_GameLoopID&
GLOBAL App_GameLoopMaxCount&
GLOBAL App_GameLoopFlag&
GLOBAL App_GameCount&

SUB ZSendGameLoopMessage()
    LOCAL FormName$, CtrlNum&, CMsg&, CVal&, Cancel&
    App_GameCount&=App_GameCount&+1
    IF App_GameCount&>App_GameLoopMaxCount& THEN App_GameCount&=1
    CVal&=App_GameCount&
    CMsg& = %EZ_GameLoop
    FormName$=App_GameLoopForm$
    CtrlNum&=App_GameLoopID&
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
END SUB

SUB EZ_DefGameLoop(BYVAL FormName$, BYVAL IDNum&, BYVAL MaxCount&) EXPORT10
    LOCAL OKFlag&
    FormName$=UCASE$(TRIM$(FormName$))
    IF FormName$<>"" THEN
        IF ezHandle(FormName$,0,1)<>0 THEN OKFlag&=1
    END IF
    IF OKFlag& THEN
        IF FormName$="{ME}" THEN
            App_GameLoopForm$=EZ_GetME
        ELSE
            App_GameLoopForm$=FormName$
        END IF
        App_GameLoopID&=IDNum&
        App_GameLoopMaxCount&=MaxCount&
        App_GameLoopFlag&=1
    ELSE
        App_GameLoopForm$=""
        App_GameLoopID&=0
        App_GameLoopMaxCount&=0
        App_GameLoopFlag&=0
    END IF
    App_GameCount&=0    ' reset game loop counter
END SUB

DECLARE SUB zInitME()
DECLARE SUB zFreeME()


DECLARE SUB zDrawSpecial(BYVAL hDC&, BYVAL DrawType&, BYVAL hBmp&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL Param1&, BYVAL STMode&, BYVAL AByteMode&)
DECLARE SUB zInitThemes()
DECLARE SUB zUnInitThemes()
DECLARE SUB zInitMultiMon()
DECLARE SUB zUnInitMultiMon()

DECLARE SUB zFreeRotateBuffers()

DECLARE SUB ZSuperClassList(BYVAL Mode&, BYVAL MyClass$)

' PB 6.1 requires no BYVAL for asciiz
GLOBAL App_UseAltWMPrint&

FUNCTION EZ_GuiRun (BYVAL hInstance AS LONG,_
               BYVAL hPrevInstance AS LONG,_
               BYVAL  lpszCmdLine AS ASCIIZ PTR,_
                    BYVAL iCmdShow AS LONG,_
                        BYVAL CB1 AS DWORD,_
                        BYVAL CB2 AS DWORD,_
                        BYVAL CB3 AS DWORD,_
                        BYVAL GUIStyle1 AS DWORD) EXPORT10 AS LONG

'    CB1 is address of EZMain()
'    GUIStyle is a pointer to a structure
LOCAL CLN$, P$
LOCAL Msg AS tagMsg
LOCAL MVal&, N&
LOCAL NoWindow&
LOCAL CN AS ASCIIZ * 32
LOCAL MX1&, MX2&, MX2b&, MX3&, MX4&, MX5&, GARBAGE&
LOCAL EZGMax AS EZGUIMAX PTR


App_EZ_AppendStyle&=0
App_EZ_UsingStyles&=0


App_ForceRichVer& = 0

App_UseAltWMPrint& = 0

App_CustomDCDraw = 0     ' no custom object draw callback

App_SnapToDFlag& =  0

App_UseHotTrack&    = 0

zLoadWideAddresses

App_ComponentID&=0

App_UseAlternateClass$=""

' ----------------------------------
' customizing for OEM Designer
' ----------------------------------
App_CommandLinehWnd&=0
CLN$=@lpszCmdLine
CLN$=UCASE$(LTRIM$(RTRIM$(CLN$)))
P$="{#PARENT#}"
IF LEFT$(CLN$,LEN(P$))=P$ THEN
    App_CommandLinehWnd&=VAL(MID$(CLN$,LEN(P$)+1))
    IF IsWindow(App_CommandLinehWnd&)=0 THEN
        App_CommandLinehWnd&=0
    END IF
END IF
' MSGBOX CLN$+CHR$(13)+CHR$(10)+STR$(App_CommandLinehWnd&)
' ----------------------------------
$IF %YESCOMMON
    LOCAL CC1 AS INIT_COMMON_CONTROLSEX
$ENDIF

App_ChildID& = 1

MX1&=150     ' Max Forms
MX2&=800    ' Max Colors
MX2b&=800   ' Max Fonts
MX3&=300    ' Max Images
MX4&=1650   ' Max Controls and Forms
MX5&=200    ' Max Menus

IF GUIStyle1>0 THEN
    IF IsBadReadPtr(GUIStyle1, 24)=0 THEN
        EZGMax=GUIStyle1
        MX1&=@EZGMax.MaxForms
        IF MX1&<150 THEN MX1&=150
        IF MX1&>999 THEN MX1&=999   ' can't have more than 1000 forms because of data storage in arrays
        MX2&=@EZGMax.MaxColors
        MX2b&=@EZGMax.MaxFonts+100
        MX3&=@EZGMax.MaxImages
        MX4&=@EZGMax.MaxControls + MX1&
        MX5&=@EZGMax.MaxMenus
    END IF
END IF
App_TopColor&=MX2&
MX2&=MX2&+%App_ExtraColors

$IF %MakeDemo
   GARBAGE&=MX1&
   IF GARBAGE&<1 THEN
      FUNCTION=0
      EXIT FUNCTION
   END IF
$ENDIF

REDIM AppForms(1 TO MX1&) AS PBVForm
REDIM AppFormResize$(1 TO MX1&)
REDIM AppFormStringData$(1 TO MX1&, 1 TO %MaxFormStrings)
REDIM AppBrush(%APP_LowBrushN TO MX2&) AS LONG
REDIM AppColor(%APP_LowBrushN TO MX2&) AS LONG

App_FirstStackFont&=MX2b&-100

MX2b&=MX2B&+1
App_ExtraFontAFlag&=0
App_TopFont&=MX2b&

REDIM AppFont(0 TO MX2b&) AS LONG

REDIM AppImage(1 TO MX3&) AS LONG
REDIM AppImageName$(1 TO MX3&)
REDIM AppImageType(1 TO MX3&) AS LONG
REDIM AppSubMenus(1 TO MX5&) AS LONG
REDIM AppSubMenusP(1 TO MX5&) AS LONG
REDIM AppSubMenusW(1 TO MX5&) AS LONG
REDIM AppSubMenusMDIFlag(1 TO MX5&) AS LONG

#IF %BuildSLL
    ' SLL uses same module handle as application
    ' code below will see AppDLLInstance& is zero and then set it
    ' to hInstance passed to GUIRun
#ENDIF
AppInstance&=hInstance
IF AppDLLInstance&=0 THEN AppDLLInstance&=hInstance

App_SplitterCursor1&=LoadCursor(0, BYVAL MAKLNG(%IDC_SIZEWE,0))
App_SplitterCursor2&=LoadCursor(0, BYVAL MAKLNG(%IDC_SIZENS,0))

REDIM AppCursor(-2 TO 100) AS LONG

#IF %BuildSLL
    ' these must be in the apps resources so must change
    ' how I handle them
    CN="CUR_MOVE"+CHR$(0)
    AppCursor(1)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_PHAND"+CHR$(0)
    AppCursor(2)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_LIGHT"+CHR$(0)
    AppCursor(3)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_MOVE2"+CHR$(0)
    AppCursor(4)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_BOX"+CHR$(0)
    AppCursor(5)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_DRAG"+CHR$(0)
    AppCursor(6)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_CHAIR1"+CHR$(0)
    AppCursor(7)=LoadCursor(AppDLLInstance&, CN)
#ELSE
    CN="CUR_MOVE"+CHR$(0)
    AppCursor(1)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_PHAND"+CHR$(0)
    AppCursor(2)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_LIGHT"+CHR$(0)
    AppCursor(3)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_MOVE2"+CHR$(0)
    AppCursor(4)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_BOX"+CHR$(0)
    AppCursor(5)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_DRAG"+CHR$(0)
    AppCursor(6)=LoadCursor(AppDLLInstance&, CN)
    CN="CUR_CHAIR1"+CHR$(0)
    AppCursor(7)=LoadCursor(AppDLLInstance&, CN)
#ENDIF

App_BCursor&=0      ' Button Cursor
App_CCursor&=1      ' Control Move Cursor
App_WCursor&=0      ' Window Cursor
App_DCursor1&=0      ' Window Drag Cursor 1
App_DCursor2&=6      ' Window Drag Cursor 2

REDIM AppControlTNum(1 TO MX4&) AS LONG
REDIM AppControlFG(1 TO MX4&) AS LONG
REDIM AppControlBG(1 TO MX4&) AS LONG
REDIM AppControlFont(1 TO MX4&) AS LONG
REDIM AppControlHandle(1 TO MX4&) AS LONG
REDIM AppControlOrigAddress(1 TO MX4&) AS LONG
REDIM AppControlForm$(1 TO MX4&)
REDIM AppControlMode(1 TO MX4&) AS LONG
REDIM AppControlLayer(1 TO MX4&) AS LONG
REDIM AppControlState(1 TO MX4&) AS LONG


REDIM PBVAddress(1 TO 3) AS DWORD

App_EXEAddress1=CB1
App_EXEAddress2=CB2
App_EXEAddress3=CB3

PBVAddress(1)=CODEPTR(CMP_EZ_Main)
PBVAddress(2)=CODEPTR(CMP_EZ_Events)
PBVAddress(3)=CODEPTR(CMP_EZ_DesignWindow)


zInitCMPData    ' intialize component data


App_EZ_PCount=0
App_EZ_RCMode&=0

' set to default colors and font
App_EZ_AFGColor&=-1
App_EZ_ABGColor&=-1
App_EZ_CurMenu&=0
'App_EZ_CurSubMenu&=0
App_EZ_SubClass&=0
App_EZ_SubClassMode&=0
App_EZ_SubClassStyle&=0

App_EZ_DChar$="|"       ' set delineating char

App_EZ_CharW=8
App_EZ_CharH=16
App_EZ_GridW=8
App_EZ_GridH=8

App_ClipFormat&=%CF_TEXT

App_CurrentOS&=EZ_GetOS(0)
App_CurrentPlatform&=EZ_GetOS(1)

App_EZ_CurForm$=""
App_EZ_CurTextLen&=0
App_EZ_AFont&=-1
App_EZ_MaskMode&=0

App_EZ_Regtext$="{S}EZGUI 5.0 Runtime||Copyright Christopher R. Boss 2003 to 2011||RUNTIME HAS NOT BEEN REGISTERED !|(See: EZ_Reg command in documentation)"
App_EZ_Regtext$=App_EZ_Regtext$+"||Not for Commercial Distribution !||This program uses the EZGUI 5.0 runtime engine !||Learn about it at:      CWSOF.COM"

App_WedgeMLoop=0
App_WedgeDProc=0
App_WedgeDProcEx=0
App_WedgeComDProc=0

App_Allow_Ctrl_Clipping&=1

App_FormSizeMode&=0
App_FormSizeOffset&=0

App_FindReplaceActive&=0
App_FindReplaceMsg&=0

App_EZ_CurLayer&=0
App_TempFormParent&=0

App_WIcon&=%NULL

App_DropFile$=""

APP_EZ_UnRegistered&=((1\1)*64)\64

App_DragRectWidth&=1    ' width of Pen
App_DragRectColor&=RGB(32,32,32)    ' color of Pen
App_DragRectStyle&=0    ' is a Rectangle
App_DragRectImgList&=0
App_DragRectImgNum&=0


$IF %YESCOMMON
    CC1.dwSize=SIZEOF(CC1)
    CC1.dwICC=%ICC_WIN95_CLASSES OR &H1F00&      '   %ICC_DATE_CLASSES OR %ICC_COOL_CLASSES
    InitCommonControlsEX CC1
$ENDIF

AppCmdShow&=iCmdShow
AppCmdShowFlag&=1
' ZQBColors


App_CharIsGrid&=0
App_FixedFontScale&=0

ZInitFonts 0

ZSetInitCharSize ' Set to Window Charsize by Default (EZGUI/DDT mode)

App_AllowCommand&=1
App_AllowNotify&=0
App_AllowKeyEvent&=0
App_AllowMouseEvent&=0
App_MDIClientID&=25

' EZStyle is no longer needed. can be used to pass a value to EZGUI from ezwmain.inc file

CN="EZGUI_ControlItem"+CHR$(0)
AppControlGAtom1&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem2"+CHR$(0)
AppControlGAtom2&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem3"+CHR$(0)
AppControlGAtom3&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem4"+CHR$(0)
AppControlGAtom4&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem5"+CHR$(0)
AppControlGAtom5&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem6"+CHR$(0)
AppControlGAtom6&=GlobalAddAtom(CN)
CN="EZGUI_ControlItem7"+CHR$(0)
AppControlGAtom7&=GlobalAddAtom(CN)
CN="EZGUI_ControlTouch1"+CHR$(0)
AppControlGAtomT1&=GlobalAddAtom(CN)
CN="EZGUI_Proplist1"+CHR$(0)
AppPropListAtom1&=GlobalAddAtom(CN)

CN="EZGUI_FormItem1"+CHR$(0)
AppFormGAtom1&=GlobalAddAtom(CN)
CN="EZGUI_FormItem2"+CHR$(0)
AppFormGAtom2&=GlobalAddAtom(CN)

CN="EZGUI_FormState1"+CHR$(0)
AppFormStateAtom1&=GlobalAddAtom(CN)

CN="EZGUI_FormState2"+CHR$(0)
AppFormStateAtom2&=GlobalAddAtom(CN)


App_FormJumpAddress1=0
App_FormJumpAddress2=0


App_RedrawState&=1

App_DDT_CHARX&=6
App_DDT_CHARY&=13
App_DDT_FontNum&=4  ' MS Sans Serif 8

App_BG_Dot_Color&=0
App_BG_Dot_Mode&=0

App_hSystemDialog=0
App_SystemFG=-1
App_SystemBG=-1
App_SystemDlgFreeze=0

App_LayerMin&=1
App_MaximumLayer&=99
App_LayerMax&=App_MaximumLayer&
App_LayerMode&=0

App_IsEZ_Main&=1

App_MaskEditDLL$="ezgui5me.dll"
App_MaskEditClass$="EZGUI50_MASKEDIT32"

App_LastTabKey&=0

' -------------------
'  EZGUI 3.5 Initializations
' -------------------
App_ToolTipStyle&=0
App_ToolTipFGC&=-1
App_ToolTipBGC&=-1
App_ToolTipWidth&=0

App_RGBColorFlag&=0

PBVSuperClass

PBVRegisterCanvasClass
RegisterShapeClass

#IF %BuildSLL

#ENDIF

REDIM App_CListControl&(1 TO 2)
' index zero is for storing checkbox imagelist
REDIM App_ImgList(0 TO 100)

App_AllowCursorEvent&=0
App_DrawTextFormat&=0
REDIM App_CriticalSectU(0 TO 10) AS Critical_Section
InitializeCriticalSection App_CriticalSect
InitializeCriticalSection App_CriticalSectP
FOR N&=0 TO UBOUND(App_CriticalSectU)
    InitializeCriticalSection App_CriticalSectU(N&)
NEXT N&
App_RichEditClass$="RICHEDIT"
App_RichEditType&=0
App_RichFontBKColorSet&=-1

REDIM AppLibrariesH&(1 TO %MaxLoadLibrary)
REDIM AppLibrariesN$(1 TO %MaxLoadLibrary)

ZMakeSCAtom

RegisterAllCustom

EZ_DefCalendarExColors -1,-1,-1

REDIM App_RegFileExtID(1 TO 50) AS LONG
REDIM App_RegFileExtPN(1 TO 50) AS LONG

REDIM App_StackFont$(1 TO 100)
REDIM App_StackFontN&(1 TO 100)

App_AllowLoading&=0
App_TrapESCKey&=0
App_FixedCorner&=0

App_StretchMode&=3

ZCreateBDIV 0

ZInitSprites
EZ_SetSpriteDefTColor RGB(255,0,255)
ZInitThreadTrack

App_UseIsDialogMessage&=1

zInitME

ZInitCCList

zInitThemes

zInitMultiMon

ZSuperClassList 1, ""
zDefSuperClassAtoms 1

IF PBVAddress(1)<>0 AND PBVAddress(2)<>0 AND PBVAddress(3)<>0 THEN
     NoWindow&=ProcessStartup()
END IF
App_IsEZ_Main&=0


IF NoWindow&=0 THEN
   Msg.wParam=0 ' function will return this value
   GOTO AfterMsgLoop
END IF


DO
    IF App_GameLoopFlag&=0 THEN
        MVal&=GetMessage(Msg,%NULL,0,0)
        IF MVal&=0 THEN EXIT DO
        IF MVal&=-1 THEN EXIT DO         ' error !
        ZProcessMsg Msg       ' Wedge code now in ZProcessMsg
    ELSE
        IF PeekMessage(Msg,%NULL,0,0, %PM_REMOVE) THEN
            IF Msg.message = %WM_QUIT THEN
                EXIT DO
            ELSE
                ZProcessMsg Msg
            END IF
        ELSE
            ' try in else section
            ZSendGameLoopMessage
        END IF
'        ZSendGameLoopMessage
    END IF
LOOP

AfterMsgLoop:

ZSuperClassList -1, ""
zDefSuperClassAtoms 0
zFreeRotateBuffers
zUnInitMultiMon
zUnInitThemes   ' free uxtheme DLL if loaded by LoadLibrary
zDrawSpecial 0,0,0,0,0,0,0,0,0,0,0,0,0,0  ' frees msimg32.dll Library

ZCleanUpHHelp
zFreeME
zClearCCList
ZTerminateAllThreads    ' make sure all threads closed first
ZEraseThreadTrack
ZTerminate
ZDeleteSprites
ZFreeBDIV
'msgbox "Check Position 1"
GlobalDeleteAtom AppControlGAtom1&
GlobalDeleteAtom AppControlGAtom2&
GlobalDeleteAtom AppControlGAtom3&
GlobalDeleteAtom AppControlGAtom4&
GlobalDeleteAtom AppControlGAtom5&
GlobalDeleteAtom AppControlGAtom6&
GlobalDeleteAtom AppControlGAtom7&
GlobalDeleteAtom AppControlGAtomT1&
GlobalDeleteAtom AppPropListAtom1&

GlobalDeleteAtom AppFormGAtom1&
GlobalDeleteAtom AppFormGAtom2&

GlobalDeleteAtom AppFormStateAtom1&
GlobalDeleteAtom AppFormStateAtom2&
ZDelSCAtom
UnRegisterAllCustom

DeleteCriticalSection App_CriticalSect
DeleteCriticalSection App_CriticalSectP
FOR N&=0 TO UBOUND(App_CriticalSectU)
    DeleteCriticalSection App_CriticalSectU(N&)
NEXT N&

'MSGBOX "Check Position 2"

PBVCleanUp

'MSGBOX "Check Position 3"

ZCleanUPPrint 0
ZCleanUPPrint 1

'MSGBOX "Check Position 4"

' erase globals arrays

zClearCMPData

ERASE App_StackFont$
ERASE App_StackFontN&
ERASE App_RegFileExtID
ERASE App_RegFileExtPN
ERASE AppForms
ERASE AppFormResize$
ERASE AppBrush
ERASE AppColor
ERASE AppFont
ERASE AppImage
ERASE AppImageName$
ERASE AppImageType
ERASE AppControlTNum
ERASE AppControlFG
ERASE AppControlBG
ERASE AppControlFont
ERASE AppControlHandle
ERASE AppControlOrigAddress
ERASE AppControlForm$
ERASE AppControlMode
ERASE AppControlLayer
ERASE AppControlState
ERASE AppCursor
ERASE PBVAddress
ERASE AppSubMenus
ERASE AppSubMenusP
ERASE AppSubMenusW
ERASE App_CListControl&

'MSGBOX "Check Position 5"

FUNCTION=Msg.wParam
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetCursor(BYVAL Mode$, BYVAL CurNum&) EXPORT10
IF CurNum&>=LBOUND(AppCursor) AND CurNum&<=UBOUND(AppCursor) THEN
    IF AppCursor(CurNum&)=0 THEN EXIT SUB
ELSE
    IF CurNum&<>0 THEN EXIT SUB
END IF
SELECT CASE  AS CONST$ UCASE$(Mode$)
    CASE ""
        IF CurNum&>=LBOUND(AppCursor) AND CurNum&<=UBOUND(AppCursor) THEN
            IF AppCursor(CurNum&)<>0 THEN
                SetCursor AppCursor(CurNum&)
            END IF
        END IF
    CASE "C_MOVE"
        App_CCursor&=CurNum&
    CASE "C_OVER"
        App_BCursor&=CurNum&
    CASE "F_READY"
        App_DCursor1&=CurNum&
    CASE "F_DRAG"
        App_DCursor2&=CurNum&
    CASE "F_NORMAL"
        App_WCursor&=CurNum&
   CASE ELSE
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_StopDrag(BYVAL FormName$) EXPORT10
     LOCAL hDlg&
     hDlg&=ezHandle(FormName$,0,1)
     IF hDlg&<>0 THEN
          IF App_Capture& THEN
               IF App_Capture_hWnd&=hDlg THEN
                    SendMessage hDlg&, %WM_FORCEDRAGSTOP,0,0
               END IF
          END IF
     END IF
END SUB


SUB EZ_SetCaptureEx(BYVAL hWnd&) EXPORT10
    IF hWnd&<>0 THEN
        IF IsWindow(hWnd&)=0 THEN hWnd&=0
    END IF
    SetCapture hWnd&
END SUB

FUNCTION EZ_SetCapture(BYVAL FormName$) EXPORT10 AS LONG
LOCAL hWnd AS LONG, RV&
RV&=0
IF FormName$<>"" THEN
    hWnd=PBVFormHandle(FormName$)
    IF hWnd<>0 THEN
        ' SetCapture hWnd
        App_EZ_SubClassStyle&=5 ' Make Controls act Transparent
        App_Capture&=1
        App_Capture_hWnd&=hWnd
        RV&=1
    END IF
ELSE
   App_EZ_SubClassStyle&=App_EZ_SubClassStyleOld&
   App_Capture&=0
   App_Capture_hWnd&=0
   RV&=1
END IF
FUNCTION=RV&
END FUNCTION

DECLARE FUNCTION EZ_SetMouseXY(BYVAL X&, BYVAL Y&) AS LONG

GLOBAL App_IsInCapturableMsg&

FUNCTION EZ_SetCaptureD(BYVAL FormName$) EXPORT10 AS LONG
    LOCAL PT() AS LONG, hDlg&, RV&, CVal&
    RV&=0
    DIM PT(1 TO 2) AS LONG
    IF App_IsInCapturableMsg&<>0 THEN
        hDlg&=ezhandle(FormName$,0,1)
        IF hDlg&<>0 THEN
            ' calculate CVal&
            GetCursorPos BYVAL VARPTR(PT(1))
            ScreenToClient hDlg&, BYVAL VARPTR(PT(1))
            CVal&=EZ_SetMouseXY(PT(1), PT(2))
            RV&=EZ_SetCapture(Formname$)
            ' simulate left button down
            SendMessage hDlg&, %WM_LBUTTONDOWN, 0, CVal&
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetDrawMode(BYVAL ITEM&, BYVAL Mode&) EXPORT10
' App_StretchMode&
' App_DrawMode&
SELECT CASE AS LONG ITEM&
    CASE 1  ' stretch mode
        ' StretchBlt() Modes
        ' %BLACKONWHITE                                = 1
        ' %WHITEONBLACK                                = 2
        ' %COLORONCOLOR                                = 3
        ' %HALFTONE                                    = 4
        IF Mode&>=1 AND Mode&<=4 THEN
            IF Mode&=4 THEN
                IF App_CurrentPlatform&=1 THEN  '95,98,ME
                    IF App_CurrentOS&<490 THEN Mode&=3  ' 95,98
                END IF
            END IF
            App_StretchMode&=Mode&
        ELSE
            App_StretchMode&=0  ' don't set mode during stretchblt's
        END IF
    CASE 2  ' draw mode
        IF Mode&=0 THEN
            App_DrawMode&=0
        ELSE
            App_DrawMode&=Mode&
        END IF
    CASE ELSE
END SELECT
END SUB


'------------------------------------------------------------------------------

SUB ZSetInitCharSize()
LOCAL W&, H&
EZ_GetCharSize 0, W&, H&, -1     ' Use System Font  (Close Fit)
App_EZ_CharW=W&
App_EZ_CharH=H&
App_EZ_GridW=W&
App_EZ_GridH=H&
END SUB


'------------------------------------------------------------------------------

SUB EZ_GetCharSize(BYVAL FontNum&, W&, H&, BYVAL Mode&) EXPORT10
LOCAL AW!, AH!, Text$, pmode&
W&=0
H&=0
IF Mode&=-1 THEN
    FontNum&=0
    Mode&=1
END IF
IF Mode&=-2 THEN
   FontNum&=App_DDT_FontNum&
   Mode&=1
END IF
SELECT CASE AS LONG Mode&
    CASE 0 TO 3
        pmode&=0
    CASE 4 TO 7
        pmode&=2
        Mode&=Mode&-4
    CASE 8 TO 11
        pmode&=3
        Mode&=Mode&-8
    CASE ELSE
         EXIT SUB
END SELECT
IF (FontNum&>=0) AND (FontNum&<=UBOUND(AppFont)) THEN
    SELECT CASE AS LONG Mode&
        CASE 0  ' Minimum Fit
            Text$="abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
        CASE 1,2  ' Close Fit & Average
            Text$="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        CASE ELSE   ' Maximum
            Text$="ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"
    END SELECT
    EZ_GetTextSize FontNum&, Text$, AW!, AH!, pmode&     ' return as pixels

    SELECT CASE AS LONG Mode&
        CASE 0,1
            W&=AW!/52        ' EZGUI/DDT compatible
        CASE ELSE
            W&=(AW!/26+1)/2  ' Microsoft compatible
    END SELECT
    H&=AH!
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetCharSize(BYVAL FontNum&, BYVAL Mode&) EXPORT10
LOCAL W&, H&
' EZ_GetCharSize already handles -1, -2 modes
'IF Mode&=-2 THEN
'   ' DDT Character Size
'   FontNum&=App_DDT_FontNum&
'   Mode&=1
'END IF
'IF Mode&=-1 THEN
   ' EZGUI Character Size
'   FontNum&=0
'   Mode&=1
'END IF
EZ_GetCharSize FontNum&, W&, H&, Mode&
IF W&>0 THEN
    IF H&>0 THEN
        App_EZ_CharW=W&
        App_EZ_CharH=H&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetGridPosByChar(BYVAL Mode&) EXPORT10
IF Mode&=1 THEN
    App_CharIsGrid&=1
ELSE
    App_CharIsGrid&=0
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetGridCharSize(BYVAL FontNum&, BYVAL Mode&) EXPORT10
LOCAL W&, H&
' EZ_GetCharSize already handles modes -1, -2
'IF Mode&=-1 THEN
   ' EZGUI Character Size
'   FontNum&=0
'   Mode&=1
'END IF
'IF Mode&=-2 THEN
   ' DDT Character Size
'   FontNum&=App_DDT_FontNum&
'   Mode&=1
'END IF
EZ_GetCharSize FontNum&, W&, H&, Mode&
IF W&>0 THEN
    IF H&>0 THEN
        App_EZ_GridW=W&
        App_EZ_GridH=H&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------


SUB EZ_DoEvents(BYVAL N&) EXPORT10
LOCAL Msg AS tagMsg
LOCAL CT&
IF N&<1 THEN N&=1
IF N&>255 THEN N&=255
CT&=0
DO
   IF PeekMessage(Msg,%NULL,0,0, %PM_REMOVE) THEN
      ZProcessMsg Msg
      CT&=CT&+1
      IF CT&>=N& THEN EXIT DO
   ELSE
      EXIT DO
   END IF
LOOP
END SUB

'------------------------------------------------------------------------------

SUB ZModalLoop(BYVAL SFlag&)
LOCAL Msg AS tagMsg
LOCAL InitDlgCT&  ', RV&
STATIC DlgCT&
IF SFlag&=1 THEN
    DlgCT&=DlgCT&+1
    InitDlgCT&=DlgCT&
    DO
       IF DlgCT&<InitDlgCT& THEN EXIT DO
       IF GetMessage(Msg,%NULL,0,0)=-1 THEN EXIT DO
       ZProcessMsg Msg
    LOOP
ELSE
    DlgCT&=DlgCT&-1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AllowKeyEvents(BYVAL KFlag&) EXPORT10
IF KFlag&>=0 AND KFlag&<=2 THEN
    App_AllowKeyEvent&=KFlag&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AllowCursorEvents(BYVAL CFlag&) EXPORT10
IF CFlag&>=0 AND CFlag&<=1 THEN
    App_AllowCursorEvent&=CFlag&
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetKeyState(BYVAL VKey&, BYVAL Async&) EXPORT10 AS LONG
LOCAL RV%, VKey2&
IF Async&=0 THEN
    RV%=GetKeyState(VKey&)
ELSE
    VKey2&=VKey&
    IF VKey&=%VK_LBUTTON THEN
        IF GetSystemMetrics(%SM_SWAPBUTTON) THEN VKey2&=%VK_RBUTTON
    END IF
    IF VKey&=%VK_RBUTTON THEN
        IF GetSystemMetrics(%SM_SWAPBUTTON) THEN VKey2&=%VK_LBUTTON
    END IF
    RV%=GetAsyncKeyState(VKey2&)
END IF
ROTATE LEFT RV%, 1
RV%=RV% AND 3
FUNCTION=RV%
END FUNCTION

'------------------------------------------------------------------------------
' TYPE tagMSG
'   hwnd AS DWORD
'   message AS DWORD
'   wParam AS DWORD
'   lParam AS DWORD
'   time AS DWORD
'   pt AS POINTAPI
' END TYPE

SUB EZ_SetDlgMsgMode(BYVAL Mode&) EXPORT10
    IF Mode&<>0 THEN Mode&=1
    App_UseIsDialogMessage&=Mode&
END SUB

SUB ZProcessMsg(Msg AS tagMsg)
LOCAL OKFlag&, RV&, hWnd AS LONG, hParent AS LONG
LOCAL Cancel&, CtrlNum&, CMsg&, CVal&, hDlg&, ChildFlag&
STATIC LastMouseWindow&, LastForm$, LastID&, FormName$
ChildFlag&=0
IF App_WedgeMLoop<>0 THEN
    CALL DWORD App_WedgeMLoop USING EZ_MsgLoopX(AppCurrentDlg, Msg) TO RV&
    IF RV&<>0 THEN EXIT SUB
END IF

IF App_AllowKeyEvent&<>0 THEN
    IF Msg.message>=%WM_KEYFIRST AND Msg.message<=%WM_KEYLAST THEN
        GOSUB FindParentForm
        IF hParent<>0 THEN
            GOSUB GetParentInfo
            SELECT CASE AS LONG Msg.message
                CASE %WM_KEYDOWN
                    CMsg&=%EZ_KeyDown
                    GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE %WM_CHAR
                    CMsg&=%EZ_KeyPress
                    GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE %WM_KEYUP
                    CMsg&=%EZ_KeyUp
                    GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE %WM_SYSKEYDOWN
                    CMsg&=%EZ_SysKeyDown
                    IF App_AllowKeyEvent&=2 THEN GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE %WM_SYSCHAR
                    CMsg&=%EZ_SysKeyPress
                    IF App_AllowKeyEvent&=2 THEN GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE %WM_SYSKEYUP
                    CMsg&=%EZ_SysKeyUp
                    IF App_AllowKeyEvent&=2 THEN GOSUB SendEZEvent
                    IF Cancel& THEN EXIT SUB
                CASE ELSE
            END SELECT

        END IF
    END IF
END IF

IF App_AllowMouseEvent&<>0 THEN
    IF Msg.message=%WM_MOUSEMOVE THEN
        GOSUB FindParentForm
        IF hParent<>0 THEN
            DIM FormName2$
            FormName2$=ZFormNameH(hParent)
            IF Msg.hwnd<>hParent THEN
                IF GetParent(Msg.hwnd)=hParent THEN
                    CtrlNum&=GetDlgCtrlID(Msg.hwnd)
                ELSE
                    ' likely child control such as an edit control
                    ' of another control like Listview or ComboBox
                    CtrlNum&=GetDlgCtrlID(GetParent(Msg.hwnd))
                END IF
            ELSE
                CtrlNum&=%EZ_Window
            END IF
            IF Msg.hwnd<>LastMouseWindow& THEN
                IF LastMouseWindow&<>0 THEN
                    CMsg&=%EZ_MouseLeave
                    CVal&=0
                    Cancel&=0
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(LastForm$, LastID&, CMsg&, CVal&, Cancel&)
                END IF
                LastMouseWindow&=Msg.hwnd
                LastForm$=FormName2$
                LastID&=CtrlNum&
                CMsg&=%EZ_MouseEnter
                CVal&=0
                Cancel&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName2$,CtrlNum&, CMsg&, CVal&, Cancel&)
            END IF
            CMsg&=%EZ_MouseMove
            Cancel&=Msg.wParam
            CVal&=Msg.lParam
            CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName2$, CtrlNum&, CMsg&, CVal&, Cancel&)
        END IF
    END IF
END IF
IF AppCurrentDlg=0 THEN
    TranslateMessage Msg
    DispatchMessage Msg
ELSE
    OKFlag&=1
    IF AppCurrentClient<>0 THEN
        IF TranslateMDISysAccel(AppCurrentClient, Msg) THEN
            OKFlag&=0
        END IF
    END IF
    IF OKFlag& THEN
        IF AppCurrentAccel<>0 THEN
            IF TranslateAccelerator(AppCurrentDlg, AppCurrentAccel, Msg) THEN
                OKFlag&=0
            END IF
        END IF
    END IF
    IF OKFlag& THEN
       IF AppCurrentClient<>0 THEN
           hDlg&=SendMessage(AppCurrentClient, %WM_MDIGETACTIVE,0,0)
           IF hDlg&=0 THEN
               hDlg&=AppCurrentDlg
           ELSE
               IF Msg.message>=%WM_KEYFIRST AND Msg.message<=%WM_KEYLAST THEN
                    IF ProcessDMessage(AppCurrentDlg,%EZ_DoMDIMsg, Msg.wParam) THEN
                        hDlg&=AppCurrentDlg
                    END IF
               END IF
           END IF
       ELSE
           hDlg&=AppCurrentDlg
       END IF
       ' test here for esc key
       IF App_TrapESCKey&<>0 THEN
           IF Msg.message=%WM_KEYDOWN OR Msg.message=%WM_KEYUP THEN
                IF Msg.wParam=27 THEN
                    SELECT CASE  AS CONST$ ZGetClass(Msg.hwnd)
                        CASE "RICHEDIT","RICHEDIT20A", "EDIT", "RICHEDIT50W"
                            IF Msg.message=%WM_KEYUP THEN
                                GOSUB FindParentForm
                                IF hParent<>0 THEN
                                    GOSUB GetParentInfo
                                    CMsg&=%EZ_KeyPress
                                    GOSUB SendEZEvent
                                END IF
                            END IF
                            EXIT SUB
                        CASE ELSE
                    END SELECT
                END IF
           END IF
       END IF
       IF App_UseIsDialogMessage& THEN
           IF IsDialogMessage(hDlg&, Msg)=0 THEN
               TranslateMessage Msg
               DispatchMessage Msg
           END IF
       ELSE
           TranslateMessage Msg
           DispatchMessage Msg
       END IF
    END IF
END IF
EXIT SUB

SendEZEvent:
     CVal&=Msg.wParam
     IF ChildFlag&<>0 THEN
     END IF
     CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
     Msg.wParam=CVal&
RETURN

GetParentInfo:
    FormName$=ZFormNameH(hParent)
    IF Msg.hwnd<>hParent THEN
        IF GetParent(Msg.hwnd)=hParent THEN
            CtrlNum&=GetDlgCtrlID(Msg.hwnd)
        ELSE
            ' likely child control such as an edit control
            ' of another control like Listview or ComboBox
            CtrlNum&=GetDlgCtrlID(GetParent(Msg.hwnd))
            ChildFlag&=1
        END IF
    ELSE
        CtrlNum&=%EZ_Window
    END IF
    Cancel&=0
RETURN

FindparentForm:
    hWnd=Msg.hwnd
    hParent=0
    DO
       IF hWnd=0 THEN EXIT DO
       IF LEFT$(ZGetClass(hWnd), 10)="EZGUI_TYPE" THEN
           hParent=hWnd
           EXIT DO
       ELSE
           hWnd=GetParent(hWnd)
       END IF
    LOOP
RETURN

END SUB

'------------------------------------------------------------------------------

SUB EZ_TrapESC(BYVAL Mode&) EXPORT10
    App_TrapESCKey&=Mode&
END SUB

'------------------------------------------------------------------------------

SUB PBVCleanUp()
LOCAL N&, Half&
Half&=UBOUND(AppCursor)/2
FOR N&=Half&+1 TO UBOUND(AppCursor)
    EZ_FreeCursor N&
NEXT N&

PBVClearCanvasAndShapeClass
IF App_ToolbarImage1&<>0 THEN DeleteObject App_ToolbarImage1&
IF App_ToolbarImage2&<>0 THEN DeleteObject App_ToolbarImage2&
IF App_ToolbarImage3&<>0 THEN DeleteObject App_ToolbarImage3&
IF App_ToolbarImage4&<>0 THEN DeleteObject App_ToolbarImage4&

PBVFreeBrushes %APP_LowBrush,UBOUND(AppBrush)
PBVFreeImage ""   ' destroys all Images
ZDelFont -1
DO
    ARRAY SCAN AppSubMenus(1), <>0, TO N&
    IF N&>0 THEN
        IF IsMenu(AppSubMenus(N&)) THEN
            DestroyMenu AppSubMenus(N&)
        END IF
        AppSubMenus(N&)=0
        AppSubMenusP(N&)=0
        AppSubMenusW(N&)=0
        AppSubMenusMDIFlag(N&)=0
    ELSE
        EXIT DO
    END IF
LOOP
IF AppStubInstance&<>0 THEN
    FreeLibrary AppStubInstance&
END IF
IF App_hEZGUI_DBOX&<>0 THEN
    FreeLibrary App_hEZGUI_DBOX&
END IF
IF App_hRichEd1&<>0 THEN
    FreeLibrary App_hRichEd1&
END IF
IF App_hTurtle1&<>0 THEN
    FreeLibrary App_hTurtle1&
END IF
IF App_hVideoFW&<>0 THEN
    FreeLibrary App_hVideoFW&
END IF
IF App_hMaskEdit&<>0 THEN
    FreeLibrary App_hMaskEdit&
END IF
IF App_hPatterns&<>0 THEN
    FreeLibrary App_hPatterns&
END IF
IF App_hEZGUI_MCI&<>0 THEN
    FreeLibrary App_hEZGUI_MCI&
END IF
IF App_hEZGUI_GL&<>0 THEN
    IF App_FreeGLClassAddr&<>0 THEN
        CALL DWORD App_FreeGLClassAddr& USING FreeGLClassX()
    END IF
    FreeLibrary  App_hEZGUI_GL&
END IF

FOR N&=0 TO UBOUND(App_ImgList)
    EZ_FreeImageList N&
NEXT N&

FOR N&=1 TO %MaxLoadLibrary
    IF AppLibrariesH&(N&)<>0 THEN
        FreeLibrary AppLibrariesH&(N&)
    END IF
NEXT N&
ERASE AppLibrariesH&
ERASE AppLibrariesN$

END SUB

'------------------------------------------------------------------------------

SUB EZ_SetDragRectAttributes(BYVAL PenWidth&, BYVAL PenColor&, BYVAL RectStyle&) EXPORT10
    App_DragRectImgList&=0
    App_DragRectImgNum&=0
    SELECT CASE AS LONG RectStyle&
        CASE 0 TO 6
            ' 1   Ellipse
            ' 2   Ellipse in Rect
            ' 3   Circle
            ' 4   Circle in Rect
            ' 5   Line
            ' 6   Rectangle
            ' 0   Limited Rectangle
            App_DragRectStyle&=RectStyle&
            ' use -1 for default values
            IF PenWidth&>=1 AND PenWidth&<=10 THEN
                App_DragRectWidth&=PenWidth&
            ELSE
                App_DragRectWidth&=1
            END IF
            IF PenColor&>=0 AND PenColor&<=RGB(255,255,255) THEN
                App_DragRectColor&=PenColor&
            ELSE
                App_DragRectColor&=RGB(32,32,32)
            END IF
        CASE 7
            App_DragRectStyle&=RectStyle&
            App_DragRectImgList&=PenWidth&
            App_DragRectImgNum&=PenColor&
        CASE ELSE
            App_DragRectStyle&=0
            App_DragRectWidth&=1
            App_DragRectColor&=RGB(32,32,32)
    END SELECT
END SUB

'------------------------------------------------------------------------------
GLOBAL App_DragMultipleRect$    ' for storing multiple drag rectangles
DECLARE SUB zDrawMultiDragRect(BYVAL hDC&, BYVAL DifX&, BYVAL DifY&)

GLOBAL App_DragPosDifX&  ' variable is for %EZ_DragPos event only
GLOBAL App_DragPosDifY&  ' variable is for %EZ_DragPos event only
GLOBAL App_DragPosMulti&  ' variable is for %EZ_DragPos event only

SUB PBVDrawDragRect(BYVAL hWnd AS LONG, BYVAL Mode&)
    LOCAL X1&, Y1&, X2&, Y2&, PW&, R AS RECT, DWV&, DHV&
    LOCAL hDC AS LONG, OldROP&, OKFlag&, LI&, IW&,IH&, DifX&, DifY&
    LOCAL NewPen&, OldPen&, OldBrush&, CL&, XDif&, YDif&, XOffset&, YOffset&, DMulFlag&
    STATIC hTmpDC&, hTmpBmp&, hOldBmp&, TmpW&, TmpH&, TmpX&, TmpY&
    STATIC hTmpDC2&, hTmpBmp2&, hOldBmp2&
    STATIC MinX&, MinY&, MaxX&, MaxY&
    DMulFlag&=0
    IF LEN(App_DragMultipleRect$)<>0 THEN
        DMulFlag&=1
    END IF
    hDC=GetDC(hWnd)
    ' mode& = 1 (start), 2 (restore), 3 (draw), 4 (finish and restore)
    OKFlag&=0
    IF Mode&=1 THEN
        ' start first draw cycle
        hTmpDC&=CreateCompatibleDC(hDC)
        hTmpDC2&=CreateCompatibleDC(hDC)
        GetClientRect hWnd, R
        DWV&=(R.nRight-R.nLeft)
        DHV&=(R.nBottom-R.nTop)
        hTmpBmp&=CreateCompatibleBitmap(hDC, DWV&, DHV&)  ' client area of form
        hTmpBmp2&=CreateCompatibleBitmap(hDC, DWV&, DHV&)  ' client area of form
        hOldBmp&=SelectObject(hTmpDC&, hTmpBmp&)
        hOldBmp2&=SelectObject(hTmpDC2&, hTmpBmp2&)
        ' copy original background to second buffer
        BitBlt hTmpDC2&,0,0, DWV&, DHV&, hDC, 0, 0, %SRCCOPY
        PBVGetRect X1&, Y1&, X2&, Y2&
        IF App_DragRectStyle&=7 THEN GOSUB CheckImgSize
        IF DMulFlag& THEN
            ' drag multiple controls mode so use all the client area
            MinX&=0
            MinY&=0
            MaxX&=DWV&-1
            MaxY&=DHV&-1
            DifX&=X2&-X1&
            DifY&=Y2&-Y1&
            App_DragPosDifX&=DifX&  ' variable is for %EZ_DragPos event only
            App_DragPosDifY&=DifY&  ' variable is for %EZ_DragPos event only
            App_DragPosMulti&=1  ' variable is for %EZ_DragPos event only
        ELSE
            MinX&=X1&
            MinY&=Y1&
            MaxX&=X2&
            MaxY&=Y2&
            App_DragPosDifX&=0  ' variable is for %EZ_DragPos event only
            App_DragPosDifY&=0  ' variable is for %EZ_DragPos event only
            App_DragPosMulti&=0  ' variable is for %EZ_DragPos event only
        END IF
    ELSE
        PBVGetRect X1&, Y1&, X2&, Y2&
        IF DMulFlag& THEN
            DifX&=X2&-X1&
            DifY&=Y2&-Y1&
            App_DragPosDifX&=DifX&  ' variable is for %EZ_DragPos event only
            App_DragPosDifY&=DifY&  ' variable is for %EZ_DragPos event only
            App_DragPosMulti&=1  ' variable is for %EZ_DragPos event only
        ELSE
            IF App_DragRectStyle&=7 THEN GOSUB CheckImgSize
            IF X1&<MinX& THEN MinX&=X1&
            IF Y1&<MinY& THEN MinY&=Y1&
            IF X2&>MaxX& THEN MaxX&=X2&
            IF Y2&>MaxY& THEN MaxY&=Y2&
            App_DragPosDifX&=0  ' variable is for %EZ_DragPos event only
            App_DragPosDifY&=0  ' variable is for %EZ_DragPos event only
            App_DragPosMulti&=0  ' variable is for %EZ_DragPos event only
        END IF
    END IF

    DWV&=(MaxX&-MinX&)+1
    DHV&=(MaxY&-MinY&)+1
    ' ------------------------------------------------------
    IF Mode&<>4 THEN
        ' ------------------------------------------------------
        ' now copy background from second buffer to first buffer for draw (only area needed)
        ' ------------------------------------------------------
        BitBlt hTmpDC&, MinX&, MinY&, DWV&, DHV&, hTmpDC2&, MinX&,MinY&, %SRCCOPY
        OldROP&=GetROP2(hTmpDC&)
        SetROP2 hTmpDC&, %R2_NOTXORPEN
        ' SetROP2 hDC, %R2_XORPEN
        PW&=App_DragRectWidth&
        CL&=App_DragRectColor&
        NewPen&=CreatePen(%PS_INSIDEFRAME, PW&,CL&)
        OldPen&=SelectObject(hTmpDC&,NewPen&)
        OldBrush&=SelectObject(hTmpDC&, GetStockObject(%NULL_BRUSH))
        IF DMulFlag& THEN
'            EZ_SetText "MDIHOLDER",0,str$(DifX&)+str$(DifY&)
            ' calculate all the lines to draw
            zDrawMultiDragRect hTmpDC&, DifX&, DifY&
        ELSE
            SELECT CASE AS LONG App_DragRectStyle&
                CASE 1  ' ellipse
                    GOSUB DrawE
                CASE 2  ' ellipse in Rect
                    GOSUB DrawE
                    GOSUB DrawR
                CASE 3  ' circle
                    GOSUB DrawC
                CASE 4  ' circle in rect
                    GOSUB DrawC
                    GOSUB DrawR
                CASE 5  ' line
                    MoveToEx hTmpDC&, X1&, Y1&, BYVAL %NULL
                    LineTo hTmpDC&, X2&, Y2&
                CASE 7  ' draw Image
                    IF OKFlag& THEN
                        GOSUB DrawImg
                    ELSE
                        ' use default rect if imagelist not found
                        GOSUB DrawR
                    END IF
                CASE ELSE
                    GOSUB DrawR
            END SELECT
        END IF
        SetROP2 hTmpDC&, OldROP&
        OldPen&=SelectObject(hTmpDC&,OldPen&)
        OldBrush&=SelectObject(hTmpDC&, OldBrush&)
        DeleteObject NewPen&
        ' copy from buffer 1 which has been updated with new drawing
        BitBlt hDC,MinX&, MinY&, DWV&, DHV&, hTmpDC&, MinX&, MinY&, %SRCCOPY
        ' define min/max to current frame
        IF DMulFlag& THEN
        ELSE
            MinX&=X1&
            MinY&=Y1&
            MaxX&=X2&
            MaxY&=Y2&
        END IF
    ELSE
        ' copy from original backup in buffer 2
        BitBlt hDC,MinX&, MinY&, DWV&, DHV&, hTmpDC2&, MinX&, MinY&, %SRCCOPY
    END IF

    ReleaseDC hWnd, hDC
    IF Mode&=4 THEN
        SelectObject hTmpDC&, hOldBmp&
        DeleteObject hTmpBmp&
        DeleteDC hTmpDC&
        SelectObject hTmpDC2&, hOldBmp2&
        DeleteObject hTmpBmp2&
        DeleteDC hTmpDC2&
        LOCAL FormName$, CMsg&, Cancel&, CVal&, CID&
        FormName$=ZFormNameH(hWnd)
        CMsg&=%EZ_DragClear
        Cancel&=0
        CVal&=0
        CID&=0
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
    END IF
    EXIT SUB

CheckImgSize:
    IF App_DragRectImgList&>=1 AND App_DragRectImgList&<=UBOUND(App_ImgList) THEN
        IF App_ImgList(App_DragRectImgList&).hImg<>0 THEN
            LI&=ImageList_GetImageCount(App_ImgList(App_DragRectImgList&).hImg)-1
            IF App_DragRectImgNum&>=0 AND App_DragRectImgNum&<=LI& THEN
                IF App_DragHitTest&=%HTCAPTION THEN
                    OKFlag&=1
                    IF ImageList_GetIconSize(App_ImgList(App_DragRectImgList&).hImg, IW&,IH&) THEN
                        IF X2&>X1&+IW& THEN
                            XOffset&=((X2&-X1&)-IW&)/2
                        ELSE
                            X2&=X1&+IW&
                            XOffset&=0
                        END IF
                        IF Y2&>Y1&+IH& THEN
                            YOffset&=((Y2&-Y1&)-IH&)/2
                        ELSE
                            Y2&=Y1&+IH&
                            YOffset&=0
                        END IF
                    END IF
                END IF
            END IF
        END IF
    END IF
RETURN

DrawImg:
    EZ_DCDrawImage hTmpDC&, X1&+XOffset&, Y1&+YOffset&, App_DragRectImgList&, App_DragRectImgNum&, 0
RETURN

DrawR:
Rectangle hTmpDC&, X1&, Y1&, X2&+1, Y2&+1
RETURN

DrawE:
ELLIPSE hTmpDC&, X1&, Y1&, X2&+1, Y2&+1
RETURN

DrawC:
XDif&=ABS(X2&-X1&)
YDif&=ABS(Y2&-Y1&)
IF XDif&>YDif& THEN XDif&=YDif&
IF YDif&>XDif& THEN YDif&=XDif&
X1&=X1&-XDif&
Y1&=Y1&-YDif&
X2&=X1&+(2*XDif&)
Y2&=Y1&+(2*YDif&)
ELLIPSE hTmpDC&, X1&, Y1&, X2&+1, Y2&+1
RETURN

END SUB

'------------------------------------------------------------------------------

SUB PBVGetRect(X1&, Y1&, X2&, Y2&)
X1&=App_DragX1&
Y1&=App_DragY1&
X2&=App_DragX2&
Y2&=App_DragY2&
IF LEN(App_DragMultipleRect$)=0 THEN    ' only adjust if not multicontrol mode
    IF App_DragRectStyle&<3 OR App_DragRectStyle&>5 THEN
        IF X2&<X1& THEN SWAP X1&, X2&
        IF Y2&<Y1& THEN SWAP Y1&, Y2&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------



SUB EZ_EnableSnapTo() EXPORT10
     App_SnapToDFlag&=0
END SUB

SUB EZ_DisableSnapTo() EXPORT10
     App_SnapToDFlag&=1
END SUB


SUB ZSetDragToGrid(BYVAL hDlg AS LONG, BYVAL SFlag&)
LOCAL RC AS RECT
IF App_SnapToDFlag& THEN EXIT SUB

IF SFlag& THEN
    App_DragX1&=INT(App_DragX1&/App_EZ_GridW)*App_EZ_GridW
    App_DragY1&=INT(App_DragY1&/App_EZ_GridH)*App_EZ_GridH
END IF

IF App_DragRectStyle&=0 THEN
    App_DragX2&=(INT((App_DragX2&+1)/App_EZ_GridW)*App_EZ_GridW)-1
    App_DragY2&=(INT((App_DragY2&+1)/App_EZ_GridH)*App_EZ_GridH)-1
    ' Limit Drag Rectangle
    IF App_DragX2&<App_DragX1& THEN App_DragX2&=App_DragX1&
    IF App_DragY2&<App_DragY1& THEN App_DragY2&=App_DragY1&
    GetClientRect hDlg, RC
    IF SFlag& THEN
        IF App_DragX1&<RC.nLeft THEN App_DragX1&=RC.nLeft
        IF App_DragX1&>=RC.nRight THEN App_DragX1&=RC.nRight-1
    END IF

    IF App_DragX2&<RC.nLeft THEN App_DragX2&=RC.nLeft
    IF App_DragX2&>=RC.nRight THEN App_DragX2&=RC.nRight-1

    IF SFlag& THEN
        IF App_DragY1&<RC.nTop THEN App_DragY1&=RC.nTop
        IF App_DragY1&>=RC.nBottom THEN App_DragY1&=RC.nBottom-1
    END IF

    IF App_DragY2&<RC.nTop THEN App_DragY2&=RC.nTop
    IF App_DragY2&>=RC.nBottom THEN App_DragY2&=RC.nBottom-1
ELSE
    ' all other modes don't compensate
    App_DragX2&=INT(App_DragX2&/App_EZ_GridW)*App_EZ_GridW
    App_DragY2&=INT(App_DragY2&/App_EZ_GridH)*App_EZ_GridH
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZLOWRD(BYVAL L AS LONG) AS LONG
LOCAL IP AS INTEGER PTR, I AS INTEGER
IP=VARPTR(L)
I=@IP
FUNCTION=I
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZHIWRD(BYVAL L AS LONG) AS LONG
LOCAL IP AS INTEGER PTR, I AS INTEGER
IP=VARPTR(L)+2
I=@IP
FUNCTION=I
END FUNCTION

'------------------------------------------------------------------------------
FUNCTION GetClosestToGrid(BYVAL OldPos&, BYVAL NewPos&, BYVAL GridV&) AS LONG
    LOCAL PDif&, APos&
    PDif&=NewPos&-OldPos&
    SELECT CASE AS LONG PDif&
        CASE 0
            APos&=OldPos&
        CASE <0
            APos&=INT(NewPos&/GridV&)*GridV&
            IF APos&<NewPos& THEN APos&=APos&+GridV&
            IF APos&>OldPos& THEN APos&=OldPos&
        CASE ELSE   ' >0
            APos&=INT(NewPos&/GridV&)*GridV&
            IF APos&>NewPos& THEN APos&=APos&-GridV&
            IF APos&<OldPos& THEN APos&=OldPos&
    END SELECT
    FUNCTION=APos&
END FUNCTION


'  EZGUI 4.0 FIX   (add to 4.0 for update if possible
'  these two routines GetClosestTogrid and ZCalcControlDrag

SUB ZCalcControlDrag(BYVAL hDlg AS LONG, BYVAL lParam AS LONG)
LOCAL X&, Y&, XDif&, YDif&, MinXY&, RC AS RECT, I&, STP&
MinXY&=8
X&=ZLOWRD(lParam)
Y&=ZHIWRD(lParam)
GetClientRect hDlg, RC

IF App_DragIsPageForm&<>0 THEN
    IF App_DragHitTest&=%HTCAPTION THEN
' App_DragControl&
    END IF
END IF

IF App_DragHitTest&=%HTCAPTION THEN
    IF X&<RC.nLeft THEN X&=RC.nLeft
    IF X&>=RC.nRight THEN X&=RC.nRight-1
    IF Y&<RC.nTop THEN Y&=RC.nTop
    IF Y&>=RC.nBottom THEN Y&=RC.nBottom-1
END IF
XDif&=X&-App_DragOX1&
YDif&=Y&-App_DragOY1&

SELECT CASE AS LONG App_DragHitTest&
    CASE %HTLEFT
        GOSUB DOHTLEFT
    CASE %HTRIGHT
        GOSUB DOHTRIGHT
    CASE %HTTOP
        GOSUB DOHTTOP
    CASE %HTBOTTOM
        GOSUB DOHTBOTTOM
    CASE %HTTOPLEFT
        GOSUB DOHTLEFT
        GOSUB DOHTTOP
    CASE %HTTOPRIGHT
        GOSUB DOHTRIGHT
        GOSUB DOHTTOP
    CASE %HTBOTTOMLEFT
        GOSUB DOHTLEFT
        GOSUB DOHTBOTTOM
    CASE %HTBOTTOMRIGHT
        GOSUB DOHTRIGHT
        GOSUB DOHTBOTTOM
    CASE %HTCAPTION
'        App_DragX1&=App_DragXA&+XDif&
'        App_DragX2&=App_DragXB&+XDif&
'        App_DragY1&=App_DragYA&+YDif&
'        App_DragY2&=App_DragYB&+YDif&
'        X&=INT(App_DragX1&/App_EZ_GridW)*App_EZ_GridW
'        Y&=INT(App_DragY1&/App_EZ_GridH)*App_EZ_GridH
'        XDif&=X&-App_DragX1&
'        YDif&=Y&-App_DragY1&
'        App_DragX1&=App_DragX1&+XDif&
'        App_DragX2&=App_DragX2&+XDif&
'        App_DragY1&=App_DragY1&+YDif&
'        App_DragY2&=App_DragY2&+YDif&

        ' ---------------------------------------------
        ' try a new calculation routine here
        ' ---------------------------------------------
        App_DragX1&=GetClosestToGrid(App_DragXA&, App_DragXA&+XDif&, App_EZ_GridW)
        XDif&=App_DragXA&-App_DragX1&
        App_DragX2&=App_DragXB&-XDif&
        App_DragY1&=GetClosestToGrid(App_DragYA&, App_DragYA&+YDif&, App_EZ_GridH)
        YDif&=App_DragYA&-App_DragY1&
        App_DragY2&=App_DragYB&-YDif&
    CASE ELSE
END SELECT
EXIT SUB

'    App_DragX1&=INT(App_DragX1&/App_EZ_GridW)*App_EZ_GridW

DOHTLEFT:
IF XDif&<>0 THEN    ' new test here
    App_DragX1&=App_DragXA&+XDif&
    IF App_DragX1&<RC.nLeft THEN App_DragX1&=RC.nLeft
    App_DragX1&=INT(App_DragX1&/App_EZ_GridW)*App_EZ_GridW
    IF App_DragX1&>(App_DragXB&-MinXY&) THEN App_DragX1&=App_DragXB&-MinXY&
ELSE
    App_DragX1&=App_DragXA&
END IF
RETURN

DOHTRIGHT:
IF XDif&<>0 THEN    ' new test here
    App_DragX2&=App_DragXB&+XDif&
    IF App_DragX2&>=RC.nRight THEN App_DragX2&=RC.nRight-1
    App_DragX2&=(INT((App_DragX2&+1)/App_EZ_GridW)*App_EZ_GridW)-1
    IF App_DragX2&<(App_DragXA&+MinXY&) THEN App_DragX2&=App_DragXA&+MinXY&
ELSE
    App_DragX1&=App_DragXA&
END IF
RETURN

DOHTTOP:
IF YDif&<>0 THEN    ' new test here
    App_DragY1&=App_DragYA&+YDif&
    IF App_DragY1&<RC.nTop THEN App_DragY1&=RC.nTop
    App_DragY1&=INT(App_DragY1&/App_EZ_GridH)*App_EZ_GridH
    IF App_DragY1&>(App_DragYB&-MinXY&) THEN App_DragY1&=App_DragYB&-MinXY&
ELSE
    App_DragY1&=App_DragYA&
END IF
RETURN

DOHTBOTTOM:
IF YDif&<>0 THEN    ' new test here
    App_DragY2&=App_DragYB&+YDif&
    IF App_DragY2&>=RC.nBottom THEN App_DragY2&=RC.nBottom-1
    App_DragY2&=(INT((App_DragY2&+1)/App_EZ_GridH)*App_EZ_GridH)-1
    IF App_DragY2&<(App_DragYA&+MinXY&) THEN App_DragY2&=App_DragYA&+MinXY&
ELSE
    App_DragY1&=App_DragYA&
END IF
RETURN

END SUB

'------------------------------------------------------------------------------

'FUNCTION ProcessNextDlgCtrl(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
'LOCAL hWnd1 AS LONG, hWnd2 AS LONG, WS&
'hWnd1=GetFocus
'IF LOWRD(lParam) THEN
'   hWnd2=wParam
'ELSE
'   hWnd2=GetNextDlgTabItem(hDlg, hWnd1, wParam)
'END IF
'IF hWnd1<>0 THEN
'    WS&=GetWindowLong(hWnd1, %GWL_STYLE)
'    IF (WS& AND &HF)=1 THEN
'        WS&=WS& AND (NOT(1))
'        SetWindowLong hWnd1, %GWL_STYLE, WS&
'    END IF
'END IF
'IF hWnd2<>0 THEN
'    WS&=GetWindowLong(hWnd2, %GWL_STYLE)
'    IF (WS& AND &HF)<=1 THEN
'        WS&=WS& OR 1
'        SetWindowLong hWnd2, %GWL_STYLE, WS&
'    END IF
'   SetFocus hWnd2
'END IF
'FUNCTION=0
'END FUNCTION

'------------------------------------------------------------------------------

' MEASUREITEMSTRUCT for ownerdraw
'TYPE MEASUREITEMSTRUCT
'  CtlType AS LONG
'  CtlID AS LONG
'  itemID AS LONG
'  itemWidth AS LONG
'  itemHeight AS LONG
'  itemData AS LONG
'END TYPE


TYPE EZMEASUREITEM
    W AS LONG
    H AS LONG
    CtrlID AS LONG
    CtrlItem AS LONG
    IData AS LONG
END TYPE

GLOBAL App_InsideOwnerDraw&

FUNCTION ZGetFontSize(BYVAL hFont&) AS LONG
    LOCAL hOldFont AS LONG, hDC AS LONG
    LOCAL TM AS NEWTEXTMETRICEX_SAFE
    hDC = GetDC(%HWND_DESKTOP)
    hOldFont=SelectObject(hDC, hFont&)
    GetTextMetrics hDC, TM
    FUNCTION=TM.tmHeight
    SelectObject hDC, hOldFont
    ReleaseDC %HWND_DESKTOP, hDC
END FUNCTION


SUB ZSizePList(FormName$, CID&, CMsg&, CVal&, Cancel&, BYVAL SZ&)
    LOCAL W&, H&, Item1&, Item2&, hFont&    ', NW!, NH!
    IF EZ_StartOwnerSize(CVal&, W&, H&, Item1&, Item2&) THEN
        hFont&=EZ_SendMessageR(FormName$, CID&, %WM_GETFONT,0,0)
        IF hFont&=0 THEN hFont&=EZ_FontHandle(0)
        H&=ZGetFontSize(hFont&)
        H&=H&+(H&/SZ&)
        EZ_EndOwnerSize CVal&, W&, H&
    END IF
END SUB

$LeftCurl   =   "{"
$RightCurl  =   "}"
$LeftBracket =  "["
$RightBracket=  "]"

SUB EZ_GetPLInfo(BYVAL T$, T1$, T2$, T3$, PCode$) EXPORT10
    LOCAL BP1&, BP2&, BP3&
    T1$=""
    T2$=""
    T3$=""
    PCode$=""
    BP1&=INSTR(T$,$LeftCurl)
    BP2&=INSTR(BP1&+1,T$,$RightCurl)
    BP3&=INSTR(BP2&+1,T$,$LeftBracket)
    IF BP1&<=0 THEN
        T1$=T$
    ELSE
        T1$=LEFT$(T$,BP1&-1)
        IF BP2&<>0 THEN
            BP1&=BP1&+1
            PCode$=UCASE$(MID$(T$,BP1&,BP2&-BP1&))
            BP2&=BP2&+1
            SELECT CASE  AS CONST$ PCode$
                CASE "F", "D"   ' can not use [] Brackets in item value or drop down list
                    IF BP3&<=0 THEN
                        T2$=MID$(T$,BP2&)
                    ELSE
                        T2$=MID$(T$,BP2&, BP3&-BP2&)
                        BP3&=BP3&+1
                        T3$=MID$(T$,BP3&,LEN(T$)-BP3&)
                        T3$=REMOVE$(T3$,$RightBracket)
                    END IF
                CASE ELSE   ' this allows the [] brackets to be in text string
                    T2$=MID$(T$,BP2&)
            END SELECT
        END IF
    END IF
END SUB

SUB ZDrawPList(FormName$, CID&, CMsg&, CVal&, Cancel&)
    LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&
    LOCAL T$,  X1&, Y1&, Item1&, IsEdit&, hFont&, OldFont&, hCtrl&, BR&, Pen&, Dif&, Extra&, CatFlag&
    LOCAL AX1&, AX2&, BX1&, BX2&, T1$, T2$, T3$, Pen2&, PCode$, V&, CBR&, OldBrush&, OffsetX&, OffsetY&
    LOCAL W!, H!, OW&, OH&, CatType&
    IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
        EZ_GetODItem CVal&, X1&, Y1&, Item1&, IsEdit&
        IF Item1&>=0 THEN
            SaveDC hMyDC&
            Extra&=GetSystemMetrics(%SM_CXEDGE)
            hCtrl&=ezHandle(FormName$, CID&,0)  ' does not need to support {ME}
            hFont&=SendMessage(hCtrl&, %WM_GETFONT,0,0)
            IF hFont&=0 THEN hFont&=EZ_FontHandle(0)
            OldFont&=SelectObject(hMyDC&, hFont&)
            EZ_UseFont -1
            EZ_Color -1,-1

            ' PLIST WIDTH
            Dif&=((X2&-X1&)+1)/2

            AX1&=X1&
            AX2&=X1&+Dif&
            BX1&=AX2&+1
            BX2&=X2&
            CatFlag&=0
            T$=EZ_GetItemText (FormName$, CID&, Item1&)
            EZ_GetPLInfo T$, T1$, T2$, T3$, PCode$
            BR&=SendMessage(GetParent(hCtrl&), %WM_CTLCOLORLISTBOX, hMyDC&, hCtrl&)
            IF BR&=0 THEN
                BR&=GetStockObject(%WHITE_BRUSH)
                Pen&=GetStockObject(%BLACK_PEN)
                SelectObject hMyDC&, BR&
                SelectObject hMyDC&, Pen&
                SetTextColor hMyDC&, 0
                Pen&=0
            ELSE
                SelectObject hMyDC&,BR&
            END IF
            SetBKMode hMyDC&, %TRANSPARENT
            IF PCode$="" THEN CatFlag&=1
            IF CatFlag&=0 THEN EZ_DCDraw  hMyDC&, %EZ_FILL, BX1&, Y1&, BX2&, Y2&, 0, 1
            EZ_Color 8,8
            EZ_DCDraw hMyDC&, %EZ_LINE, BX1&, Y2&,BX2&,Y2&,1,0
            EZ_Color -1,-1
            OffsetX&=32
            OffsetY&=4
            SELECT CASE AS CONST$ UCASE$(PCode$)
                CASE "C"
                    V&=VAL(T2$)
                    CBR&=CreateSolidbrush(V&)
                    Oldbrush&=SelectObject(hMyDC&, CBR&)
                    EZ_DCDraw  hMyDC&, %EZ_RECT, BX1&+OffsetX&, Y1&+OffsetY&, BX2&-OffsetX&, Y2&-OffsetY&, 1, 1
                    SelectObject hMyDC&, OldBrush&
                    DeleteObject CBR&
                CASE "E"
                    V&=VAL(T2$) ' EZGUI color number, not RGB
                    IF V&=-1 THEN
                        EZ_GetAPITextSize hMyDC&, hFont&, "Default", W!, H!, 0
                        OW&=((BX2&-BX1&)-(W!+2))/2
                        OH&=((Y2&-Y1&)-(H!+2))/2
                        IF OW&<0 THEN OW&=0
                        IF OH&<0 THEN OH&=0
                        EZ_DCDraw  hMyDC&, %EZ_RECT, BX1&+OW&, Y1&+OH&, BX2&-OW&, Y2&-OH&, 1, 0
                        EZ_SetPrintFormat 2, BX2&, Y2&, %EZ_Left OR %EZ_VCenter OR %EZ_Center, 0
                        EZ_DCPrint hMyDC&, BX1&+Extra&,Y1&, "Default"
                    ELSE
                        CBR&=EZ_BrushHandle(V&)
                        Oldbrush&=SelectObject(hMyDC&, CBR&)
                        EZ_DCDraw  hMyDC&, %EZ_RECT, BX1&+OffsetX&, Y1&+OffsetY&, BX2&-OffsetX&, Y2&-OffsetY&, 1, 1
                        SelectObject hMyDC&, OldBrush&
                        ' do not delete brush since EZGUI brush
                    END IF
                CASE "F"
                    EZ_SetPrintFormat 2, BX2&, Y2&, %EZ_Left OR %EZ_VCenter, %DT_PATH_ELLIPSIS
                    EZ_DCPrint hMyDC&, BX1&+Extra&,Y1&, " "+T2$
                CASE ELSE
                    EZ_SetPrintFormat 2, BX2&, Y2&, %EZ_Left OR %EZ_VCenter, 0
                    EZ_DCPrint hMyDC&, BX1&+Extra&,Y1&, " "+T2$
            END SELECT
            IF IsSel& THEN
                BR=GetSysColorBrush(%COLOR_HIGHLIGHT)
                SetTextColor hMyDC&,GetSysColor(%COLOR_HIGHLIGHTTEXT)
                SelectObject hMyDC&, BR&
            END IF
            IF CatFlag&=0 THEN
                EZ_DCDraw  hMyDC&, %EZ_FILL, AX1&, Y1&, AX2&, Y2&, 0, 1
            ELSE
                 CatType&=1
                IF INSTR(T1$, "<3D>") THEN
                      CatType&=2
                      T1$=REMOVE$(T1$,"<3D>")
                END IF
                IF IsSel& THEN
                    EZ_DCDraw  hMyDC&, %EZ_FILL, AX1&, Y1&, BX2&, Y2&, 0, 1
                ELSE
                    SELECT CASE CatType&
                         CASE 2
                              EZ_ColorRGB RGB(196,196,228), RGB(250,250,255)
                              EZ_DCDrawGradient hMyDC&, AX1&, Y1&, BX2&, Y2&, 6
                         CASE ELSE
                              EZ_ColorRGB RGB(216,216,248), RGB(250,250,255)
                              EZ_DCDrawGradient hMyDC&, AX1&, Y1&, BX2&, Y2&, 3
                    END SELECT
                END IF
                EZ_Color 8,8
                EZ_DCDraw hMyDC&, %EZ_LINE, BX1&, Y2&,BX2&,Y2&,1,0
            END IF
            EZ_Color 8,8
            EZ_DCDraw hMyDC&, %EZ_LINE, AX1&, Y2&,AX2&,Y2&,1,0
            IF CatFlag&=0 THEN EZ_DCDraw hMyDC&, %EZ_LINE, AX2&, Y1&,AX2&,Y2&,1,0
            EZ_Color -1,-1
            IF CatFlag&=0 THEN
                EZ_SetPrintFormat 2, AX2&, Y2&, %EZ_Left OR %EZ_VCenter, 0
                EZ_DCPrint hMyDC&, AX1&+Extra&,Y1&, T1$
            ELSE
                EZ_SetPrintFormat 2, BX2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
                EZ_DCPrint hMyDC&, AX1&,Y1&, T1$
            END IF
            EZ_SetPrintFormat 0,0,0,0,0
            RestoreDC hMyDC&, -1
            IF Pen&<>0 THEN DeleteObject Pen&
            IF Pen2&<>0 THEN DeleteObject Pen2&
        END IF
        EZ_EndOwnerDraw
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZGetFileExtLong(BYVAL F$) AS LONG
    LOCAL AP&, P&, L&
    LOCAL RV&
    F$=UCASE$(F$)
    RV&=0
    P&=1
    AP&=0
    DO
        P&=INSTR(P&,F$,".")
        IF P&=0 THEN EXIT DO
        AP&=P&
        P&=P&+1
    LOOP
    L&=LEN(F$)
    IF AP&<>0 THEN
        L&=L&-AP&
        IF L&>4 THEN L&=4
    ELSE
        L&=0
    END IF
'    EZ_DPrint right$(F$,L&)+" "+str$(L&)
    IF L&<>0 THEN
        POKE$ VARPTR(RV&)+4-L&,RIGHT$(F$,L&)
    END IF
'    EZ_DPrint str$(RV&)
    FUNCTION=RV&
END FUNCTION

SUB EZ_RegisterFileType(BYVAL FT$, BYVAL I&) EXPORT10
    LOCAL V&, P&
    V&=ZGetFileExtLong(FT$)
    IF V&<>0 THEN
        ARRAY SCAN App_RegFileExtID(1), = V&, TO P&
        IF P&<>0 THEN
            App_RegFileExtPN(P&)=I&
        ELSE
            ARRAY SCAN App_RegFileExtID(1), = 0, TO P&
            IF P&<>0 THEN
                App_RegFileExtID(P&)=V&
                App_RegFileExtPN(P&)=I&
            END IF
        END IF
    END IF
END SUB

SUB ZDrawFList(FormName$, CID&, CMsg&, CVal&, Cancel&)
    LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&, INum&, H&, X&, Y&, LV&, AP&
    LOCAL T$,  X1&, Y1&, Item1&, IsEdit&, hFont&, OldFont&, hCtrl&, BR&, OffsetX&, Img&, LI&, IX&, IY&, CustFlag&
    LOCAL DriveFlag&, DV&
    IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
        EZ_GetODItem CVal&, X1&, Y1&, Item1&, IsEdit&
        IF Item1&>=0 THEN
            SaveDC hMyDC&
            hCtrl&=ezHandle(FormName$, CID&,0)    ' does not need to suport {ME}
            hFont&=SendMessage(hCtrl&, %WM_GETFONT,0,0)
            IF hFont&=0 THEN hFont&=EZ_FontHandle(0)
            OldFont&=SelectObject(hMyDC&, hFont&)
            EZ_UseFont -1
            EZ_Color -1,-1
            T$=EZ_GetItemText (FormName$, CID&, Item1&)
            INum&=-1
            DriveFlag&=0
            OffsetX&=8
            CustFlag&=SendMessage(hCtrl&,%FLB_GETCUSTOMFLAG,0,0)
            IF CustFlag&<>0 THEN
                IF LEFT$(T$,2)="[-" THEN
                    DriveFlag&=1
                    T$=MID$(T$,3,1)+":\"
                    IF CustFlag&=-1 THEN
                        INum&=ZGetSystemImageIndex(T$, 1)
                    ELSE
                        INum&=2
                        SELECT CASE AS LONG GetDriveType(BYVAL STRPTR(T$))
                            CASE %DRIVE_FIXED
                                INum&=2
                            CASE %DRIVE_REMOVABLE
                                INum&=3
                            CASE %DRIVE_CDROM
                                INum&=4
                            CASE %DRIVE_REMOTE  ' network drive
                                INum&=5
                            CASE %DRIVE_RAMDISK
                                INum&=6
                            CASE ELSE
                        END SELECT
                    END IF
                    T$=LEFT$(T$,1)+" drive"
                ELSEIF LEFT$(T$,1)="[" THEN
                    T$=REMOVE$(T$, ANY "[]")
                    IF CustFlag&=-1 THEN
                        INum&=ZGetSystemImageIndex(T$, 2)
                    ELSE
                        INum&=1
                    END IF
                END IF
            ELSE
                IF LEFT$(T$,2)="[-" THEN
                    OffsetX&=4
                    T$="[ "+MID$(T$,3, 1)+" drive ]"
                ELSEIF LEFT$(T$,1)="[" THEN
                    OffsetX&=4
                    T$="[ "+MID$(T$,2, LEN(T$)-2)+" ]"
                END IF
            END IF
            BR&=SendMessage(GetParent(hCtrl&), %WM_CTLCOLORLISTBOX, hMyDC&, hCtrl&)
            IF BR&=0 THEN
                BR&=GetStockObject(%WHITE_BRUSH)
                SelectObject hMyDC&, BR&
                SetTextColor hMyDC&, 0
            ELSE
                SelectObject hMyDC&,BR&
            END IF
            SetBKMode hMyDC&, %TRANSPARENT
            IF IsSel& THEN
                BR=GetSysColorBrush(%COLOR_HIGHLIGHT)
                SetTextColor hMyDC&,GetSysColor(%COLOR_HIGHLIGHTTEXT)
                SelectObject hMyDC&, BR&
            END IF
            EZ_DCDraw  hMyDC&, %EZ_FILL, X1&, Y1&, X2&, Y2&, 0, 1
            H&=(Y2&-Y1&)+1
            Img&=SendMessage(hCtrl&,%FLB_GETIMAGELIST,0,0)
            IF Img&<>0 THEN
                LI&=ImageList_GetImageCount(Img&)   ' don't subtract 1 since it prevents last image from use

'                EZ_DPrint "Img Count"+str$(LI&)

                ImageList_GetIconSize Img&, IX&, IY&
                X&=OffsetX&
                OffsetX&=(2*OffsetX&)+IX&
                Y&=(H&-IY&)/2
                IF INum&=-1 THEN
                    IF CustFlag&=-1 THEN
                        INum&=ZGetSystemImageIndex(T$, 0)
                    ELSE
                        LV&=ZGetFileExtLong(T$)
                        ARRAY SCAN App_RegFileExtID(1), =LV&, TO AP&
                        IF AP&<>0 THEN
                            INum&=App_RegFileExtPN(AP&)
                        END IF
                    END IF
                END IF
                IF CustFlag&<>0 THEN
                    IF INum&=-1 THEN INum&=0
                END IF
                IF INum& > -1 THEN
                    IF INum&<=LI& THEN
                        DV&=ImageList_DrawEx(Img&, INum&, hMyDC&, X&,Y&,0,0, %CLR_NONE, %CLR_NONE, %ILD_TRANSPARENT)
                    END IF
                END IF
            END IF
            EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Left OR %EZ_VCenter, 0
            EZ_DCPrint hMyDC&, X1&+OffsetX&,Y1&, T$
            EZ_SetPrintFormat 0,0,0,0,0
            RestoreDC hMyDC&, -1
        END IF
        EZ_EndOwnerDraw
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZMeasureItem(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL MI AS MEASUREITEMSTRUCT PTR
LOCAL CID&, RV&, MFlag& ', WID&
LOCAL FormName$, Cancel&, CMsg&, CVal&
LOCAL EZM AS EZMEASUREITEM, StndCtrlType&, hCtrl&
StndCtrlType&=0
CID&=wParam
MI=lParam
RV&=0
MFlag&=0
SELECT CASE AS LONG @MI.CtlType
    CASE %ODT_BUTTON
        StndCtrlType&=1
        IF CID&=0 THEN CID&=@MI.CtlID
        IF CID&<>0 THEN
            RV&=%TRUE
        END IF
    CASE %ODT_MENU
        MFlag&=1
        CID&=@MI.itemID
        IF CID&<>0 THEN
            GOSUB GetMeasure
            GOSUB SendOSMsg
        END IF
    CASE %ODT_LISTBOX, %ODT_COMBOBOX, %ODT_LISTVIEW,%ODT_HEADER, %ODT_TAB
        StndCtrlType&=1
        CID&=@MI.CtlID
        IF CID&<>0 THEN
            GOSUB GetMeasure
            GOSUB SendOSMsg
        END IF
    CASE ELSE
END SELECT
FUNCTION=RV&
EXIT FUNCTION


GetMeasure:
IF @MI.CtlType=%ODT_MENU THEN
    EZM.CtrlID=CID&
    EZM.CtrlItem=0
ELSE
    EZM.CtrlID=CID&
    EZM.CtrlItem=@MI.itemID
END IF
EZM.W=@MI.itemWidth
EZM.H=@MI.itemHeight
EZM.IData=@MI.itemData
RETURN

SendOSMsg:
FormName$=ZFormNameH(hDlg)
Cancel&=0
CMsg&=%EZ_OwnerSize
CVal&=VARPTR(EZM)
App_InsideOwnerDraw&=App_InsideOwnerDraw&+1
App_CurrentOwnerDrawhWnd&=ezHandle(FormName$,CID&,0)    ' does not need to support {ME}
SELECT CASE  AS CONST$ EZ_GetClass(FormName$,CID&,0)
    ' add custom classes here
    CASE $PLISTCLASS
        ZSizePList FormName$, CID&, CMsg&, CVal&, Cancel&, 2
    CASE $FLISTCLASS
        ZSizePList FormName$, CID&, CMsg&, CVal&, Cancel&, 4
    CASE ELSE
        IF StndCtrlType& THEN
            hCtrl&=ezHandle(FormName$, CID&,0)  ' does not need to support {ME}
            zForwardCustomEvent hCtrl,FormName$, CID&, CMsg&, CVal&, Cancel&, 0
        ELSE
            CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
        END IF
END SELECT
App_InsideOwnerDraw&=App_InsideOwnerDraw&-1
App_CurrentOwnerDrawhWnd&=0
' ------------------------
' Set return Values !
' ------------------------
@MI.itemWidth=EZM.W
@MI.itemHeight=EZM.H
' ------------------------
IF Cancel&<>0 THEN RV&=0 ELSE RV&=%TRUE
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_StartOwnerSize(BYVAL CVal&, W&, H&, Item1&, Item2&) EXPORT10 AS LONG
LOCAL EZM AS EZMEASUREITEM PTR, RV&
RV&=0
' App_CurrentOwnerDrawhWnd&=0
IF CVal&<>0 THEN
    IF IsBadReadPtr(CVal&, SIZEOF(@EZM))=0 THEN
        IF App_InsideOwnerDraw&>0 THEN
            EZM=CVal&
            W&=@EZM.W
            H&=@EZM.H
            Item1&=@EZM.CtrlItem
            Item2&=@EZM.IData
            RV&=%TRUE
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_EndOwnerSize(BYVAL CVal&, BYVAL W&, BYVAL H&) EXPORT10
LOCAL EZM AS EZMEASUREITEM PTR
IF CVal&<>0 THEN
    IF IsBadReadPtr(CVal&, SIZEOF(@EZM))=0 THEN
        IF App_InsideOwnerDraw&>0 THEN
            EZM=CVal&
            @EZM.W=W&
            @EZM.H=H&
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

' DRAWITEMSTRUCT for ownerdraw
'TYPE DRAWITEMSTRUCT
'  CtlType AS LONG
'  CtlID AS LONG
'  itemID AS LONG
'  itemAction AS LONG
'  itemState AS LONG
'  hwndItem AS LONG
'  hdc AS LONG
'  rcItem AS Rect
'  itemData AS LONG
'END TYPE


TYPE EZDRAWITEM
    hDC AS LONG
    X AS LONG
    Y AS LONG
    W AS LONG
    H AS LONG
    SelFlag AS LONG
    GrayFlag AS LONG
    DisFlag AS LONG
    CheckFlag AS LONG
    FocusFlag AS LONG
    CtrlID AS LONG
    CtrlHandle AS LONG
    CtrlItem AS LONG
    EditFlag AS LONG
    DefFlag AS LONG
END TYPE

'------------------------------------------------------------------------------

FUNCTION EZ_StartOwnerDraw(BYVAL CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) EXPORT10 AS LONG
LOCAL EZD AS EZDRAWITEM PTR
LOCAL RV&
RV&=0
' App_CurrentOwnerDrawhWnd&=0
IF CVal&<>0 THEN
    IF IsBadReadPtr(CVal&, SIZEOF(@EZD))=0 THEN
        IF App_InsideOwnerDraw&>0 THEN
            EZD=CVal&
            X2&=@EZD.X + @EZD.W - 1
            Y2&=@EZD.Y + @EZD.H - 1
            hMyDC&=@EZD.hDC
            IsSel& = @EZD.SelFlag
            IsGry& = @EZD.GrayFlag
            IsDis& = @EZD.DisFlag
            IsChk& = @EZD.CheckFlag
            IsFoc& = @EZD.FocusFlag
            IsDef& = @EZD.DefFlag
            RV&=%TRUE
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_GetODItem(BYVAL CVal&, X1&, Y1&, Item1&, IsEdit&) EXPORT10
LOCAL EZD AS EZDRAWITEM PTR
IF CVal&<>0 THEN
    IF IsBadReadPtr(CVal&, SIZEOF(@EZD))=0 THEN
        IF App_InsideOwnerDraw&>0 THEN
            EZD=CVal&
            X1&=@EZD.X
            Y1&=@EZD.Y
            Item1&=@EZD.CtrlItem
            IsEdit& = @EZD.EditFlag
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_EndOwnerDraw() EXPORT10
END SUB

'------------------------------------------------------------------------------

FUNCTION ZDrawItem(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL DI AS DRAWITEMSTRUCT PTR
LOCAL CID&, RV&, MFlag&
LOCAL EZD AS EZDRAWITEM
LOCAL hDCMain AS LONG, hBmp AS LONG, OldBmp AS LONG
LOCAL IFlag&, hCtrl AS LONG, hMenu AS LONG, EXS&, WS&, ColMsg&, BR&, OldBR&
LOCAL Cancel&, FormName$, CMsg&, CVal& , StndCtrlType&, DoCallFlag&
StndCtrlType&=0
CID&=wParam
DI=lParam
RV&=0
IFlag&=0
ColMsg&=0
MFlag&=0
App_CurrentOwnerDrawhWnd&=0
SELECT CASE AS LONG @DI.CtlType
    CASE %ODT_BUTTON, %ODT_LISTBOX, %ODT_COMBOBOX, %ODT_LISTVIEW, %ODT_HEADER, %ODT_TAB, %ODT_STATIC
        StndCtrlType&=1
        ColMsg&=%WM_CTLCOLORBTN     ' doesn't matter which color message since all use same code
        IF CID&=0 THEN CID&=@DI.CtlID
        IF CID&<>0 THEN
            GOSUB InitODraw
            GOSUB SendOMsg
            GOSUB EndODraw
        END IF
'        RV&=%TRUE
    CASE %ODT_MENU
        MFlag&=1
        CID&=@DI.itemID
        IF CID&<>0 THEN
            GOSUB InitODraw
            GOSUB SendOMsg
            GOSUB EndODraw
        END IF
    CASE ELSE   ' assume statusbar
        StndCtrlType&=1
        IF CID&=0 THEN CID&=@DI.CtlID
        IF CID&<>0 THEN
            GOSUB InitODraw
            GOSUB SendOMsg
            GOSUB EndODraw
        END IF
END SELECT
App_CurrentOwnerDrawhWnd&=0
FUNCTION=RV&
EXIT FUNCTION

InitODraw:
EZD.X=@DI.rcItem.nLeft
EZD.Y=@DI.rcItem.nTop
IF @DI.CtlType=%ODT_TAB THEN
     EZD.W=(@DI.rcItem.nRight-@DI.rcItem.nLeft)
'     if @DI.itemID=SendMessage(hCtrl,%TCM_GETCURSEL,0,0) then
     IF (@DI.itemState AND %ODS_SELECTED) <>0 THEN
          EZD.H=(@DI.rcItem.nBottom-@DI.rcItem.nTop)
     ELSE
          ' bug fix so it adds 2 pixels to tabs to solve BG show through
          ' only non selected Tabs
          EZD.H=(@DI.rcItem.nBottom-@DI.rcItem.nTop)+2
     END IF
ELSE
     EZD.W=(@DI.rcItem.nRight-@DI.rcItem.nLeft)
     EZD.H=(@DI.rcItem.nBottom-@DI.rcItem.nTop)
END IF


hDCMain=@DI.hdc
IF @DI.CtlType=%ODT_MENU THEN
    hmenu=@DI.hwndItem
    EZD.CtrlID=@DI.itemID
    EZD.CtrlHandle=0
    EZD.CtrlItem=0
ELSE
    hCtrl=@DI.hwndItem
    EZD.CtrlID=CID&
    EZD.CtrlHandle=hCtrl
    App_CurrentOwnerDrawhWnd&=hCtrl
    EZD.CtrlItem=@DI.itemID

    WS&=GetWindowLong(hCtrl, %GWL_STYLE)
    EXS&=GetWindowLong(hCtrl, %GWL_EXSTYLE)
    IF (EXS& AND %WS_EX_TRANSPARENT)=%WS_EX_TRANSPARENT THEN
        IFlag&=1
    END IF
END IF
IF IFlag& THEN
    EZD.hDC=hDCMain
    SaveDC EZD.hDC
ELSE
    EZD.X=0
    EZD.Y=0
    EZD.hDC=CreateCompatibleDC(hDCMain)
    SaveDC EZD.hDC
    hBmp=CreateCompatibleBitmap(hDCMain, EZD.W, EZD.H)
    OldBmp=SelectObject(EZD.hDC, hBmp)
    IF @DI.CtlType=%ODT_MENU THEN
        BR&=GetSysColorBrush(%COLOR_MENU)
    ELSEIF ColMsg&=0 THEN
        BR&=GetSysColorBrush(%COLOR_3DFACE)
    ELSE
        BR&=SendMessage(hDlg, ColMsg&, EZD.hDC, hCtrl)
        IF BR&=0 THEN
            BR&=GetSysColorBrush(%COLOR_3DFACE)
        END IF
    END IF
    OldBR&=SelectObject(EZD.hDC, BR&)
    PatBlt EZD.hDC, 0, 0, EZD.W, EZD.H, %PATCOPY
    'beep:beep:beep:beep
    SelectObject EZD.hDC, OldBR&
END IF
IF (@DI.itemState AND %ODS_SELECTED) <>0 THEN EZD.SelFlag=%TRUE
IF (@DI.itemState AND %ODS_GRAYED) <>0 THEN EZD.GrayFlag=%TRUE
IF (@DI.itemState AND %ODS_DISABLED) <>0 THEN EZD.DisFlag=%TRUE
IF (@DI.itemState AND %ODS_CHECKED) <>0 THEN EZD.CheckFlag=%TRUE
IF (@DI.itemState AND %ODS_FOCUS) <>0 THEN EZD.FocusFlag=%TRUE
IF (@DI.itemState AND %ODS_COMBOBOXEDIT) <>0 THEN EZD.EditFlag=%TRUE
IF (@DI.itemState AND %ODS_DEFAULT) <>0 THEN EZD.DefFlag=%TRUE
RETURN

EndODraw:
IF IFlag&=0 THEN
    IF Cancel&=0 THEN
        ' EZD.X and EZD.Y should always be zero (0)
        BitBlt hDCMain, @DI.rcItem.nLeft, @DI.rcItem.nTop, EZD.W, EZD.H, EZD.hDC, 0,0, %SRCCOPY
    END IF
    RestoreDC EZD.hDC, -1
    SelectObject EZD.hDC, OldBmp
    DeleteDC EZD.hDC
    DeleteObject hBmp
ELSE
    RestoreDC EZD.hDC, -1
END IF
RETURN


SendOMsg:
FormName$=ZFormNameH(hDlg)
Cancel&=0
CMsg&=%EZ_OwnerDraw
CVal&=VARPTR(EZD)

' EZD.X and EZD.Y should always be zero (0)
App_InsideOwnerDraw&=App_InsideOwnerDraw&+1
DoCallFlag&=1
SELECT CASE AS CONST$  EZ_GetClass(FormName$,CID&,0)
    ' add custom classes here
    CASE $PLISTCLASS
        ZDrawPList FormName$, CID&, CMsg&, CVal&, Cancel&
    CASE $FLISTCLASS
        ZDrawFList FormName$, CID&, CMsg&, CVal&, Cancel&
    CASE ELSE
        IF StndCtrlType& THEN
            zForwardCustomEvent hCtrl,FormName$, CID&, CMsg&, CVal&, Cancel&, 0
        ELSE
            CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
        END IF
END SELECT
App_InsideOwnerDraw&=App_InsideOwnerDraw&-1
IF Cancel& THEN RV&=0 ELSE RV&=%TRUE
RETURN

END FUNCTION

SUB zForwardCustomEvent(hCtrl&,FormName$, CID&, CMsg&, CVal&, Cancel&, BYVAL IFlag&)
    LOCAL CEAddress AS DWORD, DoNormalCall&
    DoNormalCall&=1
    IF zIsControlCustom(hCtrl&) THEN
       CEAddress=zCustomEventAddress(hCtrl&)
       IF CEAddress<>0 THEN
           CALL DWORD CEAddress USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
           ' if IFlag&=1 then also send event to individual control event routines as well
           IF IFlag&=0 THEN DoNormalCall&=0
       END IF
    END IF
    IF DoNormalCall& THEN
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
    END IF
END SUB

'------------------------------------------------------------------------------

SUB ZResizeDebug()
LOCAL W!,H!
EZ_GetSize App_DebugForm$, W!, H!, 0
EZ_ResizeC App_DebugForm$, 100, 0,0, W!, H!
END SUB

'------------------------------------------------------------------------------

FUNCTION ZSendThreadEvent(BYVAL hDlg&, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&) AS LONG
    LOCAL FormName$, Cancel&, CMsg&, CVal&
    FormName$=ZFormNameH(hDlg&)
    IF Mode&=0 THEN
        CMsg&=%EZ_Thread
        Cancel&=0
        CVal&=lParam&
    ELSE    ' posted message
        CMsg&=%EZ_ThreadP
        Cancel&=0
        CVal&=lParam&
    END IF
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, wParam&, CMsg&, CVal&, Cancel&)
    IF Mode&=0 THEN
        FUNCTION=CVal&
    ELSE
        IF lParam&<>0 THEN
            ' free global memory block for posted messages
            GlobalFree lParam&
        END IF
        EnterCriticalSection App_CriticalSectP
        App_ThreadPCount&=App_ThreadPCount&-1
        LeaveCriticalSection App_CriticalSectP
        FUNCTION=1
    END IF
END FUNCTION

'------------------------------------------------------------------------------
TYPE EZDRAGINFO
     X1 AS LONG
     Y1 AS LONG
     X2 AS LONG
     Y2 AS LONG
END TYPE

GLOBAL App_DrawDragRectActive AS DWORD

SUB ZDrawDragRect1(BYVAL hDlg AS LONG, BYVAL lParam AS LONG, EraseFlag&)
    LOCAL DF AS EZDRAGINFO
    LOCAL FormName$, Cancel&, CMsg&, CVal&, CID&

App_DragPosMulti&=0 ' value will be set in call to PBVDrawDragRect

IF App_DragControl&=0 THEN
    App_DragX2&=ZLOWRD(lParam)
    App_DragY2&=ZHIWRD(lParam)
    IF LEN(App_DragMultipleRect$)=0 THEN ZSetDragToGrid hDlg, 0
ELSE
    ZCalcControlDrag hDlg, lParam
END IF
IF EraseFlag& THEN
    PBVDrawDragRect hDlg, 2
ELSE
    ' first draw cycle since EraseFlag&=0
    EraseFlag&=1
    PBVDrawDragRect hDlg, 1
END IF
' add an event which passes data about the current drag process
IF App_DragPosMulti&=0 THEN
     DF.X1=App_DragX1&
     DF.Y1=App_DragY1&
     DF.X2=App_DragX2&
     DF.Y2=App_DragY2&
ELSE
     DF.X1=App_DragPosDifX&
     DF.Y1=App_DragPosDifY&
     DF.X2=0
     DF.Y2=0
END IF

FormName$=ZFormNameH(hDlg)
CMsg&=%EZ_DragPos
Cancel&=0
CVal&=0
App_DrawDragRectActive=VARPTR(DF)
CID&=0
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
App_DrawDragRectActive=0
EXIT SUB


END SUB

SUB EZ_GetDragPos(DX1&, DY1&, DX2&, DY2&) EXPORT10
     LOCAL DF AS EZDRAGINFO PTR
     IF App_DrawDragRectActive<>0 THEN
          DF=App_DrawDragRectActive
          DX1&=@DF.X1
          DY1&=@DF.Y1
          DX2&=@DF.X2
          DY2&=@DF.Y2
     ELSE
          DX1&=-1
          DY1&=-1
          DX2&=-1
          DY2&=-1
     END IF
END SUB

'------------------------------------------------------------------------------

SUB ZSendCustomEvent(BYVAL hDlg&, BYVAL wParam&, BYVAL lParam&)
    LOCAL FormName$, Cancel&, CMsg&
    FormName$=ZFormNameH(hDlg&)
    CMsg&=%EZ_Post
    Cancel&=0
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, wParam&, CMsg&, lParam&, Cancel&)
END SUB

'------------------------------------------------------------------------------

SUB ZRemoveDefButton(BYVAL hCtrl AS LONG)
LOCAL Style&, Tmp&
IF ZGetClass(hCtrl)="BUTTON" THEN
    Style&=GetWindowLong(hCtrl, %GWL_STYLE)
'    Tmp&=Style& AND %BS_DEFPUSHBUTTON
    Tmp&=Style& AND 15
    IF Tmp&=%BS_DEFPUSHBUTTON THEN
        Style&=Style& AND (NOT(%BS_DEFPUSHBUTTON))
        SendMessage hCtrl, %BM_SETSTYLE, Style&, %TRUE
    END IF
END IF
END SUB

FUNCTION MDIRemoveDEFIDProc(BYVAL hCtrl&, BYVAL lParam&) AS LONG
ZRemoveDefButton hCtrl&
FUNCTION=%TRUE
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetFormMinMax(BYVAL FormName$,BYVAL MinW!, BYVAL MinH!, BYVAL MaxW!, BYVAL MaxH!) EXPORT10
LOCAL N&, hWnd&, DIFW&, DIFH&, WR AS RECT, CR AS RECT
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    IF (MinW!>0) AND (MinH!>0) AND (MaxW!>0) AND (MaxH!>0) THEN
        hWnd&=ezHandle(FormName$,0,1)
        IF IsIconic(hWnd&)=0 THEN
            GetWindowRect hWnd&, WR
            GetClientRect hWnd&, CR
            DIFW&=(WR.nRight-WR.nLeft)-(CR.nRight-CR.nLeft)
            DIFH&=(WR.nBottom-WR.nTop)-(CR.nBottom-CR.nTop)
            AppForms(N&).FMaxW=INT(App_EZ_CharW * MaxW!)+DIFW&
            AppForms(N&).FMaxH=INT(App_EZ_CharH * MaxH!)+DIFH&
            AppForms(N&).FMinW=INT(App_EZ_CharW * MinW!)+DIFW&
            AppForms(N&).FMinH=INT(App_EZ_CharH * MinH!)+DIFH&
        END IF
    ELSE
        AppForms(N&).FMaxW=0
        AppForms(N&).FMaxH=0
        AppForms(N&).FMinW=0
        AppForms(N&).FMinH=0
    END IF
END IF
END SUB

'------------------------------------------------------------------------------
FUNCTION zGetDLLProcAddress(BYVAL DLLName$, BYVAL PName$) AS DWORD
    LOCAL hLib&, zT AS ASCIIZ*65, RV AS DWORD
    RV=0
    zT=DLLName$
    hLib&=GetModuleHandle(zT)
    IF hLib&<>0 THEN
        zT=PName$
        RV=GetProcAddress(hLib&,zT)
    END IF
    FUNCTION=RV
END FUNCTION


%EZAW_RIGHT     =   &H00000001
%EZAW_LEFT      =   &H00000002
%EZAW_DOWN      =   &H00000004
%EZAW_UP        =   &H00000008

DECLARE FUNCTION AnimateWindowX (BYVAL hWnd&, BYVAL dwTime AS DWORD, BYVAL dwFlags AS DWORD) AS LONG

SUB zAnimateWindow(BYVAL hWnd&, BYVAL AProp$)
    LOCAL TM AS DWORD, AFlag AS DWORD, Mode&, SFlag&, DFlag&
    STATIC CheckFlag&, pAddress AS DWORD
    IF hWnd&=0 THEN EXIT SUB
    IF CheckFlag&=0 THEN
        pAddress=zGetDLLProcAddress("user32.dll","AnimateWindow")
        IF pAddress<>0 THEN CheckFlag&=1
    END IF
    AProp$=UCASE$(AProp$)
    TM=200+(TALLY(AProp$,"+")*100)
    Mode&=0 ' Roll
    IF INSTR(AProp$,"S") THEN Mode&=1   ' slide
    IF INSTR(AProp$,"X") THEN Mode&=2   ' explode
    IF INSTR(AProp$,"B") THEN Mode&=3   ' Blend
    DFlag&=0
    IF INSTR(AProp$,"L") THEN DFlag&=0
    IF INSTR(AProp$,"R") THEN DFlag&=1
    IF INSTR(AProp$,"U") THEN DFlag&=2
    IF INSTR(AProp$,"D") THEN DFlag&=3
    IF CheckFlag& THEN
        IF IsWindow(hWnd&) THEN
            IF ZIsChildForm(hWnd&) THEN
                IF Mode&=3 THEN Mode&=2 ' can't use blend with child window
            END IF
            AFlag=0
            IF TestVisible(hWnd&) THEN  ' visible so hide me
                AFlag=AFlag OR &H00010000
                SFlag&=0
            ELSE
                SFlag&=1
            END IF
            SELECT CASE AS LONG Mode&
                CASE 0, 1      ' roll or slide
                    IF Mode&=1 THEN AFlag=AFlag OR &H00040000
                    IF SFlag& THEN
                        SELECT CASE AS LONG DFlag&
                            CASE 0
                                AFlag=AFlag OR %EZAW_LEFT
                            CASE 1
                                AFlag=AFlag OR %EZAW_RIGHT
                            CASE 2
                                AFlag=AFlag OR %EZAW_UP
                            CASE 3
                                AFlag=AFlag OR %EZAW_DOWN
                        END SELECT
                    ELSE
                        SELECT CASE AS LONG DFlag&
                            CASE 0
                                AFlag=AFlag OR %EZAW_RIGHT
                            CASE 1
                                AFlag=AFlag OR %EZAW_LEFT
                            CASE 2
                                AFlag=AFlag OR %EZAW_DOWN
                            CASE 3
                                AFlag=AFlag OR %EZAW_UP
                        END SELECT
                    END IF
                CASE 2      ' explode
                    AFlag=AFlag OR &H00000010
                CASE 3      ' blend
                    AFlag=AFlag OR &H00080000
            END SELECT
            CALL DWORD pAddress USING AnimateWindowX(hWnd&, TM, AFlag)
        END IF
    END IF
END SUB

SUB EZ_AnimateForm(BYVAL FormName$, BYVAL AProp$) EXPORT10
    zAnimateWindow ezhandle(FormName$,0,1), AProp$
END SUB

SUB EZ_AnimateControl(BYVAL FormName$, BYVAL IDNum&, BYVAL AProp$) EXPORT10
    IF IDNum&=0 THEN EXIT SUB
    zAnimateWindow ezhandle(FormName$,IDNum&,1), AProp$
END SUB

DECLARE FUNCTION SetWinLAttrX (BYVAL hwnd AS DWORD, BYVAL crKey AS DWORD, BYVAL bAlpha AS BYTE, BYVAL dwFlags AS DWORD) AS LONG

SUB EZ_SetFormAttrEx(BYVAL FormName$, BYVAL TransPColor&, BYVAL AlphaBl!, BYVAL FProp$) EXPORT10
    LOCAL hWnd&, WS&, EXWS&, AlphaB AS BYTE, LFlags AS DWORD
    LOCAL LayerFlag&, EXWS2&
    STATIC CheckFlag&, pAddress AS DWORD
'    local hLib&
'    IF CheckFlag&=0 THEN
'        hLib&=GetModuleHandle("user32.dll")
'        CheckFlag&=-1
'        IF hLib&<>0 THEN
'            pAddress=GetProcAddress(hLib&,"SetLayeredWindowAttributes")
'            IF pAddress<>0 THEN
'                CheckFlag&=1
'            END IF
'        END IF
'    END IF

    IF CheckFlag&=0 THEN
        pAddress=zGetDLLProcAddress("user32.dll","SetLayeredWindowAttributes")
        IF pAddress<>0 THEN CheckFlag&=1
    END IF


    IF CheckFlag&=1 THEN
        hWnd&=ezHandle(FormName$,0,1)
        IF AlphaBl!<0 THEN AlphaBl!=0
        IF AlphaBl!>100 THEN AlphaBl!=100
        AlphaBl!=(AlphaBl!/100)*255
        AlphaB          =   AlphaBl!
        LFlags          =   0
        FProp$=UCASE$(FProp$)
        LayerFlag&=0
        IF INSTR(FProp$,"A") THEN   LFlags=LFlags OR &H00000002     :LayerFlag&=1
        IF INSTR(FProp$,"T") THEN   LFlags=LFlags OR &H00000001     :LayerFlag&=1
        IF hWnd&<>0 THEN
            WS&=GetWindowLong(hWnd&, %GWL_STYLE)
            IF (WS& AND %WS_CHILD)=0 THEN
                EXWS&=GetWindowLong(hWnd&, %GWL_EXSTYLE)
                IF LayerFlag& THEN
                    EXWS2&=EXWS& OR %WS_EX_LAYERED
                ELSE
                    EXWS2&=EXWS& AND (NOT(%WS_EX_LAYERED))
                END IF
                IF EXWS&<>EXWS2& THEN
                    SetWindowLong hWnd&, %GWL_EXSTYLE, EXWS2&
                END IF
                IF LayerFlag& THEN
                    CALL DWORD pAddress USING SetWinLAttrX(hWnd&, TransPColor&, AlphaB, LFlags)
                END IF
                IF INSTR(FProp$,"R") THEN
                    EZ_RedrawForm FormName$
                END IF
            END IF
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------
GLOBAL App_MultiMonAddr() AS DWORD

SUB zUnInitMultiMon()
    ERASE App_MultiMonAddr
END SUB

DECLARE FUNCTION GetMonitorInfoX(BYVAL hMon&, BYVAL lpMonInfo AS DWORD) AS LONG

'TYPE RECT
'  nLeft AS LONG
'  nTop AS LONG
'  nRight AS LONG
'  nBottom AS LONG
'END TYPE

SUB zGetMonitorInfo(BYVAL hMon&, DR AS RECT, WR AS RECT, PFlag&, DN$)
    LOCAL DA AS DWORD, RV&, R AS RECT PTR, TR AS RECT
    LOCAL MData() AS LONG
    DIM MData(1 TO 18)
    RV&=0
    IF App_MultiMonAddr(0)=1 THEN
        IF App_MultiMonAddr(2)<>0 THEN
            MData(1)=18*4
            DA=VARPTR(MData(1))
            CALL DWORD App_MultiMonAddr(2) USING GetMonitorInfoX(hMon&, DA) TO RV&
            IF RV&<>0 THEN
                ' MData(#) 2,3,4,5  = Display X1&, Y1&, X2&, Y2&
                ' MData(#) 6,7,8,9  = Display WorkArea X1&, Y1&, X2&, Y2&
                ' MData(#) 10       =    Flags
                ' MData(#) 11 to 18 = 32 bytes for device name
                R=VARPTR(MData(2))
                DR=@R
                R=VARPTR(MData(6))
                WR=@R
                IF MData(1)=&H00000001 THEN PFlag&=1 ELSE PFlag&=0
                DN$=PEEK$(VARPTR(MData(11)),%CCHDEVICENAME)
                REPLACE CHR$(0) WITH " " IN DN$
                DN$=RTRIM$(DN$)
            END IF
        END IF
    END IF
    IF RV&=0 THEN
        DR=TR
        WR=TR
        PFlag&=0
        DN$=""
    END IF
END SUB

DECLARE FUNCTION EnumDisplayMonitorsX(BYVAL hDC&, BYVAL lpRect AS DWORD, BYVAL MProc AS DWORD, BYVAL lpData AS DWORD) AS LONG

TYPE EZMonTask
    TType AS LONG
    TMonNum AS LONG
    TReturn AS LONG
    TName AS STRING*%CCHDEVICENAME  ' 32 bytes
    TRect AS RECT
    ThMon AS LONG
END TYPE

SUB zSearchMonitors(BYVAL TMode&, BYVAL MonNum&, DN$, R AS RECT, N&)
    LOCAL RV&, TR AS RECT
    LOCAL MT AS EZMonTask
    DN$=""
    R=TR    ' zero it out
    N&=0
    IF App_MultiMonAddr(0)=1 THEN
        IF App_MultiMonAddr(1)<>0 THEN
            MT.TType=TMode&
            MT.TMonNum=MonNum&
            MT.TReturn=0
            MT.TName=SPACE$(%CCHDEVICENAME)
            MT.TRect=R
            MT.ThMon=MonNum& ' pass monitor handle for some modes
            CALL DWORD App_MultiMonAddr(1) USING EnumDisplayMonitorsX(%NULL, %NULL, CODEPTR(MyMonitorEnumProc), VARPTR(MT)) TO RV&
            IF RV&<>0 THEN
                SELECT CASE AS LONG TMode&
                    CASE 1  ' count
                        N&=MT.TReturn
                    CASE 2  ' get name by #
                        DN$=RTRIM$(MT.TName)
                    CASE 3,4  ' get RECT
                        R=MT.TRect
                    CASE 5  ' get Monitor # from handle
                        N&=MT.TMonNum
                    CASE ELSE
                END SELECT
            END IF
        END IF
    END IF
END SUB

FUNCTION EZ_VDisplayCount() EXPORT10 AS LONG
    LOCAL DN$, R AS RECT, N&
    zSearchMonitors 1,0, DN$, R, N&
    FUNCTION=N&
END FUNCTION

FUNCTION EZ_VDisplayName(BYVAL DNum&) EXPORT10 AS STRING
    LOCAL DN$, R AS RECT, N&
    zSearchMonitors 2,DNum&, DN$, R, N&
    FUNCTION=DN$
END FUNCTION

SUB EZ_GetVDisplayArea(BYVAL DNum&, C!, R!, W!, H!, BYVAL DMode&) EXPORT10
    LOCAL DN$, RR AS RECT,N&
    LOCAL SMode&, CFlag&
    SELECT CASE AS LONG DMode&
        CASE 1,2
            SMode&=3
            IF DMode&=1 THEN CFlag&=1
        CASE 3,4
            SMode&=4
            IF DMode&=3 THEN CFlag&=1
        CASE ELSE
            C!=0: R!=0: W!=0: H!=0
            EXIT SUB
    END SELECT
    zSearchMonitors SMode&,DNum&, DN$, RR, N&
    IF CFlag& THEN
        C!=EZ_CX(RR.nLeft)
        R!=EZ_CY(RR.nTop)
        W!=EZ_CX(RR.nRight-RR.nLeft)
        H!=EZ_CY(RR.nBottom-RR.nTop)
    ELSE
        C!=RR.nLeft
        R!=RR.nTop
        W!=RR.nRight-RR.nLeft
        H!=RR.nBottom-RR.nTop
    END IF
END SUB

DECLARE FUNCTION MonitorFromWindowX(BYVAL hWnd&, BYVAL dwFlags&) AS LONG

FUNCTION zGetWindowDisplay(BYVAL hWnd&, BYVAL TMode&) AS LONG
    LOCAL hMon&, RV&
    LOCAL DN$, R AS RECT
    RV&=0
    IF hWnd&<>0 THEN
        IF App_MultiMonAddr(0)=1 THEN
            IF App_MultiMonAddr(5)<>0 THEN  ' MonitorFromWindow
                ' when last parameter is zero will return NULL if not on any monitor
                ' otherwise it will return the monitor handle which contains the
                ' largest part of the window
                CALL DWORD App_MultiMonAddr(5) USING MonitorFromWindowX(hWnd&, 0) TO hMon&
                IF hMon&<>0 THEN
                    IF TMode&=1 THEN
                        zSearchMonitors 5,hMon&, DN$, R, RV&
                    ELSE
                        RV&=hMon&
                    END IF
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetFormVDisplay(BYVAL FormName$) EXPORT10 AS LONG
    FUNCTION=zGetWindowDisplay(ezHandle(FormName$,0,1),1)
END FUNCTION

FUNCTION EZ_GetCtrlVDisplay(BYVAL FormName$, BYVAL CID&) EXPORT10 AS LONG
    FUNCTION=zGetWindowDisplay(ezHandle(FormName$,CID&,1),1)
END FUNCTION


FUNCTION MyMonitorEnumProc(BYVAL hMon&, BYVAL hDC&, BYVAL lpRect AS DWORD, BYVAL lpData AS DWORD) AS LONG
    LOCAL MT AS EZMonTask PTR
    LOCAL DR AS RECT, WR AS RECT, PFlag&, DN$
    MT=lpData
    @MT.TReturn=@MT.TReturn+1
    SELECT CASE AS LONG @MT.TType
        CASE 1  ' count display devices
        CASE 2  ' get name by Display #
            IF @MT.TReturn=@MT.TMonNum THEN
                GOSUB GetMInfo
                @MT.TName=DN$
            END IF
        CASE 3,4    ' get RECT by Display #
            IF @MT.TReturn=@MT.TMonNum THEN
                GOSUB GetMInfo
                IF @MT.TType=3 THEN @MT.TRect=DR
                IF @MT.TType=4 THEN @MT.TRect=WR
            END IF
        CASE 5
            IF hMon&=@MT.ThMon THEN
                @MT.TMonNum=@MT.TReturn
            END IF
        CASE ELSE
    END SELECT
    FUNCTION=1  ' continute all iterations
    EXIT FUNCTION

GetMInfo:
    zGetMonitorInfo hMon&, DR, WR, PFlag&, DN$
RETURN

END FUNCTION


SUB zInitMultiMon()
    LOCAL A AS DWORD, B AS DWORD, RV&
    LOCAL CMsg&, CVal&, Cancel&
    REDIM App_MultiMonAddr(0 TO 5) AS DWORD
    A=zGetDLLProcAddress("user32.dll","EnumDisplayMonitors")
    IF A=0 THEN ' single monitor system only for win95
        App_MultiMonAddr(0)=0   ' multi monitor API's NOT present
    ELSE
        App_MultiMonAddr(0)=1   ' multi monitor API's present
        App_MultiMonAddr(1)=A
        App_MultiMonAddr(2)=zGetDLLProcAddress("user32.dll","GetMonitorInfoA")
        App_MultiMonAddr(3)=zGetDLLProcAddress("user32.dll","MonitorFromPoint")
        App_MultiMonAddr(4)=zGetDLLProcAddress("user32.dll","MonitorFromRect")
        App_MultiMonAddr(5)=zGetDLLProcAddress("user32.dll","MonitorFromWindow")
    END IF
END SUB

SUB ZGetWorkArea(BYVAL hWnd&, SR AS RECT, BYVAL Mode&)
    LOCAL hMon&, DR AS RECT, PFlag&, DN$, DCT&, CMsg&, CVal&
    LOCAL DX&, DY&, DWV&, DHV&, Cancel&
    DCT&=EZ_VDisplayCount
    IF DCT&<=1 OR hWnd&=0 THEN
        SystemParametersInfo %SPI_GETWORKAREA, 0, VARPTR(SR), 0
    ELSE
        CMsg&=%EZ_NoVirtualSize
        CVal&=0
        Cancel&=ProcessDMessage(hWnd& , CMsg&, CVal&)
        IF  Cancel&<>0 THEN   ' canceled
            DX&=GetSystemMetrics(%SM_XVIRTUALSCREEN)
            DY&=GetSystemMetrics(%SM_YVIRTUALSCREEN)
            DWV&=GetSystemMetrics(%SM_CXVIRTUALSCREEN)
            DHV&=GetSystemMetrics(%SM_CYVIRTUALSCREEN)
            SR.nLeft=DX&
            SR.nTop=DY&
            SR.nRight=DX&+DWV&
            SR.nBottom=DY&+DHV&
        ELSE
            hMon&=zGetWindowDisplay(hWnd&,0)
            IF hMon&=0 THEN
                SystemParametersInfo %SPI_GETWORKAREA, 0, VARPTR(SR), 0
            ELSE    ' window is on a display so get displays work area
                zGetMonitorInfo hMon&, DR, SR, PFlag&, DN$
'                local zT as asciiz *255
'                zT=trim$(str$(SR.nLeft))+","+trim$(str$(SR.nTop))+" "+trim$(str$(SR.nRight))+","+trim$(str$(SR.nBottom))+str$(TFlag&)
'                SetWindowText hWnd&, zT
            END IF
        END IF
    END IF
    IF Mode&=1 THEN
        IF SR.nLeft>0 THEN
            SR.nRight=SR.nRight-SR.nLeft
            SR.nLeft=0
        END IF
        IF SR.nTop>0 THEN
            SR.nBottom=SR.nBottom-SR.nTop
            SR.nTop=0
        END IF
    END IF
END SUB

GLOBAL App_NoCheckMax&
GLOBAL App_MaxTrackX&
GLOBAL App_MaxTrackY&

FUNCTION ZMinMaxInfo(BYVAL hDlg&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&) AS LONG
LOCAL N& , PFlag&
N&=ZFormNumH(hDlg&)
IF N&<>0 THEN
'    IF (GetWindowLong(hDlg&, %GWL_STYLE) AND %WS_MAXIMIZE)<>0 THEN
'        ' form is being maximized so leave alone
'        FUNCTION=0
'        EXIT FUNCTION
'    END IF
    ' in pixels already
    IF AppForms(N&).FMinW>=1 THEN
        IF AppForms(N&).FMinH>=1 THEN
            IF AppForms(N&).FMaxW>=1 THEN
                IF AppForms(N&).FMaxH>=1 THEN
                    DIM MN AS MINMAXINFO PTR
                    DIM X&,Y&,WR AS RECT, SW&, SH&
                    DIM MaxW&, MaxH&, MinW&, MinH&, WTP&, XX&,YY&
                    ' assume only non-child dialogs processed
                    WTP&=AppForms(N&).FType
                    SELECT CASE AS LONG WTP&
                        CASE 4  ' MDI parent
                            X&=DefFrameProc(hDlg&,AppForms(N&).FhWnd2,Msg&,wParam&,lParam&)
                        CASE 5  ' MDI child
                            X&=DefMDIChildProc(hDlg&,Msg&,wParam&,lParam&)
                        CASE ELSE
                            X&=DefWindowProc(hDlg&, Msg&, wParam&, lParam&)
                    END SELECT
                    ' center in desktop workarea
                    ' --------------------------------------------
                    IF (GetWindowLong(hDlg&, %GWL_STYLE) AND %WS_CHILD)=%WS_CHILD THEN
                        GetClientRect GetParent(hDlg&), WR
                        PFlag&=1
                    ELSE
                        ZGetWorkArea hDlg&, WR, 0   ' this is what goes bad on Maximize
                        PFlag&=0
                    END IF
                    SW&=(WR.nRight-WR.nLeft)
                    XX&=2*GetSystemMetrics(%SM_CXSIZEFRAME)
                    SH&=(WR.nBottom-WR.nTop)
                    YY&=2*GetSystemMetrics(%SM_CYSIZEFRAME)
                    X&=WR.nLeft
                    Y&=WR.nTop
                    MaxW&=AppForms(N&).FMaxW
                    IF App_NoCheckMax&=0 THEN
                        IF MaxW&>(SW&+XX&) THEN MaxW&=SW&+XX&
                    END IF
                    MaxH&=AppForms(N&).FMaxH
                    IF App_NoCheckMax&=0 THEN
                        IF MaxH&>(SH&+YY&) THEN MaxH&=SH&+YY&
                    END IF
                    MinW&=AppForms(N&).FMinW
                    MinH&=AppForms(N&).FMinH
                    MN=lParam&
                    IF WTP&<>5 THEN
                        @MN.ptMaxSize.x=MaxW&
                        @MN.ptMaxSize.y=MaxH&
                        IF App_NoCheckMax&=0 THEN
                            IF PFlag& THEN      ' only for page forms
                                @MN.ptMaxPosition.x=((SW&-MaxW&)/2)+X&
                                @MN.ptMaxPosition.y=((SH&-MaxH&)/2)+Y&
                            ELSE ' this is new and has a bug which causes problem on secondary monitors when maximizing
'                                @MN.ptMaxPosition.x=X&-GetSystemMetrics(%SM_CXSIZEFRAME)
'                                @MN.ptMaxPosition.y=Y&-GetSystemMetrics(%SM_CYSIZEFRAME)
                            END IF
                        ELSE
                            @MN.ptMaxPosition.x=App_MaxTrackX&
                            @MN.ptMaxPosition.y=App_MaxTrackY&
                        END IF
                        @MN.ptMaxTrackSize.x=MaxW&
                        @MN.ptMaxTrackSize.y=MaxH&
                    END IF
                    @MN.ptMinTrackSize.x=MinW&
                    @MN.ptMinTrackSize.y=MinH&

                    FUNCTION=1
                    EXIT FUNCTION
                END IF
            END IF
        END IF
    END IF
END IF
END FUNCTION

GLOBAL App_ComboLBoxhWnd&

FUNCTION TestColor(BYVAL lParam&) AS LONG
    LOCAL CN$, PCN$
    CN$=zGetClass(lParam&)
    PCN$=zGetClass(GetParent(lParam&))
    IF CN$="EDIT" AND PCN$="COMBOBOX" THEN
        FUNCTION=GetParent(lParam&)
        EXIT FUNCTION
    END IF
    IF CN$="COMBOLBOX" AND PCN$="COMBOBOX" THEN
        FUNCTION=GetParent(lParam&)
        EXIT FUNCTION
    END IF
    IF CN$="COMBOLBOX" THEN
        FUNCTION=App_ComboLBoxhWnd&
        EXIT FUNCTION
    END IF
    FUNCTION=lParam&
END FUNCTION

SUB TestComboLBoxV(BYVAL wParam&, BYVAL lParam&)
    LOCAL CN$
    CN$=zGetClass(lParam&)
    IF CN$="COMBOBOX" THEN
        IF HIWRD(wParam&)=%CBN_DROPDOWN THEN
            App_ComboLBoxhWnd&=lParam&
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB ZSetToolTipColors(BYVAL hWnd&, BYVAL Mode&)
    LOCAL CL&, N&, Msg&, WS&
    IF hWnd&=0 THEN EXIT SUB
    IF Mode&=1 THEN
        WS&=GetWindowLong(hWnd&, %GWL_STYLE)
        IF (App_ToolTipStyle& AND %TTS_BALLOON)=%TTS_BALLOON THEN
            WS&=WS& AND NOT(%WS_BORDER)
        END IF
        WS&=WS& OR App_ToolTipStyle&
        SetWindowLong hWnd&, %GWL_STYLE, WS&
        SendMessage hWnd&, %TTM_UPDATE,0,0
    END IF
    IF App_ToolTipFGC&<>-1 THEN
        N&=App_ToolTipFGC&
        Msg&=%TTM_SETTIPTEXTCOLOR
        GOSUB SetActualColor
    END IF
    IF App_ToolTipBGC&<>-1 THEN
        N&=App_ToolTipBGC&
        Msg&=%TTM_SETTIPBKCOLOR
        GOSUB SetActualColor
    END IF
    IF App_ToolTipWidth&>0 THEN
        SendMessage hWnd&, %TTM_SETMAXTIPWIDTH,0, App_ToolTipWidth&
    END IF
EXIT SUB

SetActualColor:
    IF N&>=0 AND N&<=UBOUND(AppBrush) THEN
        IF AppBrush(N&)<>0 THEN
            CL&=AppColor(N&)
'            IF IsWindow(hWnd&) THEN
                SendMessage hWnd&, Msg&, CL&,0
'            END IF
        END IF
    END IF
RETURN

END SUB

'TYPE COMPAREITEMSTRUCT
'  CtlType AS LONG
'  CtlID AS LONG
'  hwndItem AS LONG
'  itemID1 AS LONG
'  itemData1 AS LONG
'  itemID2 AS LONG
'  itemData2 AS LONG
'  dwLocalID AS DWORD
'END TYPE

GLOBAL App_CompareIndex1&
GLOBAL App_CompareIndex2&
GLOBAL App_CompareItem1&
GLOBAL App_CompareItem2&

FUNCTION ZCompareItems(hDlg&, Msg&, wParam&, lParam&) AS LONG
    LOCAL RV&
    DIM CI AS COMPAREITEMSTRUCT PTR, CID&, FormName$, CMsg&, CVal&, Cancel&, hCtrl& ', L&, T$
    RV&=0
    CI=lParam&
    hCtrl&=@CI.hwndItem
    App_CompareIndex1&=@CI.itemID1
    App_CompareIndex2&=@CI.itemID2
    App_CompareItem1&=@CI.itemData1
    App_CompareItem2&=@CI.itemData2
    FormName$=ZFormNameH(hDlg&)
    CID&=wParam&
    CMsg&=%EZ_Compare
    Cancel&=0
    CVal&=-2
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
    IF CVal&=-2 THEN ' event hasn't been processed
         IF App_CompareItem1&<App_CompareItem2& THEN
             CVal&=-1
         ELSEIF App_CompareItem1&>App_CompareItem2& THEN
             CVal&=1
         ELSE
             CVal&=0
         END IF
    END IF
    RV&=CVal&
    FUNCTION=RV&
END FUNCTION

SUB EZ_GetCompareVal(Item1&, Item2&, Item1V&, Item2V&) EXPORT10
    Item1&=App_CompareIndex1&
    Item2&=App_CompareIndex2&
    Item1V&=App_CompareItem1&
    Item2V&=App_CompareItem2&
END SUB

'TYPE EZNCCalc
'    R1 AS RECT
'    R2 AS RECT
'    R3 AS RECT
'    lpWP AS WINDOWPOS PTR
'END TYPE

'FUNCTION ZCalcClientSize(BYVAL hDlg&, BYVAL wParam&, BYVAL lParam&) AS LONG
'    LOCAL AFNum&, R AS RECT PTR, NC AS EZNCCalc PTR, Offset&
'    AFNum&=GetMyWindowLong(hDlg&, 1)
'    IF AFNum&=0 THEN AFNum&=ZFormNumH(hDlg&)
'    IF AFNum&=0 THEN EXIT FUNCTION
'    Offset&=48
'    IF wParam&=0 THEN
'        R=lParam&
'        @R.nTop=@R.nTop+Offset&
'        @R.nBottom=@R.nBottom+Offset&
'    ELSE
'        NC=lParam&
'        @NC.R1.nBottom=@NC.R1.nBottom+(Offset&)
'        @NC.R3.nTop=@NC.R3.nTop+Offset&
'        @NC.R3.nBottom=@NC.R3.nBottom+Offset&
'    END IF
'    FUNCTION=0
'END FUNCTION

FUNCTION GetMenuIDByPos(BYVAL hMenu&, BYVAL MIndex&) AS LONG
    LOCAL MI AS MENUITEMINFO, RV&
    MI.cbSize=SIZEOF(MI)
    MI.fMask=%MIIM_ID
    IF GetMenuItemInfo(hMenu&, MIndex&, 1, MI)<>0 THEN
        RV&=MI.wID
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION ZMenuSelect(BYVAL hDlg&, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&) AS LONG
    LOCAL FormName$, MenuID&, CMsg&, CVal&, Cancel&, MFlag&, RV&
    RV&=1
    FormName$=ZFormNameH(hDlg&)
    SELECT CASE AS LONG Mode&
        CASE 0  ' %WM_MENUSELECT
            MenuID&=LOWRD(wParam&)
            MFlag&=HIWRD(wParam&)
            IF  HIWRD(wParam&)=&HFFFF?? AND lParam&=0 THEN
                CMsg&=%EZ_MenuClose
            ELSE
                CMsg&=%EZ_Selected
                IF (MFlag& AND %MF_SYSMENU) = %MF_SYSMENU THEN
                     CMsg&=%EZ_SMSelected
                END IF
                IF (MFlag& AND %MF_POPUP) = %MF_POPUP THEN
                    ' MenuID& contains index of item since it displays a drop down or submenu
                    MenuID&=GetMenuIDByPos(lParam&, MenuID&)
                END IF
            END IF
            CVal&=lParam&   ' menu handle
        CASE 1  ' %WM_INITMENUPOPUP
            CVal&=wParam&
            IF GetMenuItemCount(wParam&)>=1 THEN
                MenuID&=GetMenuIDByPos(wParam&, 0)
            ELSE
                MenuID&=0
            END IF
            CMsg&=%EZ_MenuShow
        CASE ELSE
            EXIT FUNCTION
    END SELECT
    Cancel&=0
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, MenuID&, CMsg&, CVal&, Cancel&)
    FUNCTION=RV&
END FUNCTION

'%EZ_ChangeZOrder =   60
'%EZ_ChangeSize   =   61
'%EZ_ChangePos    =   62

SUB ZPosChanging(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG)
    LOCAL WP AS WINDOWPOS PTR
    WP=lParam
    IF (@WP.flags AND %SWP_NOZORDER) = 0 THEN
        IF ProcessDMessage(hDlg, %EZ_ChangeZOrder, @WP.hWndInsertAfter) THEN
            @WP.flags=@WP.flags OR %SWP_NOZORDER
        END IF
    END IF
    IF (@WP.flags AND %SWP_NOSIZE) = 0 THEN
        IF ProcessDMessage(hDlg, %EZ_ChangeSize, MAKLNG(@WP.cx,@WP.cy)) THEN
            @WP.flags=@WP.flags OR %SWP_NOSIZE
        END IF
    END IF
    IF (@WP.flags AND %SWP_NOMOVE) = 0 THEN
        IF ProcessDMessage(hDlg, %EZ_ChangePos, MAKLNG(@WP.x,@WP.y)) THEN
            @WP.flags=@WP.flags OR %SWP_NOMOVE
        END IF
    END IF
END SUB

FUNCTION ZNextDlgCtl(BYVAL hDlg&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&) AS LONG
    LOCAL hCtrl&, CVal&
    IF LOWRD(lParam&)<>0 THEN
        hCtrl&=wParam&
    ELSE
        hCtrl&=GetNextDlgTabItem(hDlg&,GetFocus,wParam&)
    END IF
    IF ProcessDMessage(hDlg&, %EZ_NextCtrl, hCtrl&) THEN
        FUNCTION=0
        EXIT FUNCTION
    END IF
    CVal&=hCtrl&
    SELECT CASE AS LONG ProcessEZCommands(hDlg&, %EZ_DoDefFocus, hCtrl&, CVal&)     'pass control handle in CVal&
         CASE 0     ' default processing
              FUNCTION = DefDlgProc(hDlg&, Msg&, wParam&, lParam&)
              EXIT FUNCTION
         CASE 1     ' set focus
              SetFocus hCtrl&
         CASE 2     ' do nothing
         CASE ELSE
    END SELECT
    FUNCTION=0
END FUNCTION

GLOBAL App_hFindDefButton&

SUB ZFindDefButton(BYVAL hCtrl AS LONG)
    LOCAL Style&, Tmp&
    IF ZGetClass(hCtrl)="BUTTON" THEN
        Style&=GetWindowLong(hCtrl, %GWL_STYLE)
        Tmp&=Style& AND 15
        IF Tmp&=%BS_DEFPUSHBUTTON THEN
            App_hFindDefButton&=hCtrl&
        END IF
    END IF
END SUB

FUNCTION FindDEFIDProc(BYVAL hCtrl&, BYVAL lParam&) AS LONG
    ZFindDefButton hCtrl&
    IF App_hFindDefButton&=0 THEN
        FUNCTION=%TRUE
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

SUB ZSetFirstFocus(BYVAL hDlg&)
    App_hFindDefButton&=0
    EnumChildWindows hDlg&, CODEPTR(FindDEFIDProc), 0
    IF ProcessDMessage(hDlg&, %EZ_AllowFirstCtrl, 0)<>0 THEN EXIT SUB
    IF App_hFindDefButton&<>0 THEN
        hDlg&=ZGetParentForm(App_hFindDefButton&)
        IF ProcessDMessage(hDlg&, %EZ_NextCtrl, App_hFindDefButton&)=0 THEN
            SetFocus App_hFindDefButton&
        END IF
    ELSE
        PostMessage hDlg&, %WM_NEXTDLGCTL, GetNextDlgTabItem(hDlg&,0,0), %TRUE
    END IF
END SUB


FUNCTION IsNotODButtonKey(BYVAL hDlg&, BYVAL wParam&, BYVAL lParam&) AS LONG
    LOCAL RV&, VK&, HB&, WS&
    STATIC LastCtrl&
    RV&=1
    IF lParam&<>0 THEN
        IF ZGetClass(lParam&)="BUTTON" THEN
            WS&=GetWindowLong(lParam&, %GWL_STYLE) AND &HF&
            IF WS&=%BS_OWNERDRAW THEN
                IF HIWRD(wParam&)=%BN_CLICKED THEN
                   IF lParam&<>LastCtrl& THEN
                       VK&=GetKeyState(%VK_MENU)
                       HB&=BIT(VK&,31)
                       IF HB&=1 THEN    ' ALT Key is down
                           RV&=0   ' prevent message from being processed first time
                           LastCtrl&=lParam&
                           PostMessage hDlg&, %WM_COMMAND, wParam&, lParam&
                       END IF
                    ELSE
                        LastCtrl&=0
                    END IF
               END IF
           END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

'TYPE HELPINFO
'  cbSize AS LONG
'  iContextType AS LONG
'  iCtrlId AS LONG
'  hItemHandle AS LONG
'  dwContextId AS LONG
'  MousePos AS POINTAPI
'END TYPE

GLOBAL App_HInfo() AS LONG
GLOBAL App_HInfoFlag&

SUB EZ_GetHelpInfo(IDNum&, X&, Y&, HID&) EXPORT10
    IF App_HInfoFlag& THEN
        IDNum&=App_HInfo(1)
        X&=App_HInfo(2)
        Y&=App_HInfo(3)
        HID&=App_HInfo(4)
    ELSE
        IDNum&=0
        X&=0
        Y&=0
        HID&=0
    END IF
END SUB


FUNCTION zDo_WM_HELP(BYVAL hDlg&, BYVAL hChildWnd&, BYVAL lParam&) AS LONG
    LOCAL HLP AS HELPINFO PTR
    LOCAL IDNum&, CMsg&, CVal&, FormName$, Cancel&
    STATIC FFlag&
    IF FFlag&=0 THEN
        FFlag&=1
        REDIM App_HInfo(1 TO 10) AS LONG
    END IF
    HLP=lParam&
    App_HInfoFlag&=1
    App_HInfo(1)=@HLP.iCtrlId
    App_HInfo(2)=@HLP.MousePos.x
    App_HInfo(3)=@HLP.MousePos.y
    App_HInfo(4)=@HLP.dwContextId
    App_HInfo(5)=@HLP.hItemHandle
    App_HInfo(6)=@HLP.iContextType

'    %EZ_HelpShow    =   35
'    %EZ_HelpShowC   =   36
'    %EZ_HelpShowM   =   37
'    %EZ_HelpShowID  =   38


    SELECT CASE AS LONG @HLP.iContextType
        CASE %HELPINFO_MENUITEM
            CMsg&=%EZ_HelpShowM
            CVal&=@HLP.iCtrlId
        CASE %HELPINFO_WINDOW
            IF @HLP.dwContextId<>0 THEN
                CVal&=@HLP.dwContextId
                CMsg&=%EZ_HelpShowID
            ELSE
                CVal&=@HLP.iCtrlId
                CMsg&=%EZ_HelpShowC
            END IF
        CASE ELSE
            EXIT FUNCTION
    END SELECT
    IF hChildWnd&<>0 THEN
        FormName$=ZFormNameH(GetParent(hChildWnd&))
        CMsg&=%EZ_HelpShow  ' control only
        IDNum&=GetDlgCtrlID(hChildWnd&)
        IF IDNum&<>@HLP.iCtrlId THEN
            @HLP.iCtrlId=IDNum&
        END IF
        CVal&=@HLP.dwContextId
    ELSE
        FormName$=ZFormNameH(hDlg&)
        IDNum&=0
    END IF
    Cancel&=0
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, IDNum&, CMsg&, CVal&, Cancel&)
    App_HInfoFlag&=0
    IF CMsg&=%EZ_HelpShow THEN  ' control only
        @HLP.dwContextId=CVal&  ' allow control to set Help ID requested
    END IF
    FUNCTION=Cancel&
END FUNCTION

FUNCTION zIsFormComponent(BYVAL hDlg AS LONG) AS LONG
    IF ZGetClass(hDlg)="EZGUI_TYPE3_32" THEN ' component form class
        IF ZIsChildForm(hDlg) THEN
            FUNCTION=1
        ELSE
            FUNCTION=0
        END IF
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

DECLARE SUB ZGetSetUserData(FormName$,BYVAL hDlg&, N&, V&, BYVAL Mode&)

SUB EZ_SetCmpAttr(BYVAL FormName$, BYVAL IDNum&, BYVAL N&, BYVAL V&) EXPORT10
    LOCAL hDlg&
    hDlg&=ezHandle(FormName$,IDNum&,1)
    IF zIsFormComponent(hDlg&) THEN
        SendMessage hDlg&, %WM_SETCMPVAL, N&, V&
        IF IDNum&<>0 THEN
            SendMessage hDlg&, %WM_SETCMPVALUP, N&, 0
        END IF
    END IF
END SUB

FUNCTION EZ_GetCmpAttr(BYVAL FormName$, BYVAL IDNum&, BYVAL N&) EXPORT10 AS LONG
    LOCAL hDlg&, RV&
    RV&=0
    hDlg&=ezHandle(FormName$,IDNum&,1)
    IF zIsFormComponent(hDlg&) THEN
        RV&=SendMessage(hDlg&, %WM_GETCMPVAL, N&, 0)
    END IF
    FUNCTION=RV&
END FUNCTION



GLOBAL App_ComponentAttrStr1$
GLOBAL App_ComponentAttrStr2$

SUB EZ_SetCmp(BYVAL FormName$, IDNum&, BYVAL CmpCommand$, BYVAL D$) EXPORT10
    LOCAL hDlg&
    IF IDNum&=0 THEN EXIT SUB
    App_ComponentAttrStr1$=UCASE$(CmpCommand$)
    App_ComponentAttrStr2$=D$
    hDlg&=ezHandle(FormName$,IDNum&,1)
    IF zIsFormComponent(hDlg&) THEN
        SendMessage hDlg&,%WM_SETCMPBYSTR,0,0
    END IF
    App_ComponentAttrStr1$=""
    App_ComponentAttrStr2$=""
END SUB

FUNCTION EZ_GetCmp(BYVAL FormName$, IDNum&, BYVAL CmpCommand$) EXPORT10 AS STRING
    LOCAL hDlg&
    App_ComponentAttrStr1$=UCASE$(CmpCommand$)
    App_ComponentAttrStr2$=""
    IF IDNum&<>0 THEN
        hDlg&=ezHandle(FormName$,IDNum&,1)
        IF zIsFormComponent(hDlg&) THEN
            SendMessage hDlg&,%WM_GETCMPBYSTR,0,0
        END IF
    END IF
    App_ComponentAttrStr1$=""
    FUNCTION=App_ComponentAttrStr2$
    App_ComponentAttrStr2$=""
END FUNCTION

SUB EZ_CmpGetData(Cmd$, D$) EXPORT10
    Cmd$=App_ComponentAttrStr1$
    D$=App_ComponentAttrStr2$
END SUB

SUB EZ_CmpSetData(BYVAL D$) EXPORT10
    App_ComponentAttrStr2$=D$
END SUB



GLOBAL App_ComponentCurrentRecord&

GLOBAL App_ControlResizeState&

FUNCTION IsPageForm(BYVAL hDlg&) AS LONG
    LOCAL RV&, WS&
    RV&=0
    WS&=GetWindowLong(hDlg&, %GWL_STYLE) AND %WS_CHILD
    IF WS&=%WS_CHILD THEN
        WS&=GetWindowLong(hDlg&, %GWL_EXSTYLE) AND %WS_EX_MDICHILD
        IF WS&=0 THEN RV&=1 ' not a MDI child
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_CMPName(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS STRING
    LOCAL RV$, hDlg&
    RV$=""
    hDlg&=ezHandle(FormName$,IDNum&,1)
    IF zIsFormComponent(hDlg&) THEN
        RV$=ZFormNameH(hDlg&)
    END IF
    FUNCTION=RV$
END FUNCTION

FUNCTION GetSizePass(BYVAL hDlg&) AS LONG
     FUNCTION=GetProp(hDlg&, BYVAL MAKLNG(AppFormStateAtom1&,0))
END FUNCTION

SUB SetSizePass(BYVAL hDlg&, BYVAL Mode&)
     SetProp hDlg&, BYVAL MAKLNG(AppFormStateAtom1&,0), Mode&
END SUB

FUNCTION GetMovePass(BYVAL hDlg&) AS LONG
     FUNCTION=GetProp(hDlg&, BYVAL MAKLNG(AppFormStateAtom2&,0))
END FUNCTION

SUB SetMovePass(BYVAL hDlg&, BYVAL Mode&)
     SetProp hDlg&, BYVAL MAKLNG(AppFormStateAtom2&,0), Mode&
END SUB

%Max_WMP  =    100

DECLARE FUNCTION PrintWindowX(BYVAL hWnd&, BYVAL hDC&, BYVAL nFlag&) AS LONG

SUB DoWMPrint(BYVAL hDlg AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG)
     LOCAL ZW$,ZWT$, CT&, hChild&, hWnd&, WS&, CN$, TP$, ACT&, I&
     LOCAL R AS RECT, R2 AS RECT, PX&,PY&, WFlag&, lPar&, hRgn&, E&, J&, RV&
     STATIC FFlag&, WMP_CT&, WMP&(), HowDeep&, PrtWin AS DWORD
     IF FFlag&=0 THEN
          REDIM WMP&(1 TO %Max_WMP,1 TO 2)
          WMP_CT&=0
          FFlag&=1
          HowDeep&=0
          PrtWin=zGetDLLProcAddress("user32.dll", "PrintWindow")
     END IF
     IF (lParam AND %PRF_CHILDREN)=0 THEN EXIT SUB
     HowDeep&=HowDeep&+1
     CT&=0
     ACT&=0
     ZW$=""
     ZWT$=""
     hChild&=GetWindow(hDlg&,%GW_CHILD)
     IF hChild&<>0 THEN
          IF IsWindow(hChild&) THEN
               CT&=CT&+1
               WS&=GetWindowLong(hChild&,%GWL_STYLE)
               IF (WS& AND %WS_VISIBLE)=%WS_VISIBLE THEN
'               IF IsWindowVisible(hChild&) THEN
                    hWnd&=hChild&
                    GOSUB TestChildW
               END IF
               DO
                    hWnd&=GetWindow(hChild&, %GW_HWNDNEXT)
                    IF hWnd&=0 THEN EXIT DO
                    CT&=CT&+1
                    IF CT&>=10000 THEN EXIT DO
                    IF IsWindow(hWnd&) THEN
                         IF GetParent(hWnd&)=hDlg THEN
                              WS&=GetWindowLong(hWnd&,%GWL_STYLE)
                              IF (WS& AND %WS_VISIBLE)=%WS_VISIBLE THEN
'                              IF IsWindowVisible(hWnd&) THEN
                                  GOSUB TestChildW
                              END IF
                         END IF
                    END IF
                    hChild&=hWnd&
               LOOP
          END IF
          IF Act&<>0 THEN
               WFlag&=0
               IF WMP_CT&<%Max_WMP THEN
                    WFlag&=1
                    WMP_CT&=WMP_CT&+1
               END IF
'              lParam=lParam OR %PRF_NONCLIENT OR %PRF_CHILDREN
               IF (lParam AND %PRF_NONCLIENT)=%PRF_NONCLIENT THEN
                    GetWindowRect hDlg, R
                    R2.nLeft=0
                    R2.nTop=0
                    ClientToScreen hDlg, BYVAL VARPTR(R2)
                    PX&=R2.nLeft-R.nLeft
                    PY&=R2.nTop-R.nTop
               ELSE
                    PX&=0
                    PY&=0
               END IF
               IF HowDeep&>1 THEN ' calculate offset in parents client area after first level
                    GetWindowRect hDlg, R
                    ScreenToClient GetParent(hDlg), BYVAL VARPTR(R)
                    PX&=PX&+R.nLeft
                    PY&=PY&+R.nTop
               END IF
               IF WFlag& THEN
                    WMP&(WMP_CT&,1)=PX&
                    WMP&(WMP_CT&,2)=PY&
                    IF WMP_CT&>1 THEN
                         FOR J&=1 TO WMP_CT&-1
                              PX&=PX&+WMP&(J&,1)
                              PY&=PY&+WMP&(J&,2)
                         NEXT J&
                    END IF
               END IF
               ' not working quite right yet !
               lPar&=%PRF_CHILDREN OR %PRF_CLIENT OR %PRF_ERASEBKGND OR %PRF_NONCLIENT
               ' assume mapmode is MM_TEXT
               FOR I&=Act& TO 1 STEP -1
                    hWnd&=CVL(MID$(ZW$,((I&-1)*4)+1,4))
                    GetWindowRect hWnd&, R
                    ScreenToClient hDlg, BYVAL VARPTR(R)
                    R.nLeft=R.nLeft+PX&
                    R.nTop=R.nTop+PY&
                    DPtoLP wParam,BYVAL VARPTR(R), 1
                    SaveDC wParam
                    GetWindowOrgEx wParam, BYVAL VARPTR(R2)
                    SetWindoworgEx wParam, R2.nLeft-R.nLeft, R2.nTop-R.nTop, BYVAL %NULL
                    ' I need to handle regions now to finish it up
                    hRgn&=CreateRectRgn(0,0,0,0)
                    E&=GetWindowRgn(hWnd&, hRgn&)
                    IF E&<>0 THEN  ' no error and window has a region
                         SelectClipRgn wParam, hRgn&
                         OffsetClipRgn wParam,R.nLeft-R2.nLeft, R.nTop-R2.nTop
                    END IF
                    IF MID$(ZWT$,I&,1)="F" THEN   ' EZGUI form
                         SendMessage hWnd&, Msg, wParam,lPar&
                    ELSE
                         IF PrtWin=0 THEN
                              SendMessage hWnd&, Msg, wParam,lPar&
                         ELSE
                              CALL DWORD PrtWin USING PrintWindowX(hWnd&, wParam, 0) TO RV&
                              IF RV&=0 THEN  ' failed
                                   SendMessage hWnd&, Msg, wParam,lPar&
                              END IF
                         END IF
                    END IF
                    SetWindoworgEx wParam, R2.nLeft, R2.nTop, BYVAL %NULL

                    IF GetObjectType(hRgn&)=%OBJ_REGION THEN DeleteObject hRgn&  ' delete region no matter what since error does not destroy original region
                    RestoreDC wParam, -1
               NEXT I&
               IF WFlag& THEN
                    WMP_CT&=WMP_CT&-1
               END IF
          END IF

     END IF
     HowDeep&=HowDeep&-1
     EXIT SUB

TestChildW:
     CN$=zGetClass(hWnd&)
     IF CN$<>"TOOLTIPS_CLASS32" THEN
          IF LEFT$(CN$,10)="EZGUI_TYPE" THEN TP$="F" ELSE TP$="C"
          ACT&=ACT&+1
          ZWT$=ZWT$+TP$
          ZW$=ZW$+MKL$(hWnd&)
     END IF
RETURN

END SUB

FUNCTION WndProc(BYVAL hDlg   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) AS LONG

LOCAL Action AS LONG, X&, AFNum&, S&, DLGFlag&, RV&, hCtrl AS LONG
LOCAL zC AS ASCIIZ*32, zCP AS ASCIIZ*32, D$, PT AS POINTAPI, hWnd AS LONG
LOCAL WTP&, hParent AS LONG, DialogAddress&, TTS&, RFlag&, WS&, CFlag&, CV&, C&, lPar&
STATIC DrawFlag&, EraseFlag&, PrevWS&, VFlag&
STATIC OldlParam&


Action=%FALSE

' If Message is processed then set Action=%TRUE
IF App_WedgeDProc<>0 THEN
   CALL DWORD App_WedgeDProc USING EZ_DlgProcX(hDlg, Msg, wParam, lParam) TO Action
   IF Action<>0 THEN
      FUNCTION=Action
      EXIT FUNCTION
   END IF
END IF

IF App_WedgeDProcEx<>0 THEN
   DIM RVEx&
   RVEx&=0
   CALL DWORD App_WedgeDProcEx USING EZ_DlgProcXEx(hDlg, Msg, wParam, lParam, RVEx&) TO Action
   IF Action<>0 THEN
      FUNCTION=RVEx&
      EXIT FUNCTION
   END IF
END IF

'IF WLF_Loaded& THEN
'    IF GetMyWindowLong(hDlg, 2)=3 THEN
'        ' This is a WinLift window
'        IF WLF_CheckMessage<>0 THEN
'            CALL DWORD WLF_CheckMessage USING WLF_CheckMessageX(hDlg, Msg, wParam, lParam) TO Action
            ' Call the Skin Engine !!!
'            IF Action<>0 THEN FUNCTION = Action: EXIT FUNCTION
'        END IF
'    END IF

'END IF

' DEBUG CODE
' ----------------------------------------------------
'select case Msg
'    case %WM_CREATE, %WM_DESTROY, %WM_CLOSE
'    case else
'        FUNCTION = DefDlgProc(hDlg, Msg, wParam, lParam)
'        exit function
'end select
' ----------------------------------------------------

SELECT CASE AS LONG Msg
   CASE %WM_SETCURSOR
      ' Windows does NOT poll this message for cursor handle when SetCapture is active !
      IF App_AllowCursorEvent&<>0 THEN
          IF hDlg=wParam THEN
              IF ProcessDMessage(hDlg, %EZ_SelectCursor, LOWRD(lParam)) THEN
                  FUNCTION=1
                  EXIT FUNCTION
              END IF
          ELSE
              IF ProcessEZCommands (hDlg, %EZ_SelectCursor, wParam, LOWRD(lParam)) THEN
                  FUNCTION=1
                  EXIT FUNCTION
              END IF
          END IF
      END IF
      IF LOWRD(lParam)=%HTCLIENT THEN
         IF (App_Capture&<>0) AND (App_Capture_hWnd&=hDlg) THEN
            IF App_DCursor1&>0 AND App_DCursor1&<=UBOUND(AppCursor) THEN    ' 0 index means use default
               IF AppCursor(App_DCursor1&)<>0 THEN
                   SetCursor AppCursor(App_DCursor1&)
                   FUNCTION=0
                   EXIT FUNCTION
               END IF
            END IF
         ELSE
           IF App_WCursor&>0 AND App_WCursor&<=UBOUND(AppCursor) THEN
                IF AppCursor(App_WCursor&)<>0 THEN
                    SetCursor AppCursor(App_WCursor&)
                    FUNCTION=0
                    EXIT FUNCTION
                END IF
           END IF
         END IF
      END IF
   CASE %WM_DRAWITEM
        FUNCTION=ZDrawItem(hDlg, wParam, lParam)
        EXIT FUNCTION
   CASE %WM_MEASUREITEM
        FUNCTION=ZMeasureItem(hDlg, wParam, lParam)
        EXIT FUNCTION
   CASE %WM_CTLCOLOREDIT TO %WM_CTLCOLORSTATIC
      DLGFlag&=0
      IF Msg=%WM_CTLCOLORDLG THEN DLGFlag&=1
      Action=ZColorProc(hDlg, wParam, TestColor(lParam), DLGFlag&)
      IF Action<>0 THEN
          FUNCTION=Action
          EXIT FUNCTION
      END IF
   CASE %WM_USER_EVENT
       FUNCTION=ZSendThreadEvent(hDlg, wParam, lParam&, 0)
       EXIT FUNCTION
   CASE %WM_USER_EVENTP
       FUNCTION=ZSendThreadEvent(hDlg, wParam, lParam&, 1)
       EXIT FUNCTION
   CASE %WM_USER_CEVENT
       ZSendCustomEvent hDlg&, wParam&, lParam&
       FUNCTION=0
       EXIT FUNCTION
   CASE %WM_VSCROLL, %WM_HSCROLL
      IF ZScrollProc(hDlg, Msg, wParam, lParam) THEN
          FUNCTION=0
          EXIT FUNCTION
      END IF
   CASE %WM_COMPAREITEM
       FUNCTION=ZCompareItems(hDlg, Msg, wParam, lParam)
       EXIT FUNCTION
   CASE %WM_MENUSELECT
       IF ZMenuSelect(hDlg, wParam, lParam, 0) THEN
           FUNCTION=0
           EXIT FUNCTION
       END IF
   CASE %WM_INITMENUPOPUP
       IF ZMenuSelect(hDlg, wParam, lParam, 1) THEN
           FUNCTION=0
           EXIT FUNCTION
       END IF
   CASE %WM_SETCMPVAL
        IF zIsFormComponent(hDlg) THEN
            IF wParam>=1 AND wParam<=75 THEN
                wParam=wParam+26
                D$=""
                ZGetSetUserData D$, hDlg, wParam, lParam, 1
            END IF
        END IF
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_SETCMPVALUP
        IF zIsFormComponent(hDlg) THEN
            IF wParam>=1 AND wParam<=75 THEN
                X&=ProcessDMessage(hDlg, %EZ_AttrUpdated, wParam)
            END IF
        END IF
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_GETCMPVAL
        RV&=0
        IF zIsFormComponent(hDlg) THEN
            IF wParam>=1 AND wParam<=75 THEN
                wParam=wParam+26
                D$=""
                ZGetSetUserData D$, hDlg, wParam, RV&, 0
            END IF
        END IF
        FUNCTION=RV&
        EXIT FUNCTION
'   CASE %WM_SETTEXT
'        RV&=0
'        GOSUB DoDefaultWinProc
'        X&=0
'        X&=ProcessDMessage(hDlg, %EZ_TextUpdated, X&)
'        FUNCTION=RV&
'        EXIT FUNCTION
   CASE %WM_SETCMPTEXT   ' simply generates an event
        X&=ProcessDMessage(hDlg, %EZ_TextUpdated, wParam)
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_SETCMPSTATE
        X&=0
        D$=""
        SELECT CASE AS LONG LOWRD(wParam)  ' state flag    (26 if offset for user data indexes so 27 would be #1)
            CASE 1
                ZGetSetUserData D$, hDlg, 26+1, HIWRD(wParam), 1    ' FG color
                ZGetSetUserData D$, hDlg, 26+2, lParam, 1           ' BG color
                X&=ProcessDMessage(hDlg, %EZ_ColorUpdated, lParam)
            CASE 2
                ZGetSetUserData D$, hDlg, 26+3, lParam, 1           ' Font
                X&=ProcessDMessage(hDlg, %EZ_FontUpdated, lParam)
            CASE 3
                ZGetSetUserData D$, hDlg, 26+4, lParam, 1           ' Selected item
                X&=ProcessDMessage(hDlg, %EZ_SelUpdated, lParam)
            CASE 4
                X&=ProcessDMessage(hDlg, %EZ_ClearUpdated, X&)      ' clear component
            CASE 5
                ZGetSetUserData D$, hDlg, 26+5, lParam, 1           ' Bitmap
                X&=ProcessDMessage(hDlg, %EZ_BitmapUpdated, lParam)
            CASE 6
                ZGetSetUserData D$, hDlg, 26+6, lParam, 1           ' Icon
                X&=ProcessDMessage(hDlg, %EZ_IconUpdated, lParam)
            CASE ELSE
        END SELECT
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_SETCMPBYSTR
        X&=0
        X&=ProcessDMessage(hDlg, %EZ_CmpSet, X&)
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_GETCMPBYSTR
        X&=0
        X&=ProcessDMessage(hDlg, %EZ_CmpGet, X&)
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_ERASEBKGND
          IF ZEraseBG(hDlg, wParam, lParam, 1) THEN
              FUNCTION=1
              EXIT FUNCTION
          END IF
    CASE %WM_PRINT
          IF App_UseAltWMPrint& THEN
              lPar&=lParam
              IF (lParam AND %PRF_CHILDREN)=%PRF_CHILDREN THEN
                   lParam=lParam AND (NOT %PRF_CHILDREN)
                   SaveDC wParam
                   GOSUB DoDefaultWinProc
                   RestoreDC wParam, -1
                   lParam=lPar&
                   DoWMPrint hDlg, Msg, wParam, lParam
              ELSE
                   SaveDC wParam
                   GOSUB DoDefaultWinProc
                   RestoreDC wParam, -1
              END IF
              FUNCTION=RV&    ' GOSUB DoDefaultWinProc returns a value in RV&
              EXIT FUNCTION
         END IF
    CASE %WM_PRINTCLIENT
        LOCAL OKFlag&
        IF (lParam AND %PRF_ERASEBKGND)=%PRF_ERASEBKGND THEN
            OKFlag&=1
            IF (lParam AND %PRF_CHECKVISIBLE)=%PRF_CHECKVISIBLE THEN
                IF IsWindowVisible(hWnd)=0 THEN OKFlag&=0
            END IF
            IF OKFlag& THEN
                IF ZEraseBG(hDlg, wParam, lParam, 0) THEN
                    FUNCTION=0
                    EXIT FUNCTION
                END IF
            END IF
        END IF
   CASE %WM_COMMAND  ' Message from controls, menu and accelerators
      IF IsNotODButtonKey(hDlg,wParam,lParam) THEN
          TestComboLBoxV wParam, lParam
          IF ProcessWinCommands(ZFormNameH(hDlg), hDlg, HIWRD(wParam), LOWRD(wParam), lParam) THEN
             FUNCTION=0
             EXIT FUNCTION
          END IF
      ELSE
          FUNCTION=0
          EXIT FUNCTION
      END IF
   CASE %WM_TIMER
      ZTimer hDlg, wParam
      FUNCTION=0
      EXIT FUNCTION
'   CASE %WM_NCCREATE
'        RV&=0
'        GOSUB DoDefaultWinProc
'        X&=ZCalcClientSize(hDlg, wParam, lParam)
'        FUNCTION=RV&
'        EXIT FUNCTION
   CASE %WM_CREATE
       ' set control ID for components
      RFlag&=0
      IF App_ComponentID&<>0 THEN
          SetWindowLong hDlg, %GWL_ID, App_ComponentID&
          RFlag&=1
      ELSE
          IF IsPageForm(hDlg) THEN RFlag&=1
      END IF
      App_ComponentID&=0


      AFNum&=AppWinNumber&
      AppWinNumber&=0   ' Use to get Form Number only during WM_CREATE
      D$=LTRIM$(RTRIM$(AppForms(AFNum&).FCaption))
      IF D$<>"" THEN
         D$=D$+CHR$(0)
         SetWindowText hDlg, BYVAL STRPTR(D$)
      END IF
      WTP&=AppForms(AFNum&).FType
      SetMyWindowLong hDlg, 1, AFNum&       ' Save Form Number in extra Window Longs
      SetMyWindowLong hDlg, 2, WTP&  ' Save Window Class Type (1,2,3)
      ' -----------------------------------------------
      ' New Form Properties for EZ_FormEx
      SetProp hDlg, BYVAL MAKLNG(AppFormGAtom1&,0), App_FormJumpAddress1   ' pointer to Forms unique DesignWindow routine
      SetProp hDlg, BYVAL MAKLNG(AppFormGAtom2&,0), App_FormJumpAddress2   ' pointer to Forms unique Events routine

      SetProp hDlg, BYVAL MAKLNG(AppFormStateAtom1&,0),0    ' if zero then ignore size event
      SetProp hDlg, BYVAL MAKLNG(AppFormStateAtom2&,0),0    ' if zero then ignore move event
      App_FormJumpAddress1=0    ' clear for next form
      App_FormJumpAddress2=0    ' clear for next form
      ' -----------------------------------------------
      IF zIsFormComponent(hDlg) THEN
          SendMessage hDlg, %WM_SETCMPVAL, 1, EZ_FG
          SendMessage hDlg, %WM_SETCMPVAL, 2, EZ_BG
          SendMessage hDlg, %WM_SETCMPVAL, 3, EZ_Font
      END IF

      AppForms(AFNum&).FhWnd=hDlg
      IF AppForms(AFNum&).FModal THEN
          IF GetParent(hDlg)<>0 THEN
            EnableWindow GetParent(hDlg), 0   ' Disable Parent window
          END IF
      END IF
      IF AppForms(AFNum&).FSpecial=2 THEN
          D$=LTRIM$(RTRIM$(AppForms(AFNum&).FParentName))
          hWnd=PBVFormHandle(D$)
          IF hWnd=0 THEN hWnd=GetParent(hDlg)
          SetParent hDlg, hWnd
          X&=GetWindowLong(hDlg,%GWL_STYLE)
          X&=(X& AND (NOT %WS_POPUP)) OR %WS_CHILD
          SetWindowLong hDlg, %GWL_STYLE, X&
          X&=GetWindowLong(hDlg,%GWL_EXSTYLE)
          X&=X& OR %WS_EX_CONTROLPARENT
          SetWindowLong hDlg, %GWL_EXSTYLE, X&
      END IF
      GOSUB InitD
      IF WTP&=4 OR WTP&=5 THEN      ' Mdi Forms
          IF App_FormDialogProc<>0 THEN
              SetWindowLong hDlg, %DWL_DLGPROC, BYVAL App_FormDialogProc
              App_FormDialogProc=0
          END IF
      END IF

      IF WTP&=4 OR WTP&=5 THEN
            IF WTP&=4 THEN
                X&=GetMyWindowLong(hDlg, 1)
                X& = DefFrameProc(hDlg,AppForms(X&).FhWnd2,Msg,wParam,lParam)
            ELSE
                X& = DefMDIChildProc(hDlg,Msg,wParam,lParam)
            END IF
            IF WTP&=5 THEN
                IF IsWindowVisible(GetParent(hDlg)) THEN
                    PostMessage GetParent(hDlg), %WM_MDIACTIVATE, hDlg,0
                END IF
            END IF
            DialogAddress&=GetWindowLong(hDlg, %DWL_DLGPROC)
            IF DialogAddress&<>0 THEN
                RV&=CallWindowProc(BYVAL DialogAddress&, hDlg, %WM_INITDIALOG, GetNextDlgTabItem(hDlg,0,0),0)
                IF WTP&=4 THEN
                    IF RV&<>0 THEN
                        ZSetFirstFocus hDlg
                    END IF
                END IF
            END IF
            FUNCTION=X&
            EXIT FUNCTION
      ELSE
           ZSetFirstFocus hDlg
      END IF
   CASE %WM_SHOWWINDOW
      IF GetMyWindowLong(hDlg, 2)<>5 THEN
          IF wParam THEN
             ZSetCurrent hDlg
          ELSE
             ZSetCurrent 0
          END IF
      END IF
   CASE %WM_NCACTIVATE
      X&=ZFormNumH(hDlg)
      IF X&<>0 THEN
          IF AppForms(X&).FSpecial=2 THEN
              IF wParam=0 THEN
                 ' hWnd=GetActiveWindow()
                  hWnd=AppCurrentDlg
                  IF hWnd<>0 THEN
                      IF IsChild(hWnd, hDlg) THEN
                          wParam=1
                          X& = DefDlgProc(hDlg, Msg, wParam, lParam)
'                          X& = DefWindowProc(hDlg, Msg, wParam, lParam)
                          FUNCTION=1
                          EXIT FUNCTION
                      END IF
                  END IF
              END IF
          END IF
      END IF
   CASE %WM_ACTIVATEAPP
          CV&=lParam
          C&=0
          IF wParam=0 THEN
              X&=ProcessDMessage(hDlg, %EZ_NoAppFocus, CV&)
              zSendAppEvent %EZ_NoAppFocus, CV&, C&
          ELSE
              X&=ProcessDMessage(hDlg, %EZ_AppFocus, CV&)
              zSendAppEvent %EZ_AppFocus, CV&, C&
          END IF
   CASE %WM_ACTIVATE
      IF GetMyWindowLong(hDlg, 2)<>5 THEN
          IF LOWRD(wParam)<>0 THEN
              ZSetCurrent hDlg
              X&=ProcessDMessage(hDlg, %EZ_Focus, 0)
          ELSE
              ZSetCurrent 0
              X&=ProcessDMessage(hDlg, %EZ_NoFocus,0 )
          END IF
      END IF
      IF GetMyWindowLong(hDlg, 2)=4 THEN    ' MDI parent
         hCtrl=EZ_MDIClientHandle(EZ_GetFormName(hDlg))
         IF hCtrl<>0 THEN
            hWnd=SendMessage(hCtrl,%WM_MDIGETACTIVE,0,0)
            IF hWnd<>0 THEN
                IF LOWRD(wParam)<>0 THEN
                    SendMessage hWnd, %WM_EZMDICHANGE,1,0
                ELSE
                    SendMessage hWnd, %WM_EZMDICHANGE,0,0
                END IF
            END IF
         END IF
      END IF
   CASE %WM_NCLBUTTONDOWN, %WM_NCMBUTTONDOWN, %WM_NCRBUTTONDOWN, _
        %WM_NCLBUTTONUP, %WM_NCMBUTTONUP, %WM_NCRBUTTONUP, %WM_NCLBUTTONDBLCLK
       SELECT CASE AS LONG wParam
           CASE %HTCAPTION
               IF Msg=%WM_NCLBUTTONDOWN THEN
                   IF ProcessDMessage(hDlg, %EZ_DragForm, lParam) THEN
                        FUNCTION=0
                        EXIT FUNCTION
                   END IF
               END IF
               IF Msg=%WM_NCRBUTTONUP OR Msg=%WM_NCRBUTTONDOWN THEN
                   IF ProcessDMessage(hDlg, %EZ_SysMenu, Msg) THEN
                        FUNCTION=0
                        EXIT FUNCTION
                   END IF
               END IF
               IF Msg=%WM_NCLBUTTONDBLCLK THEN
                   IF ProcessDMessage(hDlg, %EZ_DClickCap, lParam) THEN
                        FUNCTION=0
                        EXIT FUNCTION
                   END IF
               END IF
           CASE %HTSYSMENU
               IF Msg=%WM_NCRBUTTONUP OR Msg=%WM_NCLBUTTONDOWN OR Msg=%WM_NCRBUTTONDOWN OR %WM_NCLBUTTONUP THEN
                   IF ProcessDMessage(hDlg, %EZ_SysMenu, Msg) THEN
                        FUNCTION=0
                        EXIT FUNCTION
                   END IF
               END IF
           CASE ELSE
       END SELECT
       IF Msg=%WM_NCLBUTTONDOWN THEN
           GOSUB OwnedBDown
       END IF
   CASE %WM_LBUTTONDOWN
       GOSUB OwnedBDown
       IF App_Capture& THEN
            IF App_Capture_hWnd&=hDlg THEN
'                EZ_SetText "Main",0,"String len="+STR$(LEN(App_DragMultipleRect$))
                OldlParam&=lParam
                IF App_DragControl&=0 THEN
                    App_DragX1&=LOWRD(lParam)
                    App_DragY1&=HIWRD(lParam)
                    App_DragX2&=App_DragX1&+1
                    App_DragY2&=App_DragY1&+1
                ELSE
                    App_DragOX1&=LOWRD(lParam)
                    App_DragOY1&=HIWRD(lParam)
                    '  Control calculates coordinates in subclass proc
                    ' App_DragX1&=LOWRD(lParam)
                    ' App_DragY1&=HIWRD(lParam)
                    ' App_DragX2&=App_DragX1&
                    ' App_DragY2&=App_DragY1&
                END IF
                EraseFlag&=0
                IF App_DragControl&=0 THEN
                    IF LEN(App_DragMultipleRect$)=0 THEN ZSetDragToGrid hDlg, 1
                    lParam=MAKLNG(App_DragX1&,App_DragY1&)
                    X&=ProcessDMessage(hDlg, %EZ_Drag, lParam)
                END IF
                ' --------------
                ' allows drag rectangle to write on top of controls
                S&=GetWindowLong(hDlg, %GWL_STYLE)
                PrevWS&=S&
                S&=S& AND (NOT (%WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS))
                SetWindowLong hDlg, %GWL_STYLE, S&
                ' --------------
                SetCapture hDlg
                DrawFlag&=1
                ' --------------
                IF App_DragControl&=0 THEN
                    IF App_DCursor2&>0 AND App_DCursor2&<=UBOUND(AppCursor) THEN
                        IF AppCursor(App_DCursor2&)<>0 THEN
                            SetCursor AppCursor(App_DCursor2&)
                        END IF
                    END IF
                END IF
                FUNCTION=0
                EXIT FUNCTION
            ELSE
                X&=ProcessDMessage(hDlg, %EZ_LButtonDown, lParam)
            END IF
       ELSE
          App_IsInCapturableMsg&=1
          X&=ProcessDMessage(hDlg, %EZ_LButtonDown, lParam)
          App_IsInCapturableMsg&=0
       END IF
   CASE %WM_CAPTURECHANGED
       IF DrawFlag& THEN
           SendMessage App_Capture_hWnd&, %WM_LBUTTONUP, 0,MAKLNG(App_DragX2&,App_DragY2&)
       END IF
       X&=ProcessDMessage(hDlg, %EZ_CaptureOff, lParam)
   CASE %WM_FORCEDRAGSTOP
       IF DrawFlag& THEN
           SendMessage App_Capture_hWnd&, %WM_LBUTTONUP, 0,MAKLNG(App_DragOX1&,App_DragOY1&)
       END IF
       X&=ProcessDMessage(hDlg, %EZ_CaptureOff, lParam)
       FUNCTION=1
       EXIT FUNCTION
   CASE %WM_MOUSEMOVE
       IF App_Capture& THEN
            IF App_Capture_hWnd&=hDlg THEN
               IF DrawFlag& THEN
                   ' -----------------------------------------------------
                    IF lParam<>OldlParam& THEN  ' this is new to test with
                   '                              to prevent accidental drag
                   ' -----------------------------------------------------
                        ZDrawDragRect1 hDlg, lParam, EraseFlag&
                       ' -----------------------------------------------------
                        OldlParam&=lParam   ' this is new to test with
                    END IF
                   ' -----------------------------------------------------
                    FUNCTION=0
                    EXIT FUNCTION
               END IF
            END IF
       END IF
   CASE %WM_LBUTTONUP
       IF App_Capture& THEN
            IF App_Capture_hWnd&=hDlg THEN
               IF DrawFlag& THEN
                    PBVDrawDragRect hDlg , 4 ' XOR's over last Rectangle to restore
                    IF App_DragControl&=0 THEN
                        App_DragX2&=ZLOWRD(lParam)
                        App_DragY2&=ZHIWRD(lParam)
                        IF LEN(App_DragMultipleRect$)=0 THEN ZSetDragToGrid hDlg, 0
                        lParam=MAKLNG(App_DragX2&,App_DragY2&)
                    ELSE
                        ' -----------------------------------------------------
                        IF lParam<>OldlParam& THEN  ' this is new to test with
                        ' -----------------------------------------------------
                            ZCalcControlDrag hDlg, lParam
                        ' -----------------------------------------------------
                        END IF  ' this is new to test with
                        ' -----------------------------------------------------
                    END IF
                    DrawFlag&=0
                    App_Capture&=0
                    App_Capture_hWnd&=0

                    ' -------------------
                    App_EZ_SubClassStyle&=App_EZ_SubClassStyleOld&
                    ' return Visual Mode to normal
                    ' -------------------

'                    S&=GetWindowLong(hDlg, %GWL_STYLE)
'                    S&=S& OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS
                    S&=PrevWS&
                    SetWindowLong hDlg, %GWL_STYLE, S&
                    ' --------------

                    ReleaseCapture
                    ' InvalidateRect hDlg, BYVAL %NULL, %TRUE
                    ' UpdateWindow hDlg
                    IF App_DragControl&=0 THEN
                        X&=ProcessDMessage(hDlg, %EZ_Drop, lParam)
                    ELSE
                        ' remember that lParam has been modified above to snap to grid
                        PT.x=ZLOWRD(lParam)
                        PT.y=ZHIWRD(lParam)
                        ClientToScreen hDlg, PT
                        SendMessage App_DragControl&, %WM_NCLBUTTONUP, App_DragHitTest&, MAKLNG(PT.x,PT.y)
                        App_DragControl&=0
                        App_DragIsPageForm&=0
                    END IF
                    IF LEN(App_DragMultipleRect$)<>0 THEN App_DragMultipleRect$=""
                    FUNCTION=0
                    EXIT FUNCTION
               END IF
            END IF
            IF LEN(App_DragMultipleRect$)<>0 THEN App_DragMultipleRect$=""
       ELSE
            X&=ProcessDMessage(hDlg, %EZ_LButtonUp, lParam)
       END IF
   CASE %WM_NCHITTEST
        GOSUB DoDefaultWinProc
        X&=0
        SELECT CASE RV&
               CASE %HTTOPLEFT
                 X&=%EZ_Top OR %EZ_Left
               CASE %HTLEFT
                 X&=%EZ_Left
               CASE %HTBOTTOMLEFT
                 X&=%EZ_Bottom OR %EZ_Left
               CASE %HTTOPRIGHT
                 X&=%EZ_Top OR %EZ_Right
               CASE %HTRIGHT
                 X&=%EZ_Right
               CASE %HTBOTTOMRIGHT
                 X&=%EZ_Bottom OR %EZ_Right
               CASE %HTTOP
                 X&=%EZ_Top
'               CASE %HTCAPTION
'                 X&=%EZ_Center
               CASE %HTBOTTOM
                 X&=%EZ_Bottom
               CASE ELSE
        END SELECT
        IF X&<>0 THEN
             X&=ProcessDMessage(hDlg, %EZ_FormSizable, X&)
             IF X&<>0 THEN
                  RV&=%HTBORDER
             END IF
        END IF
        FUNCTION=RV&
        EXIT FUNCTION
   CASE %WM_LBUTTONDBLCLK
      X&=ProcessDMessage(hDlg, %EZ_LButtonDC, lParam)
   CASE %WM_MBUTTONUP
      X&=ProcessDMessage(hDlg, %EZ_MButtonUp, lParam)
   CASE %WM_RBUTTONUP
      X&=ProcessDMessage(hDlg, %EZ_RButtonUp, lParam)
   CASE %WM_MOVE
      IF GetMovePass(hDlg) THEN
          X&=ProcessDMessage(hDlg, %EZ_Move, lParam)
      END IF
   CASE %WM_NOTIFY
      RV&=0
      IF ZNotify(hDlg, lParam, RV&) THEN
         FUNCTION=RV&
         EXIT FUNCTION
      END IF
   CASE %WM_SIZING
      IF GetSizePass(hDlg) THEN
           X&=ProcessDMessage(hDlg, %EZ_Sizing, 0)
      END IF
   CASE %WM_SIZE
      DIM MovedFlag&
      LOCAL hRgn1&
      MovedFlag&=0
      IF GetSizePass(hDlg) THEN    ' never executed before WM_CREATE resizes initial size
          X&=ZFormNumH(hDlg)
          WS&=GetWindowLong(hDlg, %GWL_STYLE)
          IF (WS& AND %WS_CHILD)=%WS_CHILD THEN CFlag&=1 ELSE CFlag&=0
          IF X&<>0 THEN
              IF AppForms(X&).FSizable THEN
                  IF AppForms(X&).FSnapMode=1 THEN
                      ZSizeWindow hDlg, lParam , wParam, MovedFlag&
                  END IF
              END IF
          END IF
          IF MovedFlag&=0 THEN     ' not resized or moved for form grid
              IF CFlag& THEN
                   SELECT CASE ZGetClass(GetParent(hDlg))
                        CASE "SYSPAGER"
                             CFLag&=2
                        CASE "REBARWINDOW32"
                             CFlag&=3
                        CASE ELSE
                   END SELECT
              END IF
              IF CFlag&=2 THEN     ' pager control is parent
                   SendMessage GetParent(hDlg), %PGM_RECALCSIZE,0,0
              END IF
              IF App_DebugHandle&<>0 THEN
                  IF App_DebugHandle&=hDlg THEN
                        ZResizeDebug
                  END IF
              END IF
              IF X&<>0 THEN
                  SELECT CASE AS LONG wParam
                        CASE %SIZE_MAXIMIZED, %SIZE_RESTORED
                            IF AppForms(X&).FhToolbar<>0 THEN
                                SendMessage AppForms(X&).FhToolbar, %TB_AUTOSIZE, 0, 0
                            END IF
                            IF AppForms(X&).FhStatusbar<>0 THEN
                                SendMessage AppForms(X&).FhStatusbar, %WM_SIZE, wParam, lParam
                                InvalidateRect AppForms(X&).FhStatusbar, BYVAL %NULL, 1
                            END IF
                        CASE ELSE
                  END SELECT
              END IF
              IF X&<>0 THEN
                  ' do not autosize pager or rebar forms
'                  IF CFlag&<=1 THEN ezResizeForm X&, hDlg     ' resize controls if defined before generating any size events
                  hRgn1&=ezResizeForm(X&, hDlg)
                  RV&=ProcessDMessage(hDlg, %EZ_Size, 0)
                  IF hRgn1&<>0 THEN
'                        InvalidateRgn hDlg&, hRgn1&, 1
                        RedrawWindow hDlg,BYVAL %NULL, hRgn1&,%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
                        ' %RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
                        DeleteObject hRgn1&

                  END IF
                  IF CFlag&<=1 THEN
'                       InvalidateRect hDlg&, BYVAL %NULL, 1
'                       RedrawWindow hDlg&, BYVAL %NULL, BYVAL %NULL, %RDW_ERASE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN  '  or %RDW_INTERNALPAINT
                  END IF
              END IF
          END IF
          ' --------------------
          ' problem for component is here with IsWindowVisible
'          IF IsWindowVisible(hDlg) THEN

          IF TestVisible(hDlg) THEN
             SELECT CASE AS LONG wParam
                 CASE %SIZE_MAXIMIZED
                     RV&=ProcessDMessage(hDlg, %EZ_Maximize, 0)
                 CASE %SIZE_MINIMIZED
                     RV&=ProcessDMessage(hDlg, %EZ_Minimize, 0)
                 CASE %SIZE_RESTORED
                     RV&=ProcessDMessage(hDlg, %EZ_Restore, 0)
                 CASE ELSE
              END SELECT
          END IF
      END IF
      IF GetMyWindowLong(hDlg, 2)=4 THEN   ' don't let through for MDI Parent
          FUNCTION=0
          EXIT FUNCTION
      END IF
   CASE %WM_DROPFILES
      ZDropFiles hDlg, wParam
      FUNCTION=0
      EXIT FUNCTION
   CASE %WM_CLOSE
      IF App_FindhWnd&<>0 THEN
          IF GetParent(App_FindhWnd&)=hDlg THEN
              ' if findtext dlg is active close it
              SendMessage App_FindhWnd&,%WM_CLOSE, 0,0
              App_FindhWnd&=0   ' just in case dlg doesn't send terminate event
              App_FindhParentClose&=hDlg
              FUNCTION=0
              EXIT FUNCTION
          END IF
      END IF
      X&=ZFormNumH(hDlg)
      ' closed by clicking X button or EZ_UnloadForm
      ' so allow testing %EZ_Close event
      IF ProcessWinClose(ZFormNameH(hDlg), hDlg) THEN
          AppForms(X&).FCloseFlag=0
          IF AppForms(X&).FModal THEN
              hParent=GetParent(hDlg)
              IF hParent<>0 THEN
                  IF IsWindow(hParent) THEN
                      EnableWindow hParent, 1   ' Enable Parent window
                  END IF
              END IF
              ZModalLoop 0   ' end Modal Loop
          END IF
          IF AppForms(X&).FSpecial=2 OR AppForms(X&).FSpecial=1 THEN
             SetFocus 0      ' <--- this is required to prevent a GPF
          END IF
          IF AppForms(X&).FType=4 THEN
              PBVMdiSetMenu hDlg, 0
          END IF
          IF AppForms(X&).FType=5 THEN
             hWnd=GetParent(GetParent(hDlg))
             PBVMdiSetMenu hDlg, 0
             IF IsWindow(hWnd) THEN
                 ZSetCurrent hWnd
             END IF
             SendMessage GetParent(hDlg), %WM_MDIDESTROY, hDlg,0
          ELSE
             X&=DestroyWindow(hDlg)
          END IF
      END IF
      FUNCTION=0
      EXIT FUNCTION
   CASE %WM_NEXTDLGCTL
       FUNCTION = ZNextDlgCTL(hDlg, Msg, wParam, lParam)
       EXIT FUNCTION
   CASE %DM_GETDEFID, %DM_SETDEFID
       FUNCTION = DefDlgProc(hDlg, Msg, wParam, lParam)
       EXIT FUNCTION
   CASE %WM_EZMDICHANGE
       IF wParam=0 THEN
           ' find Buttons with shadow and remove
           EnumChildWindows hDlg, CODEPTR(MDIRemoveDEFIDProc), 0
       ELSE
           ZSetFirstFocus hDlg
'           hCtrl=GetNextDlgTabItem(hDlg,0,0)
'           PostMessage hDlg, %WM_NEXTDLGCTL, hCtrl, %TRUE
       END IF
       IF wParam=0 THEN
           X&=ProcessDMessage(hDlg, %EZ_NoFocus, 0)
       ELSE
           X&=ProcessDMessage(hDlg, %EZ_Focus, 0)
       END IF
       FUNCTION=1
       EXIT FUNCTION
   CASE %WM_MDIACTIVATE
            IF GetMyWindowLong(hDlg, 2)=5 THEN
                ' MDI Child getting activated
                AppCurrentMDIChild=lParam
                IF lParam<>0 THEN
                    IF hDlg=lParam THEN
                        ' --------------------------
                        ' mdi switch menu here
                        PBVMdiSetMenu hDlg, 1
                        ' --------------------------
                        PostMessage hDlg, %WM_EZMDICHANGE, 1,0
                    END IF
                    IF hDlg=wParam THEN
                        PBVMdiSetMenu hDlg, 0
                        PostMessage hDlg, %WM_EZMDICHANGE, 0,0
                    END IF
                END IF
            END IF
   CASE %WM_DESTROY
      IF App_DebugHandle&<>0 THEN
          IF App_DebugHandle&=hDlg THEN
              App_DebugHandle&=0
              App_DebugForm$=""
              App_Debug&=0
          END IF
      END IF
      X&=ZFormNumH(hDlg)
      IF AppForms(X&).FCloseFlag=1 THEN ' never closed but destroyed by parent
          AppForms(X&).FCloseFlag=0
          ProcessWinClose ZFormNameH(hDlg), hDlg    ' send %EZ_Close event
          ' assume MDI parent is closed normally and resets menus
          ' don't try to check menus in WM_DESTROY since forms don't exist
      END IF

      IF AppForms(X&).FhToolTip <>0 THEN
           IF IsWindow(AppForms(X&).FhToolTip)<>0 THEN ' IF parent did not destroy the tooltip then do it now
               DestroyWindow AppForms(X&).FhToolTip
           END IF
      END IF


      ' Needed even for Dialogboxes
      PBVDelFormMenus hDlg
      X&=ProcessDMessage(hDlg, %EZ_FreeNow, 0)
      RemoveProp hDlg, BYVAL MAKLNG(AppFormGAtom1&,0)  ' pointer to Forms unique DesignWindow routine
      RemoveProp hDlg, BYVAL MAKLNG(AppFormGAtom2&,0)  ' pointer to Forms unique Events routine
      RemoveProp hDlg, BYVAL MAKLNG(AppFormStateAtom1&,0)   ' form state for sizing
      RemoveProp hDlg, BYVAL MAKLNG(AppFormStateAtom2&,0)   ' form state for moving

      ZFormClearHandle hDlg
      IF ZFormAnyLeft()=0 THEN
         PostQuitMessage 0
      END IF

'      FUNCTION=0
'      EXIT FUNCTION
   CASE %WM_SYSCOMMAND
      IF (wParam AND &HFFF0)= %SC_CLOSE THEN
         SendMessage hDlg, %WM_CLOSE,0,0
         FUNCTION=0
         EXIT FUNCTION
      END IF
   CASE %WM_NOTIFYFORMAT
        FUNCTION=%NFR_ANSI
        EXIT FUNCTION
   CASE %WM_NCCALCSIZE
      IF GetSizePass(hDlg) THEN
          IF wParam<>0 THEN
               RV&=0
               X&=ProcessDMessage(hDlg, %EZ_NoRedraw, 0)
               SELECT CASE X&
                    CASE 0
                         GOSUB DoDefaultWinProc
                         FUNCTION=RV&
                    CASE ELSE
                         SendMessage hDlg, %WM_SETREDRAW,0,0
                         GOSUB DoDefaultWinProc
                         SendMessage hDlg, %WM_SETREDRAW,1,0
                         InvalidateRect hDlg,BYVAL %NULL,1
                         FUNCTION=RV&
               END SELECT
               EXIT FUNCTION
          END IF
      END IF
   CASE %WM_GETMINMAXINFO
       IF ZMinMaxInfo(hDlg, Msg, wParam, lParam) THEN
           FUNCTION=0
           EXIT FUNCTION
       END IF
   CASE %WM_WINDOWPOSCHANGING
       ZPosChanging hDlg, wParam, lParam
       ' let pass through to defwindowproc
   CASE %WM_EZGUI_TRAYICON
        GetCursorPos PT
        X&=MAKLNG(PT.x, PT.y)
        SELECT CASE AS LONG LOWRD(lParam)
            CASE %WM_LBUTTONDOWN
                X&=ProcessDMessage(hDlg, %EZ_TrayLButtonDown, X&)
            CASE %WM_LBUTTONUP
                X&=ProcessDMessage(hDlg, %EZ_TrayLButtonUp, X&)
            CASE %WM_RBUTTONDOWN
                X&=ProcessDMessage(hDlg, %EZ_TrayRButtonDown, X&)
            CASE %WM_RBUTTONUP
                X&=ProcessDMessage(hDlg, %EZ_TrayRButtonUp, X&)
            CASE %WM_LBUTTONDBLCLK
                X&=ProcessDMessage(hDlg, %EZ_TrayDClick, X&)
            CASE ELSE
        END SELECT
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_HELP
        zDo_WM_HELP  hDlg, 0, lParam
        FUNCTION=1
        EXIT FUNCTION
   CASE %WM_STARTFORM
       X&=ProcessEZCommands(hDlg, %EZ_Started, 0, hDlg)
       FUNCTION=0
       EXIT FUNCTION
   CASE %WM_COMPACTING
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 1)   ' memory low
   CASE %WM_DISPLAYCHANGE
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 2)   ' Displays have changed
   CASE %WM_FONTCHANGE
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 3)   ' System Fonts have changed
   CASE %WM_SYSCOLORCHANGE
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 4)   ' System Colors have changed
   CASE &H31A   '      %WM_THEMECHANGED
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 5)   ' System Theme has changed
   CASE %WM_TIMECHANGE
       X&=ProcessDMessage(hDlg, %EZ_SysChange, 6)   ' System Time has changed
   CASE %WM_SETTINGCHANGE
       SELECT CASE AS LONG wParam
           CASE 0,1
               X&=0
           CASE %SPI_SETWORKAREA                    ' work area has changed
               X&=8
           CASE %SPI_SETFONTSMOOTHING               ' font smoothing has changed
               X&=9
           CASE %SPI_SETDRAGFULLWINDOWS             ' draw full windows setting changed
               X&=10
           CASE ELSE                                  ' all other SysParameterInfo flags
               X&=7                                 ' System Parameters changed
       END SELECT
       IF X&<>0 THEN
           X&=ProcessDMessage(hDlg, %EZ_SysChange, X&)   ' System Setting has changed  (SystemParametersInfo)
       END IF
   CASE ELSE
END SELECT

IF App_DragListMsg&<>0 THEN
    IF Msg=App_DragListMsg& THEN
        FUNCTION=ZDragList(hDlg, wParam, lParam)
        EXIT FUNCTION
    END IF
END IF

IF App_FindReplaceMsg&<>0 THEN
    IF Msg=App_FindReplaceMsg& THEN
        FUNCTION=ZFindReplace(hDlg, wParam, lParam)
        EXIT FUNCTION
    END IF
END IF

RV&=0
GOSUB DoDefaultWinProc
'if Msg=%WM_GETDLGCODE then
'    msgbox hex$(RV&)
'end if
FUNCTION=RV&
EXIT FUNCTION

DoDefaultWinProc:
    X&=GetMyWindowLong(hDlg, 1)
    WTP&=GetMyWindowLong(hDlg, 2)
    IF X&=0 THEN
        X&=ZFormNumH(hDlg)
        IF X&<>0 THEN WTP&=AppForms(X&).FType ELSE WTP&=1
    END IF

    ' Type 1 - Normal EZGUI Form
    ' Type 2 - Normal EZGUI Form (NO Close X)
    ' Type 3 - WinLift Window
    ' Type 4 - MDI Parent
    ' Type 5 - MDI Child

    IF WTP&=4 OR WTP&=5 THEN
        DialogAddress&=GetWindowLong(hDlg, %DWL_DLGPROC)
        RV&=0
        IF DialogAddress&<>0 THEN
            RV&=CallWindowProc(BYVAL DialogAddress&, hDlg, Msg, wParam, lParam)
        END IF
        IF RV&=0 THEN
            IF WTP&=4 THEN
                RV& = DefFrameProc(hDlg,AppForms(X&).FhWnd2,Msg,wParam,lParam)
            ELSE
                RV& = DefMDIChildProc(hDlg,Msg,wParam,lParam)
            END IF
        END IF
    ELSE
        RV& = DefDlgProc(hDlg, Msg, wParam, lParam)
    END IF
RETURN

InitD:
zC="tooltips_class32"+CHR$(0)
zCP=""+CHR$(0)
hParent=PBVFindTParent(hDlg)
TTS&=%WS_POPUP OR %TTS_ALWAYSTIP OR App_ToolTipStyle&
AppForms(AFNum&).FhToolTip=CreateWindowEX(0 , _             ' Extended Window Style
                             zC, _                          ' window class name
                             zCP, _                         ' window caption
                             TTS&, _                        ' window style
                             %CW_USEDEFAULT, _              ' initial x position
                             %CW_USEDEFAULT, _              ' initial y position
                             %CW_USEDEFAULT, _              ' initial x size
                             %CW_USEDEFAULT, _              ' initial y size
                             hParent, _                        ' parent window handle
                             BYVAL %NULL, _                 ' Menu handle
                             AppInstance&, _                ' program instance handle
                             BYVAL %NULL)                   ' creation parameters

ZSetToolTipColors AppForms(AFNum&).FhToolTip, 0
X&=ProcessWinInitialize(ZFormNameH(hDlg), hDlg, RFlag&)
'X&=ProcessEZCommands(hDlg, %EZ_Loaded, 0, hDlg)    ' now in ProcessWinInitialize
X&=PostMessage(hDlg, %WM_STARTFORM,0,0)
IF AppForms(AFNum&).FModal THEN
   ShowWindow hDlg, %SW_SHOW
   UpdateWindow hDlg
END IF
RETURN

OwnedBDown:
X&=ZFormNumH(hDlg)
IF X&<>0 THEN
   IF AppForms(X&).FSpecial=2 THEN
      SetWindowPos hDlg, %HWND_TOP, 0,0,0,0, %SWP_DRAWFRAME OR %SWP_NOMOVE OR %SWP_NOSIZE
      ZRedrawForm hDlg
   END IF
END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZDragList(BYVAL hWnd&, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL I&, RV&, hWndLB&, MX&, X&
LOCAL DLI AS DRAGLISTINFO PTR
STATIC LBitem&, DFlag&, LP&
RV&=0
' Note:  The LBItemFromPt function is incorrect in the PB common control INC file
' use the following declare instead :
' DECLARE FUNCTION LBItemFromPt LIB "COMCTL32.DLL" ALIAS "LBItemFromPt" (BYVAL hLB AS LONG, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL bAutoScroll AS LONG) AS LONG

DLI=lParam
hWndLB&=@DLI.hWnd
IF @DLI.uNotification=%DL_BEGINDRAG THEN
    I&=LBItemFromPt(hWndLB&, @DLI.ptCursor.x,@DLI.ptCursor.y, -1)
    ' send event to EZGUI to test for selection
    IF ProcessEZCommands(hWnd&, %EZ_DragItem, hWndLB&, I&)=0 THEN
        ' If Canceled then don't start drag
        LBitem&=I&
        DrawInsert hWnd&, hWndLB&, I&
        ' SetWindowLong hWnd&, %DWL_MSGRESULT, 1  ' returns a true value to Dialog
        RV&=1
        DFlag&=1
    END IF
END IF
IF @DLI.uNotification=%DL_DROPPED THEN
    I&=LBItemFromPt(hWndLB&, @DLI.ptCursor.x,@DLI.ptCursor.y, -1)
    DrawInsert hWnd&, hWndLB&, -1   ' clears drag icon
    IF I&>-1 THEN
        IF DFlag& THEN
            GOSUB SELITEM1
            IF I&<>LBitem& THEN
                DIM D$, NFlag&, WS&
                D$=ZGetListText(hWndLB&, LBitem&, 0)
                ' -------------------------------------
                WS&=GetWindowLong(hWndLB&,%GWL_STYLE)
                IF IsStyleSetEx(WS&, %LBS_OWNERDRAWFIXED) OR IsStyleSetEx(WS&, %LBS_OWNERDRAWVARIABLE) THEN
                    IF IsStyleSetEx(WS&, %LBS_HASSTRINGS)=0 THEN NFlag&=1
                END IF
                ' -------------------------------------
                IF NFlag& THEN
                    X& = SendMessage(hWndLB&, %LB_INSERTSTRING, I&, VAL(D$))
                ELSE
                    X& = SendMessage(hWndLB&, %LB_INSERTSTRING, I&, STRPTR(D$))
                END IF
                IF X&>=0 THEN
                    IF I&<LBitem& THEN
                        LBitem&=LBitem&+1
                         SendMessage hWndLB&, %LB_DELETESTRING, LBitem&, 0
                         GOSUB SELITEM1
                    ELSE
                         SendMessage hWndLB&, %LB_DELETESTRING, LBitem&, 0
                         I&=I&-1
                         GOSUB SELITEM1
                         I&=I&+1
                    END IF

                END IF
            END IF
        END IF
    ELSE
        I&=LBitem&
        GOSUB SELITEM1
    END IF
    ProcessEZCommands hWnd&,%EZ_DragItemDrop, hWndLB&, I&
    RV&=1
    DFlag&=0
END IF
IF @DLI.uNotification=%DL_CANCELDRAG THEN
    ' drag has been canceled
    DrawInsert hWnd&, hWndLB&, -1   ' clears drag icon
    I&=LBitem&
    GOSUB SELITEM1
    RV&=0
    DFlag&=0
END IF
IF @DLI.uNotification=%DL_DRAGGING THEN
    I&=LBItemFromPt(hWndLB&, @DLI.ptCursor.x,@DLI.ptCursor.y, -1)
    ' drag in process
    IF I&>-1 THEN
        DrawInsert hWnd&, hWndLB&, I&
        GOSUB SELITEM1
'        %DL_CURSORSET           = 0
'        %DL_STOPCURSOR          = 1
'        %DL_COPYCURSOR          = 2
'        %DL_MOVECURSOR          = 3
        IF I&<>LBitem& THEN
            RV&=%DL_COPYCURSOR
        ELSE
            RV&=%DL_MOVECURSOR
        END IF
    ELSE
        DrawInsert hWnd&, hWndLB&, -1
        RV&=%DL_STOPCURSOR
    END IF

END IF
FUNCTION=RV&
EXIT FUNCTION

SELITEM1:
MX&=SendMessage(hWndLB&, %LB_GETCOUNT, 0, 0)
IF I&>=0 AND I&<MX& THEN
    SendMessage hWndLB&, %LB_SETCURSEL, I&, 0
END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetGridColor(BYVAL ColNum&, BYVAL ColMode&) EXPORT10
LOCAL CFG&, HiBit&
'IF ColMode&<>0 THEN
'    App_BG_Dot_Mode&=1
'ELSE
'    App_BG_Dot_Mode&=0
'END IF
HiBit&=ColMode& AND (NOT 3)
ColMode&=ColMode& AND 3
IF ColMode&>=0 AND ColMode&<=3 THEN
    App_BG_Dot_Mode&=ColMode&
ELSE
    App_BG_Dot_Mode&=0
END IF
App_BG_Dot_Mode&=App_BG_Dot_Mode& OR HiBit& ' remember hi Bits

CFG&=ZFGColorNum(ColNum&)
IF CFG&<>-1 THEN
    App_BG_Dot_Color&=AppColor(CFG&)
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZCustomErase(BYVAL hWnd&, BYVAL hDC&, BYVAL Mode&) AS LONG
     LOCAL EZP AS EZPAINT, CMsg&
     LOCAL Cancel&, F$, CRect AS RECT, CID&
     'TYPE EZPAINT
     '    hDC AS LONG
     '    W AS LONG
     '    H AS LONG
     'END TYPE
     Cancel&=0
     EZP.hDC=hDC&
     GetClientRect hWnd&, CRect
     EZP.W=CRect.nRight-CRect.nLeft
     EZP.H=CRect.nBottom-CRect.nTop
     SELECT CASE Mode&
          CASE 1         ' splitter control
               CID&=GetDlgCtrlID(hWnd&)
               F$=ZFormNameH(GetParent(hWnd&))
               CMsg&=%EZ_PaintSP
          CASE ELSE      ' form
               F$=ZFormNameH(hWnd&)
               CMsg&=%EZ_PaintBG
               CID&=0
     END SELECT
     CALL DWORD PBVAddress(2) USING EZ_EventsX(F$, CID& ,CMsg&, VARPTR(EZP), Cancel&)
     FUNCTION=Cancel&
END FUNCTION

SUB PBV_GetRGBs(BYVAL C&, R&, G&, B&)
    R&=C& MOD 256
    SHIFT RIGHT C&, 8
    G&=C& MOD 256
    SHIFT RIGHT C&, 8
    B&=C& MOD 256
END SUB

FUNCTION ZEraseBG(BYVAL hWnd AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG, BYVAL Mode&) AS LONG
LOCAL RV&, N&, BR&, OBR&, PT AS POINTAPI
LOCAL X&, Y&, X1&, Y1&, X2&, Y2&, OldROP&
' LOCAL PS AS PAINTSTRUCT
LOCAL CR AS RECT, BFlag&
LOCAL hDC1 AS LONG, hDC2 AS LONG
LOCAL hDC AS LONG, R AS RECT, hBmp AS LONG, W&, H&, OldhBMP AS LONG, OldPen&, NewPen&
LOCAL OldhBmp2 AS LONG, DBFlag&, LightColor&, LR&, LG&, LB&, SkipFlag&, CTX&, CTY&, DKFlag&
LOCAL LightNewPen&, XCT&, YCT&, LTFlag&, HiBitNum&, LoBitNum&, PerBlock&

PerBlock&=96
HiBitNum&=App_BG_Dot_Mode&\4
SELECT CASE AS LONG HiBitNum&
    CASE 1
        PerBlock&=48
    CASE 2
        PerBlock&=24
    CASE ELSE
END SELECT
LoBitNum&=App_BG_Dot_Mode& AND 3

XCT&=PerBlock&\App_EZ_GridW
YCT&=PerBlock&\App_EZ_GridH

PBV_GetRGBs App_BG_Dot_Color&, LR&, LG&, LB&
LR&=LR&+128:IF LR&>255 THEN LR&=255
LG&=LG&+128:IF LG&>255 THEN LG&=255
LB&=LB&+128:IF LB&>255 THEN LB&=255
LightColor&=RGB(LR&,LG&,LB&)

N&=ZFormNumH(hWnd)

RV&=0
IF N&>0 THEN
    BFlag&=0
    IF AppForms(N&).FBrush<-1 THEN BFlag&=1     ' BitBlt Bitmap for Pattern Brushes
    IF AppForms(N&).FDotBG<>0 THEN
        IF App_EZ_GridW>=2 THEN
           BFlag&=1     ' BitBlt Bitmap for Displayed Grid
        END IF
    END IF
    DBFlag&=0
    IF AppForms(N&).FBitmap<>0 THEN BFlag&=2
    hDC1=wParam

    SaveDC hDC1

    IF Mode&=1 THEN
         GetClipBox hDC1, CR     ' get current Clip Box generated by BeginPaint
    ELSE
         GetClientRect hWnd, CR
    END IF

    IF BFlag&<>0 THEN
            ' -----------------------------------------
            hDC=CreateCompatibleDC(hDC1)    ' Create memory DC
            ' -----------------------------------------
            R.nLeft=0
            R.nTop=0
            R.nRight=CR.nRight      ' make as small as possible
            R.nBottom=CR.nBottom    ' make as small as possible
            ' -----------------------------------------
            W&=(R.nRight-R.nLeft)+1
            H&=(R.nBottom-R.nTop)+1
            IF BFlag&=2 THEN
                IF AppForms(N&).FDotBG<>0 THEN
                    hBmp=CreateCompatibleBitmap(hDC1, W&, H&)
                    OldhBmp=SelectObject(hDC, hBmp)

                    hDC2=CreateCompatibleDC(hDC1)
                    OldhBmp2=SelectObject(hDC2, AppForms(N&).FBitmap)
                    BitBlt hDC, 0, 0, _
                           R.nRight, R.nBottom, _
                           hDC2, 0, 0, %SRCCOPY
                    SelectObject hDC2, OldhBmp2
                    DeleteDC hDC2
                    DBFlag&=1
                ELSE
                    hBmp=AppForms(N&).FBitmap
                    OldhBmp=SelectObject(hDC, hBmp)
                END IF
            ELSE
                hBmp=CreateCompatibleBitmap(hDC1, W&, H&)
                OldhBmp=SelectObject(hDC, hBmp)
                DBFlag&=1
            END IF
            ' -----------------------------------------
            IF BFlag&=1 THEN
                IF ZCustomErase(hWnd, hDC, 0)=0 THEN
                    GOSUB DRAWBG1    ' puts old Brush into OBR&
                END IF
                SelectObject hDC, OBR&
            END IF
            IF AppForms(N&).FDotBG<>0 THEN
                IF App_EZ_GridW>=2 THEN
                    X1&=R.nLeft
                    Y1&=R.nTop
                    X2&=R.nRight-1
                    Y2&=R.nBottom-1
                    SkipFlag&=0
                    SELECT CASE AS LONG LoBitNum&   '   App_BG_Dot_Mode&
                        CASE 1
                            OldROP&=SetROP2(hDC, %R2_COPYPEN)
                        CASE 2
                            SkipFlag&=1
                            OldROP&=SetROP2(hDC, %R2_NOTXORPEN)
                        CASE 3
                            SkipFlag&=1
                            OldROP&=SetROP2(hDC, %R2_COPYPEN)
                        CASE ELSE
                            OldROP&=SetROP2(hDC, %R2_NOTXORPEN)
                    END SELECT
                    IF AppForms(N&).FDotBG=1 THEN
                        CTX&=0
                        FOR X&=X1& TO X2& STEP App_EZ_GridW
                            CTY&=0
                            FOR Y&=Y1& TO Y2& STEP App_EZ_GridH
                                DKFlag&=1
                                IF SkipFlag& THEN
                                    IF CTX&<XCT& AND CTY&<YCT& THEN DKFlag&=0
                                END IF
                                IF DKFlag& THEN
                                    SetPixel hDC, X&, Y&, App_BG_Dot_Color&
                                ELSE
                                    SetPixel hDC, X&, Y&, LightColor&
                                END IF
                                CTY&=CTY&+1
                                IF CTY&>YCT& THEN CTY&=1
                            NEXT Y&
                            CTX&=CTX&+1
                            IF CTX&>XCT& THEN CTX&=1
                        NEXT X&
                    ELSEIF AppForms(N&).FDotBG=2 THEN
                        NewPen&=CreatePen(%PS_SOLID, 1, App_BG_Dot_Color&)
                        IF SkipFlag& THEN
                            LightNewPen&=CreatePen(%PS_SOLID, 1, LightColor&)
                        END IF
                        OldPen&=SelectObject(hDC,NewPen&)
                        LTFlag&=0
                        CTX&=0
                        FOR X&=X1& TO X2& STEP App_EZ_GridW
                            DKFlag&=1
                            IF SkipFlag& THEN
                                IF CTX&<XCT& THEN DKFlag&=0
                            END IF
                            IF DKFlag& THEN
                                IF LTFlag& THEN
                                    SelectObject hDC,NewPen&
                                    LTFlag&=0
                                END IF
                            ELSE
                                IF LTFlag&=0 THEN
                                    SelectObject hDC,LightNewPen&
                                    LTFlag&=1
                                END IF
                            END IF
                            MoveToEx hDC, X&, Y1&, PT
                            LineTo hDC, X&, Y2&+1
                            CTX&=CTX&+1
                            IF CTX&>XCT& THEN CTX&=1
                        NEXT X&
                        CTY&=0
                        FOR Y&=Y1& TO Y2& STEP App_EZ_GridH
                            DKFlag&=1
                            IF SkipFlag& THEN
                                IF CTY&<YCT& THEN DKFlag&=0
                            END IF
                            IF DKFlag& THEN
                                IF LTFlag& THEN
                                    SelectObject hDC,NewPen&
                                    LTFlag&=0
                                END IF
                            ELSE
                                IF LTFlag&=0 THEN
                                    SelectObject hDC,LightNewPen&
                                    LTFlag&=1
                                END IF
                            END IF
                            MoveToEx hDC, X1&, Y&, PT
                            LineTo hDC, X2&+1, Y&
                            CTY&=CTY&+1
                            IF CTY&>YCT& THEN CTY&=1
                        NEXT Y&
                        SelectObject hDC, OldPen&
                        DeleteObject NewPen&
                        IF LightNewPen&<>0 THEN DeleteObject LightNewPen&
                    END IF
                    OldROP&=SetROP2(hDC, OldROP&)
                END IF
            END IF
            BitBlt hDC1, CR.nLeft, CR.nTop, _
                   CR.nRight-CR.nLeft, CR.nBottom-CR.nTop, _
                   hDC, CR.nLeft, CR.nTop, %SRCCOPY
            SelectObject hDC, OldhBmp
            DeleteDC hDC    ' delete memory DC
            IF DBFlag&=1 THEN DeleteObject hBmp
            ' -----------------------------------------
            RV&=1
    END IF

    IF RV&=0 THEN
        IF ZCustomErase(hWnd, hDC1, 0)=0 THEN
            BR&=SendMessage(hWnd, %WM_CTLCOLORDLG, hDC1, hWnd)
            IF BR&=0 THEN BR&=GetSysColorBrush(%COLOR_3DFACE)
            OBR&=SelectObject(hDC1, BR&)
            PatBlt hDC1, CR.nLeft, CR.nTop, CR.nRight-CR.nLeft, CR.nBottom-CR.nTop, %PATCOPY
            SelectObject hDC1, OBR&
        END IF
        RV&=1
    END IF

    RestoreDC hDC1,-1
END IF
FUNCTION=RV&
EXIT FUNCTION

DRAWBG1:
     BR&=SendMessage(hWnd, %WM_CTLCOLORDLG, hDC, hWnd)
     IF BR&=0 THEN BR&=GetSysColorBrush(%COLOR_3DFACE)
     OBR&=SelectObject(hDC, BR&)
     PatBlt hDC, R.nLeft, R.nTop, R.nRight-R.nLeft, R.nBottom-R.nTop, %PATCOPY
RETURN


END FUNCTION

'------------------------------------------------------------------------------

SUB ZDropFiles(BYVAL hWnd AS LONG, BYVAL hDF AS LONG)
     LOCAL PT AS POINTAPI, D$, F$
     LOCAL N& , zFName AS ASCIIZ*%MAX_PATH, I&, L&, X&
     LOCAL ID&, hParent&, CVal&

     D$=""
     DragQueryPoint hDF, PT        ' gets mouse location  PT.x and PT.y

     N&=DragQueryFile(hDF, -1, BYVAL %NULL, 0)
     IF N&>0 THEN
        N&=N&-1
        FOR I&=0 TO N&
           L&=DragQueryFile(hDF, I&, zFName, %MAX_PATH)
           F$=LEFT$(zFName, L&)
           IF F$<>"" THEN F$=F$+App_EZ_DChar$
           D$=D$+F$
        NEXT I&
     END IF
     DragFinish hDF
     App_DropFile$=D$
     hParent&=ZGetParentForm(hWnd)
     IF hWnd<>hParent& THEN
          ProcessEZCommands hParent&,%EZ_DropFiles, hWnd, CVal&
     ELSE
          ProcessEZCommands hParent&,%EZ_DropFiles, 0, CVal&
     END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION PBVFindTParent(BYVAL hWnd AS LONG) AS LONG
LOCAL WS&
DO
    IF hWnd=0 THEN EXIT DO
    WS&=GetWindowLong(hWnd, %GWL_STYLE)
    WS&=WS& AND %WS_CHILD
    IF WS&=0 THEN
        EXIT DO
    ELSE
        hWnd=GetParent(hWnd)
    END IF
LOOP
FUNCTION=hWnd
END FUNCTION

'------------------------------------------------------------------------------

SUB ZSetCurrent(BYVAL hWnd AS LONG)
LOCAL N&, hWnd2 AS LONG
hWnd2=hWnd
IF hWnd<>0 THEN
    hWnd=PBVFindTParent(hWnd)
    N&=ZFormNumH(hWnd)
    IF N&<>0 THEN
        AppCurrentAccel=AppForms(N&).FAccel
        AppCurrentDlg=hWnd
        IF GetMyWindowLong(hWnd, 2)=3 THEN
            ' This is a WinLift window
            AppCurrentDlgIsWLift=1
        ELSE
            AppCurrentDlgIsWLift=0
        END IF
        IF AppForms(N&).FType=4 THEN    ' MDI Frame
            AppCurrentClient=AppForms(N&).FhWnd2    ' MDI Client handle
            AppCurrentMDIChild=SendMessage(AppForms(N&).FhWnd2, %WM_MDIGETACTIVE,0, BYVAL %NULL)
        ELSE
            AppCurrentClient=0
            AppCurrentMDIChild=0
        END IF
    ELSE
        GOSUB ClearHandles
        AppCurrentDlg=hWnd2
    END IF
ELSE
    GOSUB ClearHandles
END IF
EXIT SUB

ClearHandles:
AppCurrentDlg=0
AppCurrentAccel=0
AppCurrentDlgIsWLift=0
AppCurrentClient=0
AppCurrentMDIChild=0
RETURN

END SUB

'------------------------------------------------------------------------------

' TYPE LV_DISPINFO
'   hdr AS NMHDR
'   item AS LV_ITEM
' END TYPE

' TYPE LV_ITEM
'   mask AS DWORD
'   iItem AS LONG
'   iSubItem AS LONG
'   STATE AS DWORD
'   stateMask AS DWORD
'   pszText AS ASCIIZ PTR
'   cchTextMax AS LONG
'   iImage AS LONG
'   lParam AS LONG
' END TYPE


'TYPE NM_LISTVIEW
'  hdr AS NMHDR
'  iItem AS LONG
'  iSubItem AS LONG
'  uNewState AS DWORD
'  uOldState AS DWORD
'  uChanged AS DWORD
'  ptAction AS POINTAPI
'  lParam AS LONG
'END TYPE


'TYPE NM_TREEVIEW
'  hdr AS NMHDR
'  action AS DWORD
'  itemOld AS TV_ITEM
'  itemNew AS TV_ITEM
'  ptDrag AS POINTAPI
'END TYPE


'TYPE TV_ITEM
'  mask AS DWORD
'  hItem AS LONG
'  STATE AS DWORD
'  stateMask AS DWORD
'  pszText AS ASCIIZ PTR
'  cchTextMax AS LONG
'  iImage AS LONG
'  iSelectedImage AS LONG
'  cChildren AS LONG
'  lParam AS LONG
'END TYPE

TYPE LV_NMITEMACTIVATE
  hdr AS NMHDR
  iItem AS LONG
  iSubItem AS LONG
  uNewState AS DWORD
  uOldState AS DWORD
  uChanged AS DWORD
  ptAction AS POINTAPI
  lParam AS LONG
  uKeyFlags AS DWORD
END TYPE

TYPE LV_SUBITEMHITTESTINFO
  pt AS POINTAPI
  flags AS DWORD
  iItem AS LONG
  iSubItem AS LONG
END TYPE

%LVM_SUBITEMHITTEST         = %LVM_FIRST+57

'TYPE NMTOOLBAR
'    hdr       AS NMHDR
'    iItem     AS LONG
'    tbButton  AS TBBUTTON
'    cchText   AS LONG
'    pszText   AS ASCIIZ PTR
'    rcButton  AS RECT
'END TYPE

TYPE EZCDRAW
    ITEM AS LONG
    SubItem AS LONG
    ColorText AS LONG
    ColorTextBK AS LONG   ' face for toolbar
    FONT AS LONG
    Color1 AS LONG
    INoDefault AS LONG
    IState AS LONG
END TYPE

TYPE EZLINK
    EZCMsg AS LONG
    EZCVal AS LONG
    AhCtrl AS LONG
    AMsg AS LONG
    AwParam AS LONG
    AlParam AS LONG
    ACharMin AS LONG
    ACharMax AS LONG
END TYPE


SUB EZ_SetRichAutoURL(BYVAL FormName$, BYVAL IDNum&, BYVAL Mode&) EXPORT10
    LOCAL X&
    IF App_RichEditType&>=2 THEN
        IF Mode&<>0 THEN Mode&=%TRUE
        X&=PBVSendMessageR(FormName$, IDNum&, %EM_AUTOURLDETECT, Mode&, 0, App_RichEditClass$)
    END IF
END SUB

GLOBAL App_InsideRTFLink&

SUB EZ_RTFLinkMsg(BYVAL CVal&, LinkCMsg&, LinkCVal&) EXPORT10
    LOCAL EL AS EZLINK PTR
    LinkCMsg&=0
    LinkCVal&=0
    IF App_InsideRTFLink& THEN
        IF CVal&<>0 THEN
            IF IsBadReadPtr(CVal&, SIZEOF(@EL))=0 THEN
                EL=CVal&
                LinkCMsg&=@EL.EZCMsg
                LinkCVal&=@EL.EZCVal
            END IF
        END IF
    END IF
END SUB

GLOBAL App_RTFLinkHandle&

FUNCTION EZ_RTFLinkGetText(BYVAL CVal&) EXPORT10 AS STRING
    LOCAL CMin&, CMax&, hCtrl&
    LOCAL CH1 AS CHARRANGE, CH2 AS CHARRANGE
    LOCAL EL AS EZLINK PTR
    IF App_InsideRTFLink& THEN
        IF CVal&<>0 THEN
            IF IsBadReadPtr(CVal&, SIZEOF(@EL))=0 THEN
                EL=CVal&
                hCtrl&=@EL.AhCtrl
                IF hCtrl&<>0 THEN
                    CMin&=@EL.ACharMin
                    CMax&=@EL.ACharMax
                    SendMessage hCtrl&, %EM_HIDESELECTION, 1,0
                    SendMessage hCtrl&, %EM_EXGETSEL, 0, VARPTR(CH1)
                    CH2.cpMin=CMin&
                    CH2.cpMax=CMax&
                    SendMessage hCtrl&, %EM_EXSETSEL, 0, VARPTR(CH2)
                    App_RTFLinkHandle&=hCtrl&
                    FUNCTION=EZ_GetRichText("", 0, 0,1)
                    App_RTFLinkHandle&=0
                    SendMessage hCtrl&, %EM_EXSETSEL, 0, VARPTR(CH1)
                    SendMessage hCtrl&, %EM_HIDESELECTION, 0,0
                    EXIT FUNCTION
                END IF
            END IF
        END IF
    END IF
    FUNCTION=""
END FUNCTION

'TYPE EZ_NMHDR
'  hwndFrom AS LONG
'  idfrom AS LONG
'  code AS LONG
'END TYPE

GLOBAL App_NotifyFlag&

SUB EZ_GetNotify(BYVAL CVal&, hCtrl&, ID&, NCode&) EXPORT10
    LOCAL NM AS EZ_NMHDR PTR
    IF App_NotifyFlag&<>0 THEN
        NM=CVal&
        hCtrl&=@NM.hwndFrom
        ID&=@NM.idfrom
        NCode&=@NM.code
    ELSE
        hCtrl&=0
        ID&=0
        NCode&=0
    END IF
END SUB

' use this structure for EZGUI Component model
'TYPE EZ_NMHDR_COMPONENT
'  hwndFrom AS LONG
'  idfrom AS LONG
'  code AS LONG
'  param1 as long
'  param2 as long
'  param3 as long
'  param4 as long
'END TYPE



SUB ZSetSelectTV(BYVAL hCtrl&, BYVAL hTV&, BYVAL SFlag&, BYVAL Mode&)
    LOCAL TVI AS TV_ITEM
    SELECT CASE AS LONG Mode&
        CASE 0  ' focus
            TVI.stateMask=%TVIS_FOCUSED
            IF SFlag& THEN
                TVI.STATE=%TVIS_FOCUSED
            ELSE
                TVI.STATE=0
            END IF
        CASE 1  ' select
            TVI.stateMask=%TVIS_SELECTED
            IF SFlag& THEN
                TVI.STATE=%TVIS_SELECTED
            ELSE
                TVI.STATE=0
            END IF
        CASE 2  ' Drop Hilite
            TVI.stateMask=%TVIS_DROPHILITED
            IF SFlag& THEN
                TVI.STATE=%TVIS_DROPHILITED
            ELSE
                TVI.STATE=0
            END IF
        CASE 3  ' state image flag
            IF SFlag&>=0 AND SFlag&<=15 THEN
                TVI.stateMask=%TVIS_STATEIMAGEMASK
                SHIFT LEFT SFlag&, 12
                TVI.STATE=SFlag&
            END IF
        CASE ELSE
            EXIT SUB
    END SELECT
    IF TVI.stateMask<>0 THEN
        TVI.hItem=hTV&
        TVI.mask=%TVIF_STATE
        SendMessage hCtrl&, %TVM_SETITEM, 0, VARPTR(TVI)
    END IF
END SUB

FUNCTION ZGetSelectTV(BYVAL hCtrl&, BYVAL hTV&, BYVAL Mode&) AS LONG
    LOCAL Mask&, RV&, TVI AS TV_ITEM
    RV&=-1
    SELECT CASE AS LONG Mode&
        CASE 0  ' focus
            Mask&=%TVIS_FOCUSED
        CASE 1  ' select
            Mask&=%TVIS_SELECTED
        CASE 2  ' Drop Hilite
            Mask&=%TVIS_DROPHILITED
        CASE 3  ' state image flag
            Mask&=%TVIS_STATEIMAGEMASK
        CASE ELSE
    END SELECT
    IF Mask&<>0 THEN
        TVI.hItem=hTV&
        TVI.mask=%TVIF_STATE
        TVI.stateMask=Mask&
        SendMessage hCtrl&, %TVM_GETITEM, 0, VARPTR(TVI)
        RV&=TVI.STATE
        SELECT CASE AS LONG Mode&
            CASE  3  ' state image flag
                SHIFT RIGHT RV&, 12
            CASE ELSE
                IF RV&<>0 THEN RV&=1
        END SELECT
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_TVSetItemFocus(BYVAL FormName$, BYVAL IDNum&, BYVAL hTV&, BYVAL SFlag&) EXPORT10
    LOCAL hCtrl&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
        IF hTV&<>0 THEN ZSetSelectTV hCtrl&, hTV&, SFlag&, 0
    END IF
END SUB

SUB EZ_TVSetItemStateImg(BYVAL FormName$, BYVAL IDNum&, BYVAL hTV&, BYVAL ImgN&) EXPORT10
    LOCAL hCtrl&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
        IF hTV&<>0 THEN ZSetSelectTV hCtrl&, hTV&, ImgN&, 3
    END IF
END SUB

FUNCTION EZ_TVGetItemFocus(BYVAL FormName$, BYVAL IDNum&, BYVAL hTV&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&
    RV&=-1
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
        IF hTV&<>0 THEN RV&=ZGetSelectTV(hCtrl&, hTV&, 0)
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_TVGetItemStateImg(BYVAL FormName$, BYVAL IDNum&, BYVAL hTV&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&
    RV&=-1
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
        IF hTV&<>0 THEN RV&=ZGetSelectTV(hCtrl&, hTV&, 3)
    END IF
    FUNCTION=RV&
END FUNCTION

SUB ZSetSelectLV(BYVAL hCtrl&, BYVAL I&, BYVAL SFlag&, BYVAL Mode&)
    LOCAL LVI AS LV_ITEM
    SELECT CASE AS LONG Mode&
        CASE 0  ' focus
            LVI.stateMask=%LVIS_FOCUSED
            IF SFlag& THEN
                LVI.STATE=%LVIS_FOCUSED
            ELSE
                LVI.STATE=0
            END IF
        CASE 1  ' select
            LVI.stateMask=%LVIS_SELECTED
            IF SFlag& THEN
                LVI.STATE=%LVIS_SELECTED
            ELSE
                LVI.STATE=0
            END IF
        CASE 2  ' Drop Hilite
            LVI.stateMask=%LVIS_DROPHILITED
            IF SFlag& THEN
                LVI.STATE=%LVIS_DROPHILITED
            ELSE
                LVI.STATE=0
            END IF
        CASE 3  ' state image flag
            IF SFlag&>=0 AND SFlag&<=15 THEN
                LVI.stateMask=%LVIS_STATEIMAGEMASK
                SHIFT LEFT SFlag&, 12
                LVI.STATE=SFlag&
            END IF
        CASE ELSE
            EXIT SUB
    END SELECT
    IF LVI.stateMask<>0 THEN
        SendMessage hCtrl&, %LVM_SETITEMSTATE, I&, VARPTR(LVI)
    END IF
END SUB

FUNCTION ZGetSelectLV(BYVAL hCtrl&, BYVAL I&, BYVAL Mode&) AS LONG
    LOCAL Mask&, RV&
    RV&=-1
    SELECT CASE AS LONG Mode&
        CASE 0  ' focus
            Mask&=%LVIS_FOCUSED
        CASE 1  ' select
            Mask&=%LVIS_SELECTED
        CASE 2  ' Drop Hilite
            Mask&=%LVIS_DROPHILITED
        CASE 3  ' state image flag
            Mask&=%LVIS_STATEIMAGEMASK
        CASE ELSE
    END SELECT
    IF Mask&<>0 THEN
        RV&=SendMessage(hCtrl&, %LVM_GETITEMSTATE, I&, Mask&)
        SELECT CASE AS LONG Mode&
            CASE  3  ' state image flag
                SHIFT RIGHT RV&, 12
            CASE ELSE
                IF RV&<>0 THEN RV&=1
        END SELECT
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_LVSetItemFocus(BYVAL FormName$, BYVAL IDNum&, BYVAL I&, BYVAL SFlag&) EXPORT10
    LOCAL hCtrl&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
        IF I&>=0 THEN ZSetSelectLV hCtrl&, I&, SFlag&, 0
    END IF
END SUB

SUB EZ_LVSetItemStateImg(BYVAL FormName$, BYVAL IDNum&, BYVAL I&, BYVAL ImgN&) EXPORT10
    LOCAL hCtrl&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
        IF I&>=-1 THEN ZSetSelectLV hCtrl&, I&, ImgN&, 3
    END IF
END SUB

FUNCTION EZ_LVGetItemFocus(BYVAL FormName$, BYVAL IDNum&, BYVAL I&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&
    RV&=-1
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
        IF I&>=0 THEN RV&=ZGetSelectLV(hCtrl&, I&, 0)
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_LVGetItemStateImg(BYVAL FormName$, BYVAL IDNum&, BYVAL I&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&
    RV&=-1
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
        IF I&>=0 THEN RV&=ZGetSelectLV(hCtrl&, I&, 3)
    END IF
    FUNCTION=RV&
END FUNCTION

GLOBAL App_DragImageInternalFlag&
GLOBAL App_DragImageFlag&
GLOBAL App_DragImagehCtrl&
GLOBAL App_DragImageType&
GLOBAL App_DragImageY&
GLOBAL App_DragImageX&
GLOBAL App_DragImageDY&
GLOBAL App_DragImageDX&
GLOBAL App_DragImageOrgAddress&
GLOBAL App_DragImageItem&
GLOBAL App_DragImageList&
GLOBAL App_DragImageForm$
GLOBAL App_DragImageCID&
GLOBAL App_DragImageSFlag&
GLOBAL App_DragImageFormFlag&
GLOBAL App_DragImageDrawWnd&
GLOBAL App_DragImageTimerSpeed&
GLOBAL App_DragImageOffset&
GLOBAL App_DragImageAutoScroll&
GLOBAL App_DragImageShowCursor&
GLOBAL App_DragImageActualImage&
GLOBAL App_DragImageActualI&
GLOBAL App_DragImageArrowColor&

SUB ZConvertDragXY(BYVAL hWnd&)
    LOCAL WR AS RECT, CR AS RECT, DifX&, DifY&, PT AS POINTAPI
    IF hWnd&<>0 THEN
        PT.x=App_DragImageX&
        PT.y=App_DragImageY&
        IF hWnd&<>App_DragImageDrawWnd& THEN
            ClientToScreen hWnd&, PT
            hWnd&=App_DragImageDrawWnd&
            ScreenToClient hWnd&, PT
        END IF
        GetWindowRect hWnd&, WR
        GetClientRect hWnd&, CR
        ClientToScreen hWnd&, BYVAL VARPTR(CR)
        DifX&=CR.nLeft-WR.nLeft
        DifY&=CR.nTop-WR.nTop
        App_DragImageDX&=PT.x+DifX&
        App_DragImageDY&=PT.y+DifY&
    END IF
END SUB

'TYPE TV_HITTESTINFO
'  pt AS POINTAPI
'  flags AS DWORD
'  hItem AS LONG
'END TYPE

'TYPE TV_HITTESTINFO
'  pt AS POINTAPI
'  flags AS DWORD
'  hItem AS LONG
'END TYPE



FUNCTION ZTVGetLastVisible(BYVAL hCtrl&) AS LONG
    LOCAL CR AS RECT, TVH AS TV_HITTESTINFO, RV&
    GetClientRect hCtrl&, CR
    TVH.pt.x=24
    TVH.pt.y=CR.nBottom-4   ' near bottom of visible area
    RV&=SendMessage(hCtrl&,%TVM_HITTEST, 0, VARPTR(TVH))
    IF RV&=0 THEN
        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_LASTVISIBLE,0)
    END IF
    FUNCTION=RV&
END FUNCTION

TYPE EZDROPINFO
    AFlag AS LONG
    AX AS LONG
    AY AS LONG
    hItem AS LONG
END TYPE

GLOBAL App_DropInfo AS EZDROPINFO

FUNCTION EZ_GetDragInfo(X&, Y&, ItemN&) EXPORT10 AS LONG
    LOCAL RV&
    IF App_DropInfo.AFlag THEN
        RV&=1
        X&=App_DropInfo.AX
        Y&=App_DropInfo.AY
        ItemN&=App_DropInfo.hItem
    ELSE
        X&=0
        Y&=0
        ItemN&=0
    END IF
    FUNCTION=RV&
END FUNCTION


%DragTimerID        =   100

FUNCTION ZSubClassProcDrag(BYVAL hCtrl AS LONG, _
                           BYVAL Msg    AS LONG, _
                           BYVAL wParam AS LONG, _
                           BYVAL lParam AS LONG) EXPORT10 AS LONG
    LOCAL DFlag&, TVH AS TV_HITTESTINFO, TVI&
    LOCAL LVH AS LV_HITTESTINFO, LVI&, TVTest1&, TVTest2&, hHeader&, HR AS RECT, TestID&
    LOCAL CMsg&, X&, Cancel&, hMatchWnd&, PT AS POINTAPI, CR AS RECT, Offset&, Y&   ', N&
    STATIC TimerFlag&, ScrollFlag&

    SELECT CASE AS LONG Msg
        CASE %WM_CAPTURECHANGED
            IF lParam<>0 AND lParam<>hCtrl THEN     ' another window gets capture
                SendMessage hCtrl, %WM_LBUTTONUP, 0,0   ' force end of drag
                FUNCTION=0
                EXIT FUNCTION
            END IF
        CASE %WM_LBUTTONUP, %WM_RBUTTONUP
            IF App_DragImageFormFlag&=0 THEN
                IF App_DragImageAutoScroll& THEN
                    IF TimerFlag&<>0 THEN
                        TimerFlag&=0
                        KillTimer hCtrl, %DragTimerID
                        ScrollFlag&=0
                    END IF
                END IF
            END IF
            GOSUB DrawDragImageNow
            ReleaseCapture
            SetWindowLong hCtrl, %GWL_WNDPROC, App_DragImageOrgAddress&
            ImageList_EndDrag
            ImageList_DragLeave hCtrl
            IF App_DragImageShowCursor&=0 THEN
                ShowCursor %TRUE
            END IF

            IF App_DragImageList&<>0 THEN   ' destroy any imagelist created by control
                ImageList_Destroy App_DragImageList&
                App_DragImageList&=0
            END IF
            IF App_DragImageFormFlag&<>0 THEN
                GOSUB CheckWindowID
                App_DragImageItem&=TestID&
            ELSE
                SELECT CASE AS LONG App_DragImageType&
                    CASE 1  ' treeview
                        IF  App_DragImageItem&<>0 THEN
                            ZSetSelectTV hCtrl, App_DragImageItem&, 0, 2
                            UpdateWindow hCtrl
                        END IF
                    CASE 2  ' listview
                        IF App_DragImageItem&>=0 THEN
                            ZSetSelectLV hCtrl, App_DragImageItem&, 0, 2
                            UpdateWindow hCtrl
                        END IF
                    CASE ELSE
                END SELECT
            END IF
            CMsg&=%EZ_DragItemDrop
            Cancel&=0
            CALL DWORD PBVAddress(2) USING EZ_EventsX(App_DragImageForm$, App_DragImageCID&, CMsg&, App_DragImageItem&, Cancel&)
            App_DropInfo.AFlag&=0   ' turn off drag info
            App_DragImageInternalFlag&=0
        CASE %WM_MOUSEMOVE
            IF App_DragImageFormFlag&=0 THEN
                IF App_DragImageAutoScroll& THEN
                    IF TimerFlag&=0 THEN
                        ScrollFlag&=0
                        TimerFlag&=1
                        SetTimer hCtrl, %DragTimerID, App_DragImageTimerSpeed&,0
                    END IF
                END IF
            END IF
            GOSUB DrawDragImageNow
        CASE %WM_TIMER
            IF App_DragImageFormFlag&=0 THEN
                IF App_DragImageAutoScroll& THEN
                    IF wParam=%DragTimerID THEN
                        GOSUB CheckScrollTime
                        FUNCTION=0
                        EXIT FUNCTION
                    END IF
                END IF
            END IF
        CASE ELSE
    END SELECT
    FUNCTION=CallWindowProc(App_DragImageOrgAddress&, hCtrl, Msg, wParam, lParam)
    EXIT FUNCTION


    CheckWindowID:
        App_DropInfo.AFlag&=1
        App_DropInfo.AX=0
        App_DropInfo.AY=0
        App_DropInfo.hItem=0
        ' ------------------
        PT.x=App_DragImageX&
        PT.y=App_DragImageY&
        ClientToScreen hCtrl, PT
        TestID&=0
        ' Note: make sure API declares correct for WindowFromPoint and ChildWindowFromPointEX
        ' do NOT pass POINTAPI structure BYREF !  Pass 2 longs (x,y) BYVAL !
        IF App_DragImageDrawWnd&=0 THEN
            hMatchWnd&=WindowFromPoint(PT.x, PT.y)
            TestID&=hMatchWnd&
        ELSE
            ScreenToClient App_DragImageDrawWnd&, PT
            hMatchWnd&=ChildWindowFromPointEX(App_DragImageDrawWnd&, PT.x, PT.y, %CWP_SKIPINVISIBLE OR %CWP_SKIPDISABLED)
            IF hMatchWnd&<>0 THEN
                TestID&=GetWindowLong(hMatchWnd&, %GWL_ID)
            END IF
        END IF
        IF hMatchWnd&<>0 THEN
            PT.x=App_DragImageX&
            PT.y=App_DragImageY&
            ClientToScreen hCtrl, PT
            ScreenToClient hMatchWnd&, PT   ' get position on receiving control or window
            App_DropInfo.AX=PT.x
            App_DropInfo.AY=PT.y
            IF App_DragImageDrawWnd&<>0 THEN    ' on same form
                SELECT CASE  AS CONST$ ZGetClass(hMatchWnd&)
                    CASE "SYSLISTVIEW32"
                        LVH.pt.x=PT.x
                        LVH.pt.y=PT.y
                        SendMessage hMatchWnd&, %LVM_HITTEST, 0, VARPTR(LVH)
                        App_DropInfo.hItem=LVH.iItem
                    CASE "SYSTREEVIEW32"
                        TVH.pt.x=PT.x
                        TVH.pt.y=PT.y
                        SendMessage hMatchWnd&, %TVM_HITTEST, 0, VARPTR(TVH)
                        App_DropInfo.hItem=TVH.hItem
                    CASE "LISTBOX"
                        X&=SendMessage(hMatchWnd&,%LB_ITEMFROMPOINT, 0, MAKLNG(PT.x,PT.y))
                        App_DropInfo.hItem=-1
                        IF HIWRD(X&)=0 THEN
                            App_DropInfo.hItem=ZLOWRD(X&)
                        END IF
                END SELECT
            END IF
        END IF
    RETURN


    CheckScrollTime:
        SELECT CASE AS LONG App_DragImageType&
            CASE 1  ' treeview
                IF ScrollFlag&<>0 THEN
                    ImageList_DragLeave hCtrl
                    IF ScrollFlag&=1 THEN
                        TVTest1&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_FIRSTVISIBLE,0)
                        TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_PREVIOUS,TVTest1&)
                        IF TVTest2&=0 THEN TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_PARENT,TVTest1&)
                        IF TVTest2&<>0 THEN SendMessage hCtrl, %TVM_ENSUREVISIBLE, 0, TVTest2&
                        UpdateWindow hCtrl
                    END IF
                    IF ScrollFlag&=2 THEN
                        TVTest1&=ZTVGetLastVisible(hCtrl)
                        TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_NEXT,TVTest1&)
                        IF TVTest2&=0 THEN  ' check for child
                            TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_CHILD,TVTest1&)
                        END IF
                        IF TVTest2&=0 THEN  ' back track to parent and move up one
                            DO
                                TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_PARENT,TVTest1&)
                                IF TVTest2&=0 THEN
                                    TVTest2&=SendMessage(hCtrl, %TVM_GETNEXTITEM,%TVGN_NEXT,TVTest1&)
                                    EXIT DO
                                ELSE
                                    TVTest1&=TVTest2&
                                END IF
                            LOOP
                        END IF
                        IF TVTest2&<>0 THEN SendMessage hCtrl, %TVM_ENSUREVISIBLE, 0, TVTest2&
                        UpdateWindow hCtrl
                    END IF
                    ImageList_DragEnter App_DragImageDrawWnd&,App_DragImageDX&,App_DragImageDY&
                END IF
            CASE 2  ' listview
                IF ScrollFlag&<>0 THEN
                    ImageList_DragLeave hCtrl
                    Y&=24
                    IF SendMessage(hCtrl,%LVM_GETITEMCOUNT,0,0)>=1 THEN
                        ' get height of first item
                        CR.nLeft=%LVIR_BOUNDS
                        SendMessage hCtrl, %LVM_GETITEMRECT,0, VARPTR(CR)
                        Y&=CR.nBottom-CR.nTop
                    END IF
                    IF ScrollFlag&=1 THEN
                        SendMessage hCtrl, %LVM_SCROLL, 0, -Y&
                        UpdateWindow hCtrl
                    END IF
                    IF ScrollFlag&=2 THEN
                        SendMessage hCtrl, %LVM_SCROLL, 0, Y&
                        UpdateWindow hCtrl
                    END IF
                    ImageList_DragEnter App_DragImageDrawWnd&,App_DragImageDX&,App_DragImageDY&
                END IF
            CASE ELSE
        END SELECT
    RETURN

    DrawDragImageNow:
        App_DragImageX&=ZLOWRD(lParam)
        App_DragImageY&=ZHIWRD(lParam)
        ZConvertDragXY hCtrl
        DFlag&=0
        IF App_DragImageFormFlag&<>0 THEN   ' drag over form or control
            GOSUB CheckWindowID
            CMsg&=%EZ_DragItemID
            Cancel&=0
            CALL DWORD PBVAddress(2) USING EZ_EventsX(App_DragImageForm$, App_DragImageCID&, CMsg&, TestID&, Cancel&)
            App_DropInfo.AFlag&=0   ' turn off drag info
            IF Cancel&=0 THEN
                IF App_DragImageActualI&<>1 THEN
                    App_DragImageActualI&=1
                    ImageList_Copy App_DragImageActualImage&,0,App_DragImageActualImage&,1,%ILCF_MOVE
                END IF
            ELSE
                IF App_DragImageActualI&<>4 THEN
                    App_DragImageActualI&=4
                    ImageList_Copy App_DragImageActualImage&,0,App_DragImageActualImage&,4,%ILCF_MOVE
                END IF
            END IF
        ELSE                                    ' drag within control
            ScrollFlag&=0
            GetClientRect hCtrl, CR
            Offset&=App_DragImageOffset&
            IF App_DragImageX&>=0 AND App_DragImageX&<CR.nRight THEN
                IF App_DragImageType&=2 THEN  ' listview
                    IF (GetWindowLong(hCtrl, %GWL_STYLE) AND %LVS_REPORT)<>0 THEN
                        IF (GetWindowLong(hCtrl, %GWL_STYLE) AND %LVS_NOCOLUMNHEADER)=0 THEN
                            hHeader&=SendMessage(hCtrl, %LVM_GETHEADER,0,0)
                            IF hHeader&<>0 THEN
                                GetClientRect hHeader&, HR
                                CR.nTop=CR.nTop+(HR.nBottom-HR.nTop)
                            END IF
                        END IF
                    END IF
                END IF
                IF App_DragImageY&>=CR.nTop AND App_DragImageY&<=CR.nTop+Offset& THEN ScrollFlag&=1
                IF App_DragImageY&<=CR.nBottom AND App_DragImageY&>CR.nBottom-Offset& THEN ScrollFlag&=2
            END IF
            IF App_DragImageActualImage&<>0 THEN
                SELECT CASE AS LONG ScrollFlag&
                    CASE 1
                        IF App_DragImageActualI&<>2 THEN
                            App_DragImageActualI&=2
                            ImageList_Copy App_DragImageActualImage&,0,App_DragImageActualImage&,2,%ILCF_MOVE
                        END IF
                    CASE 2
                        IF App_DragImageActualI&<>3 THEN
                            App_DragImageActualI&=3
                            ImageList_Copy App_DragImageActualImage&,0,App_DragImageActualImage&,3,%ILCF_MOVE
                        END IF
                    CASE ELSE
                        IF App_DragImageActualI&<>1 THEN
                            App_DragImageActualI&=1
                            ImageList_Copy App_DragImageActualImage&,0,App_DragImageActualImage&,1,%ILCF_MOVE
                        END IF
                END SELECT
            END IF
            SELECT CASE AS LONG App_DragImageType&
                CASE 1  ' treeview
                    TVH.pt.x=App_DragImageX&
                    TVH.pt.y=App_DragImageY&
                    SendMessage hCtrl, %TVM_HITTEST, 0, VARPTR(TVH)
                    TVI&=TVH.hItem
                    IF TVI&<>App_DragImageItem& THEN
                        IF App_DragImageSFlag& THEN
                            ImageList_DragLeave hCtrl
                            IF App_DragImageItem&<>0 THEN ZSetSelectTV hCtrl, App_DragImageItem&, 0, 2  ' drop hilite off
                            IF TVI&<>0 THEN ZSetSelectTV hCtrl, TVI&, 1, 2  ' drop hilite on
                            UpdateWindow hCtrl
                            DFlag&=1
                        END IF
                        App_DragImageItem&=TVI&
                    END IF
                CASE 2  ' listview
                    LVH.pt.x=App_DragImageX&
                    LVH.pt.y=App_DragImageY&
                    SendMessage hCtrl, %LVM_HITTEST, 0, VARPTR(LVH)
                    LVI&=LVH.iItem
                    IF LVI&<>App_DragImageItem& THEN
                        IF App_DragImageSFlag& THEN
                            ImageList_DragLeave hCtrl
                            IF App_DragImageItem&>=0 THEN ZSetSelectLV hCtrl, App_DragImageItem&, 0, 2
                            IF LVI&>=0 THEN ZSetSelectLV hCtrl, LVI&, 1, 2
                            UpdateWindow hCtrl
                            DFlag&=1
                        END IF
                        App_DragImageItem&=LVI&
                    END IF
                CASE ELSE
            END SELECT
        END IF
        IF DFlag&=0 THEN
            ImageList_DragMove App_DragImageDX&,App_DragImageDY&
        ELSE
            ImageList_DragEnter App_DragImageDrawWnd&,App_DragImageDX&,App_DragImageDY&
        END IF
    RETURN

END FUNCTION

TYPE EZDragDraw
    hDC AS LONG
    DX1 AS LONG
    DY1 AS LONG
    DX2 AS LONG
    DY2 AS LONG
    DItem AS LONG
END TYPE

GLOBAL App_InsideDragDraw&

FUNCTION EZ_StartDragDraw(BYVAL CVal&, MyhDC&, X1&, Y1&, X2&, Y2&, IconNum&) EXPORT10 AS LONG
    LOCAL RV&, EZD AS EZDragDraw PTR
    IF App_InsideDragDraw& THEN
        IF CVal&<>0 THEN
            IF IsBadReadPtr(CVal&, SIZEOF(@EZD))=0 THEN
                EZD=CVal&
                MyhDC&=@EZD.hDC
                X1&=@EZD.DX1
                Y1&=@EZD.DY1
                X2&=@EZD.DX2
                Y2&=@EZD.DY2
                IconNum&=@EZD.DItem
                RV&=1
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_EndDragDraw() EXPORT10

END SUB

SUB ZExpandDragImageList()
    LOCAL W&, H&, P$, hDC&, PW&, I&, X&, MFlag&, T$, hBmp&, EW&
    LOCAL EZD AS EZDragDraw, CVal&, CMsg&, Cancel&
    App_DragImageActualImage&=ImageList_GetDragImage(BYVAL %NULL, BYVAL %NULL)
    IF App_DragImageActualImage&<>0 THEN
        ImageList_GetIconSize App_DragImageActualImage&, W&, H&
        GOSUB MakePict
        X&=ImageList_AddMasked(App_DragImageActualImage&, hBmp&, EZ_ColorVal(5,0))
        ImageList_Copy App_DragImageActualImage&,1,App_DragImageActualImage&,0,%ILCF_MOVE
        EZ_FreeImage P$
        App_DragImageActualI&=1
    ELSE
        App_DragImageActualI&=1
    END IF
    EXIT SUB


    MakePict:
        PW&=W&*4    ' first one blank for copy
        P$=EZ_CreatePicture(PW&,H&)
        hDC&=EZ_StartPictureDraw(P$)
        IF hDC&<>0 THEN
            EZ_SaveState
            EZ_Color 5, 5
            EZ_DCDraw hDC&, %EZ_FILL, 0,0,PW&-1,H&-1, 0, 1
            App_InsideDragDraw&=1
            FOR I&=1 TO 3
                X&=I&*W&
                IF App_DragImageArrowColor& = -1 THEN
                    CMsg&=%EZ_DragItemDraw
                    Cancel&=0
                    EZD.hDC=hDC&
                    EZD.DX1=X&
                    EZD.DY1=0
                    EZD.DX2=X&+W&-1
                    EZD.DY2=H&-1
                    EZD.DItem=I&
                    CVal&=VARPTR(EZD)
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(App_DragImageForm$, App_DragImageCID&, CMsg&, CVal&, Cancel&)
                ELSE
                    EZ_Color App_DragImageArrowColor&, 5
                    SELECT CASE AS LONG I&
                        CASE 1:T$="{{BIG_SAME_ARROWUP}}":GOSUB DrawArrowIcon
                        CASE 2:T$="{{BIG_SAME_ARROWDN}}":GOSUB DrawArrowIcon
                        CASE 3
                            X&=X&+((W&-H&)/2)
                            EW&=((H&/20)*3)+1
                            EZ_Color App_DragImageArrowColor&,5
                            EZ_DCDraw hDC&, %EZ_ELLIPSE, X&, 0, X&+H&-1, H&-1,3,0
                            EZ_DCDraw hDC&, %EZ_LINE, X&+EW&, H&-EW&, (X&+H&)-EW&, EW&,2,0
                        CASE ELSE
                    END SELECT
                END IF
            NEXT I&
            App_InsideDragDraw&=0
            EZ_RestoreState
        END IF
        EZ_EndPictureDraw
        hBmp&=EZ_ImageHandle(P$)
    RETURN

    DrawArrowIcon:
        MFlag& = EZ_GetDrawMacro(T$)
        EZ_DCDrawMacro hDC&, MFlag&, X&, 0, X&+W&-1, H&-1, App_DragImageArrowColor&,App_DragImageArrowColor&+8
    RETURN
END SUB

FUNCTION EZ_IsDragOver() EXPORT10 AS STRING
    LOCAL RV$
    IF App_DragImageInternalFlag&<>0 THEN
        IF App_DragImageFormFlag&=1 THEN RV$="F"
        IF App_DragImageFormFlag&=2 THEN RV$="S"
    END IF
    FUNCTION=RV$
END FUNCTION


SUB ZTestFontSmooth(BYVAL Mode&)
    LOCAL RV AS DWORD
    STATIC LastCallFlag AS DWORD
    SELECT CASE AS LONG Mode&
        CASE 1
            LastCallFlag=0
            IF SystemParametersInfo(%SPI_GETFONTSMOOTHING, 0,VARPTR(RV), 0) THEN
                IF RV<>0 THEN
                    IF SystemParametersInfo(&H200A, 0,VARPTR(RV), 0) THEN ' %SPI_GETFONTSMOOTHINGTYPE
                        IF RV>1 THEN    ' cleartype or greater
                            LastCallFlag=1
                            SystemParametersInfo %SPI_SETFONTSMOOTHING, 0,0, 0
                        END IF
                    END IF
                END IF
            END IF
        CASE 0
            IF LastCallFlag<>0 THEN
                SystemParametersInfo %SPI_SETFONTSMOOTHING, 1,0, 0
                LastCallFlag=0
            END IF
    END SELECT
END SUB

SUB EZ_StartDrag(BYVAL N&, BYVAL I&, BYVAL X&, BYVAL Y&, BYVAL DProp$) EXPORT10
    LOCAL hImage&, DelFlag&, PT AS POINTAPI, MX&, MY&, hWnd&, DSKFlag&  ', Tmp&, TX&, TY&
    DProp$=UCASE$(DProp$)
    ' assume App_DragImageX& and App_DragImageY& defined already
    IF App_DragImageFlag&=0 THEN EXIT SUB
    App_DragImageActualImage&=0
    App_DragImagehCtrl&=App_DragImageFlag&
    App_DragImageFlag&=0
    App_DragImageFormFlag&=0
    App_DragImageSFlag&=0
    App_DragImageOffset&=8
    App_DragImageAutoScroll&=0
    App_DragImageShowCursor&=1

    App_DragImageArrowColor&=0
    IF INSTR(DProp$,"[1]") THEN App_DragImageArrowColor&=1
    IF INSTR(DProp$,"[2]") THEN App_DragImageArrowColor&=2
    IF INSTR(DProp$,"[4]") THEN App_DragImageArrowColor&=4
    IF INSTR(DProp$,"[C]") THEN App_DragImageArrowColor&=-1
    IF INSTR(DProp$,"H") THEN App_DragImageShowCursor&=0
    IF INSTR(DProp$, "A") THEN App_DragImageAutoScroll&=1
    IF INSTR(DProp$, "^") THEN App_DragImageOffset&=16
    IF INSTR(DProp$, "^^") THEN App_DragImageOffset&=24
    IF INSTR(DProp$,"T") THEN App_DragImageSFlag&=1
    DSKFlag&=0
    IF INSTR(DProp$,"F") THEN
        App_DragImageFormFlag&=1
        App_DragImageSFlag&=0
    END IF
    IF INSTR(DProp$,"S") THEN
        DSKFlag&=1
        App_DragImageFormFlag&=2
        App_DragImageSFlag&=0
    END IF
    App_DragImageTimerSpeed&=1000
    IF INSTR(DProp$,"+") THEN App_DragImageTimerSpeed&=500
    IF INSTR(DProp$,"++") THEN App_DragImageTimerSpeed&=250
    IF INSTR(DProp$,"+++") THEN App_DragImageTimerSpeed&=125
    DelFlag&=1
    IF N&=-1 THEN
        App_DragImageList&=0
        SELECT CASE AS LONG App_DragImageType&
            CASE 1  ' treeview
                hImage&=SendMessage(App_DragImagehCtrl&, %TVM_GETIMAGELIST,%TVSIL_NORMAL,0)
                IF hImage&=0 THEN
                    hImage&=SendMessage(App_DragImagehCtrl&, %TVM_GETIMAGELIST,%TVSIL_STATE,0)
                END IF
                IF hImage&<>0 THEN
                    ZTestFontSmooth 1
                    hImage&=SendMessage(App_DragImagehCtrl&, %TVM_CREATEDRAGIMAGE,0,App_DragImageItem&)
                    ZTestFontSmooth 0
                    App_DragImageList&=hImage&
                    I&=0
                END IF
                GOSUB ConvertXY
            CASE 2  ' listview
                SendMessage App_DragImagehCtrl&, %LVM_GETITEMPOSITION,App_DragImageItem&,VARPTR(PT)
                ZTestFontSmooth 1
                hImage&=SendMessage(App_DragImagehCtrl&, %LVM_CREATEDRAGIMAGE,App_DragImageItem&,VARPTR(PT))
                ZTestFontSmooth 0
                App_DragImageList&=hImage&
                I&=0
                GOSUB ConvertXY
            CASE ELSE
        END SELECT
    ELSE
        App_DragImageList&=0
        IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
            hImage&=App_ImgList(N&).hImg
        END IF
    END IF
    IF hImage&<>0 THEN
            IF I&>=0 AND I&<ImageList_GetImageCount(hImage&) THEN
                IF ImageList_BeginDrag(hImage&,I&,X&,Y&) THEN
                    ZExpandDragImageList
                    hWnd&=App_DragImagehCtrl&
                    IF App_DragImageFormFlag&<>0 THEN
                        IF DSKFlag& THEN
                            App_DragImageDrawWnd&=%HWND_DESKTOP
                        ELSE
                            App_DragImageDrawWnd&=ZGetParentForm(hWnd&)
                        END IF
                        App_DragImageItem&=0
                    ELSE
                        App_DragImageDrawWnd&=hWnd&
                    END IF
                    App_DragImageOrgAddress&=GetWindowLong(hWnd&, %GWL_WNDPROC)
                    SetWindowLong hWnd&, %GWL_WNDPROC, CODEPTR(ZSubClassProcDrag)
                    SetCapture hWnd&
                    ZConvertDragXY hWnd&
                    IF App_DragImageType&=1 THEN    ' treeview
                        IF App_DragImageSFlag& THEN
                            ZSetSelectTV hWnd&, App_DragImageItem&, 1, 2   ' set drag select On
                        ELSE
                            ZSetSelectTV hWnd&, App_DragImageItem&, 0, 2   ' set drag select Off
                        END IF
                        UpdateWindow hWnd&
                    END IF
                    IF App_DragImageShowCursor&=0 THEN
                        ShowCursor 0
                    END IF
                    ImageList_DragEnter App_DragImageDrawWnd&,App_DragImageDX&,App_DragImageDY&
                    DelFlag&=0
                    App_DragImageInternalFlag&=1
                END IF
            END IF
    END IF
    IF DelFlag& THEN
        IF App_DragImageList&<>0 THEN   ' destroy any imagelist created by control if not used
            ImageList_Destroy App_DragImageList&
            App_DragImageList&=0
        END IF
    END IF
    EXIT SUB

    ConvertXY:
'    App_DragImageX&=X&
'    App_DragImageY&=Y&
    IF hImage&<>0 THEN
        ImageList_GetIconSize hImage&, MX&, MY&
        SELECT CASE AS LONG App_DragImageType&
            CASE 1  ' treeview

            CASE 2  ' listview
                X&=X&+App_DragImageX&
            CASE ELSE
        END SELECT
    END IF
    RETURN

END SUB

SUB ZPrepDragFlags(BYVAL hDlg&, BYVAL CID&, BYVAL hWnd&, BYVAL ItemN&, BYVAL X&, BYVAL Y&, BYVAL CType&)
    App_DragImageFlag&=hWnd&
    App_DragImageItem&=ItemN&
    App_DragImageX&=X&
    App_DragImageY&=Y&
    App_DragImageType&=CType&
    App_DragImageForm$=ZFormNameH(hDlg&)
    App_DragImageCID&=CID&
END SUB

GLOBAL App_ActualDragMode&

FUNCTION EZ_IsRightDrag() EXPORT10 AS LONG
    FUNCTION=App_ActualDragMode&
END FUNCTION

TYPE EZMCI_NMHDR
  hwndFrom AS LONG
  idfrom AS LONG
  CODE AS LONG
  signal AS LONG
END TYPE

FUNCTION ZNotify(BYVAL hWnd AS LONG, BYVAL lParam AS LONG, MyRV&) AS LONG
LOCAL RV&, pNM AS NMHDR PTR, pTT AS TOOLTIPTEXT PTR
LOCAL IDNum&, Cancel&, hCtrl AS LONG, N&, UF&
LOCAL pLV1 AS LV_DISPINFO PTR, X&, LX&
LOCAL pTV1 AS TV_DISPINFO PTR
LOCAL LVI AS LV_ITEM, LVC AS NM_LISTVIEW PTR
LOCAL TVI AS TV_ITEM
LOCAL CMsg&, CVal&, ANFlag&
LOCAL IA AS LV_NMITEMACTIVATE PTR
LOCAL LVSI AS LV_SUBITEMHITTESTINFO
' LOCAL TBN AS TBNOTIFY PTR, TB AS TBBUTTON
LOCAL pTVE AS NM_TREEVIEW PTR
LOCAL pTBD AS NMTOOLBAR PTR
LOCAL OldST&, NewST&, LVFlag&, CDFlag&
LOCAL PGC AS NMPGCALCSIZE PTR, PGS AS NMPGSCROLL PTR, WS&, AX&, AY&
LOCAL CP AS POINTAPI
STATIC LastTab&


pNM=lParam
RV&=0
hCtrl=@pNM.hwndFrom
LVFlag&=0
CDFlag&=0
IF hCtrl<>0 THEN
    SELECT CASE  AS CONST$ ZGetClass(hCtrl)
        CASE $MCIClassName
            IF @pNM.code=%EZ_FlagMCI OR @pNM.code=%EZ_FinishMCI THEN
                IDNum&=@pNM.idfrom
                CMsg&=@pNM.code
                DIM MCI_NM AS EZMCI_NMHDR PTR
                MCI_NM=lParam
                CVal&=@MCI_NM.signal
                Cancel&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
                RV&=1
            END IF
        CASE "RICHEDIT","RICHEDIT20A","RICHEDIT50W"
            ' %EZ_RTFLink
            IF @pNM.code=%EN_LINK THEN
                DIM pENL AS ENLINK PTR, EL AS EZLINK
                pENL=lParam
                IDNum&=@pENL.nmhdr.idfrom
                EL.EZCVal = 0
                SELECT CASE AS LONG @pENL.msg
                    CASE %WM_SETCURSOR
                        EL.EZCMsg = %EZ_SelectCursor
                        EL.EZCVal = 1
                    CASE %WM_MOUSEMOVE
                        EL.EZCMsg = %EZ_MouseMove
                        EL.EZCVal = @pENL.lParam
                    CASE %WM_LBUTTONDOWN
                        EL.EZCMsg = %EZ_Click
                        EL.EZCVal = @pENL.lParam
                    CASE %WM_LBUTTONUP
                        EL.EZCMsg = %EZ_LButtonUp
                        EL.EZCVal = @pENL.lParam
                    CASE %WM_RBUTTONUP
                        EL.EZCMsg = %EZ_RButtonUp
                        EL.EZCVal = @pENL.lParam
                    CASE %WM_LBUTTONDBLCLK
                        EL.EZCMsg = %EZ_DClick
                        EL.EZCVal = @pENL.lParam
                    CASE ELSE
                        EL.EZCMsg = %EZ_UnKnown
                        EL.EZCVal = @pENL.msg
                END SELECT
                EL.AhCtrl  = hCtrl
                EL.AMsg    = @pENL.msg
                EL.AwParam = @pENL.wParam
                EL.AlParam = @pENL.lParam
                EL.ACharMin= @pENL.chrg.cpMin
                EL.ACharMax= @pENL.chrg.cpMax
                CVal&=VARPTR(EL)
                Cancel&=0
                App_InsideRTFLink&=1
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_RTFLink, CVal&, Cancel&)
                App_InsideRTFLink&=0
                RV&=1
                IF Cancel&<>0 THEN MyRV&=1 ELSE MyRV&=0
            END IF
        CASE "TOOLTIPS_CLASS32"
            IF @pNM.code=%TTN_NEEDTEXT THEN
                pTT=lParam
                UF&=@pTT.uFlags AND %TTF_IDISHWND
                CVal&=0
                IF UF&=%TTF_IDISHWND THEN
                   IDNum&=GetDlgCtrlID(@pTT.hdr.idfrom)
                ELSE
                   DIM TT AS TOOLINFO5       ' for 4.7 common ctrl or better
                   IF App_CurrentOS&>=501 THEN
                        TT.cbsize=SIZEOF(TT)
                   ELSE
                        TT.cbsize=SIZEOF(TT)-4    ' use smaller structure without .lpReserve member
                   END IF
                   SendMessage hCtrl, %TTM_GETCURRENTTOOL,0, VARPTR(TT)
                   SELECT CASE AS CONST$ ZGetClass(TT.hwnd)
                       CASE "SYSTABCONTROL32"
                           IDNum&=GetDlgCtrlID(TT.hwnd)
                           CVal&=@pTT.hdr.idfrom+1
                       CASE "TOOLBARWINDOW32"
                           IF SendMessage(TT.hwnd, %TB_COMMANDTOINDEX,1,0)>=0 THEN
                               ' this is a toolbarstrip since it has a button with ID 1
                               IDNum&=GetDlgCtrlID(TT.hwnd)
                               CVal&=@pTT.hdr.idfrom
                           ELSE
                               ' this is a normal form toolbar
                               IDNum&=@pTT.hdr.idfrom
                           END IF
                       CASE ELSE
                           IDNum&=@pTT.hdr.idfrom
                   END SELECT
                END IF
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, 8, CVal&, Cancel&)
                IF AppTTipText$<>"" THEN
                    AppTTipTextZ=LEFT$(AppTTipText$,SIZEOF(AppTTipTextZ)-1)
                    @pTT.lpszText=VARPTR(AppTTipTextZ)
                END IF
                'IF AppTTipText$<>"" THEN
                '    @pTT.szText=LEFT$(AppTTipText$, 79)+CHR$(0)
                'END IF
                AppTTipText$=""
                RV&=1
            END IF

        CASE "SYSLISTVIEW32"
            LVFlag&=1
            IF @pNM.code=%NM_CUSTOMDRAW THEN
                CDFlag&=1   ' listview
            END IF
            IF @pNM.code=%LVN_BEGINLABELEDIT THEN
                MyRV&=0
                IDNum&=@pNM.idfrom
                Cancel&=0
                pLV1=lParam
                X&=@pLV1.item.iItem      ' , @pLV1.item.iSubItem)
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_AllowEdit, X&, Cancel&)
                IF Cancel& THEN MyRV&=%TRUE
                RV&=1
            END IF
            IF @pNM.code=%LVN_COLUMNCLICK THEN
                LVC=lParam
                Cancel&=0
                CMsg&=%EZ_Change
                CVal&=@LVC.iSubItem     ' +1   ' is zero indexed so add 1   (fixed in EZGUI 4.0)
                IDNum&=@pNM.idfrom
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
                RV&=1
            END IF
            IF @pNM.code=%LVN_ENDLABELEDIT THEN
                pLV1=lParam
                IF @pLV1.item.mask=%LVIF_TEXT THEN
                    LVI=@pLV1.item
                    SendMessage hCtrl, %LVM_SETITEM, 0, VARPTR(LVI)
                END IF
                MyRV&=0
                RV&=1
            END IF
            IF @pNM.code=%LVN_ITEMCHANGING THEN
                LVC=lParam
                IF (@LVC.uChanged AND %LVIF_STATE) = %LVIF_STATE THEN
                    IF (@LVC.uNewState AND %LVIS_SELECTED) = %LVIS_SELECTED THEN
                        CMsg&=%EZ_Selected
                    ELSE
                        CMsg&=%EZ_UnSelected
                    END IF
                    OldST&=@LVC.uOldState AND %LVIS_SELECTED
                    NewST&=@LVC.uNewState AND %LVIS_SELECTED
                    IF NewST&<>OldST& THEN
                        Cancel&=0
                        CVal&=@LVC.iItem   ' is zero indexed
                        IDNum&=@pNM.idfrom
                        'TYPE NM_LISTVIEW
                        '  hdr AS NMHDR
                        '  iItem AS LONG
                        '  iSubItem AS LONG
                        '  uNewState AS DWORD
                        '  uOldState AS DWORD
                        '  uChanged AS DWORD
                        '  ptAction AS POINTAPI
                        '  lParam AS LONG
                        'END TYPE
                        CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
                        IF CMsg&=%EZ_Selected THEN
                            IF Cancel&<>0 THEN
                                MyRV&=%TRUE
                            END IF
                        END IF
                        RV&=1
                    END IF
                END IF
            END IF
            IF @pNM.code=%NM_CLICK OR @pNM.code=%NM_DBLCLK THEN
                IDNum&=@pNM.idfrom
                CMsg&=%EZ_Click
                IF @pNM.code=%NM_DBLCLK THEN CMsg&=%EZ_DClick
                Cancel&=0
                CVal&=-1
                IA=lParam
                IF IA>0 THEN
                   LVSI.pt=@IA.ptAction
                   hCtrl=@pNM.hwndFrom
                   SendMessage hCtrl, %LVM_SUBITEMHITTEST, 0, VARPTR(LVSI)
                   CVal&=LVSI.iItem
                END IF
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
                IF IA>0 THEN
                    IF CMsg&=%EZ_DClick THEN
                        CMsg&=%EZ_LVDClickInfo
                    ELSE
                        CMsg&=%EZ_LVClickInfo
                    END IF
                    DIM PT AS POINTAPI, MyLV AS EZLVSI, R AS RECT
                    PT=@IA.ptAction
                    N&=0
                    X&=0
                    LX&=0
                    MyLV.Item=LVSI.iItem
                    DO
                        X&=X&+SendMessage(hCtrl, %LVM_GETCOLUMNWIDTH, N&, 0)
                        IF PT.x<X& THEN
                            MyLV.Ax=PT.x
                            MyLV.Ay=PT.y
                            PT.x=PT.x-LX&
                            MyLV.Ix=PT.x
                            R.nLeft=%LVIR_BOUNDS
                            SendMessage hCtrl, %LVM_GETITEMRECT, MyLV.Item, VARPTR(R)
                            MyLV.Iy=PT.y-R.nTop
                            MyLV.Col=N&
                            EXIT DO
                        END IF
                        LX&=X&
                        N&=N&+1
                        IF N&=1000 THEN EXIT DO
                    LOOP
                    Cancel&=0
                    CVal&=VARPTR(MyLV)
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
                END IF
                RV&=1
            END IF
            IF @pNM.code=%LVN_BEGINDRAG OR @pNM.code=%LVN_BEGINRDRAG THEN
                App_ActualDragMode&=0
                IF @pNM.code=%LVN_BEGINRDRAG THEN App_ActualDragMode&=1
                MyRV&=0
                IDNum&=@pNM.idfrom
                LVC=lParam
                X&=@LVC.iItem  ' item index
                CMsg&=%EZ_DragItem
                Cancel&=0
                GetCursorPos CP
                ScreenToClient hCtrl, CP
                AX&=CP.x
                AY&=CP.y
                ZSetSelectLV hCtrl, X&, 1, 1    ' select
                ZSetSelectLV hCtrl, X&, 1, 0    ' focus
                UpdateWindow hCtrl
                ZPrepDragFlags hWnd, IDNum&, hCtrl,X&, AX&,AY&, 2
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, X&, Cancel&)
                App_DragImageFlag&=0
                App_ActualDragMode&=0
                RV&=1
                MyRV&=0
            END IF
        CASE "SYSTREEVIEW32"
            IF @pNM.code=%NM_CUSTOMDRAW THEN
                CDFlag&=2   ' treeview
            END IF
            IF @pNM.code=%TVN_BEGINLABELEDIT THEN
                MyRV&=0
                IDNum&=@pNM.idfrom
                Cancel&=0
                pTV1=lParam
                X&=@pTV1.item.hItem
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_AllowEdit, X&, Cancel&)
                IF Cancel& THEN MyRV&=%TRUE
                RV&=1
            END IF
            IF @pNM.code=%TVN_ENDLABELEDIT THEN
                pTV1=lParam
                IF @pTV1.item.mask=%LVIF_TEXT THEN
                    TVI=@pTV1.item
                    SendMessage hCtrl, %TVM_SETITEM, 0, VARPTR(TVI)
                END IF
                MyRV&=0
                RV&=1
            END IF
            IF @pNM.code=%TVN_ITEMEXPANDING THEN
                MyRV&=0
                IDNum&=@pNM.idfrom
                pTVE=lParam
                X&=@pTVE.itemnew.hItem  ' handle of item
                CMsg&=0
                IF @pTVE.action=%TVE_COLLAPSE THEN CMsg&=%EZ_Collapse
                IF @pTVE.action=(%TVE_COLLAPSE OR %TVE_COLLAPSERESET) THEN CMsg&=%EZ_Collapse
                IF @pTVE.action=%TVE_EXPAND THEN CMsg&=%EZ_Expand
                IF CMsg&<>0 THEN
                    Cancel&=0
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, X&, Cancel&)
                    IF Cancel& THEN MyRV&=%TRUE
                END IF
                RV&=1
            END IF
            IF @pNM.code=%TVN_SELCHANGING THEN
                MyRV&=0
                IDNum&=@pNM.idfrom
                pTVE=lParam
                X&=@pTVE.itemnew.hItem  ' handle of item
                CMsg&=%EZ_Selected
                Cancel&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, X&, Cancel&)
                IF Cancel& THEN
                    MyRV&=%TRUE
                ELSE
                    X&=@pTVE.itemold.hItem  ' handle of item
                    CMsg&=%EZ_UnSelected
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, X&, Cancel&)
                END IF
                RV&=1
            END IF
            IF @pNM.code=%TVN_BEGINDRAG OR @pNM.code=%TVN_BEGINRDRAG THEN
                App_ActualDragMode&=0
                IF @pNM.code=%TVN_BEGINRDRAG THEN App_ActualDragMode&=1
                MyRV&=0
                IDNum&=@pNM.idfrom
                pTVE=lParam
                X&=@pTVE.itemnew.hItem  ' handle of item
                CMsg&=%EZ_DragItem
                Cancel&=0
                ZPrepDragFlags hWnd, IDNum&, hCtrl,@pTVE.itemnew.hItem, @pTVE.ptDrag.x,@pTVE.ptDrag.y, 1
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, X&, Cancel&)
                App_DragImageFlag&=0
                App_ActualDragMode&=0
                RV&=1
                MyRV&=0
            END IF
        CASE "SYSTABCONTROL32"
            IF @pNM.code=%TCN_SELCHANGE THEN
                hCtrl=@pNM.hwndFrom
                IDNum&=@pNM.idfrom
                N&=SendMessage(hCtrl, %TCM_GETCURSEL, 0, 0)+1
                CMsg&=%EZ_Selected
                Cancel&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, N&, Cancel&)
                IF Cancel&=0 THEN
                    CMsg&=%EZ_UnSelected
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, LastTab&, Cancel&)
                    ' send %EZ_Change event
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, 6, N&, Cancel&)
                ELSE
                    SendMessage hCtrl, %TCM_SETCURSEL, LastTab&-1,0
                END IF
                LastTab&=0
                RV&=1
            END IF
            IF @pNM.code=%TCN_SELCHANGING THEN
                hCtrl=@pNM.hwndFrom
                LastTab&=SendMessage(hCtrl, %TCM_GETCURSEL, 0, 0)+1
            END IF
        CASE "TOOLBARWINDOW32"
            IDNum&=@pNM.idfrom
            CMsg&=0
            CVal&=0
            Cancel&=0
            N&=0
            ' IF SendMessage(hCtrl, %TB_COMMANDTOINDEX,1,0)>=0 THEN
             ' this is a toolbar strip since ID 1 exists
            ' end if
            SELECT CASE AS LONG @pNM.code
                CASE %NM_CUSTOMDRAW
                    CDFlag&=3   ' toolbar
                CASE %TBN_DROPDOWN
                    Cancel&=1
                    pTBD=lParam
                    IDNum&=@pTBD.iItem
                    CVal&=2
                    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_Selected, CVal&, Cancel&)
                    IF Cancel&=0 THEN
                        IF CVal&<1 OR CVal&>2 THEN CVal&=1
                        MyRV&=CVal&
                    ELSE
                        MyRV&=0
                    END IF
                    RV&=1
                CASE ELSE
            END SELECT
        CASE "SYSDATETIMEPICK32"
            IF @pNM.code=%DTN_DATETIMECHANGE THEN
                hCtrl=@pNM.hwndFrom
                IDNum&=@pNM.idfrom
                N&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_Change, N&, Cancel&)
                RV&=1
            END IF
        CASE "SYSPAGER"
            IF @pNM.code=%PGN_CALCSIZE THEN
                DIM hForm&, PGFR AS RECT
                PGC=lParam
                ' N&=GetWindowLong(hCtrl,%GWL_USERDATA)
'                IF @PGC.dwFlag=%PGF_CALCHEIGHT THEN
'                    @PGC.iHeight=HIWRD(N&)
'                ELSEIF @PGC.dwFlag=%PGF_CALCWIDTH THEN
'                    @PGC.iWidth=LOWRD(N&)
'                END IF

                 hForm&=GetWindowLong(hCtrl,%GWL_USERDATA)
                 IF hForm&<>0 THEN
                     GetWindowRect hForm&, PGFR
                     IF @PGC.dwFlag=%PGF_CALCHEIGHT THEN
                         @PGC.iHeight=(PGFR.nBottom-PGFR.nTop)
                     ELSEIF @PGC.dwFlag=%PGF_CALCWIDTH THEN
                         @PGC.iWidth=(PGFR.nRight-PGFR.nLeft)
                     END IF
                 END IF
            END IF
            IF @pNM.code=%PGN_SCROLL THEN
                PGS=lParam
                @PGS.iScroll=SendMessage(hCtrl, %PGM_GETBUTTONSIZE,0,0)
            END IF
        CASE "SYSMONTHCAL32"
            IF @pNM.code=%MCN_SELCHANGE THEN
                hCtrl=@pNM.hwndFrom
                IDNum&=@pNM.idfrom
                N&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, %EZ_Change, N&, Cancel&)
                RV&=1
            END IF
        CASE ELSE
    END SELECT
END IF

IF RV&=0 THEN
    ' Unused Notification messages
    '%NM_OUTOFMEMORY          = (%NM_FIRST-1)
    '%NM_RETURN               = (%NM_FIRST-4)
    '%NM_RCLICK               = (%NM_FIRST-5)
    '%NM_RDBLCLK              = (%NM_FIRST-6)
    ANFlag&=1
    IDNum&=@pNM.idfrom
    CVal&=0
    SELECT CASE AS LONG @pNM.code
        CASE %NM_CLICK
             CMsg&=%EZ_Click
        CASE %NM_DBLCLK
             CMsg&=%EZ_DClick
        CASE %NM_SETFOCUS
             CMsg&=%EZ_Focus
        CASE %NM_KILLFOCUS
             CMsg&=%EZ_NoFocus
        CASE ELSE
             ' Pass WM_NOTIFY through
             App_NotifyFlag&=1
             CMsg&=%EZ_Notify
             CVal&=lParam
             IF App_AllowNotify&=0 THEN ANFlag&=0
    END SELECT
    IF ANFlag& THEN
        Cancel&=0
        CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
        App_NotifyFlag&=0
        IF Cancel& THEN
            RV&=1:MyRV&=CVal&
        ELSE
            IF @pNM.code=%NM_CUSTOMDRAW THEN
                IF CDFlag&<>0 THEN GOSUB DoCustomDraw
            END IF
        END IF
    ELSE
        IF @pNM.code=%NM_CUSTOMDRAW THEN
            IF CDFlag&<>0 THEN GOSUB DoCustomDraw
        END IF
    END IF
END IF
App_NotifyFlag&=0

FUNCTION=RV&
EXIT FUNCTION


DoCustomDraw:
DIM pNMC AS NMCUSTOMDRAW PTR
pNMC=lParam
Cancel&=0
IDNum&=@pNM.idfrom
IF @pNMC.dwDrawStage=%CDDS_PREPAINT THEN
    CMsg&=%EZ_NoCustomDraw
    CVal&=0
    zForwardCustomEvent hCtrl,ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&, 0
'    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
    IF Cancel&<>0 THEN
        RV&=1
        MyRV&=%CDRF_NOTIFYITEMDRAW
    END IF
END IF
IF CDFlag&=1 AND @pNMC.dwDrawStage=%CDDS_ITEMPREPAINT THEN
    RV&=1
    MyRV&=%CDRF_NOTIFYSUBITEMDRAW
ELSE
    IF @pNMC.dwDrawStage=%CDDS_ITEMPREPAINT OR @pNMC.dwDrawStage=&H30001 THEN
        DIM EZC AS EZCDRAW, AFG&, ABG&, EXCL1&, ExRVFlag&
        DIM pNMLV AS NMLVCUSTOMDRAW PTR
        pNMLV=lParam
        DIM pNMTV AS NMTVCUSTOMDRAW PTR
        pNMTV=lParam
        DIM pNMTB AS NMTBCUSTOMDRAW PTR
        pNMTB=lParam
        ExRVFlag&=0
        EZC.Item=-1
        EZC.ColorText=-1
        EZC.ColorTextBK=-1
        EZC.Font=-1
        ' set defaults for extra colors for Toolbar
        EZC.Color1=-1
        EZC.IState=@pNMC.uItemState
        EZC.INoDefault=0
        IF CDFlag&=1 THEN   ' listview
            EZC.Item=@pNMC.dwItemSpec
            EZC.SubItem=@pNMLV.iSubItem
            WS&=GetWindowLong(hCtrl, %GWL_STYLE)
            IF (WS& AND %LVS_SHOWSELALWAYS)<>0 THEN
                ' test to correct set select flag
                IF SendMessage(hCtrl, %LVM_GETITEMSTATE,EZC.Item, %LVIS_SELECTED)=0 THEN
                    EZC.IState=EZC.IState AND NOT(%CDIS_SELECTED)
                ELSE
                    EZC.IState=EZC.IState OR %CDIS_SELECTED
                END IF
            END IF
        END IF
        IF CDFlag&=2 THEN
            EZC.Item=@pNMC.dwItemSpec
            EZC.SubItem=@pNMTV.iLevel
        END IF
        IF CDFlag&=3 THEN
            EZC.Item=@pNMC.dwItemSpec   ' button ID
            EZC.SubItem=@pNMC.dwItemSpec-IDNum&-1
        END IF
        CVal&=VARPTR(EZC)
        CMsg&=%EZ_CustomDraw
        zForwardCustomEvent hCtrl,ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&, 0
'        CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), IDNum&, CMsg&, CVal&, Cancel&)
        IF Cancel&=0 THEN
            IF EZC.ColorText<>-1 THEN AFG&=EZ_ColorVal&(EZC.ColorText,1)
            IF EZC.ColorTextBK<>-1 THEN ABG&=EZ_ColorVal&(EZC.ColorTextBK,0)
            IF EZC.Color1<>-1 THEN EXCL1&=EZ_ColorVal&(EZC.Color1,0)    ' Toolbar highlight BG
            SELECT CASE AS LONG CDFlag&
                CASE 1  ' listview
                    IF EZC.Font<>-1 THEN
                        IF EZ_FontHandle(EZC.Font)<>0 THEN
                            SelectObject @pNMLV.nmcd.hdc, EZ_FontHandle(EZC.Font)
                        END IF
                    END IF
                    IF EZC.ColorText<>-1 THEN
                        @pNMLV.clrText=AFG&
                    END IF
                    IF EZC.ColorTextBK<>-1 THEN
                        @pNMLV.clrTextBK=ABG&
                    END IF
                CASE 2  ' treeview
                    IF EZC.Font<>-1 THEN
                        IF EZ_FontHandle(EZC.Font)<>0 THEN
                            SelectObject @pNMTV.nmcd.hdc, EZ_FontHandle(EZC.Font)
                        END IF
                    END IF
                    IF EZC.INoDefault=0 THEN
                        IF (@pNMTV.nmcd.uItemState AND %CDIS_SELECTED) = 0 THEN
                            IF (@pNMTV.nmcd.uItemState AND %CDIS_FOCUS) = 0 THEN
                                IF (@pNMTV.nmcd.uItemState AND %CDIS_HOT) = 0 THEN
                                    IF (@pNMTV.nmcd.uItemState AND %CDIS_INDETERMINATE) = 0 THEN
                                        GOSUB NMSetTreeviewColors
                                    END IF
                                END IF
                            END IF
                        END IF
                    ELSE
                        GOSUB NMSetTreeviewColors
                    END IF
                CASE 3  ' toolbar
                    IF EZC.INoDefault=0 THEN
                        IF (@pNMTB.nmcd.uItemState AND %CDIS_SELECTED) = 0 THEN
                            IF (@pNMTB.nmcd.uItemState AND %CDIS_FOCUS) = 0 THEN
                                IF (@pNMTB.nmcd.uItemState AND %CDIS_HOT) = 0 THEN
                                    IF (@pNMTB.nmcd.uItemState AND %CDIS_INDETERMINATE) = 0 THEN
                                        GOSUB   NMSetToolBarColors
                                    END IF
                                END IF
                            END IF
                        END IF
                    ELSE
                        GOSUB   NMSetToolBarColors
                    END IF
                CASE ELSE
            END SELECT
            RV&=1
            MyRV&=%CDRF_NEWFONT OR ExRVFlag&
        END IF
    END IF
END IF
RETURN

NMSetToolBarColors:
    IF EZC.ColorText<>-1 THEN
        @pNMTB.clrText=AFG&
    END IF
    IF EZC.ColorTextBK<>-1 THEN
       @pNMTB.clrBtnFace=ABG&
    END IF
    IF EZC.Color1<>-1 THEN
        @pNMTB.clrHighlightHotTrack=EXCL1&
        @pNMTB.clrTextHighlight=AFG&
        ExRVFlag&=%TBCDRF_HILITEHOTTRACK
        IF (EZC.INoDefault AND 2)=2 THEN
            ExRVFlag&=ExRVFlag& OR %TBCDRF_NOEDGES
        END IF
        IF (EZC.INoDefault AND 4)=4 THEN
            ExRVFlag&=ExRVFlag& OR %TBCDRF_NOETCHEDEFFECT
        END IF
        IF (EZC.INoDefault AND 8)=8 THEN
            ExRVFlag&=ExRVFlag& OR %TBCDRF_NOOFFSET
        END IF
    END IF
    ' @pNMTB.clrTextHighlight=EXCL4&
    ' @pNMTB.clrMark=EXCL4&
RETURN

NMSetTreeviewColors:
    IF EZC.ColorText<>-1 THEN
        @pNMTV.clrText=AFG&
    END IF
    IF EZC.ColorTextBK<>-1 THEN
        @pNMTV.clrTextBK=ABG&
    END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetCDrawItem(BYVAL CVal&, SubItem&) EXPORT10 AS LONG
DIM EZC AS EZCDRAW PTR, RV&, Dummy AS EZCDRAW
RV&=-1
SubItem&=-1
IF IsBadReadPtr(CVal&, SIZEOF(Dummy))=0 THEN
    EZC=CVal&
    RV&=@EZC.Item
    SubItem&=@EZC.SubItem
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetCDrawItem(BYVAL CVal&, BYVAL FontN&, BYVAL FGC&, BYVAL BGC&) EXPORT10
DIM EZC AS EZCDRAW PTR, Dummy AS EZCDRAW
IF IsBadWritePtr(CVal&, SIZEOF(Dummy))=0 THEN
    EZC=CVal&
    EZ_SaveState
    IF FGC&>=0 AND FGC&<=31 THEN EZ_Color FGC&, -1
    IF BGC&<>-1 THEN
        IF BGC&>=-58 AND BGC&<=31 THEN EZ_Color -1, BGC&
    END IF
    @EZC.Font=FontN&
    @EZC.ColorText=FGC&
    @EZC.ColorTextBK=BGC&
    EZ_RestoreState
END IF
END SUB


SUB EZ_GetCDrawItemState(BYVAL CVal&, SelFlag&, GrayFlag&, DisFlag&, ChkFlag&, FocFlag&, DefFlag&, HotFlag&, MarkFlag&, IFlag&) EXPORT10
DIM EZC AS EZCDRAW PTR, Dummy AS EZCDRAW, S&, SV&
IF IsBadWritePtr(CVal&, SIZEOF(Dummy))=0 THEN
    EZC=CVal&
    S&=@EZC.IState
    SelFlag&=0
    GrayFlag&=0
    DisFlag&=0
    ChkFlag&=0
    FocFlag&=0
    DefFlag&=0
    HotFlag&=0
    MarkFlag&=0
    IFlag&=0
    SV&=S& AND %CDIS_SELECTED
    IF SV&<>0 THEN SelFlag&=1
    SV&=S& AND %CDIS_GRAYED
    IF SV&<>0 THEN GrayFlag&=1
    SV&=S& AND %CDIS_DISABLED
    IF SV&<>0 THEN DisFlag&=1
    SV&=S& AND %CDIS_CHECKED
    IF SV&<>0 THEN ChkFlag&=1
    SV&=S& AND %CDIS_FOCUS
    IF SV&<>0 THEN FocFlag&=1
    SV&=S& AND %CDIS_DEFAULT
    IF SV&<>0 THEN DefFlag&=1
    SV&=S& AND %CDIS_HOT
    IF SV&<>0 THEN HotFlag&=1
    SV&=S& AND %CDIS_MARKED
    IF SV&<>0 THEN MarkFlag&=1
    SV&=S& AND %CDIS_INDETERMINATE
    IF SV&<>0 THEN IFlag&=1
END IF
END SUB

SUB EZ_SetCDrawItemEx(BYVAL CVal&, BYVAL ExColor&, BYVAL DMode&) EXPORT10
DIM EZC AS EZCDRAW PTR, Dummy AS EZCDRAW
IF IsBadWritePtr(CVal&, SIZEOF(Dummy))=0 THEN
    EZC=CVal&
    EZ_SaveState
    IF ExColor&<>-1 THEN
        IF ExColor&>=-58 AND ExColor&<=31 THEN EZ_Color -1, ExColor&
    END IF
    @EZC.Color1=ExColor&
    @EZC.INoDefault=DMode&
    EZ_RestoreState
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AllowNotifyEvents(BYVAL NFlag&) EXPORT10
IF NFlag&=0 THEN
    App_AllowNotify&=0
ELSE
    App_AllowNotify&=1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AllowCommandEvents(BYVAL NFlag&) EXPORT10
IF NFlag&=0 THEN
    App_AllowCommand&=0
ELSE
    App_AllowCommand&=1
END IF
END SUB

'------------------------------------------------------------------------------

SUB ZTimer(BYVAL hWnd AS LONG, BYVAL wParam AS LONG)
    LOCAL Cancel&
    CALL DWORD PBVAddress(2) USING EZ_EventsX(ZFormNameH(hWnd), wParam, 7, 0, Cancel&)
END SUB

'------------------------------------------------------------------------------

FUNCTION ZColorProc(BYVAL hWnd AS LONG, BYVAL hDC AS LONG, BYVAL hCtrl AS LONG, DLGFlag&) AS LONG
LOCAL FGC&, BGC&, BRH&, EXS&, TestTFlag&, BT&
LOCAL CtrlNum&, TFlag&

IF hCtrl=hWnd THEN
   CtrlNum&=-1
ELSE
   CtrlNum&=GetDlgCtrlID(hCtrl)
   TestTFlag&=0
   SELECT CASE AS CONST$ ZGetClass(hCtrl)
       CASE "STATIC"
           TestTFlag&=1
       CASE "BUTTON"
           BT&=GetWindowLong(hCtrl, %GWL_STYLE) AND 15
           SELECT CASE BT&
                CASE %BS_OWNERDRAW
                    TestTFlag&=1
                CASE %BS_AUTORADIOBUTTON, %BS_RADIOBUTTON
                    TestTFlag&=1
                CASE %BS_AUTOCHECKBOX,%BS_CHECKBOX,%BS_3STATE, %BS_AUTO3STATE
                    TestTFlag&=1
                CASE ELSE
           END SELECT
       CASE ELSE
   END SELECT
   IF TestTFlag& THEN
       EXS&=GetWindowLong(hCtrl, %GWL_EXSTYLE)
       IF EXS&<>(EXS& AND (NOT %WS_EX_TRANSPARENT)) THEN TFlag&=1
   END IF
END IF

IF  ProcessWinColors(hWnd ,CtrlNum&, hCtrl, FGC&, BGC&, BRH&, DLGFlag&) THEN
    SetTextColor hDC, FGC&
    IF BGC&>=0 THEN
        SetBkColor hDC, BGC&
        SetBkMode hDC, %OPAQUE
    ELSE
        SetBkColor hDC, 0
        SetBkMode hDC, %TRANSPARENT
    END IF
ELSE
   IF TFlag& THEN
       SetTextColor hDC, GetSysColor(%COLOR_WINDOWTEXT)
   ELSE
       BRH&=0
   END IF
END IF
IF TFlag& THEN
    SetBkColor hDC, 0
    SetBkMode hDC, %TRANSPARENT
    BRH&=GetStockObject(%NULL_BRUSH)
END IF
FUNCTION=BRH&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZScrollProc(BYVAL hWnd AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
' process all Scrollbar events here
LOCAL SV&, SP&, hScroll AS LONG
LOCAL ASP&, OldSP&
LOCAL S AS SCROLLINFO, X&
LOCAL RetVal&
LOCAL CN$
LOCAL CtrlNum&
LOCAL SBStyle1&, SBStyle2&, SBCode&, BJmp&

RetVal&=0
hScroll=lParam
IF hScroll THEN      ' if control has handle
    CN$=zGetClass(hScroll)
    SELECT CASE AS CONST$ CN$
        CASE "SCROLLBAR"
        CASE "MSCTLS_UPDOWN32"
            CtrlNum&=GetDlgCtrlID(hScroll)
            ' ASP&=ZLOWRD(SendMessage(hScroll, %UDM_GETPOS,0,0))
            ASP&=SendMessage(hScroll, %UDM_GETPOS32,0,0)
            FUNCTION=ProcessWinScrollChange(ZFormNameH(hWnd), hWnd, CtrlNum&, hScroll , ASP&)
            EXIT FUNCTION
        CASE "MSCTLS_TRACKBAR32"
            CtrlNum&=GetDlgCtrlID(hScroll)
            ASP&=SendMessage(hScroll, %TBM_GETPOS,0,0)
            FUNCTION=ProcessWinScrollChange(ZFormNameH(hWnd), hWnd, CtrlNum&, hScroll , ASP&)
            EXIT FUNCTION

        CASE ELSE
            ' CtrlNum&=GetDlgCtrlID(hScroll)
            ' ASP&=0      ' Calculate new value for Spin, TrackBar controls
            ' FUNCTION=ProcessWinScrollChange(ZFormNameH(hWnd), hWnd, CtrlNum&, hScroll , ASP&)
            FUNCTION=0
            EXIT FUNCTION
    END SELECT
END IF


SELECT CASE AS LONG Msg
    CASE %WM_VSCROLL
        SBStyle1&=%SB_VERT
        SBStyle2&=%SB_CTL
        SBCode&=-1
    CASE %WM_HSCROLL
        SBStyle1&=%SB_HORZ
        SBStyle2&=%SB_CTL
        SBCode&=-2
    CASE ELSE
        FUNCTION=0
        EXIT FUNCTION
END SELECT

SV&=LOWRD(wParam)
SP&=HIWRD(wParam)
hScroll=lParam
S.cbSize=(SIZEOF(S))
S.fMask=%SIF_ALL
IF hScroll=0 THEN
    X&=GetScrollInfo(hWnd,SBStyle1&,S)
ELSE
    X&=GetScrollInfo(hScroll,SBStyle2&,S)
END IF
ASP&=S.nPos
OldSP&=ASP&
BJmp&=S.nPage
IF BJmp&=1 THEN
    BJmp&=(S.nMax-S.nMin+1)/20
    IF BJmp&<1 THEN BJmp&=1
END IF
SELECT CASE AS LONG SV&
    CASE %SB_BOTTOM         ' sames as %SB_RIGHT
    CASE %SB_ENDSCROLL
    CASE %SB_LINEDOWN       ' sames as %SB_LINERIGHT
        ASP&=ASP&+1
    CASE %SB_LINEUP         ' sames as %SB_LINELEFT
        ASP&=ASP&-1
    CASE %SB_PAGEDOWN       ' sames as %SB_PAGERIGHT
        ASP&=ASP&+BJmp&
    CASE %SB_PAGEUP         ' sames as %SB_PAGELEFT
        ASP&=ASP&-BJmp&
    CASE %SB_THUMBPOSITION
        ASP&=S.nTrackPos    'SP&
    CASE %SB_THUMBTRACK
        ASP&=S.nTrackPos    'SP&
    CASE %SB_TOP            ' sames as %SB_LEFT
    CASE ELSE
END SELECT
IF ASP&<S.nMin THEN ASP&=S.nMin
IF ASP&>S.nMax THEN ASP&=S.nMax
IF ASP&<>OldSP& THEN
    S.cbSize=(SIZEOF(S))
    S.fMask=%SIF_POS
    S.nPos=ASP&
    IF hScroll=0 THEN
        X&=SetScrollInfo(hWnd,SBStyle1&,S, %TRUE)
        RetVal&=ProcessWinScrollChange(ZFormNameH(hWnd), hWnd, SBCode&, hScroll , ASP&)
    ELSE
        X&=SetScrollInfo(hScroll,SBStyle2&,S, %TRUE)
        RetVal&=ProcessWinScrollChange(ZFormNameH(hWnd), hWnd, GetDlgCtrlID(hScroll), hScroll , ASP&)
    END IF
END IF

FUNCTION=RetVal&
END FUNCTION

' ************************** PBV Encapsulated Commands for Windows *********************

'------------------------------------------------------------------------------

FUNCTION ZName(BYVAL D$) AS STRING
    FUNCTION=UCASE$(TRIM$(D$))
END FUNCTION

FUNCTION ZNameF(D$) AS STRING
    FUNCTION=UCASE$(REMOVE$(D$, " "))
END FUNCTION

'------------------------------------------------------------------------------

GLOBAL App_UseFormDoubleBuffer&

SUB EZ_UseDoubleBuffer() EXPORT10
    App_UseFormDoubleBuffer&=1
    ' this will add the WS_EX_COMPOSITED extended style to next form created
END SUB

SUB PBVDefDialogT (BYVAL FormName$, BYVAL Parent$, BYVAL Caption$, BYVAL X!, BYVAL Y!, BYVAL W!, BYVAL H!, BYVAL WTP$, BYVAL MD&, BYVAL CMPFlag&)
LOCAL WS&, EXS&, N&, I&, SP&, hMenu&, Cap$, FI&
N&=ZNewForm(FormName$)
IF N&=0 THEN
    EXIT SUB
END IF

IF LEN(Parent$)<>0 THEN
    ' test for valid parent
    Parent$=ZNameF(Parent$)
    IF PBVFormHandle(Parent$)=0 THEN Parent$=""
END IF

hMenu&=App_EZ_CurMenu&

SP&=0
#IF %DEF(%UseDlgTemplateEx)
    WS&=%WS_POPUP OR %DS_MODALFRAME
#ELSE
    WS&=%WS_POPUP OR %DS_MODALFRAME
#ENDIF
EXS&=0

IF INSTR(WTP$,"S")<>0 THEN   ' No Frame Splash Screen
    IF INSTR(WTP$,"!") THEN
        WS&=%WS_POPUP
        EXS&=EXS& OR %WS_EX_CLIENTEDGE
    ELSE
        IF INSTR(WTP$,"F")=0 THEN
           WS&=%WS_POPUP
        ELSE
           WS&=%WS_POPUP OR %WS_BORDER
        END IF
        EXS&=0
    END IF
ELSEIF INSTR(WTP$,"G")<>0 THEN
    IF INSTR(WTP$,"&") THEN
        WS&=%WS_CHILD
        SP&=1   '   track special page
        EXS&=0    '  %WS_EX_TRANSPARENT
    ELSE
        WS&=%WS_POPUP
        EXS&=0
    END IF
ELSE
    IF INSTR(WTP$, "&")<>0 THEN
        hMenu&=0
        IF Parent$<>"" THEN
'            IF ZFormNum(Parent$)<>0 THEN
                #IF %DEF(%UseDlgTemplateEx)
                    WS&=%WS_CHILD
                    EXS&=%WS_EX_CONTROLPARENT
                #ELSE
                    WS&=%WS_CHILD OR %DS_CONTROL
                    EXS&=0
                #ENDIF

'                IF INSTR(WTP$,"I") THEN
'                     EXS&=EXS& OR %WS_EX_TRANSPARENT
'                END IF
                SP&=1   '   track special page
                IF INSTR(WTP$,"F")<>0 THEN
                    #IF %DEF(%UseDlgTemplateEx)
                        WS&=WS& OR %WS_BORDER
                    #ELSE
                        WS&=WS& OR %DS_MODALFRAME
                    #ENDIF
                ELSEIF INSTR(WTP$,"!")<>0 THEN
                    #IF %DEF(%UseDlgTemplateEx)
                        EXS&=EXS& OR %WS_EX_CLIENTEDGE
                    #ENDIF
                END IF
'            END IF
        END IF
    END IF
END IF
IF INSTR(WTP$, "&")=0 THEN  ' not a Page form
    IF INSTR(WTP$,"4") THEN ' MDI Parent
        EXS&=EXS& ' OR %WS_EX_CONTROLPARENT
    END IF
    IF INSTR(WTP$,"5") THEN  ' MDI child
        EXS&=%WS_EX_MDICHILD OR %WS_EX_CONTROLPARENT
        WS&=%WS_CHILD OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS
        IF INSTR(WTP$,"S")<>0 THEN   ' No Frame Splash Screen
            IF INSTR(WTP$,"F")=0 THEN
                WS&=WS& OR %WS_BORDER
            END IF
        ELSE
            EXS&=EXS& OR %WS_EX_WINDOWEDGE
        END IF
    END IF
END IF
' IF App_MakeOwnedForm& THEN SP&=2    ' owned form limited by parent
' IF INSTR(WTP$,"H")=0 THEN WS&=WS& OR %WS_VISIBLE
' Not needed since the Window will be shown for you
IF CMPFlag& THEN
    Cap$=Caption$
    Caption$=""
END IF
IF Caption$<>"" THEN
   IF INSTR(WTP$,"G")=0 THEN
       WS&=WS& OR %WS_CAPTION
       #IF %DEF(%UseDlgTemplateEx)
           EXS&=EXS& OR %WS_EX_WINDOWEDGE OR %WS_EX_DLGMODALFRAME
           IF INSTR(WTP$,"=") THEN EXS&=EXS& OR %WS_EX_TOOLWINDOW
       #ENDIF
       IF INSTR(WTP$,"_")<>0 THEN WS&=WS& OR %WS_MINIMIZEBOX
       IF INSTR(WTP$,"^")<>0 THEN WS&=WS& OR %WS_MAXIMIZEBOX
       #IF %DEF(%UseDlgTemplateEx)
           IF INSTR(WTP$,"X")<>0 THEN WS&=WS& OR %WS_SYSMENU
       #ELSE
           IF INSTR(WTP$,"X")<>0 THEN WS&=WS& OR %WS_SYSMENU
       #ENDIF
   END IF
END IF
IF CMPFlag& THEN
    Caption$=Cap$
END IF
IF INSTR(WTP$,"R")<>0 THEN
    WS&=WS& OR %WS_THICKFRAME
    AppForms(N&).FSizable=1
    ' EXS&=EXS& AND (NOT %WS_EX_DLGMODALFRAME)    ' Remove this style for sizable frames
ELSE
    AppForms(N&).FSizable=0
END IF
IF INSTR(WTP$,"V")<>0 THEN WS&=WS& OR %WS_VSCROLL

IF INSTR(WTP$,"^")=0 THEN
    IF INSTR(WTP$,"_")=0 THEN
        IF INSTR(WTP$,"?")<>0 THEN EXS&=EXS& OR %WS_EX_CONTEXTHELP
    END IF
END IF

IF INSTR(WTP$,"B")<>0 THEN
'   WS&=WS& OR %WS_VSCROLL
   WS&=WS& OR %WS_HSCROLL
END IF

IF INSTR(WTP$,"K")<>0 THEN
    ' add clipping
    WS&=WS& OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS
END IF

IF INSTR(WTP$, "W")<>0 THEN
    ' WinLift window    (doesn't like the clip styles)
    WS&=%WS_POPUP OR %WS_SYSMENU '   OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS
    EXS&=0
END IF


IF INSTR(WTP$, "&")=0 THEN  ' not a page form
    IF INSTR(WTP$,"T")<>0 THEN
       IF INSTR(WTP$,"4") THEN ' MDI Parent
           EXS&=EXS& OR %WS_EX_TOPMOST
       ELSEIF INSTR(WTP$,"5") THEN ' MDI child
           EXS&=EXS& OR %WS_EX_TOPMOST
       ELSE
           #IF %DEF(%UseDlgTemplateEx)
               EXS&=EXS& OR %WS_EX_TOPMOST
           #ELSE
               WS&=WS& OR %DS_SYSMODAL    'EXS&=EXS& OR %WS_EX_TOPMOST
           #ENDIF
       END IF
    END IF
END IF


IF INSTR(WTP$,"D")<>0 THEN
    AppForms(N&).FType=2
ELSE
    AppForms(N&).FType=1
END IF
IF CMPFlag&<>0 THEN AppForms(N&).FType=3    ' new Component Form
IF INSTR(WTP$,"4") THEN AppForms(N&).FType=4
IF INSTR(WTP$,"5") THEN AppForms(N&).FType=5

IF App_MakeOwnedForm& THEN
   App_MakeOwnedForm&=0
       IF INSTR(WTP$,"T")=0 THEN
           IF INSTR(WTP$, "W")=0 THEN
               IF INSTR(WTP$, "&")=0 THEN
                   SP&=2    ' owned form limited by parent
                   ' App_MakeOwnedForm&=1
               END IF
           END IF
       END IF
END IF
' don't use this since it slows things up terribly and some windows don't paint correctly.
'EXS&=EXS& or %WS_EX_COMPOSITED

IF App_UseFormDoubleBuffer&<>0 THEN
    EXS&=EXS& OR %WS_EX_COMPOSITED      ' warning! may cause problems on Windows 10
END IF
App_UseFormDoubleBuffer&=0

AppFormResize$(N&)=""   ' store resize data for controls
FOR FI&=1 TO %MaxFormStrings
    AppFormStringData$(N&, FI&)="" ' store string data for Components or forms
NEXT FI&
AppForms(N&).FhWnd=0
AppForms(N&).FParentName=Parent$
AppForms(N&).FName=ZNameF(FormName$)
AppForms(N&).FMenuHandle=hMenu&
AppForms(N&).FCaption=Caption$

' --------------------
' set colors and font
I&=zGetNewControlIndex
IF I&<>0 THEN
'    ZSetControlArray I&, N&,App_EZ_AFGColor&,App_EZ_ABGColor&,App_EZ_AFont&,0,0,Parent$,0,App_EZ_CurLayer&,0
    ZSetControlArray I&, N&,-1,App_EZ_ABGColor&,App_EZ_AFont&,0,0,Parent$,0,App_EZ_CurLayer&,0

'   This is what the call looks like for controls
'   I need to compensant for page forms which are a component
'   ZSetControlArray I&,(IDNum&*1000)+AFNum&,App_EZ_AFGColor&,App_EZ_ABGColor&,App_EZ_AFont&,0,0,ZFormNameH(hParent&),0, App_EZ_CurLayer&,0
END IF
' --------------------


AppForms(N&).FBackColor=0

' this is for row, column format
AppForms(N&).FWidth=W! * App_EZ_CharW
AppForms(N&).FHeight=H! * App_EZ_CharH
AppForms(N&).FTop=X! * App_EZ_CharW
AppForms(N&).FLeft=Y! * App_EZ_CharH
AppForms(N&).FCol=W!
AppForms(N&).FRow=H!
AppForms(N&).FColLeft=X!
AppForms(N&).FRowTop=Y!
AppForms(N&).FStartUpPosition=5
IF INSTR(WTP$,"C") THEN
        AppForms(N&).FStartUpPosition=2
END IF
IF INSTR(WTP$,"O") THEN         ' Offset by owner
    IF Parent$<>"" THEN
        AppForms(N&).FStartUpPosition=4
        IF INSTR(WTP$,"C") THEN
            AppForms(N&).FStartUpPosition=1
        END IF
    END IF
END IF
AppForms(N&).FModal=MD&
AppForms(N&).FStyle=WS&
AppForms(N&).FEXStyle=EXS&
AppForms(N&).FSpecial=SP&
AppForms(N&).FBrush=App_EZ_ABGColor&
AppForms(N&).FAccel=0
AppForms(N&).FhToolbar=0
AppForms(N&).FhStatusbar=0
AppForms(N&).FhToolTip=0
AppForms(N&).FDotBG=0
AppForms(N&).FhWnd2=0   ' Holder Handle for control holder window (MDI client)
AppForms(N&).FhWnd3=0   ' alternate control parent (1)
AppForms(N&).FhWnd4=0   ' alternate control parent (2)
AppForms(N&).FhWnd5=0   ' alternate control parent (3)
AppForms(N&).FhWnd6=0   ' alternate control parent (4)

IF INSTR(WTP$, "+")<>0 THEN
    AppForms(N&).FSnapMode=1
ELSE
    AppForms(N&).FSnapMode=0
END IF

IF INSTR(WTP$,"#")<>0 THEN
   AppForms(N&).FDotBG=1
   IF INSTR(WTP$,"|")<>0 THEN AppForms(N&).FDotBG=2
END IF
AppForms(N&).FTRAY=App_FTRAY    ' App_FTray left empty for zeroing out
IF INSTR(WTP$,"G")<>0 THEN
    AppForms(N&).FBitmap=App_FormShapeBitmap&
    AppForms(N&).FRegion=0
    AppForms(N&).FTColor=App_FormShapeTColor&
ELSE
    AppForms(N&).FBitmap=0
    AppForms(N&).FRegion=0
    AppForms(N&).FTColor=0
END IF
AppForms(N&).FMinW=0
AppForms(N&).FMinH=0
AppForms(N&).FMaxW=0
AppForms(N&).FMaxH=0
AppForms(N&).FUserList=STRING$(%MaxFormListSize, CHR$(0))
AppForms(N&).FCloseFlag=1
END SUB

'------------------------------------------------------------------------------

FUNCTION ZNewForm(FormName$) AS LONG
LOCAL N&,RV&, I&
RV&=0
FormName$=ZNameF(FormName$)
IF LEN(FormName$)=0 THEN
    FUNCTION=0
    EXIT FUNCTION
END IF
N&=ZFormNum(FormName$)
IF N&=0 THEN
    FOR I&=1 TO AppLastForm&
        IF LTRIM$(AppForms(I&).FName)="" THEN
            IF AppForms(I&).FhWnd=0 THEN
                N&=I&
                EXIT FOR
            END IF
        END IF
    NEXT I&
    IF N&=0 THEN
        N&=AppLastForm&+1
        IF N&<=UBOUND(AppForms) THEN
            AppLastForm&=N&
        ELSE
            N&=0
        END IF
    END IF
    RV&=N&
END IF

' EZ_DPrint "New Form "+str$(RV&)+str$(AppLastForm&)

FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB PBVNewMDIParent(BYVAL hParent&, BYVAL AFNum&, BYVAL MType&)
LOCAL szClassName AS ASCIIZ*32, hWnd AS LONG, WS AS DWORD, EXWS AS DWORD
LOCAL szTemp AS ASCIIZ*32, X&,Y&,W&,H&, hMenu&
STATIC LastFN&
szClassName="EZGUI_TYPE"+LTRIM$(STR$(AppForms(AFNum&).FType))+"_32"+CHR$(0)
WS=AppForms(AFNum&).FStyle
EXWS=AppForms(AFNum&).FEXStyle
szTemp=""
X&=0
Y&=0
W&=AppForms(AFNum&).FWidth*8
H&=AppForms(AFNum&).FHeight*16
hMenu&=0


AppWinNumber&=AFNum&
IF MType&=1 THEN    ' MDI Parent
    hWnd  = CreateWindowEX(EXWS     , _         ' Extended Window Style
                         szClassName, _            ' window class name
                              szTemp, _              ' window caption
                                  WS, _              ' window style
                                  X&, _               ' initial x position
                                  Y&, _               ' initial y position
                                  W&, _             ' initial x size
                                  H&, _            ' initial y size
                            hParent&, _              ' parent window handle
                              hMenu&, _                ' window menu handle
                         AppInstance, _            ' program instance handle
                         BYVAL %NULL)            ' creation parameters
ELSE            ' MDI Child

    hWnd  = CreateWindowEX(EXWS     , _         ' Extended Window Style
                         szClassName, _            ' window class name
                              szTemp, _              ' window caption
                                  WS, _              ' window style
                                  X&, _               ' initial x position
                                  Y&, _               ' initial y position
                                  W&, _             ' initial x size
                                  H&, _            ' initial y size
                            hParent&, _              ' parent window handle
                              hMenu&, _                ' window menu handle
                         AppInstance, _            ' program instance handle
                         BYVAL %NULL)            ' creation parameters


'    hWnd = CreateMDIWindow(szClassName, _     ' window class name
'                                szTemp, _              ' window caption
'                                    WS, _              ' window style
'                                    X&, _               ' initial x position
'                                    Y&, _               ' initial y position
'                                    W&, _             ' initial x size
'                                    H&, _            ' initial y size
'                              hParent&, _              ' parent window handle
'                           AppInstance, _            ' program instance handle
'                          BYVAL %NULL)            ' creation parameters
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVLoad (FormName$)
LOCAL hInstance   AS LONG
LOCAL AFNum&
LOCAL D$, P&
LOCAL N&    ', N2&
LOCAL hOwner&

AFNum&=ZFormNum(FormName$)
IF AFNum&=0 THEN
   ' form isn't defined
   EXIT SUB
END IF

hInstance = AppInstance&

D$=LTRIM$(RTRIM$(AppForms(AFNum&).FParentName))
P&=PBVFormHandle(D$)

IF App_CommandLinehWnd&<>0 THEN
    P&=App_CommandLinehWnd&
    App_CommandLinehWnd&=0
END IF

IF P&<>0 THEN
   hOwner&=P&
   IF AppForms(AFNum&).FType=5 THEN
      N&=ZFormNum(D$)
      P&=AppForms(N&).FhWnd2
      IF P&<>0 THEN hOwner&=P&
   END IF
ELSE
   hOwner&=%HWND_DESKTOP
END IF
IF AppForms(AFNum&).FType=4 THEN
   PBVNewMDIParent hOwner&, AFNum&, 1
ELSEIF AppForms(AFNum&).FType=5 THEN
   PBVNewMDIParent hOwner&, AFNum&, 0
ELSE
    IF App_TempFormParent&<>0 THEN hOwner&=App_TempFormParent&
    PBVNewDialog hOwner&, AFNum&
    App_TempFormParent&=0
END IF

END SUB

'------------------------------------------------------------------------------
'TYPE DlgTemplate
'  Style         AS DWORD
'  ExtendedStyle AS DWORD
'  NumberOfItems AS WORD
'  x             AS WORD
'  y             AS WORD
'  cx            AS WORD
'  cy            AS WORD
'END TYPE

TYPE PBVDialogTemplate
  dlg1 AS DlgTemplate
  dlgstring AS STRING*200
'  blank1 AS WORD     ' menu array - none used
'  dclass AS WORD     ' set to FFFF
'  dclassatom AS WORD
'  blank3 AS WORD
'  fntsize AS WORD
'  fntname AS STRING*80  ' 13 Unicode characters for 'MS Sans Serif' + 2 null bytes
END TYPE
'------------------------------------------------------------------------------

FUNCTION DlgProc(BYVAL hDlg   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) AS LONG
FUNCTION=0
END FUNCTION



SUB PBVNewDialog (BYVAL hParent&, BYVAL AFNum&)
LOCAL CN$, CNW$, hDlg AS LONG, N&
LOCAL DlgTmp AS PBVDialogTemplate, B&, DP AS DWORD
' create a blank dialogbox using a template if ID # is zero (or less)
CN$="EZGUI_TYPE"+LTRIM$(STR$(AppForms(AFNum&).FType))+"_32"+CHR$(0)
N&=MultiByteToWideChar(%CP_OEMCP, 0, BYVAL STRPTR(CN$), -1, BYVAL 0, 0)
CNW$=STRING$(N&*2, CHR$(0))
MultiByteToWideChar %CP_OEMCP, 0, BYVAL STRPTR(CN$), -1, BYVAL STRPTR(CNW$), N&
#IF %DEF(%UseDlgTemplateEx)
    DlgTmp.dlg1.dlgver=1            ' set to 1     :older API docs reverse
    DlgTmp.dlg1.signature=&HFFFF    ' set to &FFFF :meaning of first two members
    DlgTmp.dlg1.helpid=0            ' help ID number passed in help message
#ENDIF
DlgTmp.dlg1.Style=AppForms(AFNum&).FStyle
DlgTmp.dlg1.ExtendedStyle=AppForms(AFNum&).FEXStyle
'msgbox hex$(DlgTmp.dlg1.Style)+","+hex$(DlgTmp.dlg1.ExtendedStyle)
' the rest of the values are INTEGERS

'DlgTmp.dlg1.Style= %DS_MODALFRAME OR %WS_SYSMENU OR %WS_CAPTION OR %WS_POPUP or %WS_VISIBLE
'DlgTmp.dlg1.ExtendedStyle=0

DlgTmp.dlg1.NumberOfItems=0
DlgTmp.dlg1.x=0
DlgTmp.dlg1.y=0
B&=GetDialogBaseUnits()
DlgTmp.dlg1.cx=(AppForms(AFNum&).FWidth * 4) / LOWRD(B&)
DlgTmp.dlg1.cy=(AppForms(AFNum&).FHeight * 8) / HIWRD(B&)

' DlgTmp.blank1=0    ' No menu
' DlgTmp.dclass=&HFFFF
' DlgTmp.dclassatom=LOWRD(App_DlgClassAtom(AppForms(AFNum&).FType))
' DlgTmp.blank3=0    ' No Caption
DlgTmp.dlgstring=CHR$(0)+CHR$(0)+CNW$+CHR$(0)+CHR$(0)

IF App_FormDialogProc=0 THEN
    DP=CODEPTR(DlgProc)
ELSE
    DP=App_FormDialogProc
END IF
App_FormDialogProc=0

AppWinNumber&=AFNum&

' msgbox str$(hParent&)+" is parent window handle"

hDlg = CreateDialogIndirectParam(AppInstance&, DlgTmp.dlg1, hParent&, DP, AFNum&)

END SUB

'------------------------------------------------------------------------------

%WindowClassExtraData       = 2

SUB SetMyWindowLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
LOCAL I&
IF N&>=1 AND N&<=%WindowClassExtraData THEN
    I&=((N&-1)*4)+%DLGWINDOWEXTRA
    IF IsWindow(hWnd) THEN
        SetWindowLong hWnd, I&, V&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION GetMyWindowLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG
LOCAL I&, RV&
RV&=0
IF N&>=1 AND N&<=%WindowClassExtraData THEN
    I&=((N&-1)*4)+%DLGWINDOWEXTRA
    IF IsWindow(hWnd) THEN
        RV&=GetWindowLong(hWnd, I&)
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------
GLOBAL App_MDIClientOrigProc&

SUB zUnRegisterClass(BYVAL CN$)
    LOCAL szClassName AS ASCIIZ * 80
    szClassName            = CN$+CHR$(0)
    UnRegisterClass szClassName, AppInstance&
END SUB

GLOBAL App_RegisterClassAtom&

SUB zRegisterClass(BYVAL MyCN$, BYVAL MyStyle&, BYVAL CP AS DWORD, BYVAL MyCExtra&, BYVAL MyWExtra&, BYVAL MyCursor&, BYVAL MyhBrush&)
    LOCAL windowclass    AS WndClassEx
    LOCAL szClassName AS ASCIIZ * 80
    szClassName               = MyCN$+CHR$(0)
    windowclass.cbSize        = SIZEOF(windowclass)
    windowclass.style         = MyStyle&
    windowclass.lpfnWndProc   = CP
    windowclass.cbClsExtra    = MyCExtra&
    windowclass.cbWndExtra    = MyWExtra&
    windowclass.hInstance     = AppInstance&
    windowclass.hIcon         = %NULL
    windowclass.hCursor       = MyCursor&            ' LoadCursor(%NULL, BYVAL %IDC_CROSS)
    windowclass.hbrBackground = MyhBrush&            'GetStockObject( %WHITE_BRUSH )
    windowclass.lpszMenuName  = %NULL
    windowclass.lpszClassName = VARPTR( szClassName )
    windowclass.hIconSm       = %NULL
    App_RegisterClassAtom&=RegisterClassEx(windowclass)
END SUB

FUNCTION zRegisterSuperClass(BYVAL sCN$, BYVAL MyCN$, BYVAL MyStyle&, BYVAL CP AS DWORD, BYVAL MyCExtra&, BYVAL MyWExtra&, BYVAL MyCursor&, BYVAL MyhBrush&) AS DWORD
    LOCAL windowclass    AS WndClassEx
    LOCAL szClassName AS ASCIIZ * 80, RV AS DWORD
    szClassName=sCN$+CHR$(0)
    windowclass.cbSize        = SIZEOF(windowclass)
    IF GetClassInfoEx(AppInstance&, szClassName, windowclass) THEN
        RV=windowclass.lpfnWndProc
        IF MyCursor&<>0 THEN windowclass.hCursor=MyCursor&
        IF MyhBrush&<>0 THEN windowclass.hbrBackground=MyhBrush&
        zRegisterClass MyCN$, (Windowclass.style AND (NOT %CS_GLOBALCLASS)) OR MyStyle&, CP, windowclass.cbClsExtra+MyCExtra&, windowclass.cbWndExtra+MyWExtra&, windowclass.hCursor, windowclass.hbrBackground
    END IF
    FUNCTION=RV
END FUNCTION

'------------------------------------------------------------------------------

SUB PBVSuperClass()
    App_MDIClientOrigProc& = zRegisterSuperClass("MDICLIENT", $MDIClientClassName, 0, CODEPTR(MDIClientClassWndProc), 0,0,0,0)
END SUB

'------------------------------------------------------------------------------

FUNCTION MDIClientClassWndProc(BYVAL hCtrl AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) AS LONG

SELECT CASE AS LONG Msg
    CASE %WM_VSCROLL,%WM_HSCROLL
        InvalidateRect hCtrl, BYVAL %NULL, %TRUE
    CASE %WM_ERASEBKGND
        DIM EZP AS EZPAINT
        DIM Cancel&, F$, CRect AS RECT

        SaveDC wParam

        'TYPE EZPAINT
        '    hDC AS LONG
        '    W AS LONG
        '    H AS LONG
        'END TYPE
        EZP.hDC=wParam
        GetClientRect hCtrl, CRect
        EZP.W=CRect.nRight-CRect.nLeft
        EZP.H=CRect.nBottom-CRect.nTop
        F$=ZFormNameH(GetParent(hCtrl))
        CALL DWORD PBVAddress(2) USING EZ_EventsX(F$, GetDlgCtrlID(hCtrl) ,%EZ_PaintBG, VARPTR(EZP), Cancel&)

        RestoreDC wParam, -1

        IF Cancel&<>0 THEN
            FUNCTION=1
            EXIT FUNCTION
        END IF
    CASE ELSE
END SELECT
FUNCTION = CallWindowProc(BYVAL App_MDIClientOrigProc&,hCtrl,Msg,wParam,lParam)

END FUNCTION

'------------------------------------------------------------------------------

SUB PBVRegDialog (BYVAL CName$)
    LOCAL ClassName AS STRING
    LOCAL N&, X&, ST&
    STATIC CCount&
    STATIC IFlag&
    IF CName$="" THEN
        IF IFlag&=0 THEN
            FOR N&=1 TO 5
                ' Type 1 - Normal EZGUI Form
                ' Type 2 - Normal EZGUI Form (NO Close X)
                ' Type 3 - Component Form (Page form style only for components)
                ' Type 4 - MDI Parent
                ' Type 5 - MDI Child
                ClassName            = "EZGUI_TYPE"+LTRIM$(STR$(N&))+"_32"
                GOSUB RegDlg
            NEXT N&
            IFlag&=1
        END IF
    ELSE
        N&=0
        CCount&=CCount&+1
        CName$="CMP_"+TRIM$(CName$)+"_"+TRIM$(STR$(CCount&))
        ClassName            = "EZGUI_TYPE_"+UCASE$(CName$)
        GOSUB RegDlg
    END IF
    EXIT SUB

    RegDlg:
        SELECT CASE AS LONG N&
            CASE 2
                ST& = %CS_DBLCLKS OR %CS_NOCLOSE ' OR %CS_VREDRAW OR %CS_HREDRAW
            CASE ELSE
                ST& = %CS_DBLCLKS ' OR %CS_VREDRAW OR %CS_HREDRAW
        END SELECT
        zRegisterClass ClassName, ST&,CODEPTR(WndProc),0, %DLGWINDOWEXTRA+(%WindowClassExtraData * 4), LoadCursor( %NULL, BYVAL %IDC_ARROW ), 0
    RETURN
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_AnsiToUnicode(BYVAL Text$, BYVAL NFlag&) EXPORT10 AS STRING
  LOCAL Buffer$
  IF RIGHT$(Text$,1)=CHR$(0) THEN Text$=LEFT$(Text$, LEN(Text$)-1)
  Buffer$ = SPACE$(LEN(Text$) * 2)
  MultiByteToWideChar %CP_ACP, %NULL, BYVAL STRPTR(Text$), LEN(Text$), BYVAL STRPTR(Buffer$), LEN(Text$)
  IF NFlag& THEN Buffer$=Buffer$+CHR$(0)+CHR$(0)    ' Double Null Termination
  FUNCTION = Buffer$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_UnicodeToAnsi(BYVAL Text$, BYVAL NFlag&) EXPORT10 AS STRING
  LOCAL Buffer$
  IF RIGHT$(Text$, 2)=CHR$(0)+CHR$(0) THEN Text$=LEFT$(Text$,LEN(Text$)-2)
  Buffer$ = SPACE$(LEN(Text$) \ 2)
  WideCharToMultiByte %CP_ACP, %NULL, BYVAL STRPTR(Text$), LEN(Text$)\2, BYVAL STRPTR(Buffer$), LEN(Buffer$), BYVAL %NULL, BYVAL %NULL
  IF NFlag& THEN Buffer$=Buffer$+CHR$(0)
  FUNCTION = Buffer$
END FUNCTION


'------------------------------------------------------------------------------

FUNCTION EZ_ScaleToCharSize(BYVAL SV!, BYVAL SMode$) EXPORT10 AS SINGLE
LOCAL RV!, X&, Y&, XX!, YY!, hDC AS LONG
RV!=0
hDC = GetDC(%HWND_DESKTOP)
X&=GetDeviceCaps(hDC, %LOGPIXELSX) ' Pixels per Inch
XX!=X&
Y&=GetDeviceCaps(hDC, %LOGPIXELSY) ' Pixels per Inch
YY!=Y&
ReleaseDC %HWND_DESKTOP, hDC
SELECT CASE AS CONST$ UCASE$(SMode$)
    CASE "TX"   ' Twips X axis
        RV!=((SV!/1440)*XX!)/App_EZ_CharW
    CASE "TY"   ' Twips Y axis
        RV!=((SV!/1440)*YY!)/App_EZ_CharH
    CASE "PX"   ' Pixels X axis
        RV!=SV!/App_EZ_CharW
    CASE "PY"   ' Pixels Y axis
        RV!=SV!/App_EZ_CharH
    CASE "IX"   ' Inches X axis
        RV!=(SV!*XX!)/App_EZ_CharW
    CASE "IY"   ' Inches Y axis
        RV!=(SV!*YY!)/App_EZ_CharH
    CASE ELSE
END SELECT
FUNCTION=RV!
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_X(BYVAL CX!) EXPORT10 AS LONG
FUNCTION=INT(CX! * App_EZ_CharW)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_Y(BYVAL CY!) EXPORT10 AS LONG
FUNCTION=INT(CY! * App_EZ_CharH)
END FUNCTION

'------------------------------------------------------------------------------


FUNCTION EZ_CX(BYVAL X&) EXPORT10 AS SINGLE
    FUNCTION=(X&)/App_EZ_CharW
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_CY(BYVAL Y&) EXPORT10 AS SINGLE
    FUNCTION=(Y&)/App_EZ_CharH
END FUNCTION

FUNCTION EZ_AreaFitP(BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL TX&, BYVAL TY&, BYVAL TW&, BYVAL TH&) EXPORT10 AS LONG
    LOCAL R AS RECT, TR AS RECT, FR AS RECT, RV&
    R.nLeft=X&
    R.nTop=Y&
    R.nRight=X&+W&
    R.nBottom=Y&+H&
    TR.nLeft=TX&
    TR.nTop=TY&
    TR.nRight=TX&+TW&
    TR.nBottom=TY&+TH&
    IF IntersectRect(FR, R, TR) THEN
        RV&=1
        IF FR<>TR THEN RV&=2    ' not a complete fit
    ELSE
        RV&=0
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_AreaFit(BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL TC!, BYVAL TR!, BYVAL TW!, BYVAL TH!) EXPORT10 AS LONG
    LOCAL  X&,Y&,WW&,HH&,TX&,TY&,TWW&,THH&
    X&=EZ_X(C!)
    Y&=EZ_Y(R!)
    WW&=EZ_X(W!)
    HH&=EZ_Y(H!)
    TX&=EZ_X(TC!)
    TY&=EZ_Y(TR!)
    TWW&=EZ_X(TW!)
    THH&=EZ_Y(TH!)
    FUNCTION=EZ_AreaFitP(X&,Y&,WW&,HH&,TX&,TY&,TWW&,THH&)
END FUNCTION

'------------------------------------------------------------------------------
'FUNCTION ZClassName(BYVAL FormName$) AS STRING
'STATIC N&
'N&=N&+1
'FUNCTION="EZ_32_"+FormName$+"_"+LTRIM$(STR$(N&))+CHR$(0)
'END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetMenuCount(BYVAL hMenu&) EXPORT10 AS LONG
LOCAL RV&
RV&=0
IF hMenu&<>0 THEN
    IF IsMenu(hMenu&) THEN
        RV&=GetMenuItemCount(hMenu&)
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetMenuItem (BYVAL hMenu&, ID&, MText$, CProp$, hSubMenu&, BYVAL PosFlag&) EXPORT10 AS LONG
LOCAL TmpMenu AS MENUITEMINFO, RV&, OKFlag&
LOCAL Temp$, CP$
RV&=0
IF hMenu&<>0 THEN
    IF IsMenu(hMenu&) THEN
        OKFlag&=1
        IF PosFlag& THEN
            IF ID&<0 THEN OKFlag&=0
        ELSE
            IF ID&<1 THEN OKFlag&=0
        END IF
        IF OKFlag& THEN
            Temp$=STRING$(256,CHR$(0))
            TmpMenu.dwTypeData=STRPTR(Temp$)
            TmpMenu.cch=255
            TmpMenu.cbSize=SIZEOF(TmpMenu)
            TmpMenu.fMask=%MIIM_TYPE OR %MIIM_STATE OR %MIIM_ID OR %MIIM_SUBMENU
            IF PosFlag&<>0 THEN PosFlag&=%TRUE
            MText$=""
            CProp$=""
            CP$=""
            IF GetMenuItemInfo(hMenu&, ID&, PosFlag&, TmpMenu) THEN
                ID&=TmpMenu.wID
                IF (TmpMenu.fType AND %MFT_STRING) = %MFT_STRING THEN
                    MText$=PEEK$(TmpMenu.dwTypeData,TmpMenu.cch)
                END IF
                IF (TmpMenu.fType AND %MF_SEPARATOR) = %MF_SEPARATOR THEN
                    MText$="-"
                END IF
                IF (TmpMenu.fType AND %MFT_OWNERDRAW) = %MFT_OWNERDRAW THEN CP$=CP$+"O"
                IF (TmpMenu.fState AND %MF_CHECKED)=%MF_CHECKED THEN CP$=CP$+"X"
                IF (TmpMenu.fState AND %MF_GRAYED)=%MF_GRAYED THEN CP$=CP$+"D"
                IF (TmpMenu.fState AND %MF_HILITE)=%MF_HILITE THEN CP$=CP$+"H"
                CProp$=CP$
                hSubMenu&=TmpMenu.hSubMenu
                RV&=%TRUE
            END IF
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION PBVMenu(BYVAL hMenu&, BYVAL ID&, BYVAL EID&, BYVAL MText$, BYVAL hSubMenu&, BYVAL MAction&, BYVAL CProp$) AS LONG
LOCAL TmpMenu AS MENUITEMINFO
LOCAL vMask&, vType&, vState&, hM&, ByIDFlag&
LOCAL zText AS ASCIIZ*128, MBreak&
' MText$=MText$+CHR$(0)
REPLACE "<R>" WITH CHR$(9) IN MText$
IF INSTR(MText$,"<NB>") THEN
    MBreak&=2
ELSEIF INSTR(MText$,"<N>") THEN
    MBreak&=1
END IF
IF MBreak&<>0 THEN
    MText$=REMOVE$(MText$, "<NB>")
    MText$=REMOVE$(MText$, "<N>")
END IF
vState&=0
hM&=0
ByIDFlag&=0
SELECT CASE AS LONG MAction&
    CASE 1
        hM&=CreateMenu()
        FUNCTION=hM&
        EXIT FUNCTION
    CASE 2      ' Create a PopUp Menu
        hM&=CreatePopupMenu()
        FUNCTION=hM&
        EXIT FUNCTION
    CASE 3      ' Insert new Item
        vMask&=%MIIM_ID OR %MIIM_TYPE OR %MIIM_STATE
        IF INSTR(CProp$,"O") THEN
            vType&=%MFT_OWNERDRAW OR %MFT_STRING
        ELSE
            vType&=%MFT_STRING
        END IF
        IF MBreak&=1 THEN vType&=vType& OR %MF_MENUBREAK
        IF MBreak&=2 THEN vType&=vType& OR %MF_MENUBARBREAK
    CASE 4      ' Insert new Separator Bar
        vMask&=%MIIM_ID OR %MIIM_TYPE
        IF INSTR(CProp$,"O") THEN
            vType&=%MFT_OWNERDRAW OR %MF_SEPARATOR
        ELSE
            vType&=%MF_SEPARATOR
        END IF
    CASE 5      ' append new item
        IF INSTR(CProp$,"O") THEN
            vState&=vState& OR %MF_OWNERDRAW OR %MFT_STRING
        ELSE
            vState&=vState& OR %MF_STRING
        END IF
        IF MBreak&=1 THEN vState&=vState& OR %MF_MENUBREAK
        IF MBreak&=2 THEN vState&=vState& OR %MF_MENUBARBREAK
    CASE 6      ' append new separator
        IF INSTR(CProp$,"O") THEN
            vState&=vState& OR %MFT_OWNERDRAW OR %MF_SEPARATOR
        ELSE
            vState&=vState& OR %MF_SEPARATOR
        END IF
    CASE 7      ' Set Options
        vMask&=%MIIM_ID OR %MIIM_TYPE OR %MIIM_STATE
        IF INSTR(CProp$,"O") THEN
            vType&=%MFT_OWNERDRAW OR %MFT_STRING
        ELSE
            vType&=%MFT_STRING
        END IF
        IF MBreak&=1 THEN vType&=vType& OR %MF_MENUBREAK
        IF MBreak&=2 THEN vType&=vType& OR %MF_MENUBARBREAK
    CASE 8  ' Set SubMenu Value
        vMask&=%MIIM_ID OR %MIIM_SUBMENU        ' OR %MIIM_TYPE
        vType&=%MFT_STRING                      ' OR %MF_POPUP
    CASE ELSE
        FUNCTION=0
        EXIT FUNCTION
END SELECT
IF hMenu&=0 THEN
    FUNCTION=0
    EXIT FUNCTION
ELSEIF IsMenu(hMenu&)=0 THEN
    FUNCTION=0
    EXIT FUNCTION
END IF
CProp$=UCASE$(CProp$)
IF INSTR(CProp$,"X") THEN
    vState&=vState& OR %MF_CHECKED
ELSE
    vState&=vState& OR %MF_UNCHECKED
END IF
IF INSTR(CProp$,"D") THEN
    vState&=vState& OR %MF_GRAYED
ELSE
    vState&=vState& OR %MF_ENABLED
END IF
IF INSTR(CProp$,"H") THEN
    vState&=vState& OR %MF_HILITE
ELSE
    vState&=vState& OR %MF_UNHILITE
END IF

IF MAction&=3 OR MAction&=5 THEN
   IF INSTR(CProp$,"P") THEN
       vState&=vState& OR %MF_POPUP
       ID&=0
   END IF
END IF
SELECT CASE AS LONG MAction&
    CASE 3,4,7,8
        TmpMenu.cbSize=SIZEOF(TmpMenu)
        TmpMenu.fMask=vMask&
        TmpMenu.fType=vType&
        TmpMenu.fState=vState&
        TmpMenu.wID=ID&
        TmpMenu.hSubMenu=hSubMenu&
        TmpMenu.hbmpChecked=%NULL
        TmpMenu.hbmpUnchecked=%NULL
        TmpMenu.dwItemData=0
        IF MAction&=4 THEN
            TmpMenu.dwTypeData=%NULL
        ELSE
            TmpMenu.dwTypeData=STRPTR(MText$)
        END IF
        TmpMenu.cch=LEN(MText$)
    CASE 5
        zTexT=MText$
    CASE 6
        zText=CHR$(0)+CHR$(0)+CHR$(0)+CHR$(0)
    CASE ELSE
END SELECT
SELECT CASE AS LONG MAction&
   CASE 3,4
        InsertMenuItem hMenu&, EID&, ByIDFlag&, TmpMenu
   CASE 5,6
        AppendMenu hMenu&, vState&, ID&,  zText
   CASE 7,8
        SetMenuItemInfo hMenu&, ID&, ByIDFlag&, TmpMenu
   CASE ELSE
END SELECT
END FUNCTION

'------------------------------------------------------------------------------

SUB PBVUnload (BYVAL FormName$)
'LOCAL hWnd1 AS LONG, AFNum&   ', X&
'AFNum&=ZFormNum(FormName$)
'IF AFNum&<>0 THEN
'   hWnd1=AppForms(AFNum&).FhWnd
'   IF hWnd1<>0 THEN
'      SendMessage hWnd1, %WM_CLOSE, 0, 0
'   END IF
'END IF

    LOCAL hWnd&
    hWnd&=PBVFormHandle(FormName$)
    IF hWnd&<>0 THEN
        SendMessage hWnd&, %WM_CLOSE, 0, 0
    END IF

END SUB

'------------------------------------------------------------------------------

SUB PBVHide (BYVAL FormName$)
LOCAL hWnd1 AS LONG
hWnd1=PBVFormHandle(FormName$)
IF hWnd1<>0 THEN
    IF IsWindowVisible(hWnd1) THEN
        ShowWindow hWnd1, %SW_HIDE
        UpdateWindow hWnd1
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVShow (FormName$, BYVAL CS&)
LOCAL AFNum&
LOCAL hWnd1 AS LONG
LOCAL CmdShow AS LONG

AFNum&=ZFormNum(FormName$)
IF AFNum&=0 THEN
   ' form isn't defined
   EXIT SUB
END IF

SELECT CASE AS LONG CS&
    CASE 1
         CmdShow=%SW_MINIMIZE
    CASE 2
         CmdShow=%SW_MAXIMIZE
    CASE 3
         CmdShow=%SW_RESTORE
    CASE ELSE
         IF AppCmdShowFlag&=0 THEN
            IF CS&=-1 THEN
               CmdShow=%SW_SHOWNORMAL
            ELSE
               CmdShow=%SW_SHOW
            END IF
         ELSE
            CmdShow=AppCmdShow&
            AppCmdShowFlag&=0
         END IF
END SELECT

hWnd1=AppForms(AFNum&).FhWnd
IF hWnd1<>0 THEN
   ShowWindow hWnd1, CmdShow
   UpdateWindow hWnd1
ELSE
   PBVLoad FormName$
   hWnd1=AppForms(AFNum&).FhWnd
   IF hWnd1<>0 THEN
      ShowWindow hWnd1, CmdShow
      UpdateWindow hWnd1
   END IF
END IF
END SUB

' *************************************************************************************
'                      Support functions for previous Windows commands
SUB ZQBColors(BYVAL FG&, BYVAL BG&)
IF FG&>=0 AND FG&<=31 THEN
   IF AppBrush(FG&)=0 THEN
        PBVDefBrush FG&, QBColor(FG&)
   END IF
END IF
IF BG&>=0 AND BG&<=31 THEN
   IF AppBrush(BG&)=0 THEN
        PBVDefBrush BG&, QBColor(BG&)
   END IF
END IF
END SUB

' TYPE LOGBRUSH
'  lbStyle AS LONG
'  lbColor AS LONG
'  lbHatch AS LONG
' END TYPE

'------------------------------------------------------------------------------

SUB ZFakePattern(BYVAL BG&)
LOCAL T&, C&, CT&, GP&, Z&
CT&=0
GP&=1
FOR T&=-2 TO %APP_LowBrush STEP -1
    CT&=CT&+1
    IF CT&=9 THEN
       CT&=1
       GP&=GP&+1
    END IF
    C&=((13-CT&)*20)+15
    Z&=(C&/2)+15
    SELECT CASE AS LONG GP&
        CASE 1
            C&=RGB(C&, C&, C&)
        CASE 2
            C&=RGB(C&, C&-20, Z&-20)
        CASE 3
            C&=RGB(C&, C&-60, Z&-30)
        CASE 4
            C&=RGB(C&, Z&-30, Z&-30)
        CASE 5
            C&=RGB(Z&, C&, C&-20)
        CASE 6
            C&=RGB(Z&, C&, Z&+20)
        CASE ELSE
            C&=RGB(Z&, Z&+20, C&)
    END SELECT
    IF T&=BG& THEN
        AppBrush(T&)=CreateSolidBrush(C&)
        AppColor(T&)=C&
        EXIT FOR
    END IF
NEXT T&
END SUB


'------------------------------------------------------------------------------

SUB ZPatColor(BYVAL BG&)
LOCAL LB AS LOGBRUSH, LFlag& ', N&
LOCAL D AS ASCIIZ*32, hBmp AS LONG

IF BG&>=%APP_LowBrush AND BG&<=-2 THEN
    IF AppBrush(BG&)=0 THEN     ' Brush doesn't exist yet
        IF App_hPatterns&<>0 THEN       ' Pattern DLL is loaded
            GOSUB GetRealPat
        ELSE
            ZFakePattern  BG&
        END IF
    END IF
ELSE
    IF BG&=%APP_LowBrushN THEN
        IF AppBrush(BG&)=0 THEN
            AppBrush(BG&)=GetStockObject(%NULL_BRUSH)
        END IF
    END IF
END IF
EXIT SUB

GetRealPat:
D="EZ_BRUSH"+LTRIM$(STR$(ABS(BG&)-1))+CHR$(0)
' LFlag&=LFlag& OR %LR_MONOCHROME
' LFlag&=LFlag& OR %LR_LOADMAP3DCOLORS
LFlag&=0
IF INSTR(App_PatternsProp$, "S") THEN LFlag&=LFlag& OR %LR_LOADMAP3DCOLORS
hBmp=LoadImage(App_hPatterns&, D, %Image_Bitmap, 0, 0, LFlag&)
IF hBmp<>0 THEN
    LB.lbStyle=%BS_PATTERN
    LB.lbHatch=hBmp             ' Bitmap Handle
    AppBrush(BG&)=CreateBrushIndirect(LB)
    DeleteObject hBmp   ' delete Bitmap since not needed anymore
ELSE
   ZFakePattern  BG&
END IF
RETURN

GetFakePat:

RETURN

END SUB

'------------------------------------------------------------------------------

SUB EZ_LoadPatternLib(BYVAL PFileName$, BYVAL IProp$) EXPORT10
LOCAL D AS ASCIIZ*265
IProp$=UCASE$(IProp$)
IF App_PatternsLoaded& THEN
   EXIT SUB
END IF
IF App_hPatterns&=0 THEN
    IF PFileName$="" THEN PFileName$="EZPATLIB.DLL"
    D=PFileName$+CHR$(0)
    App_hPatterns&=LoadLibrary(D)
    IF App_hPatterns&<>0 THEN
        App_PatternsLoaded&=1
        App_PatternsProp$=IProp$
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION QBColor(N&) EXPORT10 AS LONG
LOCAL RV AS LONG
SELECT CASE AS CONST N&
    CASE 0
        RV=RGB(0,0,0)       ' Black
    CASE 1
        RV=RGB(0,0,128)     ' Blue
    CASE 2
        RV=RGB(0,128,0)     ' Green
    CASE 3
        RV=RGB(0,128,128)   ' Cyan
    CASE 4
        RV=RGB(196,0,0)     ' Red
    CASE 5
        RV=RGB(128,0,128)   ' Magenta (Purple)
    CASE 6
        RV=RGB(128,64,0)   ' Brown
    CASE 7
        RV=RGB(196,196,196) ' White
    CASE 8
        RV=RGB(128,128,128) ' Gray
    CASE 9
        RV=RGB(0,0, 255)    ' Lt. Blue
    CASE 10
        RV=RGB(0,255,0)    ' Lt. Green
    CASE 11
        RV=RGB(0,255,255)  ' Lt. Cyan
    CASE 12
        RV=RGB(255,0,0)    ' Lt. Red
    CASE 13
        RV=RGB(255,0,255)  ' Lt. magenta (Purple)
    CASE 14
        RV=RGB(255,255,0)  ' Yellow
    CASE 15
        RV=RGB(255,255,255)' Bright White
    CASE 16
        RV=RGB(164,164,164)
    CASE 17
        RV=RGB(128,160,255)
    CASE 18
        RV=RGB(160,255,160)
    CASE 19
        RV=RGB(160,255,255)
    CASE 20
        RV=RGB(255,160,160)
    CASE 21
        RV=RGB(255,160,255)
    CASE 22
        RV=RGB(255,255,160)
    CASE 23
        RV=RGB(212,212,212)
    CASE 24
        RV=RGB(180,180,180)
    CASE 25
        RV=RGB(188,220,255)
    CASE 26
        RV= RGB(220,255,220)
    CASE 27
        RV=RGB(220,255,255)
    CASE 28
        RV=RGB(255,220,220)
    CASE 29
        RV=RGB(255,220,255)
    CASE 30
        RV=RGB(255,255,220)
    CASE 31
        RV=RGB(228,228,228)
    CASE ELSE
        RV=RGB(0,0,0)
END SELECT
FUNCTION=RV
END FUNCTION

'------------------------------------------------------------------------------


'FUNCTION ZFormNum(BYVAL FormName$) AS LONG
' LOCAL F&, R&, F1$, F2$
' F1$=ZNameF(FormName$)
' R&=0
' FOR F&=1 TO AppLastForm&
'    F2$=LTRIM$(RTRIM$(AppForms(F&).FName))
'    IF F1$=F2$ THEN
'       R&=F&
'       EXIT FOR
'    END IF
' NEXT F&
' FUNCTION=R&
'END FUNCTION

FUNCTION EZ_GetMe() EXPORT10 AS STRING
    LOCAL hWnd&
    hWnd&=ezHandle("{ME}",0,1)
    FUNCTION=EZ_GetFormName(hWnd&)
END FUNCTION

FUNCTION ZFormNum(FormName$) AS LONG
    LOCAL X&
    LOCAL R&, F1$

    LOCAL FB1 AS BYTE PTR, FB2 AS BYTE PTR, OKFlag&, LP&
    REGISTER I&, F&
    IF FormName$="{ME}" THEN
        F1$=ZNameF(EZ_GetMe)+" "   ' space necessary to indicate end of name
    ELSE
        F1$=ZNameF(FormName$)+" "   ' space necessary to indicate end of name
    END IF
    R&=0
    FB1=STRPTR(F1$)
    LP&=LEN(F1$)
    IF LP&>%MaxFormNameSize THEN LP&=%MaxFormNameSize
    LP&=LP&-1
    FOR F&=1 TO AppLastForm&
        FB2=VARPTR(AppForms(F&).FName)   'fixed length string
        OKFlag&=1
        FOR I&=0 TO LP&  ' test all 32 bytes even spaces
            IF @FB1[I&]<>@FB2[I&] THEN
                OKFlag&=0
                EXIT FOR
            END IF
        NEXT I&
        IF OKFlag& THEN
          R&=F&
          EXIT FOR
       END IF
    NEXT F&
    FUNCTION=R&
END FUNCTION


'------------------------------------------------------------------------------

GLOBAL App_MeFormHandle() AS LONG
GLOBAL App_MeFormIndex&

SUB zInitME()
    REDIM App_MeFormHandle(0 TO 1000) AS LONG
    App_MeFormIndex&=0
END SUB

SUB zFreeME()
    ERASE App_MeFormHandle
END SUB


FUNCTION PBVFormHandle(FormName$) AS LONG
LOCAL F&, R&, F1$, F2$
F1$=TRIM$(UCASE$(FormName$))
R&=0
IF F1$="{ME}" THEN
    IF App_MeFormHandle(App_MeFormIndex&)<>0 THEN
        IF IsWindow(App_MeFormHandle(App_MeFormIndex&)) THEN
            R&=App_MeFormHandle(App_MeFormIndex&)
            GOTO SkipTestHandle
        END IF
    END IF
END IF
FOR F&=1 TO AppLastForm&
    ' this may not be necessary since EZ_Form converts original name to all caps and removes spaces
   F2$=LTRIM$(RTRIM$(AppForms(F&).FName))
   IF F1$=F2$ THEN
      R&=AppForms(F&).FhWnd
      EXIT FOR
   END IF
NEXT F&
IF R&=0 THEN
    ' test for common dialogs
    SELECT CASE AS CONST$  F1$
        CASE "{OPENDLG}"
            R&=App_CommonDlgHandle_OF&
        CASE "{OPENDLGX}"
            R&=App_CommonDlgHandle_OFX&
        CASE "{SAVEDLG}"
            R&=App_CommonDlgHandle_SF&
        CASE "{SAVEDLGX}"
            R&=App_CommonDlgHandle_SFX&
        CASE "{COLORDLG}"
            R&=App_CommonDlgHandle_CL&
        CASE "{FONTDLG}"
            R&=App_CommonDlgHandle_FNT&
        CASE "{PRINTDLG}"
            R&=App_CommonDlgHandle_PR&
        CASE "{PAGEDLG}"
            R&=App_CommonDlgHandle_PG&
        CASE "{FINDDLG}"
            R&=App_CommonDlgHandle_FT&
        CASE "{BROWSEDLG}"
            R&=App_CommonDlgHandle_BW&
        CASE ELSE
    END SELECT
END IF
SkipTestHandle:
FUNCTION=R&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZFormNumH(BYVAL hWnd AS LONG) AS LONG
REGISTER F&, R&
R&=0
IF IsWindow(hWnd) THEN  ' make sure form exists
    R=GetMyWindowLong(hWnd,1)   ' stores form number
END IF
IF R=0 THEN
    FOR F&=1 TO AppLastForm&
        IF hWnd=AppForms(F&).FhWnd THEN
            R&=F&
            EXIT FOR
        END IF
    NEXT F&
END IF
FUNCTION=R&
' do not use the code below :
' It added some bad problems, but I don't know why.
' FUNCTION=GetMyWindowLong(hWnd, 1)
END FUNCTION


'------------------------------------------------------------------------------

FUNCTION ZFormAnyLeft() AS LONG
LOCAL F&, CT&

CT&=0
FOR F&=1 TO AppLastForm&
   IF AppForms(F&).FhWnd<>0 THEN
      CT&=CT&+1
   END IF
NEXT F&
FUNCTION=CT&
END FUNCTION

'------------------------------------------------------------------------------

SUB ZFormClearHandle(BYVAL hDlg AS LONG)
LOCAL AFNum&, I&,LCT&, FI&
AFNum&=ZFormNumH(hDlg)
IF AFNum&<>0 THEN
    AppFormResize$(AFNum&)=""   ' clear control resize string
    FOR FI&=1 TO %MaxFormStrings
        AppFormStringData$(AFNum&, FI&)=""  ' clear component string buffer
    NEXT FI&
    AppForms(AFNum&).FName=""
    AppForms(AFNum&).FhWnd=0
    AppForms(AFNum&).FBrush=0    ' this is a Brush ID # and not a Handle
    IF AppForms(AFNum&).FBitmap<>0 THEN
        ' this bitmap was not loaded by EZ_LoadPicture but
        ' was created by EZGUI, so it must be deleted
        DeleteObject AppForms(AFNum&).FBitmap
        AppForms(AFNum&).FBitmap=0
    END IF
    IF AppForms(AFNum&).FRegion<>0 THEN     ' system owns regions and will destroy it !
'        IF IsWindow(hDlg) THEN
'            EZ_DPrint "handle for dialog when window region is cleared"+str$(hDlg)
'            SetWindowRgn hDlg, %NULL, 0     ' Windows destroys old region
'        END IF
'        IF GetObjectType(AppForms(AFNum&).FRegion)=%OBJ_REGION THEN
'            EZ_DPrint "Region is deleted !"
'            DeleteObject AppForms(AFNum&).FRegion
'        END IF
        AppForms(AFNum&).FRegion=0
    END IF
    AppForms(AFNum&).FTColor=0
    IF AppForms(AFNum&).FMenuHandle<>0 THEN
        IF IsMenu(AppForms(AFNum&).FMenuHandle) THEN DestroyMenu AppForms(AFNum&).FMenuHandle
        AppForms(AFNum&).FMenuHandle=0
    END IF
    LCT&=0
    FOR I&=1 TO UBOUND(AppControlTNum)
        IF (AppControlTNum(I&) MOD 1000)=AFNum& THEN
            IF AppControlOrigAddress(I&)=0 THEN
                ZSetControlArray I&,0,0,0,0,0,0,"",0,0,0
            END IF
        END IF
        IF  AppControlTNum(I&)<>0 THEN LCT&=I&
    NEXT I&
    App_EZ_TopCtrl&=LCT&
    IF AppForms(AFNum&).FAccel<>0 THEN
        DestroyAcceleratorTable AppForms(AFNum&).FAccel
        AppForms(AFNum&).FAccel=0
    END IF
    IF AppForms(AFNum&).FTRAY.cbSize<>0 THEN
        Shell_NotifyIcon %NIM_DELETE, BYVAL VARPTR(AppForms(AFNum&).FTRAY)
        AppForms(AFNum&).FTRAY=App_FTray
    END IF
    AppForms(AFNum&).FUserList=STRING$(%MaxFormListSize, CHR$(0))
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_CurrentForm() EXPORT10 AS STRING
FUNCTION=ZFormNameH(AppCurrentDlg)
END FUNCTION

FUNCTION EZ_CurrentDForm() EXPORT10 AS STRING
    FUNCTION=App_EZ_CurForm$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZFormNameH(BYVAL hWnd AS LONG) AS STRING
LOCAL D$    ' , F&
REGISTER F&
D$=""
IF hWnd=0 THEN
   FUNCTION=D$
   EXIT FUNCTION
END IF
FOR F&=1 TO AppLastForm&
   IF hWnd=AppForms(F&).FhWnd THEN
      D$=LTRIM$(RTRIM$(AppForms(F&).FName))
      EXIT FOR
   END IF
NEXT F&

IF LEN(D$)=0 THEN
    IF hWnd<>0 THEN
        SELECT CASE AS LONG hWnd
            CASE App_CommonDlgHandle_OF&
                D$="{OPENDLG}"
            CASE App_CommonDlgHandle_OFX&
                D$="{OPENDLGX}"
            CASE App_CommonDlgHandle_SF&
                D$="{SAVEDLG}"
            CASE App_CommonDlgHandle_SFX&
                D$="{SAVEDLGX}"
            CASE App_CommonDlgHandle_CL&
                D$="{COLORDLG}"
            CASE App_CommonDlgHandle_FNT&
                D$="{FONTDLG}"
            CASE App_CommonDlgHandle_PR&
                D$="{PRINTDLG}"
            CASE App_CommonDlgHandle_PG&
                D$="{PAGEDLG}"
            CASE App_CommonDlgHandle_FT&
                D$="{FINDDLG}"
            CASE App_CommonDlgHandle_BW&
                D$="{BROWSEDLG}"
            CASE ELSE
        END SELECT
    END IF
END IF
FUNCTION=D$
END FUNCTION

' ********************* PBV Encapsulated SendMessage Commands for Controls ************

FUNCTION PBVSendMessageR(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&, BYVAL CType$) AS LONG
    LOCAL hCtrl AS LONG, RV&, CName$
    hCtrl=ezHandle(FormName$, ID&,1)
    RV&=0
    IF hCtrl<>0 THEN
        CName$=ZGetClass(hCtrl)
        IF CName$=UCASE$(App_MaskEditClass$) THEN CName$="EDIT"
        IF UCASE$(CType$)=CName$ THEN RV&=SendMessage(hCtrl, M&, P1&, P2&)
    END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_PostMessage(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&) EXPORT10
    LOCAL hWnd&
'    App_EZ_HandleFlag&=1
    hWnd&=ezHandle(FormName$, ID&,1)
    IF hWnd&=0 THEN EXIT SUB
    PostMessage hWnd&, M&, P1&, P2&
END SUB

'------------------------------------------------------------------------------

SUB EZ_PostEvent(BYVAL FormName$, BYVAL ID&, BYVAL CVal&) EXPORT10
    EZ_PostMessage FormName$, 0, %WM_USER_CEVENT, ID&, CVal&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SendMessage(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&) EXPORT10
    LOCAL hWnd&
'    App_EZ_HandleFlag&=1
    hWnd&=ezHandle(FormName$, ID&,1)
    IF hWnd&=0 THEN EXIT SUB
    SendMessage hWnd&, M&, P1&, P2&
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_SendMessageR(BYVAL FormName$, BYVAL ID&, BYVAL M&, BYVAL P1&, BYVAL P2&) EXPORT10 AS LONG
    LOCAL hWnd&
'    App_EZ_HandleFlag&=1
    hWnd&=ezHandle(FormName$, ID&,1)
    IF hWnd&=0 THEN
        FUNCTION=0
    ELSE
        FUNCTION=SendMessage(hWnd&, M&, P1&, P2&)
    END IF
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_FreeColor (BYVAL N&) EXPORT10
IF N&>15 THEN
    PBVFreeBrushes N&, N&
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVDefBrush(BYVAL N&, BYVAL C&)
LOCAL MaxN&
MaxN&=UBOUND(AppBrush)
IF App_ExtraColorAFlag&=0 THEN MaxN&=MaxN&-%App_ExtraColors
IF N&>=0 AND N&<=MaxN& THEN
   IF AppBrush(N&)=0 THEN
        AppBrush(N&)=CreateSolidBrush(C&)
        AppColor(N&)=C&
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_FillWithSystemColors(BYVAL N&) EXPORT10
LOCAL I&, C&
FOR I&=0 TO 24
    C&=GetSysColor(I&)
    PBVDefBrush N&+I&, C&
NEXT I&
END SUB

SUB EZ_DefSystemColor(BYVAL N&, BYVAL SC&) EXPORT10
    LOCAL C&
    IF SC&>=0 AND SC&<=24 THEN
        C&=GetSysColor(SC&)
        PBVDefBrush N&, C&
    END IF
END SUB


'------------------------------------------------------------------------------

FUNCTION ZDColor(BYVAL R&, BYVAL G&, BYVAL B&) AS LONG
LOCAL DColor&, N&       ' , MX&, MN&
DColor&=0   ' gray
N&=3

SHIFT RIGHT R&,N&
SHIFT RIGHT G&,N&
SHIFT RIGHT B&,N&
IF (R&>G&) AND (R&>B&) THEN DColor&=1   ' Reds
IF (G&>R&) AND (G&>B&) THEN DColor&=2   ' Greens
IF (B&>R&) AND (B&>G&) THEN DColor&=3   ' Blues
IF R&=G& THEN
    IF R&>B& THEN DColor&=4 ' yellows
END IF
IF G&=B& THEN
    IF G&>R& THEN DColor&=5 ' cyans
END IF
IF R&=B& THEN
    IF R&>G& THEN DColor&=6 ' purples
END IF
FUNCTION=DColor&
END FUNCTION

%MAXCDif    =   16&

FUNCTION EZ_GetBestColorMatch(BYVAL C&, BYVAL N1&, BYVAL N2&) EXPORT10 AS LONG
LOCAL N&, LN&, MaxN&
LOCAL R&, G&, B&, R1&, G1&, B1&, R2&, G2&, B2&
LOCAL DColor&, DColor2&     ', DColor1&

LN&=-1
MaxN&=UBOUND(AppBrush)
IF N1&<0 THEN N1&=0
IF N1&>MaxN& THEN N1&=MaxN&
IF N2&<0 THEN N2&=0
IF N2&>MaxN& THEN N2&=MaxN&

' test for exact match first
FOR N&=N1& TO N2&
    IF AppBrush(N&)<>0 THEN
        IF AppColor&(N&)=C& THEN
            LN&=N&
            EXIT FOR
        END IF
    END IF
NEXT N&
IF LN&=-1 THEN
    ' determine dominant color
    PBV_GetRGBs C&, R&, G&, B&
    DColor&=ZDColor(R&, G&, B&)
    FOR N&=N1& TO N2&
       IF AppBrush(N&)<>0 THEN
            IF LN&=-1 THEN
                LN&=N&
            ELSE
                GOSUB MakeCmpVal
            END IF
       END IF
    NEXT N&
END IF
FUNCTION=LN&
EXIT FUNCTION

MakeCmpVal:
' Find if Color N& is a Better Match than Color LN&
PBV_GetRGBs AppColor(LN&), R1&, G1&, B1&
PBV_GetRGBs AppColor(N&), R2&, G2&, B2&
DColor2&=ZDColor(R2&, G2&, B2&)
R1&=ABS(R&-R1&)
G1&=ABS(G&-G1&)
B1&=ABS(B&-B1&)
R2&=ABS(R&-R2&)
G2&=ABS(G&-G2&)
B2&=ABS(B&-B2&)
IF DColor2&=DColor& THEN
    ' make sure same color family
    IF (R2&<=R1&) AND (G2&<=G1&) AND (B2&<=B1&) THEN
        ' closer match all around
        LN&=N&
    ELSE
        SELECT CASE AS LONG DColor&
            CASE 1  ' Reds
                IF (R2&<R1&) AND (G2&<%MAXCDif) AND (B2&<%MAXCDif) THEN LN&=N&
            CASE 2  ' Greens
                IF (G2&<G1&) AND (R2&<%MAXCDif) AND (B2&<%MAXCDif) THEN LN&=N&
            CASE 3  ' Blues
                IF (B2&<B1&) AND (R2&<%MAXCDif) AND (G2&<%MAXCDif) THEN LN&=N&
            CASE 4  ' Yellows
                IF (R2&<R1&) AND (G2&<G1&) AND (B2&<%MAXCDif) THEN LN&=N&
            CASE 5  ' Cyans
                IF (G2&<G1&) AND (B2&<B1&) AND (R2&<%MAXCDif) THEN LN&=N&
            CASE 6  ' Purples
                IF (R2&<R1&) AND (B2&<B1&) AND (G2&<%MAXCDif) THEN LN&=N&
            CASE ELSE   ' grays
        END SELECT
    END IF
END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------


SUB PBVDefHBrush(BYVAL N&, BYVAL H&, BYVAL C&)
IF N&>=0 AND N&<=UBOUND(AppBrush) THEN
   IF AppBrush(N&)=0 THEN
      AppBrush(N&)=CreateHatchBrush(H&,C&)
      AppColor(N&)=C&
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_ColorVal(BYVAL N&, BYVAL Mode&) EXPORT10 AS LONG
LOCAL RV&
IF N&>=0 AND N&<=UBOUND(AppBrush) THEN
   IF AppBrush(N&)<>0 THEN
      RV&=AppColor(N&)
   ELSE
      GOSUB GetMySysColor
   END IF
ELSE
   GOSUB GetMySysColor
END IF
FUNCTION=RV&
EXIT FUNCTION

GetMySysColor:
IF Mode&=1 THEN
   RV&=GetSysColor(%COLOR_BTNTEXT)
ELSE
   RV&=GetSysColor(%COLOR_3DFACE)
END IF
RETURN

END FUNCTION

FUNCTION EZ_TestRGBColor(BYVAL TestC&, BYVAL CmpC&, BYVAL Mode&) EXPORT10 AS LONG
     LOCAL B AS BYTE PTR, RV&, C AS BYTE PTR
     RV&=0
     C=VARPTR(CmpC&)
     B=VARPTR(TestC&)
     SELECT CASE Mode&
          CASE 0    ' any bytes >=
               IF @B[0]>=@C[0] THEN RV&=1
               IF @B[1]>=@C[1] THEN RV&=1
               IF @B[2]>=@C[2] THEN RV&=1
          CASE 1    ' is Red >=
               IF @B[0]>=@C[0] THEN RV&=1
          CASE 2    ' is Green >=
               IF @B[1]>=@C[1] THEN RV&=1
          CASE 3    ' Blue >=
               IF @B[2]>=@C[2] THEN RV&=1
          CASE -1    ' all bytes >=
               IF (@B[0]>=@C[0]) AND (@B[1]>=@C[1]) AND (@B[2]>=@C[2]) THEN RV&=1
          CASE ELSE
     END SELECT
     FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION PBVBrush(N&) AS LONG
IF N&=-1 THEN
    FUNCTION=GetSysColorBrush(%COLOR_3DFACE)
    EXIT FUNCTION
END IF
IF N&>=%APP_LowBrushN AND N&<=UBOUND(AppBrush) THEN
   FUNCTION=AppBrush(N&)
ELSE
   FUNCTION=0
END IF
END FUNCTION

'------------------------------------------------------------------------------

SUB PBVFreeBrushes(BYVAL N1&, BYVAL N2&)
LOCAL N&
FOR N&=N1& TO N2&
   IF N&>=%APP_LowBrush AND N&<=UBOUND(AppBrush) THEN
      IF AppBrush(N&)<>0 THEN
         DeleteObject AppBrush(N&)
         IF N&>=0 THEN AppColor(N&)=0
         AppBrush(N&)=0
      END IF
   END IF
NEXT N&
END SUB

'------------------------------------------------------------------------------

FUNCTION PBVGetCheck(FormName$, ID&) AS LONG
LOCAL RV&
' Returns 1 - checked, 0 - unchecked for option buttons and check boxes
' returns 2 - undetermined (disabled), 4 - pushed
SELECT CASE  AS CONST$ PBVGetClass(FormName$, ID&)
    CASE "BUTTON"
        RV&=EZ_SendMessageR(FormName$, ID&, %BM_GETCHECK, 0, 0)
    CASE ELSE
END SELECT
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB PBVSetCheck(BYVAL FormName$, BYVAL ID&, BYVAL V&)
SELECT CASE  AS CONST$ PBVGetClass(FormName$, ID&)
    CASE "BUTTON"
        SELECT CASE V&
             CASE 0,1,2,4
             CASE ELSE
                  V&=0
        END SELECT
        EZ_SendMessage FormName$, ID&, %BM_SETCHECK, V&, 0
    CASE ELSE
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB PBVDefImage(RName$, BYVAL FName$, BYVAL IType&, BYVAL ISource&, BYVAL IProp$, BYVAL ResID&, BYVAL DIBFlag&, BYVAL ReqW&, BYVAL ReqH&)
LOCAL I&, MX&, LFlag&, WRes&, ARName$
LOCAL D AS ASCIIZ*265
LOCAL hInstance&

hInstance&=AppInstance&
IF ISource&=1 THEN  ' load from Stub DLL
    IF AppStubInstance&=0 THEN EZ_LoadImageLib ""   ' load Default stub file if not loaded already
    IF AppStubInstance&<>0 THEN
        hInstance&=AppStubInstance&
    END IF
END IF

ARName$=RName$

IF RName$<>"" THEN
    IF ISource&<>3 THEN
        IF IProp$<>"" THEN RName$=RName$+"{"+IProp$+"}"
    END IF
    ARRAY SCAN APPImageName$(1), = RName$, TO I&
    IF I&>0 THEN
        EXIT SUB
    END IF
ELSE
    IF FName$="" THEN EXIT SUB
END IF

LFlag&=0
IF INSTR(IProp$, "M") THEN LFlag&=LFlag& OR %LR_MONOCHROME
IF INSTR(IProp$, "T") THEN LFlag&=LFlag& OR %LR_LOADTRANSPARENT
IF INSTR(IProp$, "S") THEN LFlag&=LFlag& OR %LR_LOADMAP3DCOLORS
MX&=UBOUND(APPImage)

ARRAY SCAN APPImage(1), =0, TO I&
IF I&>0 THEN
    IF APPImage(I&)=0 THEN
        APPImageName$(I&)=RName$
        IF FName$="" THEN
            ' Image is in resource file
            SELECT CASE AS LONG IType&
                CASE 0              ' Icon
                    IF ISource&=3 THEN
                        SELECT CASE  AS CONST$ ARName$
                            CASE "%ICO_APPICON"
                                WRes&=%OIC_SAMPLE
                            CASE "%ICO_STOPICON"
                                WRes&=%OIC_HAND
                            CASE "%ICO_?ICON"
                                WRes&=%OIC_QUES
                            CASE "%ICO_!ICON"
                                WRes&=%OIC_BANG
                            CASE "%ICO_INFOICON"
                                WRes&=%OIC_NOTE
                            CASE "%ICO_WINICON"
                                WRes&=%OIC_WINLOGO ' %IDI_WINLOGO
                            CASE ELSE
                                WRes&=0
                        END SELECT
                        IF WRes&<>0 THEN
                            APPImage(I&)=LoadIcon(0, BYVAL MAKLNG(WRes&,0))
                            APPImageType(I&)=-1       ' stock object
                        END IF
                    ELSE
                        IF ResID&=0 THEN
                             D=ARName$+CHR$(0)
                             APPImage(I&)=LoadImage(hInstance&, D, %Image_Icon, ReqW&, ReqH&, LFlag&)
                             APPImageType(I&)=0
                        ELSE ' load Resource using predefined ID
                             APPImage(I&)=LoadImage(hInstance&, BYVAL MAKLNG(ResID&,0), %Image_Icon, ReqW&, ReqH&, LFlag&)
                             APPImageType(I&)=0
                        END IF
                    END IF
                CASE ELSE           ' Bitmap
                    D=ARName$+CHR$(0)
                    IF DIBFlag& THEN LFlag&=LFlag& OR %LR_CREATEDIBSECTION
                    APPImage(I&)=LoadImage(hInstance&, D, %Image_Bitmap, 0, 0, LFlag&)
                    APPImageType(I&)=%OBJ_BITMAP
            END SELECT
            IF APPImage(I&)=0 THEN
                RName$=""
                APPImageName$(I&)=""
                APPImageType(I&)=0
            END IF
        ELSE
            ' Image is in disk file
            LFlag&=LFlag& OR %LR_LOADFROMFILE
            SELECT CASE AS LONG IType&
                CASE 0              ' Icon
                    D=FName$+CHR$(0)
                    APPImage(I&)=LoadImage(0, D, %Image_Icon, ReqW&, ReqH&, LFlag&)
                    APPImageType(I&)=0
                CASE ELSE           ' Bitmap
                    D=FName$+CHR$(0)
                    IF DIBFlag& THEN LFlag&=LFlag& OR %LR_CREATEDIBSECTION
                    APPImage(I&)=LoadImage(0, D, %Image_Bitmap, 0, 0, LFlag&)
                    APPImageType(I&)=%OBJ_BITMAP
            END SELECT
            IF APPImage(I&)=0 THEN
                APPImageName$(I&)=""
                APPImageType(I&)=0
                RName$=""
            END IF
        END IF
        IF IType&=0 THEN
            App_WIcon&=APPImage(I&)
        END IF
    END IF
ELSE
    RName$=""
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVFreeImage(BYVAL IName$)
'  if IName$="" then delete all images
LOCAL N&, RV&
IF IName$<>"" THEN
    ARRAY SCAN APPImageName$(1), = IName$, TO N&
    IF N&<>0 THEN
        GOSUB DestroyImg
    END IF
    EXIT SUB
END IF
' delete all Images
FOR N&=1 TO UBOUND(APPImage)
    IF AppImage(N&)<>0 THEN
        GOSUB DestroyImg
    END IF
NEXT N&
EXIT SUB

DestroyImg:
RV&=1
IF APPImageName$(N&)<>"" THEN
   IF APPImage(N&)<>0 THEN
      IF APPImageType(N&)<=0 THEN
         IF APPImageType(N&)=0 THEN
            RV&=DestroyIcon(APPImage(N&))
            APPImage(N&)=0
            APPImageName$(N&)=""
            APPImageType(N&)=0
         END IF
      ELSE
          RV&=DeleteObject(APPImage(N&))
          APPImage(N&)=0
          APPImageName$(N&)=""
          APPImageType(N&)=0
      END IF
   END IF
END IF
RETURN
END SUB

'------------------------------------------------------------------------------

SUB EZ_SnapControl(BYVAL FormName$, BYVAL ID&) EXPORT10
' Sets Image Handle associated with a button control
LOCAL hCtrl AS LONG
LOCAL hWnd AS LONG
LOCAL CRect AS RECT, W&, H&, PT AS POINTAPI
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   hCtrl=ZGetDlgItem(hWnd,ID&)
   IF hCtrl<>0 THEN
       GetWindowRect hCtrl, CRect
       W&=CRect.nRight-CRect.nLeft
       H&=CRect.nBottom-CRect.nTop
       PT.x=CRect.nLeft
       PT.y=CRect.nTop
       ScreenToClient hWnd, PT
       PT.x=INT(PT.x\App_EZ_GridW)*App_EZ_GridW
       PT.y= INT(PT.y\App_EZ_GridH)*App_EZ_GridH
       MoveWindow hCtrl, PT.x, PT.y, W&, H&, %TRUE
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetIconCursor(BYVAL FormName$, BYVAL ID&, BYVAL CursorNum&) EXPORT10
LOCAL hCtrl&, WS&
hCtrl&=ezHandle(FormName$, ID&,1)
IF hCtrl&<>0 THEN
    IF ZGetClass(hCtrl&)="STATIC" THEN
        WS&=GetWindowLong(hCtrl&, %GWL_STYLE) AND %SS_ICON
        IF WS&=%SS_ICON THEN
            IF CursorNum&>=LBOUND(AppCursor) AND CursorNum&<=UBOUND(AppCursor) THEN
                IF AppCursor(CursorNum&)<>0 THEN
                    SendMessage hCtrl&, %STM_SETIMAGE, %IMAGE_CURSOR, AppCursor(CursorNum&)
                END IF
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetImage(BYVAL FormName$, BYVAL ID&, BYVAL IName$) EXPORT10
    ' Sets Image Handle associated with a button control
    LOCAL hButton AS LONG, hImage AS LONG
    LOCAL RV AS LONG, I&
    hButton=ezHandle(FormName$, ID&,1)
    IF hButton<>0 THEN
            ARRAY SCAN APPImageName$(1), = IName$, TO I&
            IF I&>0 THEN
                hImage=APPImage(I&)
                IF hImage<>0 THEN
                   SELECT CASE AS CONST$ ZGetClass(hButton)
                       CASE "BUTTON"
                           IF APPImageType(I&)=%OBJ_BITMAP THEN
                               RV=SendMessage(hButton, %BM_SETIMAGE, %IMAGE_BITMAP, hImage)
                           ELSE
                               RV = SendMessage(hButton, %BM_SETIMAGE, %IMAGE_ICON, hImage)
                           END IF
                       CASE "STATIC"
                           IF APPImageType(I&)=%OBJ_BITMAP THEN
                               RV = SendMessage(hButton, %STM_SETIMAGE, %IMAGE_BITMAP, hImage)
                           ELSE
                               RV = SendMessage(hButton, %STM_SETICON, hImage, 0)
                           END IF
                       CASE $EZComponent
                           IF APPImageType(I&)=%OBJ_BITMAP THEN
                               RV = SendMessage(hButton, %WM_SETCMPSTATE, 5, hImage)
                           ELSE
                               RV = SendMessage(hButton, %WM_SETCMPSTATE, 6, hImage)
                           END IF
                       CASE ELSE
                   END SELECT
               END IF
            END IF
   END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION PBVActiveImage(FormName$, ID&, IName$) AS LONG
    LOCAL hButton AS LONG, hImage AS LONG, aImage AS LONG
    LOCAL RV AS LONG, I&
    hButton=ezHandle(FormName$, ID&,1)
    IF hButton<>0 THEN
            ARRAY SCAN APPImageName$(1), = IName$, TO I&
            IF I&>0 THEN
                hImage=APPImage(I&)
                SELECT CASE  AS CONST$ ZGetClass(hButton)
                    CASE "BUTTON"
                        aImage=SendMessage(hButton, %BM_GETIMAGE, 0, 0)
                    CASE "STATIC"
                        IF APPImageType(I&)=%OBJ_BITMAP THEN
                            aImage = SendMessage(hButton, %STM_GETIMAGE, %IMAGE_BITMAP, 0)
                        ELSE
                            aImage = SendMessage(hButton, %STM_GETIMAGE, %IMAGE_ICON, 0)
                        END IF
                    CASE $EZComponent
                        LOCAL D$
                        D$=""
                        IF APPImageType(I&)=%OBJ_BITMAP THEN
                            ZGetSetUserData D$, hButton, 26+5, aImage, 0    ' Component Bitmap
                        ELSE
                            ZGetSetUserData D$, hButton, 26+6, aImage, 0    ' Component Icon
                        END IF
                    CASE ELSE
                END SELECT
                IF aImage=hImage THEN RV=-1
            END IF
    END IF
    FUNCTION=RV
END FUNCTION
'------------------------------------------------------------------------------

SUB EZ_SwapImage(BYVAL FormName$, BYVAL ID&, BYVAL IName$, BYVAL IName2$) EXPORT10
IF PBVActiveImage(FormName$, ID&, IName$) THEN
    EZ_SetImage FormName$, ID&, IName2$
ELSE
    EZ_SetImage FormName$, ID&, IName$
END IF
END SUB

'------------------------------------------------------------------------------

SUB ZUpdateTransparent(BYVAL hCtrl AS LONG)
LOCAL EX&, hWnd AS LONG, X&
LOCAL R AS RECT, PT AS POINTAPI
IF IsWindow(hCtrl) THEN
    EX&=GetWindowLong(hCtrl, %GWL_EXSTYLE) AND %WS_EX_TRANSPARENT
    IF EX&=%WS_EX_TRANSPARENT THEN
        hWnd=GetParent(hCtrl)
        GetWindowRect hCtrl, R
        PT.x=R.nLeft
        PT.y=R.nTop
        ScreenToClient hWnd, PT
        R.nLeft=PT.x
        R.nTop=PT.y
        PT.x=R.nRight
        PT.y=R.nBottom
        ScreenToClient hWnd, PT
        R.nRight=PT.x
        R.nBottom=PT.y
        X&=%RDW_ERASE OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
        RedrawWindow hWnd, R, BYVAL %NULL, X&

    END IF
END IF
END SUB

'------------------------------------------------------------------------------
' EZGUI stores strings in a straddled format
' assume 5 form strings (likely set higher)
' #1: 1,6 ,11,16
' #2: 2,7 ,12,17
' #3: 3,8 ,13,18
' #4: 4,9 ,14,19
' #5: 5,10,15,20   and so on ....

SUB zGetSetCMPString(FormName$, BYVAL ID&, BYVAL TIndex&, IText$, ITextLen&, BYVAL Mode&)    ' return string in T$
    LOCAL AFNum&, hDlg&, MaxSize&, CT&, EF$, NT$, N&, TBlock&, TI&, OrigTIndex&
    IF TIndex&<=0 OR TIndex&>32768 THEN EXIT SUB
    hDlg&=ezHandle(FormName$, ID&,1)
    IF hDlg&<>0 THEN
        IF zIsFormComponent(hDlg&) THEN
            AFNum&=ZFormNumH(hDlg&)
            IF AFNum&<>0 THEN
                EF$=CHR$(1)
                OrigTIndex&=TIndex&
                TI&=(TIndex&-1)MOD %MaxFormStrings
                TI&=TI&+1   ' produces a value from 1 to %MaxFormStrings
                TIndex&=((TIndex&-1)\%MaxFormStrings)+1  ' convert to straddle data (must use Integer divide so no rounding)
                SELECT CASE AS LONG Mode&
                    CASE 1 ' get string and get string length
                        CT&=TALLY(AppFormStringData$(AFNum&,TI&),EF$)
                        IF TIndex&<=CT& THEN
                            IText$=PARSE$(AppFormStringData$(AFNum&,TI&), EF$, TIndex&)
                        ELSE
                            IText$=""
                        END IF
                        ITextLen&=LEN(IText$)
                    CASE 2  ' set string
                        ' need to rewrite this code so it is faster
                        CT&=TALLY(AppFormStringData$(AFNum&,TI&),EF$)
                        IF TIndex&>CT& THEN CT&=TIndex&
                        NT$=""
                        FOR N&=1 TO CT&
                            IF N&=TIndex& THEN
                                NT$=NT$+IText$+EF$
                            ELSE
                                NT$=NT$+PARSE$(AppFormStringData$(AFNum&,TI&), EF$, N&)+EF$
                            END IF
                        NEXT N&
                        AppFormStringData$(AFNum&,TI&)=NT$
                        IF ID&<>0 THEN      ' only generate the event if called externally
                            SendMessage hDlg&, %WM_SETCMPTEXT, OrigTIndex&,0
                        END IF
                END SELECT
            END IF
        END IF
    END IF
END SUB


SUB zSetWindowText(BYVAL hWnd&, T$)
    T$=LEFT$(T$, %APP_64KB-1)+CHR$(0)
    SetWindowText hWnd&, BYVAL STRPTR(T$)
END SUB

FUNCTION zGetWindowText(BYVAL hWnd&, BYVAL Info&) AS STRING
    LOCAL TL&, RV$, ATL&
    TL&=SendMessage(hWnd&, %WM_GETTEXTLENGTH, 0, 0)
    IF Info&=-1 THEN
        RV$=STR$(TL&)
    ELSE
        RV$=SPACE$(TL&+1)
        ATL&=GetWindowText(hWnd&, BYVAL STRPTR(RV$), TL&+1)
        RV$=LEFT$(RV$,ATL&)
    END IF
    FUNCTION=RV$
END FUNCTION

SUB EZ_SetCmpText(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL TIndex&) EXPORT10
    LOCAL ITextLen&
    IF INSTR(IText$,CHR$(1))<>0 THEN
        IText$=REMOVE$(IText$,CHR$(1))
    END IF
    zGetSetCMPString FormName$, IDNum&, TIndex&, IText$, ITextLen&, 2
END SUB

FUNCTION EZ_GetCmpText(BYVAL FormName$, BYVAL IDNum&, BYVAL TIndex&) EXPORT10 AS STRING
    LOCAL IText$, ITextLen&
    zGetSetCMPString FormName$, IDNum&, TIndex&, IText$, ITextLen&, 1
    FUNCTION=IText$
END FUNCTION


SUB zGetSetUserString(FormName$, BYVAL SIndex&, T$, BYVAL Mode&)
    LOCAL hDlg&, AFNum&
    IF SIndex&<=0 OR SIndex&>%MaxFormStrings THEN EXIT SUB
    hDlg&=ezHandle(FormName$,0,1)
    IF hDlg&<>0 THEN
        IF zIsFormComponent(hDlg&)=0 THEN   ' can not be a component
            AFNum&=ZFormNumH(hDlg&)
            IF AFNum&<>0 THEN
                IF Mode&=0 THEN ' get text
                    T$=AppFormStringData$(AFNum&,SIndex&)
                ELSE            ' set text
                    AppFormStringData$(AFNum&,SIndex&)=T$
                END IF
            END IF
        END IF
    END IF
END SUB

SUB EZ_SetUserString(BYVAL FormName$, BYVAL SIndex&,BYVAL T$) EXPORT10
    zGetSetUserString FormName$, SIndex&, T$, 1
END SUB

FUNCTION EZ_GetUserString(BYVAL FormName$, BYVAL SIndex&) EXPORT10 AS STRING
    LOCAL T$
    zGetSetUserString FormName$, SIndex&, T$, 0
    FUNCTION=T$
END FUNCTION


SUB PBVSetText(BYVAL FormName$, BYVAL ID&, BYVAL Text$)
' Sets Text in a Window or control
' If ID&=0 then the Window handle is used, otherwise the control is
LOCAL hCtrl AS LONG
LOCAL hWnd AS LONG
' LOCAL RV AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   IF ID&<>0 THEN
      hCtrl=ZGetDlgItem(hWnd,ID&)
      IF hCtrl<>0 THEN
            SELECT CASE  AS CONST$ ZGetClass(hCtrl)
                CASE "RICHEDIT", "RICHEDIT20A","RICHEDIT50W"
                    EZ_SetRichText FormName$, ID&, Text$, 0, 0
                CASE "STATIC", "BUTTON"
                    IF INSTR(Text$,App_EZ_DChar$) THEN REPLACE App_EZ_DChar$ WITH CHR$(13)+CHR$(10) IN Text$
                    zSetWindowText hCtrl, Text$
'                    Text$=LEFT$(Text$, %APP_64KB-1)+CHR$(0)
'                    SetWindowText hCtrl, BYVAL STRPTR(Text$)
                    ZUpdateTransparent hCtrl
                CASE ELSE
                    zSetWindowText hCtrl, Text$
'                    Text$=LEFT$(Text$, %APP_64KB-1)+CHR$(0)
'                    SetWindowText hCtrl, BYVAL STRPTR(Text$)
            END SELECT
      END IF
   ELSE
       ' set text in a Window
       zSetWindowText hWnd, Text$
'      Text$=LEFT$(Text$, %APP_64KB-1)+CHR$(0)
'      SetWindowText hWnd, BYVAL STRPTR(Text$)
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION PBVGetText(FormName$, ID&, Info&) AS STRING
    '  Info&=-1 (Text len), =-2 (Text), >=0 (Listbox item by index)
    LOCAL hCtrl AS LONG
    LOCAL hWnd AS LONG
    LOCAL RV$, TL&, ATL&, I&, MAXI& , NFlag&, WS&
    RV$=""

   IF ID&<>0 THEN
      hCtrl=ezHandle(FormName$, ID&,1)
      IF hCtrl<>0 THEN
                ATL&=0
                TL&=0
                SELECT CASE  AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS
                        IF Info&>=0 THEN
                            I&=Info&
                        ELSE
                            I&=SendMessage(hCtrl, %LB_GETCURSEL, 0, 0)
                        END IF
                        RV$=ZGetListText(hCtrl, I&, Info&)
                    CASE "COMBOBOX"
                        NFlag&=0
                        WS&=GetWindowLong(hCtrl,%GWL_STYLE)
                        IF IsStyleSetEx(WS&, %CBS_OWNERDRAWFIXED) OR IsStyleSetEx(WS&, %CBS_OWNERDRAWVARIABLE) THEN
                            IF IsStyleSetEx(WS&, %CBS_HASSTRINGS)=0 THEN NFlag&=1
                        END IF
                        IF Info&>=0 THEN
                            I&=Info&
                            MaxI&=SendMessage(hCtrl, %CB_GETCOUNT, 0, 0)-1
                            IF I&>=0 AND I&<=MaxI& THEN
                                IF NFlag& THEN
                                    RV$=STR$(SendMessage(hCtrl, %CB_GETITEMDATA, I&,0))
                                ELSE
                                    TL&=SendMessage(hCtrl, %CB_GETLBTEXTLEN, I&, 0)
                                    RV$=SPACE$(TL&+1)
                                    ATL&=SendMessage(hCtrl, %CB_GETLBTEXT, I&, STRPTR(RV$))
                                    RV$=LEFT$(RV$,ATL&)
                                END IF
                            END IF
                        ELSE
                            TL&=SendMessage(hCtrl, %WM_GETTEXTLENGTH, 0, 0)
                            IF Info&=-1 THEN
                                RV$=STR$(TL&)
                                EXIT SELECT
                            END IF
                            RV$=SPACE$(TL&+1)
                            ATL&=SendMessage(hCtrl, %WM_GETTEXT, TL&+1, STRPTR(RV$))
                            RV$=LEFT$(RV$,ATL&)
                        END IF
                    CASE "RICHEDIT", "RICHEDIT20A","RICHEDIT50W"
                        IF Info&=-2 THEN
                            RV$=EZ_GetRichText(FormName$, ID&, 0, 0)    ' get just text
                        END IF
                        IF Info&=-1 THEN
                            RV$=STR$(EZ_GetRichTextLen(FormName$, ID&, 0, 0))
                        END IF
                    CASE $FLISTCLASS
                        IF Info&>=0 THEN
                            I&=Info&
                            RV$=ZGetListText(hCtrl, I&, Info&)
                        ELSE
                            hWnd=hCtrl
                            GOSUB GetWText
                        END IF
                    CASE ELSE       ' "BUTTON", "EDIT", "STATIC", UCASE$(App_MaskEditClass$)
                        hWnd=hCtrl
                        GOSUB GetWText
                END SELECT
      END IF
   ELSE
      hWnd=ezHandle(FormName$,0,1)
      IF hWnd<>0 THEN
          ' get text in a Window
          GOSUB GetWText
      END IF
   END IF
   FUNCTION=RV$
EXIT FUNCTION

GetWText:
    RV$=zGetWindowText(hWnd, Info&)

'    TL&=SendMessage(hWnd, %WM_GETTEXTLENGTH, 0, 0)
'    IF Info&=-1 THEN
'        RV$=STR$(TL&)
'    ELSE
'        RV$=SPACE$(TL&+1)
'        ATL&=GetWindowText(hWnd, BYVAL STRPTR(RV$), TL&+1)
'        RV$=LEFT$(RV$,ATL&)
'    END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION IsStyleSetEx(BYVAL WS&, BYVAL WStyle&) AS LONG
    LOCAL RV&
    RV&=0
    WS&=WS& AND WStyle&
    IF WS&=WStyle& THEN RV&=%TRUE
    FUNCTION=RV&
END FUNCTION

FUNCTION ZGetListText(BYVAL hCtrl AS LONG, BYVAL I&, BYVAL Info&) AS STRING
LOCAL MaxI&, TL&, ATL&, RV$, WS&, NFlag&    ', N&
RV$=""
MaxI&=SendMessage(hCtrl, %LB_GETCOUNT, 0, 0)-1
IF I&>=0 AND I&<=MaxI& THEN
    TL&=SendMessage(hCtrl, %LB_GETTEXTLEN, I&, 0)
    ' -------------------------------------
    WS&=GetWindowLong(hCtrl,%GWL_STYLE)
    IF IsStyleSetEx(WS&, %LBS_OWNERDRAWFIXED) OR IsStyleSetEx(WS&, %LBS_OWNERDRAWVARIABLE) THEN
        IF IsStyleSetEx(WS&, %LBS_HASSTRINGS)=0 THEN NFlag&=1
    END IF
    ' -------------------------------------
    IF Info&=-1 THEN
        ATL&=TL&
        RV$=STR$(TL&)
    ELSE
        IF NFlag& THEN
            RV$=STR$(SendMessage(hCtrl, %LB_GETITEMDATA, I&,0))
        ELSE
            RV$=SPACE$(TL&+1)
            ATL&=SendMessage(hCtrl, %LB_GETTEXT, I&, STRPTR(RV$))
            RV$=LEFT$(RV$,ATL&)
        END IF
    END IF
END IF
FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_CenterForm(BYVAL PFormName$, BYVAL FormName$, BYVAL DFlag&) EXPORT10
    LOCAL hWndP AS LONG, hWnd AS LONG
    LOCAL AW&, AH&, CW&, CH&    ', SW&, SH&
    LOCAL DRect AS Rect, CRect AS Rect, WR AS RECT
    hWnd=ezHandle(FormName$,0,1)
    IF hWnd=0 THEN EXIT SUB
    IF ZIsChildForm(hWnd) THEN
        hWndP=GetParent(hWnd)
    ELSE
        IF PFormName$="" THEN
            hWndP=0
        ELSE
            hWndP=ezHandle(PFormName$,0,1)
        END IF
    END IF
    GetWindowRect hWnd, DRect
    AW&=DRect.nRight-DRect.nLeft
    AH&=DRect.nBottom-DRect.nTop
    IF hWndP<>0 THEN
        IF ZIsChildForm(hWnd) THEN
            GetClientRect hWndP, CRect
            CW&=CRect.nRight-CRect.nLeft
            CH&=CRect.nBottom-CRect.nTop
            DRect.nLeft=(CW&-AW&)/2
            DRect.nTop=(CH&-AH&)/2
       ELSE
            GetWindowRect hWndP, CRect
            CW&=CRect.nRight-CRect.nLeft
            CH&=CRect.nBottom-CRect.nTop
            DRect.nLeft=CRect.nLeft + ((CW&-AW&)/2)
            DRect.nTop=CRect.nTop + ((CH&-AH&)/2)
       END IF
   ELSE
        ZGetWorkArea hWnd, WR, 0
        DRect.nLeft=WR.nLeft+(((WR.nRight-WR.nLeft)-AW&)/2)
        DRect.nTop=WR.nTop+(((WR.nBottom-WR.nTop)-AH&)/2)
   END IF
   IF DFlag&<>0 THEN DFlag&=1
   MoveWindow hWnd, DRect.nLeft, DRect.nTop, AW&, AH&, DFlag&
END SUB

SUB PBVPosWindow(BYVAL FormName$, BYVAL PMode&, BYVAL DMode&, BYVAL SMFlag&)
     LOCAL SW&, SH&, AW&, AH&, hWnd AS LONG, OKFlag&
     LOCAL DRect AS Rect, CRect AS Rect, hWndP AS LONG
     LOCAL V& , X&, Y&, CW&, CH&, DIFW&, DIFH&, N&, P$, AW2&, AH2&
     LOCAL WR AS RECT, CmpFlag&

     hWnd=PBVFormHandle(FormName$)

     IF hWnd&=0 THEN EXIT SUB

     IF zIsFormComponent(hWnd) THEN CmpFlag&=1 ELSE CmpFlag&=0
     SW&=GetSystemMetrics(%SM_CXSCREEN)
     SH&=GetSystemMetrics(%SM_CYSCREEN)
     IF GetWindowRect(hWnd, DRect) THEN
         AW&=DRect.nRight-DRect.nLeft
         AH&=DRect.nBottom-DRect.nTop
         SELECT CASE AS LONG PMode&
              CASE 3, 6          ' Resize to get proper client area
                  OKFlag&=0     ' WinLift test
                  GetClientRect hWnd, CRect
                  CW&=CRect.nRight-CRect.nLeft
                  CH&=CRect.nBottom-CRect.nTop
                  DIFW&=AW&-CW&
                  DIFH&=AH&-CH&
                  N&=ZFormNum(FormName$)
                  IF CmpFlag& THEN  ' components don't size by client area, but by outside
                      AW&=INT(App_EZ_CharW * AppForms(N&).FCol)
                      AH&=INT(App_EZ_CharH * AppForms(N&).FRow)
                  ELSE
                      AW&=INT(App_EZ_CharW * AppForms(N&).FCol) + DIFW&
                      AH&=INT(App_EZ_CharH * AppForms(N&).FRow) + DIFH&
                  END IF
               CASE ELSE
          END SELECT
          SELECT CASE AS LONG DMode&
              CASE 1          ' Center in Owner
                   N&=ZFormNum(FormName$)
                   P$=LTRIM$(RTRIM$(AppForms(N&).FParentName))
                   IF ZIsChildForm(hWnd) THEN
                        hWndP=GetParent(hWnd)
                   ELSE
                        hWndP=PBVFormHandle(P$)
                   END IF
                   IF hWndP<>0 THEN
                        IF ZIsChildForm(hWnd) THEN
                            GetClientRect hWndP, CRect
                            CW&=CRect.nRight-CRect.nLeft
                            CH&=CRect.nBottom-CRect.nTop
                            DRect.nLeft=(CW&-AW&)/2
                            DRect.nTop=(CH&-AH&)/2
                        ELSE
                            GetWindowRect hWndP, CRect
                            CW&=CRect.nRight-CRect.nLeft
                            CH&=CRect.nBottom-CRect.nTop
                            DRect.nLeft=CRect.nLeft + ((CW&-AW&)/2)
                            DRect.nTop=CRect.nTop + ((CH&-AH&)/2)
                        END IF
                   END IF
              CASE 2          '    center window in Screen
                   GOSUB CenterScrn
              CASE 4      ' Offset from Owner
                  N&=ZFormNum(FormName$)
                  P$=LTRIM$(RTRIM$(AppForms(N&).FParentName))
                  IF ZIsChildForm(hWnd) THEN
                      hWndP=GetParent(hWnd)
                  ELSE
                      hWndP=PBVFormHandle(P$)
                  END IF
                  IF hWndP<>0 THEN
                        IF ZIsChildForm(hWnd) THEN
                            DRect.nLeft=INT(App_EZ_CharW * AppForms(N&).FColLeft)
                            DRect.nTop=INT(App_EZ_CharH * AppForms(N&).FRowTop)
                        ELSE
                            GetWindowRect hWndP, CRect
                            X&=CRect.nLeft
                            Y&=CRect.nTop
                            AW2&=CRect.nRight-CRect.nLeft
                            AH2&=CRect.nBottom-CRect.nTop
                            GetClientRect hWndP, CRect
                            DIFW&=(AW2&-(CRect.nRight-CRect.nLeft))/2
                            X&=X&+DIFW&
                            DIFH&=(AH2&-(CRect.nBottom-CRect.nTop))
                            Y&=Y&+(DIFH&-DIFW&)     '  assumes bottom edge same as side
                            DRect.nLeft=X& + INT(App_EZ_CharW * AppForms(N&).FColLeft)
                            DRect.nTop=Y& + INT(App_EZ_CharH * AppForms(N&).FRowTop)
                        END IF
                  END IF
              CASE 5      ' Offset from Screen
                  N&=ZFormNum(FormName$)
                  DRect.nLeft=INT(App_EZ_CharW * AppForms(N&).FColLeft)
                  DRect.nTop=INT(App_EZ_CharH * AppForms(N&).FRowTop)
              CASE ELSE      ' top left corner
                  DRect.nLeft=0
                  DRect.nTop=0
         END SELECT
         MoveWindow hWnd, DRect.nLeft, DRect.nTop, AW&, AH&, 1
         IF SMFlag&=1 THEN
'              InvalidateRect hWnd, byval %NULL, 1
         END IF
    END IF

EXIT SUB

CenterScrn:
' centers in desktop work area
ZGetWorkArea hWnd, WR, 0
DRect.nLeft=WR.nLeft+(((WR.nRight-WR.nLeft)-AW&)/2)
DRect.nTop=WR.nTop+(((WR.nBottom-WR.nTop)-AH&)/2)
RETURN

END SUB

'------------------------------------------------------------------------------

SUB PBVSetScroll(BYVAL FormName$, BYVAL ID&, BYVAL ST$, BYVAL SMin&, BYVAL SMax&, BYVAL SPage&, BYVAL SPos&)
'  SType=0 SBar, 1 Win VSBar, 2 Win HSBar
LOCAL S AS SCROLLINFO
LOCAL hCtrl AS LONG
LOCAL hWnd AS LONG , X&, CN$,  SBV&
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   IF ID&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,ID&)
        IF hCtrl<>0 THEN
            CN$=zGetClass(hCtrl)
            SELECT CASE AS CONST$ CN$
                CASE "SCROLLBAR"
                    SBV&=%SB_CTL
                    GOSUB SetScrollVal
                CASE "MSCTLS_PROGRESS32"
                    ' SendMessage hCtrl, %PBM_SETRANGE,0, MAKLNG(SMin&,SMax&)
                    SendMessage hCtrl, %PBM_SETRANGE32,SMin&,SMax&
                    SendMessage hCtrl, %PBM_SETPOS, SPos&,0
                CASE "MSCTLS_UPDOWN32"
                    ' SendMessage hCtrl, %UDM_SETRANGE,0, MAKLNG(SMax&,SMin&)
                    SendMessage hCtrl, %UDM_SETRANGE32,SMin&,SMax&
                    SendMessage hCtrl, %UDM_SETPOS32, 0, SPos&
                CASE "MSCTLS_TRACKBAR32"
                    ' SendMessage hCtrl, %TBM_SETRANGE,-1, MAKLNG(SMin&,SMax&)
                    SendMessage hCtrl, %TBM_SETRANGEMAX,-1, SMax&
                    SendMessage hCtrl, %TBM_SETRANGEMIN,-1, SMin&
                    SendMessage hCtrl, %TBM_SETPOS, -1, SPos&
                CASE ELSE
            END SELECT
        END IF
    ELSE
      hCtrl=hWnd
      IF ID&<=0 THEN
         IF ST$="V" THEN
            SBV&=%SB_VERT
            GOSUB SetScrollVal
         END IF
         IF ST$="H" THEN
            SBV&=%SB_HORZ
            GOSUB SetScrollVal
         END IF
      END IF
    END IF
END IF
EXIT SUB

SetScrollVal:
S.cbSize=SIZEOF(S)
S.fMask=%SIF_ALL
S.nMin=SMin&
S.nMax=SMax&
S.nPage=SPage&
S.nPos=SPos&
S.nTrackPos=0  ' Set function ignores this value
' ScrollBar control
X&=SetScrollInfo(hCtrl, SBV&, S, %TRUE)
RETURN

END SUB

'------------------------------------------------------------------------------

SUB PBVShowC(BYVAL FormName$, BYVAL ID1&, BYVAL ID2&, BYVAL SFlag&)
LOCAL hCtrl AS LONG
LOCAL hWnd AS LONG
LOCAL X&, ID&
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   FOR ID&=ID1& TO ID2&
      IF ID&<>0 THEN
         hCtrl=ZGetDlgItem(hWnd,ID&)
         IF hCtrl<>0 THEN
            X&=ShowWindow(hCtrl, SFlag&)
         END IF
      END IF
   NEXT ID&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_HideC(BYVAL FormName$, BYVAL ID1&, OPTIONAL BYVAL ID2&)  EXPORT10
    IF ID2&=0 THEN ID2&=ID1&
    PBVShowC FormName$, ID1&, ID2&, %SW_HIDE
END SUB

'------------------------------------------------------------------------------

SUB EZ_ShowC(BYVAL FormName$, BYVAL ID1&, OPTIONAL BYVAL ID2&)  EXPORT10
    IF ID2&=0 THEN ID2&=ID1&
    PBVShowC FormName$, ID1&, ID2&, %SW_SHOW
END SUB

'------------------------------------------------------------------------------
FUNCTION PBVGetClass(FormName$, ID&) AS STRING
LOCAL hWnd AS LONG, hCtrl AS LONG, CN$
CN$=""
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
      IF ID&<>0 THEN
            hCtrl=ZGetDlgItem(hWnd,ID&)
            IF hCtrl<>0 THEN
                CN$=ZGetClass(hCtrl)
            END IF
      ELSE
            CN$=ZGetClass(hWnd)
      END IF
END IF
FUNCTION=CN$
END FUNCTION

'------------------------------------------------------------------------------

GLOBAL App_AltClassFlag&
GLOBAL App_AltClassName1$
GLOBAL App_AltClassName2$

SUB EZ_MatchClass(BYVAL NewClass$, BYVAL MatchClass$) EXPORT10
'    App_AltClassName1$=App_AltClassName1$+LEFT$("|"+UCASE$(TRIM$(NewClass$))+SPACE$(32),32)
    App_AltClassName1$=App_AltClassName1$+LEFT$(CHR$(LEN(NewClass$))+UCASE$(TRIM$(NewClass$))+SPACE$(32),32)
    App_AltClassName2$=App_AltClassName2$+LEFT$(UCASE$(TRIM$(MatchClass$))+SPACE$(32),32)
    App_AltClassFlag&=1
END SUB

FUNCTION zINSTRFixed(T1$, T$) AS LONG
    LOCAL P&, L&, AP&, S1 AS BYTE PTR, s2 AS BYTE PTR, OKFlag&
    REGISTER I&, L2&
    I&=1
    L&=LEN(T1$)
    L2&=LEN(T$)
    S1=STRPTR(T1$)
    S2=STRPTR(T$)
    FOR P&=1 TO L& STEP 32
        IF @S1=L2& THEN ' compare encoded length of string
            INCR S1
            IF @S1=@S2 THEN ' compare first letter of string
                OKFlag&=1
                FOR I&=1 TO L2&-1  ' compare the rest of the strings characters
                    IF @S1[I&]<>@S2[I&] THEN
                         OKFlag&=0
                         EXIT FOR
                    END IF
                NEXT I&
                IF OKFlag& THEN
                    AP&=P&
                    EXIT FOR
                END IF
            END IF
            S1=S1+31
        ELSE
            S1=S1+32
        END IF
    NEXT P&
    FUNCTION=AP&
END FUNCTION

FUNCTION ZGetClass(BYVAL hWnd AS LONG) AS STRING
LOCAL X&, zCN AS ASCIIZ*34, D$, P&
IF hWnd<>0 THEN
   X&=GetClassName(hWnd, zCN, 32)
   D$=UCASE$(LEFT$(zCN, X&))
   IF App_AltClassFlag& THEN
'        P&=INSTR(App_AltClassName1$, "|"+D$)
        P&=zINSTRFixed(App_AltClassName1$, D$)
        IF P&>0 THEN
            D$=TRIM$(MID$(App_AltClassName2$, P&,32))
        END IF
   END IF
ELSE
   D$=""
END IF
FUNCTION=D$
END FUNCTION

'------------------------------------------------------------------------------

SUB ZClearTreeview(BYVAL FormName$, BYVAL ID&)
    LOCAL hTV&, TXT$, Pict1&, Pict2&, Prop$, hTV2&
    hTV&=EZ_GetTVFirstV(FormName$,ID&)
    IF hTV&<>0 THEN
        DO
            IF EZ_GetTVItem(FormName$, ID&, hTV&, TXT$, Pict1&, Pict2&, Prop$) THEN
                hTV2&=EZ_GetTVNext(FormName$, ID&, hTV&)
                EZ_DeleteItem FormName$, ID&, hTV&
                hTV&=hTV2&
                IF hTV&=0 THEN EXIT DO
            ELSE
                EXIT DO
            END IF
        LOOP
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_Clear(BYVAL FormName$, BYVAL ID&)  EXPORT10
SELECT CASE AS CONST$ PBVGetClass(FormName$, ID&)
    CASE "LISTBOX", $FLISTCLASS
        EZ_SendMessage FormName$, ID&, %LB_RESETCONTENT, 0, 0
    CASE $PLISTCLASS
        EZ_SendMessage FormName$, ID&, %LB_RESETCONTENT, 0, 0
        EZ_SendMessage FormName$, ID&, %PLB_SETCURSEL, 0, -1    ' hide all child controls
    CASE "COMBOBOX"
        EZ_SendMessage FormName$, ID&, %CB_RESETCONTENT, 0, 0
    CASE "SYSLISTVIEW32"
        EZ_SendMessage FormName$, ID&, %LVM_DELETEALLITEMS,0,0
    CASE "SYSTREEVIEW32"
        ZClearTreeview  FormName$, ID&
    CASE "SYSTABCONTROL32"
        EZ_SendMessage FormName$, ID&, %TCM_DELETEALLITEMS,0,0
    CASE $CanvasClassName
        IF App_CanvasDC&<>0 THEN
            EZ_SendMessage FormName$, ID&, %EZCV_CLEAR,0,0   ' invalidate
        ELSE
            EZ_SendMessage FormName$, ID&, %EZCV_CLEAR,1,0   ' invalidate
        END IF
    CASE $TurtleClassName
          EZ_SendMessage  FormName$, ID&, %EZTG_CLEAR,0,0
    CASE "SYSDATETIMEPICK32"
        DIM ST AS SYSTEMTIME
        PBVGetSetDateTime FormName$, ID&, ST, -1
    CASE $EZComponent   ' component
        EZ_SendMessage FormName$, ID&, %WM_SETCMPSTATE, 4, 0    ' clear event
    CASE ELSE
END SELECT

END SUB


'------------------------------------------------------------------------------

SUB EZ_GetTurtleXY(BYVAL FormName$, BYVAL ID&, X&, Y&, BYVAL XView&, BYVAL YView&)  EXPORT10
LOCAL MFlag&
X&=0
Y&=0
SELECT CASE  AS CONST$ PBVGetClass(FormName$, ID&)
    CASE $TurtleClassName
        IF XView&=0 THEN MFlag&=0 ELSE MFlag&=1
        X&=EZ_SendMessageR(FormName$, ID&, %EZTG_GETLASTXPOS, XView&, MFlag&)
        IF YView&=0 THEN MFlag&=0 ELSE MFlag&=1
        Y&=EZ_SendMessageR(FormName$, ID&, %EZTG_GETLASTYPOS, YView&, MFlag&)
    CASE ELSE
END SELECT
END SUB


'------------------------------------------------------------------------------

SUB EZ_GetCanvasXY(BYVAL FormName$, BYVAL ID&, X&, Y&, BYVAL XView&, BYVAL YView&)  EXPORT10
LOCAL MFlag&
X&=0
Y&=0
SELECT CASE AS CONST$ PBVGetClass(FormName$, ID&)
    CASE $CanvasClassName
        IF XView&=0 THEN MFlag&=0 ELSE MFlag&=1
        X&=EZ_SendMessageR(FormName$, ID&, %EZTG_GETLASTXPOS, XView&, MFlag&)
        IF YView&=0 THEN MFlag&=0 ELSE MFlag&=1
        Y&=EZ_SendMessageR(FormName$, ID&, %EZTG_GETLASTYPOS, YView&, MFlag&)
    CASE ELSE
END SELECT
END SUB

'------------------------------------------------------------------------------

FUNCTION IsStyleSet(BYVAL hWnd&, BYVAL WStyle&) AS LONG
     LOCAL RV&, WS&
     RV&=0
     WS&=GetWindowLong(hWnd&,%GWL_STYLE)
     WS&=WS& AND WStyle&
     IF WS&=WStyle& THEN RV&=%TRUE
     FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_AddList (BYVAL FormName$, BYVAL ID&, AList$(), BYVAL P1&, BYVAL P2&) EXPORT10
    LOCAL hCtrl AS LONG
    LOCAL M&, Text$, N&, RFlag&, SFlag&
    hCtrl=ezHandle(FormName$, ID&,1)
            IF hCtrl<>0 THEN
                SFlag&=%TRUE
                SELECT CASE AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                        M&=%LB_ADDSTRING
                        IF IsStyleSet(hCtrl, %LBS_OWNERDRAWFIXED) OR IsStyleSet(hCtrl, %LBS_OWNERDRAWVARIABLE) THEN
                            IF IsStyleSet(hCtrl, %LBS_HASSTRINGS)=0 THEN
                                SFlag&=0
                            END IF
                        END IF
                    CASE "COMBOBOX"
                        M&=%CB_ADDSTRING
                        IF IsStyleSet(hCtrl, %CBS_OWNERDRAWFIXED) OR IsStyleSet(hCtrl, %CBS_OWNERDRAWVARIABLE) THEN
                            IF IsStyleSet(hCtrl, %CBS_HASSTRINGS)=0 THEN
                                SFlag&=0
                            END IF
                        END IF
                    CASE ELSE
                        EXIT SUB
                END SELECT
                N&=LBOUND(AList$)
                IF P1&<N& THEN P1&=N&
                IF P2&<N& THEN P2&=N&
                N&=UBOUND(AList$)
                IF P2&>N& THEN P2&=N&
                IF P1&>N& THEN P1&=N&
                IF P1&>P2& THEN SWAP P1&, P2&
                IF IsWindowVisible(hCtrl) THEN
                    SendMessage hCtrl, %WM_SETREDRAW, %FALSE, 0
                    RFlag&=1
                END IF
                FOR N&=P1& TO P2&
                    Text$=AList$(N&)+CHR$(0)
                    IF SFlag& THEN
                        SendMessage hCtrl, M&, 0, STRPTR(Text$)
                    ELSE
                        ' stored as a number in item data
                        SendMessage hCtrl, M&, 0, VAL(Text$)
                    END IF
                NEXT N&
                IF RFlag& THEN SendMessage hCtrl, %WM_SETREDRAW, %TRUE, 0
                InvalidateRect hCtrl, BYVAL %NULL, 0
            END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DeleteItem (BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10
    LOCAL hCtrl AS LONG
    LOCAL M1&, M4&, MaxI&
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$,ID&,1)
            IF hCtrl<>0 THEN
                SELECT CASE AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                        M1&=%LB_GETCOUNT
                        M4&=%LB_DELETESTRING
                        GOSUB DelLBCB
                    CASE "COMBOBOX"
                        M1&=%CB_GETCOUNT
                        M4&=%CB_DELETESTRING
                        GOSUB DelLBCB
                    CASE "SYSTREEVIEW32"
                        SendMessage hCtrl, %TVM_DELETEITEM, 0, N&   ' N& is handle to item
                    CASE "SYSLISTVIEW32"
                        M1&=%LVM_GETITEMCOUNT
                        M4&=%LVM_DELETEITEM
                        GOSUB DelLBCB
                    CASE "SYSTABCONTROL32"
                        M1&=%TCM_GETITEMCOUNT
                        M4&=%TCM_DELETEITEM
                        GOSUB DelLBCB
                    CASE ELSE
                        EXIT SUB
                END SELECT
            END IF
EXIT SUB

DelLBCB:
MaxI&=SendMessage(hCtrl, M1&, 0, 0)-1
IF MaxI&>=0 THEN
    IF N&>=0 AND N&<=MaxI& THEN SendMessage hCtrl, M4&, N&, 0
END IF
RETURN

END SUB

'------------------------------------------------------------------------------

FUNCTION PBVFindTABItem(BYVAL FormName$, BYVAL ID&, BYVAL P1&, BYVAL P2&, BYVAL Mode&) AS LONG
    LOCAL RV&, hCtrl&
    LOCAL TC AS TC_ITEM
    hCtrl&=ezHandle(FormName$,ID&,1)
    RV&=0
        IF hCtrl&<>0 THEN
            IF ZGetClass(hCtrl&)="SYSTABCONTROL32" THEN
                SELECT CASE AS LONG Mode&
                    CASE 1  ' set image index
                       TC.Mask = %TCIF_IMAGE
                       TC.iImage = P2&
                       RV&=SendMessage(hCtrl&, %TCM_SETITEM, P1&, VARPTR(TC))
                    CASE 2  ' get current selected tab
                        RV&=SendMessage(hCtrl&, %TCM_GETCURSEL,0, 0)
                    CASE 3  ' get number of rows
                        RV&=SendMessage(hCtrl&, %TCM_GETROWCOUNT,0, 0)
                    CASE 4  ' select tab    ' zero indexed
                        RV&=SendMessage(hCtrl&, %TCM_SETCURSEL,P1&, 0)
                        DIM NM AS NMHDR
                        NM.hwndFrom = hCtrl&
                        NM.idfrom = ID&
                        NM.code = %TCN_SELCHANGE
                        SendMessage GetParent(hCtrl&), %WM_NOTIFY, ID&, VARPTR(NM)
                    CASE 50 ' attach ImageList - normal list
                        RV&=SendMessage(hCtrl&, %TCM_SETIMAGELIST,0, P1&)
                    CASE ELSE
                END SELECT
            END IF
        END IF
    FUNCTION=RV&
END FUNCTION


SUB EZ_TABSetImage(BYVAL FormName$, BYVAL ID&, BYVAL TIndex&, BYVAL ImgIndex&) EXPORT10
LOCAL RV&
TIndex&=TIndex&-1   ' convert to zero indexed
RV&=PBVFindTABItem(FormName$, ID&, TIndex&, ImgIndex&, 1)
END SUB

SUB EZ_TABUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10
LOCAL RV&, hCtrl&, hImg&
IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg<>0 THEN
        RV&=PBVFindTABItem(FormName$, ID&,App_ImgList(N&).hImg , 0, 50)
    END IF
ELSE
     IF N&=-1 THEN
          hCtrl&=ezHandle(FormName$, ID&,1)
          IF hCtrl&<>0 THEN
               IF ZGetClass(hCtrl&)="SYSTABCONTROL32" THEN
                    hImg&=ZGetSystemImageList(hCtrl&,4,0)
                    IF hImg&<>0 THEN
                         RV&=SendMessage(hCtrl&, %TCM_SETIMAGELIST,0, hImg&)
                    END IF
               END IF
          END IF
     END IF
END IF
END SUB


SUB EZ_SelTab(BYVAL FormName$, BYVAL ID&, BYVAL TIndex&) EXPORT10
LOCAL RV&
TIndex&=TIndex&-1   ' convert to zero indexed
RV&=PBVFindTABItem(FormName$, ID&, TIndex&, 0, 4)
END SUB

FUNCTION EZ_GetTabSel(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
' convert to one indexed
FUNCTION=PBVFindTABItem(FormName$, ID&, 0, 0, 2)+1
END FUNCTION

FUNCTION EZ_GetTabRows(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTABItem(FormName$, ID&, 0, 0, 3)
END FUNCTION


FUNCTION EZ_ImgListHandle(BYVAL N&) EXPORT10 AS LONG
LOCAL RV&
IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg<>0 THEN RV&=App_ImgList(N&).hImg
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZSetGetTBLong(FormName$, IDNum&, BID&, BYVAL V&, BYVAL Mode&) AS LONG
    LOCAL Msg&, hCtrl&, LastI&, RV&, N&
    LOCAL TBI AS TBBUTTONINFO
    RV&=-1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)="TOOLBARWINDOW32" THEN
            LastI&=SendMessage(hCtrl&, %TB_BUTTONCOUNT,0,0)-1
            N&=SendMessage(hCtrl&, %TB_COMMANDTOINDEX,BID&,0)
            IF N&>=0 AND N&<=LastI& THEN
                TBI.cbSize=SIZEOF(TBI)
                TBI.dwMask=%TBIF_LPARAM
                TBI.lParam=V&
                IF Mode&=1 THEN
                    Msg&=%TB_SETBUTTONINFO
                    SendMessage hCtrl&, Msg&, BID&, VARPTR(TBI)
                ELSE
                    Msg&=%TB_GETBUTTONINFO
                    IF SendMessage(hCtrl&, Msg&, BID&, VARPTR(TBI))>=0 THEN
                        RV&=TBI.lParam
                    END IF
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetTBLong(BYVAL FormName$, BYVAL IDNum&, BYVAL BID&, BYVAL V&) EXPORT10
    ZSetGetTBLong FormName$, IDNum&, BID&, V&, 1
END SUB

FUNCTION EZ_GetTBLong(BYVAL FormName$, BYVAL IDNum&, BYVAL BID&) EXPORT10 AS LONG
    FUNCTION=ZSetGetTBLong(FormName$, IDNum&, BID&, 0, 0)
END FUNCTION


FUNCTION ZSetGetLVLong(FormName$, IDNum&, I&, BYVAL V&, BYVAL Mode&) AS LONG
    LOCAL Msg&, hCtrl&, LastI&, RV&
    LOCAL LVI AS LV_ITEM
    RV&=-1
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
            LastI&=SendMessage(hCtrl&, %LVM_GETITEMCOUNT,0,0)-1
            IF I&>=0 AND I&<=LastI& THEN
                LVI.mask=%LVIF_PARAM
                LVI.iItem=I&
                LVI.iSubItem=0
                LVI.lParam=V&
                IF Mode&=1 THEN
                    Msg&=%LVM_SETITEM
                ELSE
                    Msg&=%LVM_GETITEM
                END IF
                IF SendMessage(hCtrl&, Msg&, 0, VARPTR(LVI)) THEN
                    RV&=LVI.lParam
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetLVLong(BYVAL FormName$, BYVAL IDNum&, BYVAL I&, BYVAL V&) EXPORT10
    ZSetGetLVLong FormName$, IDNum&, I&, V&, 1
END SUB

FUNCTION EZ_GetLVLong(BYVAL FormName$, BYVAL IDNum&, BYVAL I&) EXPORT10 AS LONG
    FUNCTION=ZSetGetLVLong(FormName$, IDNum&, I&, 0, 0)
END FUNCTION

SUB ZSortLV(BYVAL hCtrl&, BYVAL DFlag&)
LOCAL LastI&, D$(), I&, AP&(), OrigL&(), NewOrigL&()
LOCAL LVI AS LV_ITEM
LastI&=SendMessage(hCtrl&, %LVM_GETITEMCOUNT,0,0)
IF LastI&>1 THEN
    LastI&=LastI&-1
    REDIM D$(0 TO LastI&)
    REDIM AP&(0 TO LastI&)
    REDIM OrigL&(0 TO LastI&)
    REDIM NewOrigL&(0 TO LastI&)
    FOR I&=0 TO LastI&
        D$(I&)=PBVGetLVText(hCtrl&, I&)
        AP&(I&)=I&
        LVI.mask=%LVIF_PARAM
        LVI.iItem=I&
        LVI.iSubItem=0
        LVI.lParam=0
        SendMessage hCtrl&, %LVM_GETITEM, 0, VARPTR(LVI)
        OrigL&(I&)=LVI.lParam
    NEXT I&
    IF DFlag&=0 THEN
        ARRAY SORT D$() , TAGARRAY AP&(), ASCEND
    ELSE
        ARRAY SORT D$() , TAGARRAY AP&(), DESCEND
    END IF
    FOR I&=0 TO LastI&
        NewOrigL&(I&)=OrigL&(AP&(I&))
        LVI.mask=%LVIF_PARAM
        LVI.iItem=AP&(I&)
        LVI.iSubItem=0
        LVI.lParam=I&
        SendMessage hCtrl&, %LVM_SETITEM, 0, VARPTR(LVI)
    NEXT I&
    IF DFlag&=0 THEN DFlag&=1 ELSE DFlag&=-1
    SendMessage hCtrl&, %LVM_SORTITEMS, DFlag&, CODEPTR(LVCompare)
    FOR I&=0 TO LastI&
        LVI.mask=%LVIF_PARAM
        LVI.iItem=I&
        LVI.iSubItem=0
        LVI.lParam=NewOrigL&(I&)
        SendMessage hCtrl&, %LVM_SETITEM, 0, VARPTR(LVI)
    NEXT I&
END IF
END SUB

FUNCTION LVCompare(BYVAL Param1&, BYVAL Param2&, BYVAL DFlag&) AS LONG
LOCAL RV&
IF Param1&=Param2& THEN
    RV&=0
ELSE
    IF Param1&>Param2& THEN
        RV&=1
    ELSE
        RV&=-1
    END IF
    ' reverse if other direction
'    RV&=DFlag& * RV&     ' not needed now since I sort array correctly now
END IF
FUNCTION=RV&
END FUNCTION

FUNCTION PBVFindLVItem(BYVAL FormName$, BYVAL ID&, BYVAL SP&, BYVAL Mode&) AS LONG
    LOCAL RV&, hCtrl&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$, ID&,1)
    RV&=0
        IF hCtrl&<>0 THEN
            IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
                SELECT CASE AS LONG Mode&
                    CASE 1  ' Delete Column
                        RV&=SendMessage(hCtrl&, %LVM_DELETECOLUMN, SP&, 0)
                    CASE 2  ' Get selected count
                        RV&=SendMessage(hCtrl&, %LVM_GETSELECTEDCOUNT, 0, 0)
                    CASE 3, 4 ' edit label and end edit
                        IF GetFocus()<>hCtrl& THEN SetFocus hCtrl&
                        IF Mode&=4 THEN SP&=-1
                        IF SP&>=-1 THEN
                            RV&=SendMessage(hCtrl&, %LVM_EDITLABEL,SP&,0)
                        END IF
                    CASE 5  ' get top index
                        RV&=SendMessage(hCtrl&, %LVM_GETTOPINDEX, 0, 0)
                    CASE 6  ' Set item count to prepare storage
                        RV&=SendMessage(hCtrl&, %LVM_SETITEMCOUNT, SP&, 0)
                    CASE 7
                        ZSortLV  hCtrl&, 0
                        RV&=1
                    CASE 8
                        ZSortLV  hCtrl&, 1
                        RV&=1
                    CASE 9
                        RV&=SendMessage(hCtrl&, %LVM_ENSUREVISIBLE, SP&, 0)
                    CASE 15 ' get column width in pixels
                        RV&=SendMessage(hCtrl&, %LVM_GETCOLUMNWIDTH, SP&, 0)
                    CASE 50 ' attach ImageList - normal list
                        RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_NORMAL, SP&)
                    CASE 51 ' attach ImageList - state list
                        RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_STATE, SP&)
                    CASE 52 ' attach ImageList - small list
                        RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_SMALL, SP&)
                    CASE 75
                        RV&=SendMessage(hCtrl&, %LVM_SETBKCOLOR, 0, %CLR_NONE)
                        RV&=SendMessage(hCtrl&, %LVM_SETTEXTBKCOLOR, 0, %CLR_NONE)
                    CASE ELSE
                END SELECT
            END IF
        END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetLVTransparentBG(BYVAL FormName$, BYVAL ID&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, 0, 75)
END SUB

SUB EZ_DelLVColumn(BYVAL FormName$, BYVAL ID&, BYVAL CIndex&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, CIndex&, 1)
END SUB

SUB EZ_StartLVEdit(BYVAL FormName$, BYVAL ID&, BYVAL ITEM&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, ITEM&, 3)
END SUB

SUB EZ_EndLVEdit(BYVAL FormName$, BYVAL ID&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, -1, 4)
END SUB


FUNCTION EZ_GetLVSelCount(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindLVItem(FormName$, ID&, 0, 2)
END FUNCTION

FUNCTION EZ_GetLVTopV(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindLVItem(FormName$, ID&, 0, 5)
END FUNCTION

SUB EZ_SetLVMaxCount(BYVAL FormName$, BYVAL ID&, BYVAL MaxItems&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, MaxItems&, 6)
END SUB

SUB EZ_SortLV(BYVAL FormName$, BYVAL ID&, BYVAL DFlag&) EXPORT10
LOCAL RV&, DF&
IF DFlag&=0 THEN DF&=7 ELSE DF&=8
RV&=PBVFindLVItem(FormName$, ID&, 0, DF&)
END SUB

SUB EZ_LVEnsureVisible(BYVAL FormName$, BYVAL ID&, BYVAL ITEM&) EXPORT10
LOCAL RV&
RV&=PBVFindLVItem(FormName$, ID&, ITEM&, 9)
END SUB

FUNCTION EZ_GetLVColWidth(BYVAL FormName$, BYVAL ID&, BYVAL ColIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindLVItem(FormName$, ID&, ColIndex&, 15)
END FUNCTION

SUB EZ_LVUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&) EXPORT10
LOCAL RV&, hImg&, hCtrl&
IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg<>0 THEN
        SELECT CASE AS LONG SFlag&
            CASE 0
                RV&=PBVFindLVItem(FormName$, ID&,App_ImgList(N&).hImg , 50)
            CASE 1
                RV&=PBVFindLVItem(FormName$, ID&,App_ImgList(N&).hImg , 51)
            CASE 2
                RV&=PBVFindLVItem(FormName$, ID&,App_ImgList(N&).hImg , 52)
            CASE ELSE
        END SELECT
    END IF
ELSE
     IF N&=-1 THEN
          hCtrl&=ezHandle(FormName$, ID&,1)
          IF hCtrl&<>0 THEN
               IF ZGetClass(hCtrl&)="SYSLISTVIEW32" THEN
                    hImg&=ZGetSystemImageList(hCtrl&,4,0)
                    IF hImg&<>0 THEN
                         SELECT CASE AS LONG SFlag&
                           CASE 0
                                RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_NORMAL, hImg&)
                           CASE 1
                                RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_STATE, hImg&)
                           CASE 2
                                RV&=SendMessage(hCtrl&, %LVM_SETIMAGELIST,%LVSIL_SMALL, hImg&)
                           CASE ELSE
                         END SELECT
                    END IF
               END IF
          END IF
     END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZTV_lParam(BYVAL FormName$, BYVAL ID&, BYVAL hTV&, BYVAL lParam&, BYVAL DFlag&) AS LONG
LOCAL RV&, hCtrl&
LOCAL TVI AS TV_INSERTSTRUCT
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$, ID&,1)
IF hCtrl&<>0 THEN
    IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
        TVI.item.mask=%TVIF_PARAM
        TVI.item.hItem=hTV&
        IF DFlag& THEN
            TVI.item.lParam=lParam&
            RV&=SendMessage(hCtrl&, %TVM_SETITEM,0, VARPTR(TVI.item))
        ELSE
            RV&=SendMessage(hCtrl&, %TVM_GETITEM,0, VARPTR(TVI.item))
            RV&=TVI.item.lParam
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetTVLong(BYVAL FormName$, BYVAL ID&, BYVAL hTV&, BYVAL N&) EXPORT10
LOCAL X&
X&=ZTV_lParam(FormName$, ID&, hTV&, N&, 1)
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetTVLong(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=ZTV_lParam(FormName$, ID&, hTV&, 0, 0)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION PBVFindTVItem(BYVAL FormName$, BYVAL ID&, BYVAL hTV&, BYVAL Mode&) AS LONG
    LOCAL RV&, hCtrl&, SP&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$,ID&,1)
    RV&=0
        IF hCtrl&<>0 THEN
            IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
                SP&=hTV&
                SELECT CASE AS LONG Mode&
                    CASE 1  ' root handle
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_ROOT,SP&)
                    CASE 2  ' next sibling
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_NEXT ,SP&)
                    CASE 3  ' first child
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_CHILD ,SP&)
                    CASE 4  ' parent
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_PARENT ,SP&)
                    CASE 5  ' previous sibling
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_PREVIOUS ,SP&)
                    CASE 6  ' first visible item
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_FIRSTVISIBLE ,0)
                    CASE 7  ' next visible item
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_NEXTVISIBLE ,SP&)
                    CASE 8  ' previous visible item
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_PREVIOUSVISIBLE ,SP&)
                    CASE 9  ' Currently selected item
                        RV&=SendMessage(hCtrl&, %TVM_GETNEXTITEM,%TVGN_CARET ,SP&)
                    CASE 10 ' edit label
                        IF GetFocus()<>hCtrl& THEN SetFocus hCtrl&
                        RV&=SendMessage(hCtrl&, %TVM_EDITLABEL,0 ,SP&)
                    CASE 11 ' end edit label now
'                        RV&=SendMessage(hCtrl&, %TVM_ENDEDITLABELNOW,%TRUE ,0)
                        RV&=SendMessage(hCtrl&, %TVM_ENDEDITLABELNOW,0 ,0)
                    CASE 12 ' expand children
                        RV&=SendMessage(hCtrl&, %TVM_EXPAND,%TVE_EXPAND ,SP&)
                    CASE 13 ' collapse children
                        RV&=SendMessage(hCtrl&, %TVM_EXPAND,%TVE_COLLAPSE ,SP&)
                    CASE 14 ' clear children
                        RV&=SendMessage(hCtrl&, %TVM_EXPAND,%TVE_COLLAPSE OR %TVE_COLLAPSERESET ,SP&)
                    CASE 15 ' get count of items
                        RV&=SendMessage(hCtrl&, %TVM_GETCOUNT,0 ,0)
                    CASE 16 ' get visible count
                        RV&=SendMessage(hCtrl&, %TVM_GETVISIBLECOUNT,0 ,0)
                    CASE 17 ' select item
                        RV&=SendMessage(hCtrl&, %TVM_SELECTITEM,%TVGN_CARET ,SP&)
                    CASE 18 ' make first in window
                        RV&=SendMessage(hCtrl&, %TVM_SELECTITEM,%TVGN_FIRSTVISIBLE ,SP&)
                    CASE 19 ' sort children
                        RV&=SendMessage(hCtrl&, %TVM_SORTCHILDREN,0 ,SP&)
                    CASE 50 ' attach ImageList - normal list
                        RV&=SendMessage(hCtrl&, %TVM_SETIMAGELIST,%TVSIL_NORMAL, SP&)
                    CASE 51 ' attach ImageList - state list
                        RV&=SendMessage(hCtrl&, %TVM_SETIMAGELIST,%TVSIL_STATE, SP&)
                    CASE ELSE
                END SELECT
            END IF
        END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetTVRoot(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, 0, 1)
END FUNCTION

FUNCTION EZ_GetTVNext(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 2)
END FUNCTION

FUNCTION EZ_GetTVChild(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 3)
END FUNCTION

FUNCTION EZ_GetTVParent(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 4)
END FUNCTION

FUNCTION EZ_GetTVPrevious(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 5)
END FUNCTION

FUNCTION EZ_GetTVFirstV(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, 0, 6)
END FUNCTION

FUNCTION EZ_GetTVNextV(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 7)
END FUNCTION


FUNCTION EZ_GetTVPreviousV(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, hTV&, 8)
END FUNCTION


FUNCTION EZ_GetTVSel(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, 0, 9)
END FUNCTION


SUB EZ_StartTVEdit(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 10)
END SUB


SUB EZ_EndTVEdit(BYVAL FormName$, BYVAL ID&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, 0, 11)
END SUB


SUB EZ_TVExpand(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 12)
END SUB


SUB EZ_TVCollapse(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 13)
END SUB


SUB EZ_TVClearChildren(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 14)
END SUB

FUNCTION EZ_GetTVCount(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, 0, 15)
END FUNCTION

FUNCTION EZ_GetTVCountV(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindTVItem(FormName$, ID&, 0, 16)
END FUNCTION

SUB EZ_TVSelect(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 17)
END SUB

SUB EZ_TVPosTop(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 18)
END SUB

SUB EZ_TVSortChildren(BYVAL FormName$, BYVAL ID&, BYVAL hTV&) EXPORT10
LOCAL RV&
RV&=PBVFindTVItem(FormName$, ID&, hTV&, 19)
END SUB

SUB EZ_TVUseImageList(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&) EXPORT10
LOCAL RV&, hCtrl&, hImg&
IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg<>0 THEN
        IF SFlag&<>0 THEN
            RV&=PBVFindTVItem(FormName$, ID&,App_ImgList(N&).hImg , 51)
        ELSE
            RV&=PBVFindTVItem(FormName$, ID&,App_ImgList(N&).hImg , 50)
        END IF
    END IF
ELSE
     IF N&=-1 THEN
          hCtrl&=ezHandle(FormName$, ID&,1)
          IF hCtrl&<>0 THEN
               IF ZGetClass(hCtrl&)="SYSTREEVIEW32" THEN
                    hImg&=ZGetSystemImageList(hCtrl&,4,0)
                    IF hImg&<>0 THEN
                         IF SFlag&<>0 THEN
                                RV&=SendMessage(hCtrl&, %TVM_SETIMAGELIST,%TVSIL_STATE, hImg&)
                         ELSE
                                RV&=SendMessage(hCtrl&, %TVM_SETIMAGELIST,%TVSIL_NORMAL, hImg&)
                         END IF
                    END IF
               END IF
          END IF
     END IF

END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_FLUseImageList(BYVAL Formname$, BYVAL ID&, BYVAL N&) EXPORT10
    LOCAL hCtrl&
    hCtrl&=ezHandle(FormName$, ID&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=$FLISTCLASS THEN
            IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
                IF App_ImgList(N&).hImg<>0 THEN
                    SendMessage hCtrl&, %FLB_SETIMAGELIST,0,App_ImgList(N&).hImg
                END IF
            ELSEIF N&=-1 THEN
                SendMessage hCtrl&, %FLB_SETIMAGELIST,1,0   ' use system images
            END IF
        END IF
    END IF
END SUB

' %FLB_SETDIRFILTER   wparam - filter1, lparam - filter 2
' DlgDirList, DlgDirListComboBox flags values
'%DDL_READWRITE                               = &H0
'%DDL_READONLY                                = &H1
'%DDL_HIDDEN                                  = &H2
'%DDL_SYSTEM                                  = &H4
'%DDL_DIRECTORY                               = &H10
'%DDL_ARCHIVE                                 = &H20

'%DDL_POSTMSGS                                = &H2000
'%DDL_DRIVES                                  = &H4000
'%DDL_EXCLUSIVE                               = &H8000

SUB EZ_FLSetStyle(BYVAL FormName$, BYVAL ID&, BYVAL FStyle$) EXPORT10
    LOCAL hCtrl&, F1&, F2&, RFlag&
    F1&=-1
    F2&=-1
    RFlag&=0
    FStyle$=UCASE$(FStyle$)
    IF INSTR(FStyle$,"S") THEN F1&=%DDL_DIRECTORY OR %DDL_EXCLUSIVE
    IF INSTR(FStyle$,"D") THEN
        IF F1&=-1 THEN
            F1&=%DDL_DRIVES OR %DDL_EXCLUSIVE
        ELSE
            F1&=F1& OR %DDL_DRIVES
        END IF
        IF INSTR(FStyle$,"X") THEN RFlag&=1
    END IF
    IF INSTR(FStyle$,"F") THEN F2&=%DDL_READWRITE
    IF F2&>=0 THEN
        IF INSTR(FStyle$,"R") THEN F2&=F2& OR %DDL_READONLY
        IF INSTR(FStyle$,"H") THEN F2&=F2& OR %DDL_HIDDEN
        IF INSTR(FStyle$,"$") THEN F2&=F2& OR %DDL_SYSTEM
        IF INSTR(FStyle$,"A") THEN F2&=F2& OR %DDL_ARCHIVE
        IF F2&<>0 THEN
            F2&=F2& OR %DDL_EXCLUSIVE
        END IF
    END IF
    hCtrl&=ezHandle(FormName$, ID&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=$FLISTCLASS THEN
            SendMessage hCtrl&, %FLB_SETDIRFILTER, F1&, F2&
            SendMessage hCtrl&, %FLB_SETREMOVEFLAG,0,RFlag&
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefImageList(BYVAL N&, BYVAL XY&, BYVAL MaxI&) EXPORT10
LOCAL MinI&
SELECT CASE AS LONG XY&
    CASE 16 TO 256
        IF MaxI&<4 THEN MaxI&=4
        IF MaxI&>100 THEN MaxI&=100
        MinI&=0
        ' MinI&=INT(MaxI&/4)
    CASE ELSE
        EXIT SUB
END SELECT
IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg=0 THEN
        App_ImgList(N&).hImg=ImageList_Create(XY&, XY&, %ILC_COLOR24 OR %ILC_MASK, MinI&, MaxI&)
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetImageListCount(BYVAL N&) EXPORT10 AS LONG
    LOCAL RV&
    IF N&>=0 AND N&<=UBOUND(App_ImgList) THEN
        IF App_ImgList(N&).hImg<>0 THEN RV&=ImageList_GetImageCount(App_ImgList(N&).hImg)
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_FreeImageList(BYVAL N&) EXPORT10
IF N&>=0 AND N&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(N&).hImg<>0 THEN
        ImageList_Destroy  App_ImgList(N&).hImg
        App_ImgList(N&).hImg=0
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_AddImage(BYVAL N&, BYVAL Pict$, BYVAL TColor&) EXPORT10 AS LONG
LOCAL I&, hBmp&, hIcon&, P&
P&=-1
IF Pict$<>"" THEN
    ARRAY SCAN APPImageName$(1), = Pict$, TO I&
    IF I&>0 THEN
        IF APPImageType(I&)=%OBJ_BITMAP THEN
            hBmp&=APPImage(I&)
        ELSE
            hIcon&=APPImage(I&)
        END IF
        IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
            IF App_ImgList(N&).hImg<>0 THEN
                IF hBmp&<>0 THEN
                    hBmp&=CopyImage(hBmp&, %IMAGE_BITMAP, 0,0,0)    ' %LR_COPYRETURNORG removed
                    P&=ImageList_AddMasked(App_ImgList(N&).hImg, hBmp&, TColor&)
                    DeleteObject hBmp&
                ELSE
                    P&=ImageList_ReplaceIcon(App_ImgList(N&).hImg, -1, hIcon&)
                END IF
            END IF
        END IF
    END IF
END IF
FUNCTION=P&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_AddPictToImgList(BYVAL N&, BYVAL Pict$, BYVAL TColor&) EXPORT10 AS LONG
LOCAL I&, hBmp&, hBmp2&, W&, H&, X&, P&, hDC1&, hDC2&, hDC&
LOCAL Y&,IX&,IY&
LOCAL OldBmp2&, OldBmp1&, hBmp3&
P&=-1
IF Pict$<>"" THEN
    ARRAY SCAN APPImageName$(1), = Pict$, TO I&
    IF I&>0 THEN
        IF APPImageType(I&)=%OBJ_BITMAP THEN
            hBmp&=APPImage(I&)
        END IF
        IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
            IF App_ImgList(N&).hImg<>0 THEN
                IF hBmp&<>0 THEN
                    EZ_GetBitmapSize hBmp&, W&, H&
                    IF ImageList_GetIconSize(App_ImgList(N&).hImg, IX&,IY&) THEN
                        hDC& = GetDC(%HWND_DESKTOP)
                        hBmp2&=CreateCompatibleBitmap(hDC, IX&, IY&)
                        hDC1&=CreateCompatibleDC(hDC&)
                        hDC2&=CreateCompatibleDC(hDC&)
                        ReleaseDC %HWND_DESKTOP, hDC&
                        OldBmp1&=SelectObject(hDC1&, hBmp&)
                        H&=H&-1
                        W&=W&-1
                        FOR Y&=0 TO H& STEP IY&
                            FOR X&=0 TO W& STEP IX&
                                OldBmp2&=SelectObject(hDC2&, hBmp2&)
                                BitBlt hDC2&,0,0,IX&,IY&,hDC1&,X&,Y&,%SRCCOPY
                                SelectObject hDC2&, OldBmp2&
                                hBmp3&=CopyImage(hBmp2&, %IMAGE_BITMAP, 0,0,0) ' %LR_COPYRETURNORG removed
                                P&=ImageList_AddMasked(App_ImgList(N&).hImg, hBmp3&, TColor&)
                                DeleteObject hBmp3&
                            NEXT X&
                        NEXT Y&
                        DeleteObject hBmp2&
                        SelectObject hDC1&, OldBmp1&
                        DeleteDC hDC1&
                        DeleteDC hDC2&
                    END IF
                END IF
            END IF
        END IF
    END IF
END IF
FUNCTION=P&
END FUNCTION

'------------------------------------------------------------------------------

GLOBAL App_SearchLVColumn&


SUB EZ_SearchLVCol(BYVAL ColN&) EXPORT10
App_SearchLVColumn&=ColN&
END SUB

FUNCTION PBVGetLVText(BYVAL hCtrl&, BYVAL LVIndex&) AS STRING
LOCAL LVI AS LV_ITEM, RV&, N&, C1&, C2&
LOCAL LVString AS ASCIIZ*256, Text$, BFlag&, B&
Text$=""
BFlag&=0
IF App_SearchLVColumn&>=0 THEN
    IF (App_SearchLVColumn& AND %EZ_LVBitCol)=0 THEN
        C1&=App_SearchLVColumn&
        C2&=App_SearchLVColumn&
    ELSE
        C1&=0
        C2&=15
        BFlag&=1
        B&=App_SearchLVColumn& AND (NOT %EZ_LVBitCol)
    END IF
ELSE
    C1&=0
    C2&=ABS(App_SearchLVColumn&)
END IF
FOR N&=C1& TO C2&
    IF BFlag& THEN
        IF BIT(B&, N&)=0 THEN ITERATE FOR
    END IF
    LVI.mask=%LVIF_TEXT
    LVI.iItem=LVIndex&
    LVI.iSubItem=N&
    LVI.STATE=0
    LVI.stateMask=0
    LVI.pszText=VARPTR(LVString)
    LVI.cchTextMax=255
    LVI.iImage=0
    LVI.lParam=0
    RV&=SendMessage(hCtrl&,%LVM_GETITEM, 0, VARPTR(LVI))
    IF RV&<>0 THEN
        IF N&=C1& THEN
            Text$=LVString
        ELSE
            Text$=Text$+App_EZ_DChar$+LVString
        END IF
    END IF
NEXT N&
FUNCTION=Text$
END FUNCTION


FUNCTION PBVFindItem (BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SP&, BYVAL MFlag&) AS LONG
    LOCAL hCtrl AS LONG, RV&, OK&
    LOCAL M1&, M2&, M3&, Text$, N&, MaxI&, TL&, ATL&, LVFlag&
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$, ID&,1)
    RV&=-1
    LVFlag&=0
            IF hCtrl<>0 THEN
                SELECT CASE AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                        M1&=%LB_GETCOUNT
                        M2&=%LB_GETTEXTLEN
                        M3&=%LB_GETTEXT
                    CASE "COMBOBOX"
                        M1&=%CB_GETCOUNT
                        M2&=%CB_GETLBTEXTLEN
                        M3&=%CB_GETLBTEXT
                        IF MFlag&=9 THEN
                            FUNCTION=RV&
                            EXIT FUNCTION
                        END IF
                    CASE "SYSLISTVIEW32"
                        M1&=%LVM_GETITEMCOUNT
                        SELECT CASE AS LONG MFlag&
                            CASE -1
                                GOSUB FindLastOne
                            CASE 9
                                GOSUB FindLastOne
                                SP&=SP&-1
                                IF SP&>=-1 AND SP&<MaxI& THEN
                                    RV&=SendMessage(hCtrl, %LVM_GETNEXTITEM, SP&, MAKLNG(%LVNI_SELECTED,0))
                                END IF
                            CASE 0 TO 5
                                LVFlag&=1
                        END SELECT
                        IF LVFlag&=0 THEN
                            FUNCTION=RV&
                            EXIT FUNCTION
                        END IF
                    CASE "SYSTABCONTROL32"
                        M1&=%TCM_GETITEMCOUNT
                        IF MFlag&<>-1 THEN
                            FUNCTION=RV&
                            EXIT FUNCTION
                        END IF
                    CASE ELSE
                        FUNCTION=RV&
                        EXIT FUNCTION
                END SELECT
                GOSUB FindLastOne
                IF MaxI&>=0 THEN
                    OK&=0
                    IF SP&<0 THEN SP&=0
                    FOR N&=SP& TO MaxI&
                        SELECT CASE AS LONG MFlag&
                            CASE 0  '   Exact match
                                GOSUB ZFind1
                                IF IText$=Text$ THEN OK&=1
                            CASE 1  '   Left match case sensitive
                                GOSUB ZFind1
                                IF IText$=LEFT$(Text$, LEN(IText$)) THEN OK&=1
                            CASE 2  '   Left match not case sensitive
                                GOSUB ZFind1
                                IF UCASE$(IText$)=UCASE$(LEFT$(Text$, LEN(IText$))) THEN OK&=1
                            CASE 3  '   Match anywhere case sensitive
                                GOSUB ZFind1
                                IF INSTR(Text$, IText$) THEN OK&=1
                            CASE 4
                                GOSUB ZFind1
                                IF INSTR(UCASE$(Text$), UCASE$(IText$)) THEN OK&=1
                            CASE 5  '   Exact match not case sensitive
                                GOSUB ZFind1
                                IF UCASE$(IText$)=UCASE$(Text$) THEN OK&=1
                            CASE 9  ' for listboxes only
                                IF SendMessage(hCtrl, %LB_GETSEL, N&, 0)>0 THEN OK&=1
                            CASE ELSE

                        END SELECT
                        IF OK& THEN
                            RV&=N&
                            EXIT FOR
                        END IF
                    NEXT N&
                END IF
            END IF
    FUNCTION=RV&
EXIT FUNCTION

FindLastOne:
MaxI&=SendMessage(hCtrl, M1&, 0, 0)-1
IF MFlag&=-1 THEN
    RV&=MaxI&
    MaxI&=-1
END IF
RETURN

ZFind1:
IF LVFlag&=0 THEN
    TL&=SendMessage(hCtrl, M2&, N&, 0)
    Text$=SPACE$(TL&+1)
    ATL&=SendMessage(hCtrl, M3&, N&, STRPTR(Text$))
    Text$=LEFT$(Text$,ATL&)
ELSE
    Text$=PBVGetLVText(hCtrl, N&)
END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNext(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 0)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 5)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextLeft(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 1)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextLeftNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 2)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextAny(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 3)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextAnyNC(BYVAL FormName$, BYVAL ID&, BYVAL IText$, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, IText$, SIndex&, 4)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindNextSel(BYVAL FormName$, BYVAL ID&, BYVAL SIndex&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, "" , SIndex&, 9)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FindLast(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVFindItem (FormName$, ID&, "" , 0, -1)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SelectItem(BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10
    LOCAL hCtrl AS LONG
    LOCAL MX&
    hCtrl=ezHandle(FormName$,ID&,1)
            IF hCtrl<>0 THEN
                SELECT CASE AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                        MX&=SendMessage(hCtrl, %LB_GETCOUNT, 0, 0)
                        IF N&>=-1 AND N&<MX& THEN
                            SendMessage hCtrl, %LB_SETCURSEL, N&, 0
                        END IF
                    CASE "COMBOBOX"
                        MX&=SendMessage(hCtrl, %CB_GETCOUNT, 0, 0)
                        IF N&>=-1 AND N&<MX& THEN
                            SendMessage hCtrl, %CB_SETCURSEL, N&, 0
                        END IF
                    CASE $EZComponent
                        SendMessage hCtrl, %WM_SETCMPSTATE, 3, N&
                    CASE ELSE
                END SELECT
            END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetSelect(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL SFlag&) EXPORT10
    LOCAL MX&, hCtrl AS LONG
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$, ID&,1)
    IF SFlag&<>0 THEN SFlag&=-1
    IF hCtrl<>0 THEN
        SELECT CASE AS CONST$ ZGetClass(hCtrl)
            CASE "LISTBOX", $FLISTCLASS
                MX&=SendMessage(hCtrl, %LB_GETCOUNT, 0, 0)
                IF N&>=-1 AND N&<MX& THEN
                    SendMessage hCtrl, %LB_SETSEL, SFlag&, N&
                END IF
            CASE "SYSLISTVIEW32"
                IF N&>=-1 THEN ZSetSelectLV hCtrl, N&, SFlag&, 1
            CASE "SYSTREEVIEW32"
                IF N&<>0 THEN ZSetSelectTV hCtrl&, N&, SFlag&, 1
            CASE ELSE
        END SELECT
    END IF
END SUB


'------------------------------------------------------------------------------
%MaxCCList  =   100
GLOBAL App_EZ_CForm$()
GLOBAL App_EZ_CCID&()
GLOBAL App_EZ_CCHandle&()
GLOBAL App_EZ_CCIndex&

SUB ZInitCCList()
    REDIM App_EZ_CForm$(1 TO %MaxCCList)
    REDIM App_EZ_CCID&(1 TO %MaxCCList)
    REDIM App_EZ_CCHandle&(1 TO %MaxCCList)
    App_EZ_CCIndex&=0
END SUB

SUB zClearCCList()
    ERASE App_EZ_CForm$
    ERASE App_EZ_CCID&
    ERASE App_EZ_CCHandle&
END SUB

SUB EZ_StartCC(BYVAL FormName$, BYVAL ID&) EXPORT10
    App_EZ_HandlehWnd&=0
    App_EZ_CCIndex&=App_EZ_CCIndex&+1
    IF App_EZ_CCIndex&>0 AND App_EZ_CCIndex&<=%MaxCCList THEN
        App_EZ_HandlehWnd&=ezHandle(FormName$, ID&,1)
        IF App_EZ_HandlehWnd&<>0 THEN
            IF FormName$="{ME}" THEN
                App_EZ_CForm$(App_EZ_CCIndex&)=EZ_GetME
            ELSE
                App_EZ_CForm$(App_EZ_CCIndex&)=FormName$
            END IF
            App_EZ_CCID&(App_EZ_CCIndex&)=ID&
            App_EZ_CCHandle&(App_EZ_CCIndex&)=App_EZ_HandlehWnd&
        ELSE
            App_EZ_CForm$(App_EZ_CCIndex&)=""
            App_EZ_CCID&(App_EZ_CCIndex&)=0
            App_EZ_CCHandle&(App_EZ_CCIndex&)=0
       END IF
    END IF
END SUB

SUB EZ_GetCC(FormName$, IDNum&) EXPORT10
    IF App_EZ_CCIndex&>0 AND App_EZ_CCIndex&<=%MaxCCList THEN
        FormName$=App_EZ_CForm$(App_EZ_CCIndex&)
        IDNum&=App_EZ_CCID&(App_EZ_CCIndex&)
    ELSE
        FormName$=""
        IDNum&=0
    END IF
END SUB

SUB EZ_EndCC() EXPORT10
    App_EZ_HandlehWnd&=0
    App_EZ_CCIndex&=App_EZ_CCIndex&-1
    IF App_EZ_CCIndex&>0 AND App_EZ_CCIndex&<=%MaxCCList THEN
        App_EZ_HandlehWnd&=App_EZ_CCHandle&(App_EZ_CCIndex&)
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetSelect(BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10 AS LONG
    LOCAL MX&, hCtrl AS LONG, RV&
'    App_EZ_HandleFlag&=1
    RV&=-1
    hCtrl=ezHandle(FormName$, ID&,1)
    IF hCtrl<>0 THEN
        SELECT CASE AS CONST$ ZGetClass(hCtrl)
            CASE "LISTBOX", $FLISTCLASS
                MX&=SendMessage(hCtrl, %LB_GETCOUNT, 0, 0)
                IF N&>=0 AND N&<MX& THEN
                    RV&=SendMessage(hCtrl, %LB_GETSEL, N&,0)
                END IF
            CASE "SYSLISTVIEW32"
                IF N&>=0 THEN RV&=ZGetSelectLV(hCtrl, N&, 1)
            CASE "SYSTREEVIEW32"
                IF N&<>0 THEN RV&=ZGetSelectTV(hCtrl&, N&, 1)
            CASE ELSE
        END SELECT
    END IF
    FUNCTION=RV&
END FUNCTION

' *************************** PBV Control Creation Commands ***************************

FUNCTION zGetNewControlIndex() AS LONG
    LOCAL I&
    ARRAY SCAN AppControlTNum(1), =0 , TO I&    ' new control
    IF I&<>0 THEN
        IF I&>App_EZ_TopCtrl& THEN App_EZ_TopCtrl&=I&
    END IF
    FUNCTION=I&
END FUNCTION

SUB zSubClassEx(BYVAL hCtrl&, BYVAL SCFlag&, BYVAL I&)
    LOCAL FormFlag&, hParent&, AFNum&, AFI&, IDNum&, CFlag&
    IF hCtrl&=0 THEN EXIT SUB
    CFlag&=0
    IF IsWindow(hCtrl&) THEN
        IF I&=0 THEN
            hParent&=ZGetParentForm(hCtrl&)
            IF hParent&=hCtrl& THEN FormFlag&=1 ELSE FormFlag&=0
            AFNum&=ZFormNumH(hParent&)
            IF AFNum&<>0 THEN   ' must be on an EZGUI form or is an EZGUI form
                IF FormFlag& THEN
                    ARRAY SCAN AppControlTNum(1),  = AFNum& , TO AFI&
                ELSE
                    ARRAY SCAN AppControlHandle(1), =hCtrl& , TO AFI&
                END IF
                IF FormFlag& THEN
                    IF AFI&<>0 THEN
                        IF AppControlOrigAddress(AFI&)=0 THEN  I&=AFI&  ' not subclassed yet
                    END IF
                ELSE
                    IF AFI&<>0 THEN
                        IF AppControlOrigAddress(AFI&)=0 THEN  I&=AFI&  ' not subclassed yet
                    ELSE
                        I&=zGetNewControlIndex
                        IF I&<>0 THEN
                            IDNum&=GetWindowLong(hCtrl&, %GWL_ID)
                            ZSetControlArray I&,(IDNum&*1000)+AFNum&,App_EZ_AFGColor&,App_EZ_ABGColor&,App_EZ_AFont&,hCtrl&,0,ZFormNameH(hParent&),0, App_EZ_CurLayer&,0
                        END IF
                    END IF
                END IF
            END IF
        END IF
        IF I&<>0 THEN
            CFlag&=0
            SELECT CASE AS LONG SCFlag&
                CASE 1,3    ' subclass children in this mode
                    CFlag&=1
                CASE -1,-3  ' do not subclass children for this visual design mode
                    SCFlag&=ABS(SCFlag&)
                CASE 2,4
                CASE ELSE
                    SCFlag&=0
            END SELECT
            AppControlHandle(I&)=hCtrl&
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom1&,0), I&
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom2&,0), SCFlag&  ' store subclass mode
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom5&,0), 0  ' store timer mode
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom3&,0), App_CustomControlFlag&        ' this is for custom control flag
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom7&,0), 0  ' store hot tracking info
            SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtomT1&,0),0   ' no touch by default
            AppControlOrigAddress(I&)=SetWindowLong(hCtrl&, %GWL_WNDPROC, BYVAL CODEPTR(ZSubClassProc))
            AppControlHandle(I&)=hCtrl&
            zInitUserData hCtrl&
            IF CFlag&=1 THEN ZSubClassChildren hCtrl&
        END IF
    END IF
END SUB

SUB EZ_SubClassEx(BYVAL hCtrl&, BYVAL SCFlag&) EXPORT10
    zSubClassEx hCtrl&, SCFlag&, 0
END SUB

SUB zGetCRect(BYVAL hDlg&, BYVAL hCtrl&, R AS RECT)
    LOCAL R2 AS RECT
    GetWindowRect hCtrl&, R
    IF ZGetClass(hCtrl&)="COMBOBOX" THEN
        IF IsNotSimpleCombobox(hCtrl&) THEN
            SendMessage hCtrl&, %CB_GETDROPPEDCONTROLRECT, 0, VARPTR(R2)
            R=R2
        END IF
    END IF
    ScreenToClient hDlg&, BYVAL VARPTR(R)
    ScreenToClient hDlg&, BYVAL VARPTR(R)+8
END SUB

TYPE EZResize
    hWnd AS LONG
    X AS LONG
    Y AS LONG
    W AS LONG
    H AS LONG
    S AS LONG
END TYPE

'%EZ_AutoSizeStart
'%EZ_AutoSizeEnd
'%EZ_ScaleMe

SUB EZ_SubClassSet(BYVAL FormName$, BYVAL IDNum&, BYVAL sMode&) EXPORT10
     LOCAL hCtrl&
     IF IDNum&<>0 THEN
          hCtrl&=ezHandle(FormName$,IDNum&,1)
          IF hCtrl&<>0 THEN
               IF sMode&>=0 AND sMode&<=4 THEN
                    SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom2&,0), sMode&
               END IF
          END IF
     END IF
END SUB

FUNCTION EZ_SubClassGet(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
     LOCAL hCtrl&, RV&
     RV&=0
     IF IDNum&<>0 THEN
          hCtrl&=ezHandle(FormName$,IDNum&,1)
          IF hCtrl&<>0 THEN
               RV&=GetProp(hCtrl&, BYVAL MAKLNG(AppControlGAtom2&,0))
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION


GLOBAL App_AutoSizeCallback AS DWORD

DECLARE SUB AutoSizeFuncX(BYVAL hDlg&, BYVAL CID&, BYVAL hCtrl&, BYVAL OX&, BYVAL OY&, BYVAL OW&, BYVAL OH&, NX&, NY&, NW&, NH&)

SUB EZ_GetScaleMe(BYVAL CVal&, OX&, OY&, OW&, OH&, NX&, NY&, NW&, NH&) EXPORT10
     LOCAL D AS LONG PTR
     IF IsBadReadPtr(CVal&, 32)=0 THEN
          D=CVal&
          OX&=@D[0]
          OY&=@D[1]
          OW&=@D[2]
          OH&=@D[3]
          NX&=@D[4]
          NY&=@D[5]
          NW&=@D[6]
          NH&=@D[7]
     ELSE
          OX&=0
          OY&=0
          OW&=0
          OH&=0
          NX&=0
          NY&=0
          NW&=0
          NH&=0
     END IF
END SUB

SUB EZ_SetScaleMe(BYVAL CVal&, BYVAL NX&, BYVAL NY&, BYVAL NW&, BYVAL NH&) EXPORT10
     LOCAL D AS LONG PTR
     IF IsBadReadPtr(CVal&, 32)=0 THEN
          D=CVal&
          @D[4]=NX&
          @D[5]=NY&
          @D[6]=NW&
          @D[7]=NH&
     END IF
END SUB

SUB EZ_HookScaleMeProc(BYVAL SMProc AS DWORD) EXPORT10
     App_AutoSizeCallback=SMProc
END SUB

FUNCTION ezResizeForm(BYVAL N&, BYVAL hDlg&) AS LONG
    LOCAL ER AS EZResize PTR, FM AS EZResize, CT AS EZResize, LP&, I&, RR AS RECT
    LOCAL NX&, NY&, NW&, NH&, FW!, FH!, CFW!, CFH!, R AS RECT, ST1&, LKTop&, LKBottom&, LKLeft&, LKRight&, BX&, BY&
    LOCAL LKTopBottom&, LKLeftRight&, EFlag&, CBFlag&, VFlag&, OKFLag&
    LOCAL OX&, OY&, OW&, OH&, FormName$, CID&, CMsg&, CVal&, Cancel&, RGFlag&, hRgn1&, hRgn2&
    LOCAL SZData() AS LONG, SMode&, hDefW&, TW&,TH&
    DIM SZData(1 TO 8) AS LONG
    hRgn1&=0
    hRgn2&=0

    IF N&<LBOUND(AppFormResize$) OR N&>UBOUND(AppFormResize$) THEN EXIT FUNCTION
    IF AppFormResize$(N&)<>"" THEN
        OKFlag&=ProcessDMessage(hDlg&, %EZ_NoAutoSize, 0)
        IF OKFlag&<>0 THEN
            LP&=LEN(AppFormResize$(N&))/SIZEOF(FM)
            IF LP&>=2 THEN
                FormName$=ZFormNameH(hDlg&)
                ProcessDMessage hDlg&, %EZ_AutoSizeStart, 0
                SELECT CASE OKFlag&
                     CASE 2
                          SMode&=1
                     CASE ELSE
                          SMode&=0
                END SELECT
                LP&=LP&-1
                ER=STRPTR(AppFormResize$(N&))
                FM=@ER
                FW!=FM.W
                FH!=FM.H
                IF SMode&=1 THEN
                    hDefW&=BeginDeferWindowPos(LP&)
                    IF hDefW&=0 THEN SMode&=0
                ELSE
                    hDefW&=0
                END IF
                GetClientRect hDlg&, R
                CFW!=R.nRight-R.nLeft
                CFH!=R.nBottom-R.nTop
                IF FW!>0 AND FH!>0 AND CFW!>0 AND CFH!>0 THEN
                    FOR I&=1 TO LP&
                        INCR ER
                        CT=@ER
                        NX&=(CT.X/FW!)*CFW!
                        NY&=(CT.Y/FH!)*CFH!
                        NW&=(CT.W/FW!)*CFW!
                        NH&=(CT.H/FH!)*CFH!
                        BX&=FM.W-(CT.X+CT.W)
                        BY&=FM.H-(CT.Y+CT.H)
                        zGetCRect hDlg&, CT.hWnd, R     ' get current coordinates
                        RR=R  ' save control coordinates for generating a region
                        ST1&=CT.S AND 3
                        ' ------------------
                        EFlag&=CT.S AND 1024   ' event flag
                        CBFlag&=CT.S AND 2048  ' callback flag
                        RGFlag&=-1
                        IF (CT.S AND 4096&)=4096& THEN RGFlag&=0
                        IF (CT.S AND 8192&)=8192& THEN RGFlag&=1
                        IF (CT.S AND 16384&)=16384& THEN RGFlag&=-2
                        IF (CT.S AND 32768&)=32768& THEN RGFlag&=2
                        ' ------------------
                        LKTop&      =CT.S AND 4
                        IF LKTop&=0 THEN
                            LKTop&  =CT.S AND 64
                            ' flag for current
                            CT.Y=R.nTop
                        END IF
                        LKBottom&   =CT.S AND 8
                        IF LKBottom&=0 THEN
                            LKBottom&=CT.S AND 128
                            ' flag for current
                            BY&=CFH!-R.nBottom
                        END IF
                        IF LKTop&<>0 AND LKBottom&<>0 THEN LKTopBottom&=1 ELSE LKTopBottom&=0
                        LKLeft&     =CT.S AND 16
                        IF LKLeft&=0 THEN
                            LKLeft& =CT.S AND 256
                            ' flag for current
                            CT.X=R.nLeft
                        END IF
                        LKRight&    =CT.S AND 32
                        IF LKRight&=0 THEN
                            LKRight&=CT.S AND 512
                            ' flag for current
                            BX&=CFW!-R.nRight
                        END IF
                        IF LKLeft&<>0 AND LKRight&<>0 THEN LKLeftRight&=1 ELSE LKLeftRight&=0
                        SELECT CASE AS LONG ST1&    ' test resize state
                            CASE 0     ' No size but allow locking
                                NX&=CT.X
                                NW&=CT.W
                                NY&=CT.Y
                                NH&=CT.H
                            CASE 3     ' autoresize entire control to scale
                            CASE 1    ' autosize vertically only
                                NX&=CT.X
                                NW&=CT.W
                            CASE 2    ' autosize horizontally only
                                NY&=CT.Y
                                NH&=CT.H
                            CASE ELSE   ' ignore
                       END SELECT
                       GOSUB DoLockStateY
                       GOSUB DoLockStateX
                        ' ------------------
                        OX&=CT.X
                        OY&=CT.Y
                        OW&=CT.W
                        OH&=CT.H
                        ' ------------------
                        ' ------------------
                        ' Allow user to make changes before resizing
                        ' ------------------
                       IF EFlag& THEN
                              CID&=GetDlgCtrlID(CT.hWnd)
                              CMsg&=%EZ_ScaleMe
                              Cancel&=0
                              SZData(1)=OX&
                              SZData(2)=OY&
                              SZData(3)=OW&
                              SZData(4)=OH&
                              SZData(5)=NX&
                              SZData(6)=NY&
                              SZData(7)=NW&
                              SZData(8)=NH&
                              CVal&=VARPTR(SZData(1))
                              CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
                              NX&=SZData(5)
                              NY&=SZData(6)
                              NW&=SZData(7)
                              NH&=SZData(8)
                       END IF
                       IF CBFlag& THEN
                              IF App_AutoSizeCallback<>0 THEN
                                   CID&=GetDlgCtrlID(CT.hWnd)
                                   CALL DWORD App_AutoSizeCallback USING AutoSizeFuncX(hDlg&, CID&, CT.hWnd, OX&, OY&, OW&, OH&, NX&, NY&, NW&, NH&)
                              END IF
                       END IF
                        ' ------------------
                       GOSUB DoCtrlResize
                    NEXT I&
                    IF SMode&=1 THEN
                         IF hDefW&<>0 THEN
                              EndDeferWindowPos hDefW&
                         END IF
                    END IF
                END IF
                IF ProcessDMessage(hDlg&, %EZ_AutoSizeEnd, 0) THEN

                END IF

            END IF

        END IF
    END IF
    FUNCTION=hRgn1&
    EXIT FUNCTION

RedoRegion:
     IF RGFlag&<>-1 THEN
          SELECT CASE RGFlag&
               CASE 1,2,-2
                    ezSetRegion CT.hWnd, RGFlag&, 0, 0 ,TW&,TH&
               CASE 0
                    ezSetRegion CT.hWnd, RGFlag&, RGB(255,0,255), 0,TW&,TH&
               CASE ELSE
          END SELECT
     END IF
RETURN

DoCtrlResize:
    IF IsWindow(CT.hWnd) THEN
        VFlag&=0
        IF TestVisible(CT.hWnd) THEN VFlag&=1
        IF VFlag& THEN
             hRgn2&=CreateRectRgn(RR.nLeft,RR.nTop,RR.nRight,RR.nBottom)
             IF hRgn1&=0 THEN
                  hRgn1&=hRgn2&
             ELSE
                  CombineRgn hRgn1&, hRgn1&,hRgn2&, %RGN_OR
                  DeleteObject hRgn2&
             END IF
             SendMessage CT.hWnd, %WM_SETREDRAW, 0, 0
        END IF
        IF SMode&=1 THEN
            hDefW&=DeferWindowPos(hDefW&,CT.hWnd,0,NX&, NY&, NW&, NH&, %SWP_DRAWFRAME OR %SWP_NOACTIVATE OR %SWP_NOCOPYBITS OR %SWP_NOOWNERZORDER OR %SWP_NOZORDER)
            IF hDefW&<>0 THEN
                 TW&=NW&
                 TH&=NH&
                 GOSUB RedoRegion
            ELSE
                 SMode&=0
            END IF
        END IF
        IF SMode&=0 THEN
             MoveWindow CT.hWnd, NX&, NY&, NW&, NH&, 1
             TW&=0
             TH&=0
             GOSUB RedoRegion
        END IF
        IF VFlag& THEN
              SendMessage CT.hWnd, %WM_SETREDRAW, 1, 0
        END IF
        IF VFlag& THEN
             hRgn2&=CreateRectRgn(NX&,NY&,NX&+NW&,NY&+NH&)
             IF hRgn1&=0 THEN
                  hRgn1&=hRgn2&
             ELSE
                  CombineRgn hRgn1&, hRgn1&,hRgn2&, %RGN_OR
                  DeleteObject hRgn2&
             END IF
        END IF

    END IF
RETURN

DoLockStateY:
    IF LKTopBottom& THEN
        NY&=CT.Y&
        NH&=CFH!-(BY&+CT.Y)
    ELSE
        IF LKTop& THEN
            NY&=CT.Y
        ELSE
            IF LKBottom& THEN
                NY&=CFH!-(BY&+NH&)
            END IF
        END IF
    END IF
RETURN

DoLockStateX:
    IF LKLeftRight& THEN
        NX&=CT.X
        NW&=CFW!-(BX&+CT.X)
    ELSE
        IF LKLeft& THEN
            NX&=CT.X
        ELSE
            IF LKRight& THEN
                NX&=CFW!-(BX&+NW&)
            END IF
        END IF
    END IF
RETURN

END FUNCTION


'GLOBAL App_ControlResizeState&    ' put in fron of wndproc

' constants no longer needed!

'%EZ_SizeVert    =   1
'%EZ_SizeHorz    =   2
'%EZ_SizeBoth    =   3
'%EZ_LockTop     =   4
'%EZ_LockBottom  =   8
'%EZ_LockLeft    =   16
'%EZ_LockRight   =   32
'%EZ_LockCurrentTop     =   64
'%EZ_LockCurrentBottom  =   128
'%EZ_LockCurrentLeft    =   256
'%EZ_LockCurrentRight   =   512

FUNCTION zMakeResizeMode(P$) AS LONG
    LOCAL RMode&
    RMode&=0
    P$=UCASE$(P$)
    IF INSTR(P$, "V") THEN RMode&=RMode& OR 1&
    IF INSTR(P$, "H") THEN RMode&=RMode& OR 2&
    IF INSTR(P$, "FT") THEN RMode&=RMode& OR 4&
    IF INSTR(P$, "FB") THEN RMode&=RMode& OR 8&
    IF INSTR(P$, "FL") THEN RMode&=RMode& OR 16&
    IF INSTR(P$, "FR") THEN RMode&=RMode& OR 32&
    IF INSTR(P$, "CT") THEN RMode&=RMode& OR 64&
    IF INSTR(P$, "CB") THEN RMode&=RMode& OR 128&
    IF INSTR(P$, "CL") THEN RMode&=RMode& OR 256&
    IF INSTR(P$, "CR") THEN RMode&=RMode& OR 512&
    IF INSTR(P$, "E") THEN RMode&=RMode& OR 1024&  ' new !  Generate %EZ_ScaleMe event
    IF INSTR(P$, "?") THEN RMode&=RMode& OR 2048&  ' new !  Use Callback

    IF INSTR(P$,"0") THEN  RMode&=RMode& OR 4096&
    IF INSTR(P$,"1") THEN  RMode&=RMode& OR 8192&
    IF INSTR(P$,"-2") THEN
         RMode&=RMode& OR 16384&
    ELSE
         IF INSTR(P$,"2") THEN RMode&=RMode& OR 32768&
    END IF

    FUNCTION=RMode&
END FUNCTION


SUB EZ_UseAutoSize(BYVAL P$) EXPORT10
    App_ControlResizeState&=zMakeResizeMode(P$)
END SUB

FUNCTION zAddRZ(ER AS EZResize) AS STRING
    LOCAL T$, P AS EZResize PTR
    T$=STRING$(SIZEOF(ER), CHR$(0))
    P=STRPTR(T$)
    @P=ER
    FUNCTION=T$
END FUNCTION

SUB zAddResizeInfo(BYVAL N&, BYVAL hCtrl&, BYVAL RFlag&)
    LOCAL hDlg&, R AS RECT, ER AS EZResize, T$, R2 AS RECT
    IF N&>=LBOUND(AppFormResize$) AND N&<=UBOUND(AppFormResize$) THEN
        hDlg&=AppForms(N&).FhWnd
        IF hDlg&<>0 THEN
            IF IsWindow(hDlg&)<>0 AND IsWindow(hCtrl&)<>0 THEN
                T$=""
                IF AppFormResize$(N&)="" THEN
                    ' add forms original size first
                    GetClientRect hDlg&, R
                    ER.hWnd=hDlg&
                    ER.X=0
                    ER.Y=0
                    ER.W=R.nRight-R.nLeft
                    ER.H=R.nBottom-R.nTop
                    ER.S=0  ' no state for dialog, so use for Mode value for resizing
                    T$=zAddRZ(ER)
                END IF
                zGetCRect hDlg&, hCtrl&, R
                ER.hWnd=hCtrl&
                ER.X=R.nLeft
                ER.Y=R.nTop
                ER.W=R.nRight-R.nLeft
                ER.H=R.nBottom-R.nTop
                ER.S=RFlag&
                T$=T$+zAddRZ(ER)
                AppFormResize$(N&)=AppFormResize$(N&)+T$
            END IF
        END IF
    END IF
END SUB

SUB zDrawMultiDragRect(BYVAL hDC&, BYVAL DifX&, BYVAL DifY&)
    LOCAL ER AS EZResize PTR, CT AS EZResize, LP&, I&
    LOCAL X1&, Y1&, X2&, Y2&
    LP&=LEN(App_DragMultipleRect$)/SIZEOF(CT)
    ER=STRPTR(App_DragMultipleRect$)
    FOR I&=1 TO LP&
        CT=@ER
        X1&=CT.X+DifX&
        Y1&=CT.Y+DifY&
        X2&=CT.X+CT.W+DifX&
        Y2&=CT.Y+CT.H+DifY&
        Rectangle hDC&, X1&,Y1&,X2&,Y2&
        INCR ER
    NEXT I&
END SUB

SUB zAddDragInfo(BYVAL hDlg&, BYVAL hCtrl&)
    LOCAL R AS RECT, ER AS EZResize
    IF IsWindow(hDlg&)<>0 AND IsWindow(hCtrl&)<>0 THEN
         zGetCRect hDlg&, hCtrl&, R
         ER.hWnd=0
         ER.X=R.nLeft
         ER.Y=R.nTop
         ER.W=R.nRight-R.nLeft
         ER.H=R.nBottom-R.nTop
         ER.S=0
         App_DragMultipleRect$=App_DragMultipleRect$+zAddRZ(ER)
    END IF
END SUB

SUB EZ_AddDragRect(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    LOCAL hDlg&, hCtrl&
    IF FormName$="" THEN
        App_DragMultipleRect$=""
    END IF
    hDlg&=ezhandle(FormName$,0,1)
    IF hDlg&<>0 THEN
        IF IDNum&<>0 THEN
            hCtrl&=ezHandle(FormName$, IDNum&,1)
            IF hCtrl&<>0 THEN
                zAddDragInfo hDlg&, hCtrl&
            END IF
        END IF
    END IF
END SUB

SUB EZ_AddAutoSize(BYVAL FormName$, BYVAL IDNum&, BYVAL P$) EXPORT10
    LOCAL hCtrl&, N&
    IF IDNum&<>0 THEN
        hCtrl&=ezHandle(FormName$, IDNum&,1)
        IF hCtrl&<>0 THEN
            zAddResizeInfo zFormNum(FormName$), hCtrl& , zMakeResizeMode(P$)
        END IF
    END IF
END SUB

SUB EZ_AddAutoSizeW(BYVAL FormName$, BYVAL hWnd&, BYVAL P$) EXPORT10
    LOCAL N&, hForm&
    hForm&=ezHandle(FormName$,0,1)
    IF hForm&<>0 THEN
        IF IsWindow(hWnd&) THEN
            zAddResizeInfo zFormNumH(hForm&), hWnd&, zMakeResizeMode(P$)
        END IF
    END IF
END SUB

'TYPE EZResize
'    hWnd AS LONG
'    X AS LONG
'    Y AS LONG
'    W AS LONG
'    H AS LONG
'    S AS LONG
'END TYPE

SUB EZ_ResetAutoSize(BYVAL FormName$, BYVAL FW!, BYVAL FH!) EXPORT10
     LOCAL hRgn1&, hDlg AS LONG, N&, P AS EZResize PTR
     hDlg&=ezHandle(FormName$,0,1)
     IF hDlg<>0 THEN
          N&=ZFormNumH(hDlg)
          IF N&<>0 THEN
               IF AppFormResize$(N&)<>"" THEN
                    P=STRPTR(AppFormResize$(N&))
                    IF @P.hWnd=hDlg THEN
                         @P.W=EZ_X(FW!)
                         @P.H=EZ_Y(FH!)
                         hRgn1&=ezResizeForm(N&, hDlg)
                         IF hRgn1&<>0 THEN
                              RedrawWindow hDlg&,BYVAL %NULL, hRgn1&,%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
                              DeleteObject hRgn1&
                         END IF
                    END IF
               END IF
          END IF
     END IF
END SUB

GLOBAL App_LoadedForm&, App_LoadedControl&, App_LoadedFormNum&
GLOBAL App_ResizeAfterFlag&
DECLARE SUB CheckTheme(BYVAL hWnd&)

'TYPE MEASUREITEMSTRUCT
'  CtlType AS LONG
'  CtlID AS LONG
'  itemID AS LONG
'  itemWidth AS LONG
'  itemHeight AS LONG
'  itemData AS LONG
'END TYPE

SUB ezGetCColors(FormName$, BYVAL IDNum&, FG&, BG&)
     LOCAL hCtrl&, I&, hWnd&, AFNum&, CTNum&, CtrlNum&, CN$
     hCtrl&=ezHandle(FormName$, IDNum&, 1)
     IF hCtrl&<>0 THEN
          hWnd&=ezHandle(FormName$,0, 1)
          IF IsWindow(hCtrl&) THEN
               CN$=zGetClass(hCtrl&)
               IF LEFT$(CN$,10)="EZGUI_TYPE" THEN      ' is a form
                    AFNum&=ZFormNumH(hWnd&)
                    CTNum&=AFNum&
                    ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =CTNum& , TO I&
               ELSE
                    I&=ZGetControlIndex(hCtrl&)
                    IF I&<=0 THEN
                         CtrlNum&=GetWindowLong(hCtrl&, %GWL_ID)
                         AFNum&=ZFormNumH(hWnd&)
                         CTNum&=(CtrlNum&*1000)+AFNum&
                         ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =CTNum& , TO I&
                    END IF
               END IF
          END IF
          IF I&>0 THEN
               FG&=AppControlFG(I&)
               BG&=AppControlBG(I&)
          ELSE
               FG&=-1
               BG&=-1
          END IF
     ELSE
          FG&=-1
          BG&=-1
     END IF
END SUB

SUB EZ_GetCColors(BYVAL FormName$, BYVAL IDNum&, FG&, BG&) EXPORT10
     IF IDNum&<>0 THEN
          ezGetCColors FormName$, IDNum&, FG&, BG&
     ELSE
          FG&=-1
          BG&=-1
     END IF
END SUB

SUB EZ_GetFColors(BYVAL FormName$, FG&, BG&) EXPORT10
     ezGetCColors FormName$, 0, FG&, BG&
END SUB


FUNCTION EZ_GetCFont(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
     LOCAL hCtrl&, hFont&, FNum&, I&
     FNum&=-1
     hCtrl&=ezHandle(FormName$, IDNum&,1)
     IF hCtrl&<>0 THEN
          IF IsWindow(hCtrl&) THEN
               hFont&=SendMessage(hCtrl&, %WM_GETFONT,0,0)
               IF hFont&<>0 THEN
                    ARRAY SCAN AppFont(0), = hFont& , TO I&
                    IF I&<>0 THEN FNum&=I&-1
               END IF
          END IF
     END IF
     FUNCTION=FNum&
END FUNCTION

SUB APISetFont(BYVAL hWnd&, BYVAL wParam&, BYVAL lParam&)
     LOCAL C$, hParent&, MI AS MEASUREITEMSTRUCT, RV&
     IF IsWindow(hWnd&) THEN
          SendMessage hWnd&, %WM_SETFONT, wParam&, lParam&
          MI.CtlID=GetWindowLong(hWnd&, %GWL_ID)
          MI.itemID=0
          SELECT CASE AS CONST$ ZGetClass(hWnd&)
              CASE "LISTBOX"
                   MI.CtlType=%ODT_LISTBOX
                   IF IsStyleSet(hWnd&,%LBS_OWNERDRAWFIXED) THEN
                         GOSUB CalcNewSize
                         SendMessage hWnd&, %LB_SETITEMHEIGHT, 0, MI.itemHeight
                   END IF
                   IF IsStyleSet(hWnd&,%LBS_OWNERDRAWVARIABLE) THEN
'                         GOSUB CalcNewSize

                   END IF
              CASE "COMBOBOX"
                   MI.CtlType=%ODT_COMBOBOX
                   MI.itemID=-1
                   IF IsStyleSet(hWnd&,%CBS_OWNERDRAWFIXED) THEN
                         GOSUB CalcNewSize
                         SendMessage hWnd&, %CB_SETITEMHEIGHT, -1, MI.itemHeight
                         SendMessage hWnd&, %CB_SETITEMHEIGHT, 0, MI.itemHeight
                   END IF
                   IF IsStyleSet(hWnd&,%CBS_OWNERDRAWVARIABLE) THEN
                         GOSUB CalcNewSize
                         SendMessage hWnd&, %CB_SETITEMHEIGHT, -1, MI.itemHeight
'                         SendMessage hWnd&, %CB_SETITEMHEIGHT, 0, MI.itemHeight
                   END IF
              CASE "SYSLISTVIEW32"
                   MI.CtlType=%ODT_LISTVIEW
                   IF IsStyleSet(hWnd&,%LVS_OWNERDRAWFIXED) THEN
'                         GOSUB CalcNewSize

                   END IF

              CASE "SYSTABCONTROL32"
                   MI.CtlType=%ODT_TAB
                   IF IsStyleSet(hWnd&,%TCS_OWNERDRAWFIXED) THEN
'                         GOSUB CalcNewSize
                   END IF

'             case "STATIC"
'                   IF IsStyleSet(hWnd&, ) THEN
'                   END IF

          END SELECT
     END IF
     EXIT SUB

CalcNewSize:
     hParent&=ZGetParentForm(hWnd&)
     RV&=SendMessage(hParent&, %WM_MEASUREITEM, MI.CtlID, VARPTR(MI))
RETURN

END SUB


SUB PBVControlEX (BYVAL FormName$, BYVAL IDNum&, BYVAL CName$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CText$,  BYVAL CStyle&, BYVAL CEXStyle&, BYVAL SCFlag&, BYVAL EMask$, hCtrl AS LONG)
LOCAL szClassName AS ASCIIZ * 80
LOCAL hInstance   AS LONG
LOCAL AFNum&
LOCAL hOwner&
LOCAL FStyle AS DWORD, FStyleEX AS DWORD
LOCAL I&, N& , hOrigForm&, hTemp&

AFNum&=ZFormNum(FormName$)
IF AFNum&=0 THEN
   EXIT SUB
END IF
hOwner&=AppForms(AFNum&).FhWnd
hOrigForm&=hOwner&
IF App_UseAlternateParent&=0 THEN
    IF AppForms(AFNum&).FhWnd2<>0 THEN
        IF ZGetClass(AppForms(AFNum&).FhWnd2)<>$MDIClientClassName THEN
            hOwner&=AppForms(AFNum&).FhWnd2
        END IF
    END IF
ELSE
    SELECT CASE AS LONG App_UseAlternateParent&
        CASE 1
            IF AppForms(AFNum&).FhWnd3<>0 THEN
                hOwner&=AppForms(AFNum&).FhWnd3
            END IF
        CASE 2
            IF AppForms(AFNum&).FhWnd4<>0 THEN
                hOwner&=AppForms(AFNum&).FhWnd4
            END IF
        CASE 3
            IF AppForms(AFNum&).FhWnd5<>0 THEN
                hOwner&=AppForms(AFNum&).FhWnd5
            END IF
        CASE 4
            IF AppForms(AFNum&).FhWnd6<>0 THEN
                hOwner&=AppForms(AFNum&).FhWnd6
            END IF
        CASE ELSE
            IF AppForms(AFNum&).FhWnd2<>0 THEN
                hOwner&=AppForms(AFNum&).FhWnd2
            END IF
    END SELECT
END IF
FStyle=CStyle&
FStyleEX=CEXStyle&

' App_UseAlternateClass$

hInstance = AppInstance&
IF LEN(App_CustomClassReplace$)=0 THEN
    IF LEN(App_UseAlternateClass$)=0 THEN
        szClassName=CName$+CHR$(0)
    ELSE
        szClassName=App_UseAlternateClass$+CHR$(0)
    END IF
ELSE
    szClassName=App_CustomClassReplace$+CHR$(0)
    App_CustomClassReplace$=""
END IF
IF LEN(App_UseAlternateClass$)<>0 THEN App_UseAlternateClass$=""

CText$=CText$+CHR$(0)

I&=zGetNewControlIndex
IF I&<>0 THEN ZSetControlArray I&,(IDNum&*1000)+zFormNum(FormName$),App_EZ_AFGColor&,App_EZ_ABGColor&,App_EZ_AFont&,0,0,FormName$,0, App_EZ_CurLayer&,0

hCtrl=CreateWindowEX(FStyleEX, _    ' Extended Window Style
                  szClassName, _        ' window class name
         BYVAL STRPTR(CText$), _     ' window caption -previously use szTemp
                       FStyle, _        ' window style
                           X&, _        ' initial x position
                           Y&, _    ' initial y position
                           W&, _    ' initial x size
                           H&, _        ' initial y size
                      hOwner&, _        ' parent window handle
                       IDNum&, _        ' Child Window ID # for controls
                    hInstance, _        ' program instance handle
                  BYVAL %NULL)          ' creation parameters (only used for Custom controls Builder engine

App_EZ_LastCtrl&=hCtrl  ' required for all control creation commands

IF hCtrl<>0 THEN CheckTheme hCtrl   ' turns off theme if EZ_UseNoTheme is called

IF I&<>0 THEN
      zSubClassEx hCtrl, SCFlag&, I&
      IF App_UseHotTrack& THEN
           zHotTrackControl hCtrl&, "R"
           App_UseHotTrack&=0
      END IF
END IF

IF App_CustomControlFlag&<>0 THEN
    App_CustomControlFlag&=0
END IF


IF hCtrl<>0 THEN

    SELECT CASE AS CONST$ CName$
        CASE "SysPager"
            hTemp&=CreateWindowEX(0,"STATIC","",%WS_CHILD,0,0,GetSystemMetrics(%SM_CXSCREEN),GetSystemMetrics(%SM_CYSCREEN),hCtrl,-1,hInstance,BYVAL %NULL)
            SetWindowLong hCtrl, %GWL_USERDATA, hTemp&
            SendMessage hCtrl, %PGM_SETCHILD,0, hTemp&
        CASE ELSE
    END SELECT
    IF App_EZ_AFont&>=0 AND App_EZ_AFont&<=UBOUND(AppFont) THEN
        N&=App_EZ_AFont&
        IF AppFont(N&)<>0 THEN
'            SendMessage hCtrl, %WM_SETFONT, AppFont(N&), %TRUE
            APISetFont hCtrl, AppFont(N&), %TRUE
        END IF
    END IF

    IF App_ResizeAfterFlag& THEN
        ' must do this after font call !
        MoveWindow hCtrl, X&, Y&, W&, H&, 1
        App_ResizeAfterFlag&=0
    END IF

    IF CName$=App_MaskEditClass$ AND EMask$<>"" THEN
        DIM EText AS ASCIIZ*256
        EText=EMask$
        SendMessage hCtrl, %EZME_SETMASK, VARPTR(EText),0
        SendMessage hCtrl, %EZME_SETTEXTMODE, App_EZ_MaskMode&, 0
    END IF


    SELECT CASE AS CONST$ CName$
        CASE "RICHEDIT","RichEdit20A","RichEdit50W"
            ZSetRichTextColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&
        CASE "SysListView32"
            ZSetListViewColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&
        CASE "SysTreeView32"
            ZSetTreeViewColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&
        CASE "msctls_progress32"
            ZSetProgressColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&
        CASE "SysMonthCal32"
            ZSetCalendarColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&,0
        CASE "SysDateTimePick32"
            ZSetCalendarColor hCtrl, App_EZ_AFGColor&, App_EZ_ABGColor&,1
        CASE ELSE
    END SELECT
    App_LoadedForm&=hOrigForm&
    App_LoadedControl&=hCtrl
    App_LoadedFormNum&=AFNum&
ELSE
    App_LoadedForm&=0
    App_LoadedControl&=0
    App_LoadedFormNum&=0
END IF

END SUB

SUB ZCallLoaded()
    LOCAL RV&, AFNum&, hCtrl&, RZFlag&
    RZFlag&=App_ControlResizeState&
    App_ControlResizeState&=0
    AFNum&=App_LoadedFormNum&
    hCtrl&=App_LoadedControl&
    IF App_LoadedForm&<>0 THEN
        IF App_LoadedControl&<>0 THEN
            RV&=ProcessEZCommands(App_LoadedForm&, %EZ_Loaded, App_LoadedControl&, App_LoadedControl&)
        END IF
    END IF

    IF RZFlag&<>0 THEN
        zAddResizeInfo AFNum&, hCtrl&, RZFlag&
    END IF
END SUB

'------------------------------------------------------------------------------
'        AppColor(ColNum&)

SUB ZSetRichTextColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
LOCAL CBG& ', X&
CBG&=ZFGColorNum(BG&)
IF CBG&=-1 THEN
    SendMessage hCtrl, %EM_SETBKGNDCOLOR, 1, 0
ELSE
    SendMessage hCtrl, %EM_SETBKGNDCOLOR, 0, AppColor(CBG&)
END IF
END SUB

'------------------------------------------------------------------------------

SUB ZSetListViewColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
LOCAL CFG&, CBG&
CFG&=ZFGColorNum(FG&)
CBG&=ZFGColorNum(BG&)
IF CFG&=-1 THEN CFG&=GetSysColor(%COLOR_WINDOWTEXT) ELSE CFG&=AppColor(CFG&)
IF CBG&=-1 THEN CBG&=GetSysColor(%COLOR_WINDOW) ELSE CBG&=AppColor(CBG&)
SendMessage hCtrl, %LVM_SETTEXTCOLOR, 0, CFG&
SendMessage hCtrl, %LVM_SETBKCOLOR, 0, CBG&
SendMessage hCtrl, %LVM_SETTEXTBKCOLOR, 0, CBG&
END SUB

SUB ZSetPagerColor(BYVAL hCtrl&, BYVAL BG&)
    LOCAL CBG&
    CBG&=ZFGColorNum(BG&)
    IF CBG&=-1 THEN CBG&=GetSysColor(%COLOR_WINDOW) ELSE CBG&=AppColor(CBG&)
    SendMessage hCtrl&, %PGM_SETBKCOLOR,0,CBG&
END SUB

SUB ZSetTreeViewColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
LOCAL CFG&, CBG&
CFG&=ZFGColorNum(FG&)
CBG&=ZFGColorNum(BG&)
IF CFG&=-1 THEN CFG&=GetSysColor(%COLOR_WINDOWTEXT) ELSE CFG&=AppColor(CFG&)
IF CBG&=-1 THEN CBG&=GetSysColor(%COLOR_WINDOW) ELSE CBG&=AppColor(CBG&)
SendMessage hCtrl, %TVM_SETTEXTCOLOR, 0, CFG&
SendMessage hCtrl, %TVM_SETLINECOLOR, 0, CFG&
SendMessage hCtrl, %TVM_SETINSERTMARKCOLOR, 0, CFG&
SendMessage hCtrl, %TVM_SETBKCOLOR, 0, CBG&
' SendMessage hCtrl, %LVM_SETTEXTBKCOLOR, 0, CBG&
END SUB

'------------------------------------------------------------------------------
%CLR_DEFAULT             = &HFF000000&

SUB ZSetProgressColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&)
LOCAL CFG&, CBG&
CFG&=ZFGColorNum(FG&)
CBG&=ZFGColorNum(BG&)
IF CFG&=-1 THEN CFG&=%CLR_DEFAULT ELSE CFG&=AppColor(CFG&)
IF CBG&=-1 THEN CBG&=%CLR_DEFAULT ELSE CBG&=AppColor(CBG&)
SendMessage hCtrl, %PBM_SETBKCOLOR, 0, CBG&
SendMessage hCtrl, %PBM_SETBARCOLOR, 0, CFG&
END SUB


'------------------------------------------------------------------------------

SUB EZ_SetNextNoClip() EXPORT10
    App_Allow_Ctrl_Clipping&=0
END SUB

SUB PBVControl (BYVAL IDNum&, BYVAL CName&, BYVAL C!, BYVAL R!, BYVAL CW!, BYVAL CH!, BYVAL CText$, BYVAL CProp$)
LOCAL WS&, EX&, AName$, SCFlag&, EMask$, EMask2$, P&, A$, EText$, AFNum&, CText2$
LOCAL CT&, LVMode$, TVCBoxFlag&, hCtrl&, hImgList&, LVCBoxFlag&
LOCAL X&, Y&, W&, H&, FormName$, EMFlag&, EMQ&, MLStyle&, TBarWidth&, CRFlag&
IF IDNum&<1 THEN
    EXIT SUB
END IF
TBarWidth&=0
FormName$=App_EZ_CurForm$

IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
X&=C! * App_EZ_CharW
Y&=R! * App_EZ_CharH
W&=CW! * App_EZ_CharW
H&=CH! * App_EZ_CharH

MLStyle&=0

WS&=0
EX&=0
' TMP$=UCASE$(CName$)
AName$=""
EText$=""
' the second control name in case is VB name
TVCBoxFlag&=0
LVCBoxFlag&=0
EMFlag&=0
App_ResizeAfterFlag&=0
CRFlag&=0
SELECT CASE AS CONST CName&
        CASE %CTRL_BUTTON
            ' props - D=Default, P=Picture, I=Icon, L=Left Text
            AName$="BUTTON"
            WS&=%BS_PUSHBUTTON
            IF INSTR(CProp$,"@") THEN WS&=%BS_DEFPUSHBUTTON
            IF INSTR(CProp$,"O") THEN WS&=%BS_AUTORADIOBUTTON OR %BS_PUSHLIKE
            IF INSTR(CProp$,"X") THEN WS&=%BS_AUTOCHECKBOX OR %BS_PUSHLIKE
            IF INSTR(CProp$,"P") THEN
                WS&=WS& OR %BS_BITMAP
            ELSEIF INSTR(CProp$,"!") THEN   ' changed I to ! so I can be used for Invisible BG
                WS&=WS& OR %BS_ICON
            END IF
            GOSUB PropBTN
            IF INSTR(CProp$,"2") THEN
                WS&=WS& OR %BS_FLAT
            END IF
            IF INSTR(CProp$,"#") THEN
                ' OwnerDraw Button
                WS&=%BS_OWNERDRAW
            END IF
            MLStyle&=%BS_MULTILINE
            GOSUB SetLMStyle
            ' I prop is now for ODButtons Invisible BG prop
            ' CProp$=REMOVE$(CProp$,"I")
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %BS_NOTIFY
        CASE %CTRL_FRAME
            ' props - none
            AName$="BUTTON"
            WS&=WS& OR %BS_GROUPBOX
            ' now requires I property to make transparent
            ' EX&=EX& OR %WS_EX_TRANSPARENT
            GOSUB PropBTN
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %BS_NOTIFY
            IF INSTR(CProp$,"2") THEN
                WS&=WS& OR %BS_FLAT
            END IF
            MLStyle&=%BS_MULTILINE
            GOSUB SetLMStyle
        CASE %CTRL_RADIO
            CRFlag&=1
            ' props - L=Left Text
            AName$="BUTTON"
            WS&=WS& OR %BS_AUTORADIOBUTTON
            GOSUB PropBTN
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %BS_NOTIFY
            IF INSTR(CProp$,"2") THEN
                WS&=WS& OR %BS_FLAT
            END IF
            MLStyle&=%BS_MULTILINE
            GOSUB SetLMStyle
        CASE %CTRL_CHECKBOX
            CRFlag&=1
            ' props - L=Left Text
            AName$="BUTTON"
            IF INSTR(CProp$,"3") THEN
                 WS&=WS& OR %BS_AUTO3STATE
            ELSEIF INSTR(CProp$,"?") THEN
                 WS&=WS& OR %BS_3STATE
            ELSE
                 WS&=WS& OR %BS_AUTOCHECKBOX
            END IF
            GOSUB PropBTN
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %BS_NOTIFY
            IF INSTR(CProp$,"2") THEN
                WS&=WS& OR %BS_FLAT
            END IF
            MLStyle&=%BS_MULTILINE
            GOSUB SetLMStyle
        CASE  %CTRL_COMBOBOX
            ' props - A=Alpha Sort, E-Edit
            AName$="COMBOBOX"
            IF INSTR(CProp$,"E") THEN
                WS&=WS& OR %CBS_DROPDOWN
            ELSE
                WS&=WS& OR %CBS_DROPDOWNLIST
            END IF
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %CBS_SORT
            IF INSTR(CProp$,"V") THEN WS&=WS& OR %WS_VSCROLL
            IF INSTR(CProp$,"J")=0 THEN
                WS&=WS& OR %CBS_NOINTEGRALHEIGHT
                App_ResizeAfterFlag&=1
            END IF
            IF INSTR(CProp$,"O") THEN   ' ownerdraw
                IF INSTR(CProp$,"?") THEN
                    WS&=WS& OR %CBS_OWNERDRAWVARIABLE
                ELSE
                    WS&=WS& OR %CBS_OWNERDRAWFIXED
                END IF
                IF INSTR(CProp$,"$") THEN
                    WS&=WS& OR %CBS_HASSTRINGS
                END IF
            END IF
        CASE  %CTRL_LISTBOX
            ' props - A=Alpha Sort, M=MultiSelect, E=Edit
            IF INSTR(CProp$,"E") THEN
                ' is actually a Combobox
                AName$="COMBOBOX"
                WS&=WS& OR %CBS_SIMPLE
                IF INSTR(CProp$,"A") THEN WS&=WS& OR %CBS_SORT
                WS&=WS& OR %WS_VSCROLL
                IF INSTR(CProp$,"J")=0 THEN
                    WS&=WS& OR %CBS_NOINTEGRALHEIGHT
                    App_ResizeAfterFlag&=1
                END IF
            ELSE
                AName$="LISTBOX"
                IF INSTR(CProp$,"M") THEN
                    WS&=WS& OR ((%LBS_STANDARD OR %LBS_MULTIPLESEL) AND (NOT %LBS_SORT))
                ELSE
                    WS&=WS& OR (%LBS_STANDARD AND (NOT %LBS_SORT))
                END IF
                IF INSTR(CProp$,"A") THEN
                     WS&=WS& OR %LBS_SORT
                END IF
                WS&=WS& OR %LBS_NOTIFY OR %LBS_USETABSTOPS
                IF INSTR(CProp$,"J")=0 THEN WS&=WS& OR %LBS_NOINTEGRALHEIGHT
            END IF
            IF INSTR(CProp$,">") THEN
                IF AName$="LISTBOX" THEN WS&=WS& OR %WS_HSCROLL OR %LBS_MULTICOLUMN
            ELSE
                IF INSTR(CProp$,"V")=0 THEN WS&=WS& AND (NOT %WS_VSCROLL)
            END IF
            IF INSTR(CProp$,"&") THEN
                IF INSTR(CProp$,"?") THEN
                    WS&=%LBS_OWNERDRAWVARIABLE
                ELSE
                    WS&=%LBS_OWNERDRAWFIXED
                END IF
                WS&=WS& OR %LBS_NOTIFY
                IF INSTR(CProp$,"$") THEN
                    WS&=WS& OR %LBS_HASSTRINGS
                    IF INSTR(CProp$,"A") THEN WS&=WS& OR %LBS_SORT
                ELSEIF INSTR(CProp$,"#") THEN
                    IF INSTR(CProp$,"A") THEN WS&=WS& OR %LBS_SORT
                ELSE
                    IF INSTR(CProp$,"?")=0 THEN
                        WS&=WS& OR %LBS_NODATA
                    ELSE
                        IF INSTR(CProp$,"A") THEN WS&=WS& OR %LBS_SORT
                    END IF
                END IF
                IF INSTR(CProp$,"J")=0 THEN WS&=WS& OR %LBS_NOINTEGRALHEIGHT
                IF INSTR(CProp$,"M") THEN WS&=WS& OR %LBS_MULTIPLESEL
                IF INSTR(CProp$,"V") THEN WS&=WS& OR %WS_VSCROLL
            END IF
        CASE  %CTRL_PLIST
            AName$=$PLISTCLASS
            ' must use %LBS_OWNERDRAWVARIABLE style otherwise the
            ' ownerdraw event occurs before font is set and lose
            ' font sizing
            WS&=%LBS_OWNERDRAWVARIABLE OR %LBS_NOTIFY OR %LBS_HASSTRINGS ' OR %WS_CLIPCHILDREN
            IF INSTR(CProp$,"J")=0 THEN WS&=WS& OR %LBS_NOINTEGRALHEIGHT
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %LBS_SORT
            IF INSTR(CProp$,">") THEN
                IF AName$="LISTBOX" THEN WS&=WS& OR %WS_HSCROLL OR %LBS_MULTICOLUMN
            ELSE
                IF INSTR(CProp$,"V") THEN WS&=WS& OR %WS_VSCROLL
            END IF
        CASE %CTRL_FLIST
            AName$=$FLISTCLASS
            ' must use %LBS_OWNERDRAWVARIABLE style otherwise the
            ' ownerdraw event occurs before font is set and lose
            ' font sizing
            WS&=%LBS_OWNERDRAWVARIABLE OR %LBS_NOTIFY OR %LBS_HASSTRINGS ' OR %WS_CLIPCHILDREN
            IF INSTR(CProp$,"J")=0 THEN WS&=WS& OR %LBS_NOINTEGRALHEIGHT
            IF INSTR(CProp$,"A") THEN WS&=WS& OR %LBS_SORT
            IF INSTR(CProp$,">") THEN
                IF AName$="LISTBOX" THEN WS&=WS& OR %WS_HSCROLL OR %LBS_MULTICOLUMN
            ELSE
                IF INSTR(CProp$,"V") THEN WS&=WS& OR %WS_VSCROLL
            END IF
            IF INSTR(CProp$,"M") THEN WS&=WS& OR %LBS_MULTIPLESEL
        CASE  %CTRL_TEXT, %CTRL_RICHTEXT
            ' props - M=MultiLine, E-Edit, C=Center, B=Both scrollbars, N=Numbers
            '         U=Uppercase, *=Password,  V=Vertical Scrollbar
            AName$="EDIT"
            EMFlag&=1
            EMask$=""
            EMask2$=App_EZ_CurMask$
            App_EZ_CurMask$=""
            IF CName&=%CTRL_RICHTEXT THEN
                AName$=App_RichEditClass$
                EMFlag&=0
                ' add Rich text specific styles here
                ' This style adds small margin to left side as an area to click on
                ' to select lines
                IF INSTR(CProp$,"]") THEN
                    WS&=WS& OR %ES_SELECTIONBAR
                END IF
                ' always show scrollbar (just disable when not needed)
                IF INSTR(CProp$,"V")<>0 OR INSTR(CProp$,"B")<>0 THEN
                    IF INSTR(CProp$,"A") THEN
                        WS&=WS& OR %ES_DISABLENOSCROLL
                    END IF
                END IF
            END IF
            IF INSTR(CProp$,"M") THEN
                WS&=WS& OR %ES_MULTILINE
                IF INSTR(CProp$,"E") THEN
                    WS&=WS& OR %ES_WANTRETURN   '   OR %ES_LEFT
                ELSE
                    WS&=WS& OR %ES_READONLY
                    ' IF INSTR(CProp$,"C") THEN WS&=WS& OR %ES_CENTER ELSE WS&=WS& OR %ES_LEFT
                END IF
                IF INSTR(CProp$,"V") THEN WS&=WS& OR %ES_AUTOVSCROLL OR %WS_VSCROLL
                IF INSTR(CProp$,"B") THEN WS&=WS& OR %ES_AUTOHSCROLL OR %WS_HSCROLL
             ELSE
                IF INSTR(CProp$,"E") THEN
                    EMask$=EMask2$
                    WS&=WS& OR %ES_AUTOHSCROLL  ' OR %ES_LEFT
                ELSE
                    IF EMask2$<>"" THEN
                        EMask$=EMask2$
                        FOR P&=1 TO LEN(EMask$)
                            A$=MID$(EMask2$,P&,1)
                            IF INSTR("X9A#NLP+UTY%$", A$) THEN MID$(EMask$, P&,1)="P"
                        NEXT P&
                    END IF
                    WS&=WS& OR %ES_READONLY
                    IF INSTR(CProp$,"C") THEN WS&=WS& OR %ES_CENTER ELSE WS&=WS& OR %ES_LEFT
                END IF
                IF EMask$="" THEN
                    IF INSTR(CProp$,"N") THEN WS&=WS& OR %ES_NUMBER
                    IF INSTR(CProp$,"*") THEN WS&=WS& OR %ES_PASSWORD
                END IF
            END IF
            IF INSTR(CProp$,"U") THEN WS&=WS& OR %ES_UPPERCASE
            IF EMask$<>"" THEN AName$=App_MaskEditClass$
            IF INSTR(CProp$,"C") THEN
                WS&=WS& OR %ES_CENTER
            ELSEIF INSTR(CProp$,">") THEN
                WS&=WS& OR %ES_RIGHT
            ELSE
                WS&=WS& OR %ES_LEFT
            END IF
       CASE %CTRL_LABEL
            ' props - Default is Right adjusted, L=Left Adjusted, C= Centered
            AName$="STATIC"
            IF INSTR(CProp$,"C") THEN
                WS&=WS& OR %SS_CENTER
            ELSEIF INSTR(CProp$,"L") THEN
                WS&=WS& OR %SS_LEFT
            ELSE
                WS&=WS& OR %SS_RIGHT
            END IF
            IF INSTR(CProp$,"_")=0 THEN WS&=WS& OR %SS_NOPREFIX
            IF INSTR(CProp$,"O") THEN
                WS&=%SS_OWNERDRAW
            ELSE
                IF INSTR(CProp$,"^") THEN
                    WS&=WS& OR %SS_CENTERIMAGE  ' center text vertically
                END IF
            END IF
            IF INSTR(CProp$,"A") THEN WS& = WS& OR %SS_NOTIFY
       CASE %CTRL_IMAGE
            ' props - P=Picture (Bitmap) (else Icon by default)
            AName$="STATIC"
            IF INSTR(CProp$,"P") THEN
                WS&=WS& OR %SS_BITMAP
            ELSE
                WS&=WS& OR %SS_ICON
            END IF
'            IF INSTR(CProp$,"+") THEN
'                WS&=WS& OR %SS_REALSIZEIMAGE
'            END IF
            IF INSTR(CProp$,"C") THEN
                WS&=WS& OR %SS_CENTERIMAGE
            END IF
            IF INSTR(CProp$,"A") THEN WS& = WS& OR %SS_NOTIFY
       CASE %CTRL_HSCROLL
            AName$="SCROLLBAR"
            WS&=WS& OR %SBS_HORZ
       CASE %CTRL_VSCROLL
            AName$="SCROLLBAR"
            WS&=WS& OR %SBS_VERT
       CASE %CTRL_TAB
             AName$="SysTabControl32"
             ' WS&=WS& or %TCS_SHAREIMAGELISTS
             IF INSTR(CProp$,"M") THEN WS&=WS& OR %TCS_MULTILINE
             IF INSTR(CProp$,"B") THEN
                 WS&=WS& OR %TCS_BUTTONS OR %TCS_FOCUSONBUTTONDOWN
                 IF INSTR(CProp$,"_") THEN WS&=WS& OR %TCS_FLATBUTTONS
             END IF
             IF INSTR(CProp$,"=") THEN
                 WS&=WS& OR %TCS_FIXEDWIDTH
                 IF INSTR(CProp$,"L") THEN WS&=WS& OR %TCS_FORCEICONLEFT
             END IF
             IF INSTR(CProp$,"O") THEN
                WS&=WS& OR %TCS_OWNERDRAWFIXED
             END IF
             IF INSTR(CProp$,"U") THEN
                 WS&=WS& OR %TCS_BOTTOM
             ELSE
                 IF INSTR(CProp$,"<") THEN
                     WS&=WS& OR %TCS_VERTICAL
                 ELSEIF INSTR(CProp$,">") THEN
                     WS&=WS& OR %TCS_VERTICAL OR %TCS_RIGHT
                 END IF
             END IF
             IF INSTR(CProp$,"!") THEN WS&=WS& OR %TCS_TOOLTIPS
       CASE %CTRL_PROGRESS
             AName$="msctls_progress32"
             IF INSTR(CProp$,"-") THEN WS&=WS& OR %PBS_SMOOTH
             IF INSTR(CProp$,"V") THEN WS&=WS& OR %PBS_VERTICAL
       CASE %CTRL_UPDOWN
             AName$="msctls_updown32"
       CASE %CTRL_TURTLE
             AName$=$TurtleClassName
             IF INSTR(CProp$,"+") THEN WS&=WS& OR 1 ' 1 stands for + cursor
       CASE %CTRL_DRAGHANDLE
             AName$=$DragHandleControl
       CASE %CTRL_LISTVIEW
             AName$="SysListView32"
             CText2$=""
             LVMode$=""
             IF INSTR(CProp$,"P") THEN  ' for Pictures
                 WS&=%LVS_ICON OR %LVS_ALIGNTOP
             ELSE
                 IF CText$="" THEN
                     WS&=%LVS_LIST
                 ELSE
                     WS&=%LVS_REPORT
                     CText2$=CText$
                     LVMode$=""

                     IF INSTR(CProp$,"#") THEN LVMode$=LVMode$+"#"
                     IF INSTR(CProp$,"-") THEN LVMode$=LVMode$+"-"
                     IF INSTR(CProp$,"I") THEN
                         IF INSTR(CProp$,"A") THEN LVMode$=LVMode$+"P"
                     END IF
                     IF INSTR(CProp$,"N") THEN WS&=WS& OR %LVS_NOCOLUMNHEADER
                     IF INSTR(CProp$,"!") THEN LVMode$=LVMode$+"U"
                 END IF
                 IF INSTR(CProp$,"X") THEN
                     LVMode$=LVMode$+"X"
                     LVCBoxFlag&=1
                 END IF
                 IF INSTR(CProp$,"I") THEN
                     WS&=WS& OR %LVS_ICON OR %LVS_ALIGNLEFT
                 END IF
                 IF INSTR(CProp$,"O") THEN
                     WS&=WS& OR %LVS_OWNERDRAWFIXED
                 END IF
                 IF INSTR(CProp$,"?") THEN LVMode$=LVMode$+"?"
             END IF
             Ctext$=""

             IF INSTR(CProp$,"E") THEN
                 WS&=WS& OR %LVS_EDITLABELS
             END IF
             IF INSTR(CProp$,"M")=0 THEN
                 WS&=WS& OR %LVS_SINGLESEL
             END IF
             IF INSTR(CProp$,"V")=0 THEN
                 WS&=WS& OR %LVS_NOSCROLL
             END IF
             IF INSTR(CProp$,"J")=0 THEN
                 WS&=WS& OR %LVS_SHOWSELALWAYS
             END IF
             WS&=WS& OR %LVS_SHAREIMAGELISTS
             CProp$=REMOVE$(CProp$,"I")
       CASE %CTRL_TREEVIEW
             AName$="SysTreeView32"
             WS&=%TVS_HASBUTTONS
             IF INSTR(CProp$,"-")<>0 THEN WS&=WS& OR %TVS_HASLINES
             IF INSTR(CProp$,"+")<>0 THEN WS&=WS& OR %TVS_LINESATROOT
             IF INSTR(CProp$,"X")<>0 THEN
                 TVCBoxFlag&=1
                 ' WS&=WS& OR %TVS_CHECKBOXES
             END IF
             IF INSTR(CProp$,"E")<>0 THEN WS&=WS& OR %TVS_EDITLABELS
             IF INSTR(CProp$,"V")=0 THEN
                 IF INSTR(CProp$,"B")=0 THEN
                      WS&=WS& OR %TVS_NOSCROLL
                 END IF
             END IF
             IF INSTR(CProp$,"!")=0 THEN WS&=WS& OR %TVS_NOTOOLTIPS
             IF INSTR(CProp$,"N") THEN WS&=WS& OR %TVS_DISABLEDRAGDROP
       CASE %CTRL_VTRACKBAR, %CTRL_HTRACKBAR
             AName$="msctls_trackbar32"
             IF CName&=%CTRL_HTRACKBAR THEN WS&=WS& OR %TBS_HORZ ELSE WS&=WS& OR %TBS_VERT
             IF INSTR(CProp$,"=") THEN WS&=WS& OR %TBS_AUTOTICKS ELSE WS&=WS& OR %TBS_NOTICKS
             IF INSTR(CProp$,"B") THEN
                 WS&=WS& OR %TBS_BOTH
             ELSE
                 IF INSTR(CProp$,"L") THEN
                     WS&=WS& OR %TBS_LEFT   ' %TBS_TOP is the same thing
                 END IF
                 IF INSTR(CProp$,"U") THEN
                     WS&=WS& OR %TBS_LEFT   ' %TBS_TOP is the same thing
                 END IF
             END IF
             IF INSTR(CProp$,"!") THEN
                 WS&=WS& OR %TBS_TOOLTIPS
             END IF
             IF INSTR(CProp$,"1") THEN
                 TBarWidth&=EZ_X(1.5)
             END IF
             IF INSTR(CProp$,"2") THEN
                 TBarWidth&=EZ_X(2.0)
             END IF
             IF INSTR(CProp$,"3") THEN
                 TBarWidth&=EZ_X(2.5)
             END IF
             IF INSTR(CProp$,"4") THEN
                 TBarWidth&=EZ_X(3.0)
             END IF
             IF INSTR(CProp$,"5") THEN
                 TBarWidth&=EZ_X(3.5)
             END IF
             IF INSTR(CProp$,"6") THEN
                 TBarWidth&=EZ_X(4.0)
             END IF
             IF INSTR(CProp$,"7") THEN
                 TBarWidth&=EZ_X(4.5)
             END IF
             IF INSTR(CProp$,"8") THEN
                 TBarWidth&=EZ_X(5.0)
             END IF
             IF INSTR(CProp$,"9") THEN
                 TBarWidth&=EZ_X(5.5)
             END IF
             IF TBarWidth&>0 THEN WS&=WS& OR %TBS_FIXEDLENGTH
        CASE %CTRL_CANVAS
             AName$=$CanvasClassName
             IF INSTR(CProp$,"+") THEN WS&=WS& OR 1 ' 1 stands for + cursor
             IF INSTR(CProp$,"@") THEN
                 WS&=WS& OR %EZCVS_DIBSECTION   ' equals 8
                 ' 00000XX0    Bits 2 and 3 for RGB format
                 IF INSTR(CProp$,"#") THEN
                     WS&=WS& OR %EZCVS_24BIT    ' equals 4   (0+4)
                 ELSEIF INSTR(CProp$,"*") THEN
                     WS&=WS& OR %EZCVS_16BIT    ' equals 2   (2+0)
                 ELSE
                     WS&=WS& OR %EZCVS_32BIT    ' equals 6   (2+4)
                 END IF
             END IF
             IF INSTR(CProp$,"&") THEN
                 WS&=WS& OR %EZCVS_DOUBLEBUFFER
             END IF
             IF INSTR(CProp$,"<") THEN
                 DIM SX&,SY&
                 SX&=0
                 SY&=0
                 IF INSTR(CProp$,"F") THEN
                    SX&=1
                    SY&=1
                 ELSE
                    IF INSTR(CProp$,"R") THEN
                         SX&=SX&+GetSystemMetrics(%SM_CXDLGFRAME)
                         SY&=SY&+GetSystemMetrics(%SM_CYDLGFRAME)
                    END IF
                    IF INSTR(CProp$,"Z") THEN
                         SX&=SX&+GetSystemMetrics(%SM_CXDLGFRAME)
                         SY&=SY&+GetSystemMetrics(%SM_CYDLGFRAME)
                    END IF
                    IF INSTR(CProp$,"S") THEN
                         SX&=SX&+GetSystemMetrics(%SM_CXEDGE)
                         SY&=SY&+GetSystemMetrics(%SM_CYEDGE)
                    END IF
                 END IF
                 IF INSTR(CProp$,"C") THEN
                     X&=X&-SX&
                     Y&=Y&-SY&
                 END IF
                 W&=W&+(2*SX&)
                 H&=H&+(2*SY&)
             END IF
        CASE %CTRL_MCI
             AName$=$MCIClassName
             WS&=0
        CASE %CTRL_ANIMATE
             AName$="SysAnimate32"
             WS&=0
             IF INSTR(CProp$,"A") THEN WS&=WS& OR %ACS_AUTOPLAY
             IF INSTR(CProp$,"C") THEN WS&=WS& OR %ACS_CENTER
             IF INSTR(CProp$,"I") THEN
                 WS&=WS& OR %ACS_TRANSPARENT
                 CProp$=REMOVE$(CProp$,"I")
             END IF
        CASE %CTRL_DATETIME
             AName$="SysDateTimePick32"
             WS&=0
             IF INSTR(CProp$,"4") THEN
                 WS&=WS& OR %DTS_TIMEFORMAT
             ELSEIF INSTR(CProp$,"1") THEN
                WS&=WS& OR %DTS_LONGDATEFORMAT
             ELSEIF INSTR(CProp$,"2") THEN
                WS&=WS& OR %DTS_SHORTDATEFORMAT
             ELSEIF INSTR(CProp$,"3") THEN
                WS&=WS& OR %DTS_SHORTDATECENTURYFORMAT
             END IF
             IF INSTR(CProp$,"X") THEN WS&=WS& OR %DTS_SHOWNONE
             IF INSTR(CProp$,"U") THEN WS&=WS& OR %DTS_UPDOWN
        CASE %CTRL_MONTH
            AName$="SysMonthCal32"
            WS&=0
            IF INSTR(CProp$,"?") THEN WS&=WS& OR %MCS_DAYSTATE
            IF INSTR(CProp$,"M") THEN WS&=WS& OR %MCS_MULTISELECT
            IF INSTR(CProp$,"#") THEN WS&=WS& OR %MCS_WEEKNUMBERS
            IF INSTR(CProp$,"@")=0 THEN WS&=WS& OR %MCS_NOTODAYCIRCLE
            IF INSTR(CProp$,"_")=0 THEN WS&=WS& OR %MCS_NOTODAY

        CASE %CTRL_SHAPE
             AName$=$ShapeClassName
             IF INSTR(CProp$,"V") THEN
                 WS&=WS& OR 1
             ELSEIF INSTR(CProp$,"\") THEN
                 WS&=WS& OR 2
             ELSEIF INSTR(CProp$,"/") THEN
                 WS&=WS& OR 3
             ELSEIF INSTR(CProp$,"[") THEN    ' box or rounded box
                 IF INSTR(CProp$,"(") THEN
                     WS&=WS& OR 5
                 ELSE
                     WS&=WS& OR 4
                 END IF
             ELSEIF INSTR(CProp$,"(") THEN
                 WS&=WS& OR 6
             ELSEIF INSTR(CProp$,"?") THEN
                 WS&=WS& OR 7
             END IF
             IF INSTR(CProp$,"4") THEN
                 P&=24
             ELSEIF INSTR(CProp$,"3") THEN
                 P&=16
             ELSEIF INSTR(CProp$,"2") THEN
                 P&=8
             ELSE
                 P&=0
             END IF
             WS&=WS& OR P&
             IF INSTR(CProp$,"I")=0 THEN
                 WS&=WS& OR 64
             ELSE
                 CProp$=REMOVE$(CProp$,"I")
             END IF
             IF INSTR(CProp$,"A") THEN WS&=WS& OR 128
        CASE %CTRL_REBAR
             AName$="ReBarWindow32"
             WS&=WS& OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN
             EX&=%WS_EX_CONTROLPARENT
             IF INSTR(CProp$,"A") THEN  ' autosize
                 WS&=WS& OR %RBS_AUTOSIZE
             END IF
             IF INSTR(CProp$,"[") THEN
                 WS&=WS& OR %RBS_BANDBORDERS
             END IF
             IF INSTR(CProp$,"?")=0 THEN
                 WS&=WS& OR %RBS_FIXEDORDER
             END IF
             IF INSTR(CProp$,"V") THEN
                 WS&=WS& OR %RBS_VARHEIGHT
             END IF
             IF INSTR(CProp$,"N") THEN
                 WS&=WS& OR %CCS_NODIVIDER
             END IF
             IF INSTR(CProp$,"<") THEN
                 WS&=WS& OR &H81&
             ELSEIF INSTR(CProp$,">") THEN
                 WS&=WS& OR &H83&
             ELSEIF INSTR(CProp$,"B") THEN
                 WS&=WS& OR %CCS_BOTTOM
             ELSEIF INSTR(CProp$,"^") THEN
                 WS&=WS& OR %CCS_TOP
             ELSE
                 WS&=WS& OR %CCS_NORESIZE
             END IF
        CASE %CTRL_PAGER
             AName$="SysPager"
             WS&=WS& OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN
             EX&=%WS_EX_CONTROLPARENT
             IF INSTR(CProp$,"V") THEN
                 WS&=WS& OR %PGS_VERT
             ELSE
                 WS&=WS& OR %PGS_HORZ
             END IF
             IF INSTR(CProp$,"A") THEN
                 WS&=WS& OR %PGS_AUTOSCROLL
             END IF
        CASE ELSE
            EXIT SUB
END SELECT
IF INSTR(CProp$,"I") THEN
    EX&=EX& OR %WS_EX_TRANSPARENT
END IF

WS&=WS& AND (NOT %WS_BORDER)

' IF CName&=%CTRL_PROGRESS THEN WS&=WS& OR %WS_BORDER

IF INSTR(CProp$,"H")=0 THEN
    WS&=WS& OR %WS_VISIBLE
END IF

IF INSTR(CProp$,"F") THEN
    WS&=WS& OR %WS_BORDER    ' stands for Flat
ELSE
    IF INSTR(CProp$,"R") THEN WS&=WS& OR %WS_DLGFRAME  ' stands for Raised
    IF INSTR(CProp$,"Z") THEN WS&=WS& OR %WS_THICKFRAME    ' for resizable
    IF INSTR(CProp$,"S") THEN EX&=EX& OR %WS_EX_CLIENTEDGE     ' stands for Sunken
END IF
IF INSTR(CProp$,"G") THEN WS&=WS& OR %WS_GROUP
IF INSTR(CProp$,"T") THEN WS&=WS& OR %WS_TABSTOP

IF INSTR(CProp$,"D") THEN WS&=WS& OR %WS_DISABLED

WS&=WS& OR %WS_CHILD
AFNum&=ZFormNum(FormName$)

IF App_Allow_Ctrl_Clipping& THEN
    WS&=WS& OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN
ELSE
    App_Allow_Ctrl_Clipping&=1
END IF

'IF AFNum&<>0 THEN
'    IF AppForms(AFNum&).FhWnd2=0 THEN
'        WS&=WS& OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN
'    END IF
'END IF

SELECT CASE App_EZ_UsingStyles&
     CASE 1
          zModifyStyles WS&, EX&, 1
     CASE 2
          zModifyStyles WS&, EX&, 1
     CASE ELSE
          IF App_EZ_AppendStyle&<>0 THEN
              WS&=WS& OR App_EZ_AppendStyle&
          END IF
END SELECT
App_EZ_UsingStyles&=0
App_EZ_AppendStyle&=0

IF AName$<>"" THEN
    SCFlag&=0
    IF App_EZ_SubClass& THEN SCFlag&=App_EZ_SubClass&
    IF EMFlag& THEN
'    IF AName$="EDIT" OR AName$=App_MaskEditClass$ THEN
        IF EMask$<>"" THEN
            IF LEFT$(EMask$,1)="?" THEN
                EMQ&=1
                EMask$=MID$(EMask$,2)
            ELSE
                EMQ&=0
            END IF
            CText$=LEFT$(CText$+STRING$(LEN(EMask$)," "),LEN(EMask$))
            FOR P&=1 TO LEN(EMask$)
                A$=MID$(EMask$,P&,1)
                IF INSTR("X9#ANLP+%UYT?$", A$)=0 THEN
                    MID$(CText$,P&,1)=A$
                END IF
            NEXT P&
            IF LEFT$(EMask$,2)="$ " THEN MID$(CText$,1,2)="$ "
            IF RIGHT$(EMask$,2)=" %" THEN CText$=LEFT$(CText$,LEN(CText$)-2)+" %"
            IF EMQ& THEN EMask$="?"+EMask$
        ELSE
            EText$=CText$
            CText$=""
        END IF
'        IF INSTR(CProp$,"M") THEN EMask$=CHR$(255)
    END IF
    PBVControlEX FormName$, IDNum&, AName$, X&, Y&, W&, H&, CText$, WS&, EX&, SCFlag&, EMask$, hCtrl&


    IF TBarWidth&>0 THEN
        IF hCtrl&<>0 THEN
            SendMessage hCtrl&, %TBM_SETTHUMBLENGTH, TBarWidth&,0
        END IF
    END IF
    IF TVCBoxFlag&<>0 THEN
        IF hCtrl&<>0 THEN
            WS&=GetWindowLong(hCtrl&,%GWL_STYLE)
            WS&=WS& OR %TVS_CHECKBOXES
            SetWindowLong hCtrl&, %GWL_STYLE, WS&
            ' treeview requires this technique to clean up imagelist
'            #IF %DoImageListSwap
                hImgList&=SendMessage(hCtrl&, %TVM_GETIMAGELIST,2,0)
                IF App_ImgList(0).hImg=0 THEN
                    App_ImgList(0).hImg=hImgList&
                ELSE
                    ' swap in previous checkbox image list and destroy new one
                    SendMessage hCtrl&, %TVM_SETIMAGELIST,2, App_ImgList(0).hImg
                    IF hImgList&<>App_ImgList(0).hImg THEN ImageList_Destroy hImgList&
                END IF
'            #ENDIF
        END IF
    END IF
    IF EMFlag& THEN
'    IF AName$="EDIT" OR AName$=App_MaskEditClass$ THEN
'        IF EMask$=CHR$(255) THEN EMask$=""
        IF EMQ&<>0 THEN EMask$=MID$(Emask$,2)   ' remove ?
        IF EMask$<>"" THEN
            EZ_SetEditLen FormName$, IDNum&, LEN(EMask$)
        ELSE
            IF App_EZ_CurTextLen&>0 THEN
                EZ_SetEditLen FormName$, IDNum&, App_EZ_CurTextLen&
                EText$=LEFT$(EText$,App_EZ_CurTextLen&)
            ELSE
                EText$=LEFT$(EText$, %APP_64KB)
            END IF
            EZ_SetText FormName$, IDNum&, EText$
        END IF
    END IF
'    IF AName$="SysListView32" THEN
    IF CName&=%CTRL_LISTVIEW THEN
        IF RIGHT$(CText2$,1)<>"|" THEN CText2$=CText2$+"|"
        CT&=0
        DO
            IF CText2$="" THEN EXIT DO
            P&=INSTR(CText2$, "|")
            IF P&=0 THEN EXIT DO
            A$=LEFT$(CText2$, P&-1)
            CText2$=MID$(CText2$, P&+1)
            IF A$<>"" THEN
                EZ_AddLVColumn FormName$, IDNum&, A$, CT&
                CT&=CT&+1
            END IF
        LOOP
        PBV_SetLVStyle FormName$, IDNum&, LVMode$
        IF LVCBoxFlag&<>0 THEN
            IF hCtrl&<>0 THEN
                ' this code is removed by compiler directive !
                ' since Listview destroys the Imagelist when it is
                ' destroyed
                #IF %DoImageListSwap
                    hImgList&=SendMessage(hCtrl&, %LVM_GETIMAGELIST,2,0)

                   ' msgbox "Listview ImageList handle "+str$(hImgList&)

                    IF App_ImgList(0).hImg=0 THEN
                        App_ImgList(0).hImg=hImgList&
                    ELSE
                        ' swap in previous checkbox image list and destroy new one
                        SendMessage hCtrl&, %LVM_SETIMAGELIST,2, App_ImgList(0).hImg
                        IF hImgList&<>App_ImgList(0).hImg THEN ImageList_Destroy hImgList&
                    END IF
                #ENDIF
            END IF
        END IF
    END IF
    App_EZ_CurTextLen&=0
    ' Set Default Values
'    SELECT CASE AName$
    SELECT CASE AS LONG CName&
'        CASE "SCROLLBAR"
         CASE %CTRL_HSCROLL, %CTRL_VSCROLL
            PBVSetScroll FormName$, IDNum&, "", 1 , 100, 1, 50
'        CASE "msctls_trackbar32"
         CASE %CTRL_VTRACKBAR, %CTRL_HTRACKBAR
            PBVSetScroll FormName$, IDNum&, "", 1 , 20, 1, 10
        CASE ELSE
    END SELECT

END IF
EXIT SUB

PropBTN:
IF CRFlag& THEN
     IF INSTR(CProp$,"L") THEN WS&=WS& OR %BS_LEFTTEXT
END IF
IF INSTR(CProp$,"^") THEN
     WS&=WS& OR %BS_CENTER
ELSE
     IF INSTR(CProp$,"<") THEN
          WS&=WS& OR %BS_LEFT
     ELSE
          IF INSTR(CProp$,">") THEN WS&=WS& OR %BS_RIGHT
     END IF
END IF
RETURN

SetLMStyle:
IF INSTR(CText$,App_EZ_DChar$) THEN
    REPLACE App_EZ_DChar$ WITH CHR$(13)+CHR$(10) IN CText$
    WS&=WS& OR MLStyle&
END IF
RETURN

END SUB

'------------------------------------------------------------------------------

'TYPE TV_INSERTSTRUCT
'  hParent AS LONG
'  hInsertAfter AS LONG
'  item AS TV_ITEM
'END TYPE


'TYPE TV_ITEM
'  mask AS DWORD
'  hItem AS LONG
'  STATE AS DWORD
'  stateMask AS DWORD
'  pszText AS ASCIIZ PTR
'  cchTextMax AS LONG
'  iImage AS LONG
'  iSelectedImage AS LONG
'  cChildren AS LONG
'  lParam AS LONG
'END TYPE

'%TVIF_TEXT              = &H0001
'%TVIF_IMAGE             = &H0002
'%TVIF_PARAM             = &H0004
'%TVIF_STATE             = &H0008
'%TVIF_HANDLE            = &H0010
'%TVIF_SELECTEDIMAGE     = &H0020
'%TVIF_CHILDREN          = &H0040

'%TVIS_FOCUSED           = &H0001
'%TVIS_SELECTED          = &H0002
'%TVIS_CUT               = &H0004
'%TVIS_DROPHILITED       = &H0008
'%TVIS_BOLD              = &H0010
'%TVIS_EXPANDED          = &H0020
'%TVIS_EXPANDEDONCE      = &H0040

'%TVIS_OVERLAYMASK       = &H0F00
'%TVIS_STATEIMAGEMASK    = &HF000
'%TVIS_USERMASK          = &HF000

FUNCTION EZ_GetTVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL hTVItem&, TXT$, Pict1&, Pict2&, Prop$) EXPORT10 AS LONG
LOCAL TVI AS TV_ITEM
LOCAL TX AS ASCIIZ*256
LOCAL RV&, ST&, hCtrl&
'TYPE TV_ITEM
'  mask AS DWORD
'  hItem AS LONG
'  STATE AS DWORD
'  stateMask AS DWORD
'  pszText AS ASCIIZ PTR
'  cchTextMax AS LONG
'  iImage AS LONG
'  iSelectedImage AS LONG
'  cChildren AS LONG
'  lParam AS LONG
'END TYPE
RV&=0
TXT$=""
Pict1&=0
Pict2&=0
Prop$=""
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$, IDNUM&,1)
IF hCtrl&=0 THEN GOTO SkipGetTVItem
IF zGetClass(hCtrl&)="SYSTREEVIEW32" THEN
    TVI.hItem=hTVItem&
    TVI.pszText=VARPTR(TX)
    TVI.cchTextMax=255
    TVI.mask=%TVIF_TEXT OR %TVIF_IMAGE OR %TVIF_SELECTEDIMAGE OR %TVIF_STATE OR %TVIF_CHILDREN  OR %TVIS_STATEIMAGEMASK
    RV&=SendMessage(hCtrl&, %TVM_GETITEM,0, VARPTR(TVI))
    IF RV&<>0 THEN
        TXT$=TX
        Pict1&=TVI.iImage
        Pict2&=TVI.iSelectedImage
        ST&=TVI.STATE
        IF (ST& AND %TVIS_FOCUSED)<>0 THEN Prop$=Prop$+"F"
        IF (ST& AND %TVIS_SELECTED)<>0 THEN Prop$=Prop$+"S"
        IF (ST& AND %TVIS_BOLD)<>0 THEN Prop$=Prop$+"B"
        IF (ST& AND %TVIS_EXPANDED)<>0 THEN Prop$=Prop$+"+"
        IF TVI.cChildren=1 THEN Prop$=Prop$+"C"
        SHIFT RIGHT ST&, 12
        ST&=ST& AND 15
        IF ST&>0 THEN
            Prop$=Prop$+"X"
            Prop$=Prop$+LTRIM$(STR$(ST&))
        END IF
    END IF
END IF
SkipGetTVItem:
FUNCTION=RV&
END FUNCTION

FUNCTION PBVSetItem(BYVAL FormName$, BYVAL IDNum&, BYVAL hTVItem&, BYVAL hTVParent&, BYVAL hTVAfter&, BYVAL TXT$, BYVAL Pict1&, BYVAL Pict2&, BYVAL Prop$, BYVAL Mode&) AS LONG
LOCAL TVI AS TV_INSERTSTRUCT
LOCAL TX AS ASCIIZ*256, P&, L&, RV&, CI&, XFlag&, hCtrl&
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$, IDNUM&,1)
IF hCtrl&=0 THEN GOTO SkipTVItem
IF zGetClass(hCtrl&)<>"SYSTREEVIEW32" THEN GOTO SkipTVItem
TXT$=LEFT$(TXT$,255)    ' make sure less than 255 characters
TX=TXT$
L&=LEN(TXT$)
CI&=0
Prop$=UCASE$(Prop$)
XFlag&=0
TVI.item.mask=0
' IF INSTR(Prop$, "{T}")<>0 THEN
IF TXT$<>"" THEN
'    Prop$=REMOVE$(Prop$,"{T}")
    TVI.item.mask=TVI.item.mask OR %TVIF_TEXT
END IF
IF INSTR(Prop$, "{I}")<>0 THEN
    Prop$=REMOVE$(Prop$,"{I}")
    TVI.item.mask=TVI.item.mask OR %TVIF_IMAGE OR %TVIF_SELECTEDIMAGE
END IF
IF INSTR(Prop$, "{S}")<>0 THEN
    Prop$=REMOVE$(Prop$,"{S}")
    TVI.item.mask=TVI.item.mask OR %TVIF_STATE
END IF

TVI.item.hItem=hTVItem&
P&=0
IF INSTR(Prop$, "F")<>0 THEN P&=P& OR %TVIS_FOCUSED
IF INSTR(Prop$, "S")<>0 THEN P&=P& OR %TVIS_SELECTED
IF INSTR(Prop$, "B")<>0 THEN P&=P& OR %TVIS_BOLD
IF INSTR(Prop$, "+")<>0 THEN P&=P& OR %TVIS_EXPANDED
IF INSTR(Prop$, "X")<>0 THEN XFlag&=1
IF XFlag&<>0 THEN
    CI&=0
    IF INSTR(Prop$, "1") THEN CI&=1
    IF INSTR(Prop$, "2") THEN CI&=2
    IF INSTR(Prop$, "3") THEN CI&=3
    IF INSTR(Prop$, "4") THEN CI&=4
    IF INSTR(Prop$, "5") THEN CI&=5
    IF INSTR(Prop$, "6") THEN CI&=6
    IF INSTR(Prop$, "7") THEN CI&=7
    IF INSTR(Prop$, "8") THEN CI&=8
ELSE
    CI&=0
END IF
SHIFT LEFT CI&, 12
TVI.item.STATE=P& OR CI&
IF XFlag&=0 THEN
    TVI.item.stateMask=%TVIS_FOCUSED OR %TVIS_SELECTED OR %TVIS_BOLD OR %TVIS_EXPANDED OR %TVIS_CUT OR %TVIS_DROPHILITED OR %TVIS_EXPANDEDONCE
ELSE
    TVI.item.stateMask=%TVIS_FOCUSED OR %TVIS_SELECTED OR %TVIS_BOLD OR %TVIS_EXPANDED OR %TVIS_CUT OR %TVIS_DROPHILITED OR %TVIS_EXPANDEDONCE OR %TVIS_STATEIMAGEMASK
END IF
TVI.item.pszText=VARPTR(TX)
TVI.item.cchTextMax=L&
TVI.item.iImage=Pict1&
TVI.item.iSelectedImage=Pict2&
TVI.item.cChildren=0
TVI.item.lParam=0
RV&=0
SELECT CASE AS LONG Mode&
    CASE 1  ' insert
        TVI.hParent=hTVParent&
        TVI.hInsertAfter=hTVAfter&
        RV&=SendMessage(hCtrl&, %TVM_INSERTITEM,0, VARPTR(TVI))
    CASE 0  ' edit
        RV&=SendMessage(hCtrl&, %TVM_SETITEM,0, VARPTR(TVI.item))
    CASE ELSE
END SELECT
SkipTVItem:
FUNCTION=RV&
END FUNCTION


FUNCTION EZ_AddTVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL hParent&, BYVAL hAfter&, BYVAL IText$, BYVAL NSImage1&, BYVAL SImage&, BYVAL TVProp$) EXPORT10 AS LONG
IF hParent&=0 THEN hParent&=%TVI_ROOT
IF hAfter&=0 THEN hAfter&=%TVI_LAST
FUNCTION=PBVSetItem(FormName$, IDNum&, 0, hParent&, hAfter&, IText$, NSImage1&, SImage&, TVProp$, 1)
END FUNCTION

SUB EZ_SetTVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL hItem&, BYVAL IText$, BYVAL NSImage1&, BYVAL SImage&, BYVAL TVProp$) EXPORT10
PBVSetItem FormName$, IDNum&, hItem&, 0, 0, IText$, NSImage1&, SImage&, TVProp$, 0
END SUB



'------------------------------------------------------------------------------

SUB EZ_AddLVColumn(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&) EXPORT10
PBV_AddLVColumnX FormName$, IDNum&, CText$, CIndex&, 1
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetLVColumn(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&) EXPORT10
PBV_AddLVColumnX FormName$, IDNum&, CText$, CIndex&, 0
END SUB

'------------------------------------------------------------------------------

SUB PBV_AddLVColumnX(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL CIndex&, BYVAL AFlag&)
LOCAL LVC AS LV_COLUMN, P1&, P2&, N&, L&, D$
LOCAL LVText AS ASCIIZ * 256, AL&, hLV_Header&, OFlag&, hCtrl&
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$,IDNum&,1)
IF hCtrl&=0 THEN EXIT SUB
IF zGetClass(hCtrl&)<>"SYSLISTVIEW32" THEN EXIT SUB
' TYPE LV_COLUMN
'  mask AS DWORD
'  fmt AS LONG
'  cx AS LONG
'  pszText AS ASCIIZ PTR
'  cchTextMax AS LONG
'  iSubItem AS LONG
' END TYPE
OFlag&=0
AL&=%LVCFMT_LEFT
IF INSTR(CText$, "{C}") THEN
    AL&=%LVCFMT_CENTER
    CText$=REMOVE$(CText$, "{C}")
END IF
IF INSTR(CText$, "{R}") THEN
    AL&=%LVCFMT_RIGHT
    CText$=REMOVE$(CText$, "{R}")
END IF
IF INSTR(CText$, "{O}") THEN
    OFlag&=1
    CText$=REMOVE$(CText$, "{O}")
END IF
P1&=INSTR(CText$,"{")
P2&=INSTR(CText$,"}")
N&=0
IF P1&>0 THEN
    IF P2&>P1& THEN
        L&=P2&-P1&-1
        D$=MID$(CText$, P1&+1, L&)
        IF D$<>"" THEN N&=VAL(D$)
    END IF
    CText$=LEFT$(CText$, P1&-1)
END IF
IF LEN(CText$)>255 THEN CText$=LEFT$(CText$,255)
IF N&=0 THEN N&=LEN(CText$)
IF N&=0 THEN N&=1

LVC.mask=%LVCF_FMT OR %LVCF_TEXT OR %LVCF_WIDTH OR %LVCF_SUBITEM
IF CIndex&=0 THEN
    LVC.fmt=%LVCFMT_LEFT
ELSE
    LVC.fmt=AL&
END IF
LVC.cx=N&*App_EZ_CharW
LVText=CText$+CHR$(0)
LVC.pszText=VARPTR(LVText)
LVC.cchTextMax=0
LVC.iSubItem=CIndex&
IF AFlag& THEN
    SendMessage hCtrl&, %LVM_INSERTCOLUMN, CIndex&, VARPTR(LVC)
ELSE
    SendMessage hCtrl&, %LVM_SETCOLUMN, CIndex&, VARPTR(LVC)
END IF
IF OFlag& THEN
    hLV_Header&=SendMessage(hCtrl&, %LVM_GETHEADER,0,0)
    DIM HD AS HD_ITEM
    HD.Mask=%HDI_FORMAT
    HD.fmt=%HDF_OWNERDRAW
    SendMessage hLV_Header&, %HDM_SETITEM, CIndex&, VARPTR(HD)
END IF
END SUB

'------------------------------------------------------------------------------
SUB ZSetTip(BYVAL IDNum&, BYVAL Msg&)
    LOCAL hWnd&, hTip&
    hWnd&=ezHandle(App_EZ_CurForm$, IDNum&,0)
    IF hWnd&<>0 THEN
        hTip&=SendMessage(hWnd&,Msg&,0,0)
        IF hTip&<>0 THEN
            ZSetToolTipColors hTip&, 1
        END IF
    END IF
END SUB

SUB EZ_ListView (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
IF App_AllowLoading&<>0 THEN
    DIM Pict$
    ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
END IF
PBVControl IDNum&, %CTRL_LISTVIEW, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZFRS-PIEMV#AXO?!NJ")
ZSetTip IDNum&,%LVM_GETTOOLTIPS
ZCallLoaded
END SUB

'------------------------------------------------------------------------------


SUB EZ_AddLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$) EXPORT10
PBV_AddLVItem FormName$, IDNum&, IText$, IPictNum&, LVIndex&, LVItem&, LVProp$, 1
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$) EXPORT10
PBV_AddLVItem FormName$, IDNum&, IText$, IPictNum&, LVIndex&, LVItem&, LVProp$, 0
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetLVItem(BYVAL FormName$, BYVAL IDNum&, IText$, IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, LVProp$) EXPORT10 AS LONG
LOCAL LVI AS LV_ITEM, RV&, ST&, hCtrl&
LOCAL LVString AS ASCIIZ*256
IText$=""
IPictNum&=-1
LVProp$=""
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$,IDNum&,1)
IF hCtrl&=0 THEN GOTO SkipLVGet
IF zGetClass(hCtrl&)<>"SYSLISTVIEW32" THEN GOTO SkipLVGet
LVI.mask=%LVIF_TEXT OR %LVIF_IMAGE OR %LVIF_STATE
LVI.iItem=LVIndex&
LVI.iSubItem=LVItem&
LVI.STATE=0
LVI.stateMask=%LVIS_FOCUSED OR %LVIS_SELECTED OR %LVIS_STATEIMAGEMASK
LVI.pszText=VARPTR(LVString)
LVI.cchTextMax=255
LVI.iImage=0
LVI.lParam=0
RV&=SendMessage(hCtrl&, %LVM_GETITEM, 0, VARPTR(LVI))
IF RV&<>0 THEN
    IText$=LVString
    IPictNum&=LVI.iImage
    ST&=LVI.STATE
    IF (ST& AND %LVIS_FOCUSED)<>0 THEN LVProp$=LVProp$+"F"
    IF (ST& AND %LVIS_SELECTED)<>0 THEN LVProp$=LVProp$+"S"
    SHIFT RIGHT ST&, 12
    ST&=ST& AND 15
    IF ST&>0 THEN
        LVProp$=LVProp$+"X"
        LVProp$=LVProp$+LTRIM$(STR$(ST&))
    END IF
END IF
SkipLVGet:
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_GetLVClickInfo(BYVAL CVal&, AxPos&, AyPos&, SubXPos&, SubYPos&, ACol&, I&) EXPORT10
    LOCAL MyLV AS EZLVSI PTR
    IF CVal&<>0 THEN
        IF IsBadReadPtr(CVal&, SIZEOF(@MyLV))=0 THEN
            MyLV=CVal&
            AxPos&=@MyLV.Ax
            AyPos&=@MyLV.Ay
            SubXPos&=@MyLV.Ix
            SubYPos&=@MyLV.Iy
            ACol&=@MyLV.Col
            I&=@MyLV.Item
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB PBV_AddLVItem(BYVAL FormName$, BYVAL IDNum&, BYVAL IText$, BYVAL IPictNum&, BYVAL LVIndex&, BYVAL LVItem&, BYVAL LVProp$, BYVAL AFlag&)
LOCAL LVI AS LV_ITEM, MFlag&, SFlag&, XFlag&
LOCAL LVString AS ASCIIZ*256, SImg&, hCtrl&
'App_EZ_HandleFlag&=1
hCtrl&=ezHandle(FormName$, IDNum&,1)
IF hCtrl&=0 THEN EXIT SUB
IF zGetClass(hCtrl&)<>"SYSLISTVIEW32" THEN EXIT SUB
'TYPE LV_ITEM
'  mask AS DWORD
'  iItem AS LONG
'  iSubItem AS LONG
'  STATE AS DWORD
'  stateMask AS DWORD
'  pszText AS ASCIIZ PTR
'  cchTextMax AS LONG
'  iImage AS LONG
'  lParam AS LONG
'END TYPE
MFlag&=0
IF IText$<>"" OR INSTR(LVProp$,"{T}")<>0 THEN
    MFlag&=MFlag& OR %LVIF_TEXT
END IF
LVProp$=REMOVE$(LVProp$,"{T}")
IF INSTR(LVProp$,"{I}") THEN
    LVProp$=REMOVE$(LVProp$,"{I}")
    MFlag&=MFlag& OR %LVIF_IMAGE
ELSE
   IPictNum&=0
END IF

SFlag&=0
SImg&=0
XFlag&=0
IF INSTR(LVProp$,"{S}") THEN
    LVProp$=REMOVE$(LVProp$,"{S}")
    IF INSTR(LVProp$,"F") THEN SFlag&=SFlag& OR %LVIS_FOCUSED
    IF INSTR(LVProp$,"S") THEN SFlag&=SFlag& OR %LVIS_SELECTED
    SImg&=0
    IF INSTR(LVProp$,"X") THEN
        IF INSTR(LVProp$,"1") THEN SImg&=1
        IF INSTR(LVProp$,"2") THEN SImg&=2
        IF INSTR(LVProp$,"3") THEN SImg&=3
        IF INSTR(LVProp$,"4") THEN SImg&=4
        IF INSTR(LVProp$,"5") THEN SImg&=5
        IF INSTR(LVProp$,"6") THEN SImg&=6
        IF INSTR(LVProp$,"7") THEN SImg&=7
        IF INSTR(LVProp$,"8") THEN SImg&=8
        SHIFT LEFT SImg&, 12
        SFlag&=SFlag& OR SImg&
        XFlag&=1
    END IF
    MFlag&=MFlag& OR %LVIF_STATE
END IF
LVI.mask=MFlag&
LVI.iItem=LVIndex&
LVI.iSubItem=LVItem&
LVI.STATE=SFlag&
LVI.stateMask=%LVIS_FOCUSED OR %LVIS_SELECTED
IF XFlag&<>0 THEN
    LVI.stateMask=LVI.stateMask OR %LVIS_STATEIMAGEMASK
END IF
IF LEN(IText$)>255 THEN IText$=LEFT$(IText$,255)
LVString=IText$+CHR$(0)
LVI.pszText=VARPTR(LVString)
LVI.cchTextMax=0
LVI.iImage=IPictNum&  ' Icon Index # in Image List
LVI.lParam=LVIndex&
IF AFlag&<>0 AND LVItem&=0 THEN
    LVI.mask=LVI.mask OR %LVIF_PARAM
    SendMessage hCtrl&, %LVM_INSERTITEM, 0, VARPTR(LVI)
ELSE
    SendMessage hCtrl&, %LVM_SETITEM, 0, VARPTR(LVI)
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetLVColCount(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&, hHeader&     ' , I&, CI&()
    RV&=0
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$,IDNum&,1)
    IF hCtrl&<>0 THEN
        IF zGetClass(hCtrl&)="SYSLISTVIEW32" THEN
            hHeader&=SendMessage(hCtrl&, %LVM_GETHEADER,0,0)
            IF hHeader&<>0 THEN
                RV&=SendMessage(hHeader&, %HDM_GETITEMCOUNT,0,0)
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetLVColOrder(BYVAL FormName$, BYVAL IDNum&, BYVAL Columns&) EXPORT10 AS STRING
LOCAL hCtrl&, RV$, I&, CI&(), hHeader&
RV$=""
IF PBVGetClass(FormName$, IDNum&)="SYSLISTVIEW32" THEN
    hCtrl&=ezHandle(FormName$,IDNum&,1)
    IF hCtrl&<>0 THEN
        IF Columns&=-1 THEN  ' check header for # of columns
            hHeader&=SendMessage(hCtrl&, %LVM_GETHEADER,0,0)
            IF hHeader&<>0 THEN
                Columns&=SendMessage(hHeader&, %HDM_GETITEMCOUNT,0,0)
            END IF
        END IF
        IF Columns&<1 THEN Columns&=1
        IF Columns&>999 THEN Columns&=999
        DIM CI&(1 TO Columns&)
        IF SendMessage(hCtrl&, %LVM_GETCOLUMNORDERARRAY, Columns&, BYVAL VARPTR(CI&(1))) THEN
            FOR I&=1 TO Columns&
                IF I&=1 THEN
                    RV$=RIGHT$("   "+STR$(CI&(I&)),3)
                ELSE
                    RV$=RV$+App_EZ_DChar$+RIGHT$("   "+STR$(CI&(I&)),3)
                END IF
            NEXT I&
        END IF
    END IF
END IF
FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------

SUB PBV_SetLVStyle(BYVAL FormName$, BYVAL IDNum&, BYVAL LVStyle$)
    LOCAL hCtrl AS LONG, EXS&, S&
    S&=0
    hCtrl=ezHandle(FormName$,IDNum&,1)
      IF hCtrl<>0 THEN
          IF INSTR(LVStyle$, "#") THEN
              S&=S& OR %LVS_EX_GRIDLINES
          END IF
          IF INSTR(LVStyle$, "P") THEN
              S&=S& OR %LVS_EX_SUBITEMIMAGES
          END IF
          IF INSTR(LVStyle$, "-") THEN
              S&=S& OR %LVS_EX_FULLROWSELECT
          ELSE
              S&=S& OR %LVS_EX_MULTIWORKAREAS
          END IF
          IF INSTR(LVStyle$, "X") THEN
              S&=S& OR %LVS_EX_CHECKBOXES
          END IF
          IF INSTR(LVStyle$, "?") THEN
              S&=S& OR %LVS_EX_HEADERDRAGDROP
          END IF
          IF INSTR(LVStyle$, "U") THEN
              S&=S& OR %LVS_EX_LABELTIP
          END IF
          IF S&<>0 THEN
              EXS& = SendMessage(hCtrl, %LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0)
              EXS& = EXS& OR S&
              SendMessage hCtrl, %LVM_SETEXTENDEDLISTVIEWSTYLE, 0, BYVAL EXS&
          END IF
      END IF
END SUB

'------------------------------------------------------------------------------

'------------------------------------------------------------------------------

' **********************  end PBMAIN.INC block  ***************************************








' *************************************************************************************
'                                   Program Control
' *************************************************************************************

FUNCTION ProcessStartup() AS LONG
    LOCAL D$
    LOCAL X&
#IF %SPLASH
    ' temporary Splash screen
    #IF %MakeDemo
       D$="{i}EZGUI 2.0 Visual Designer Demo||Copyright Christopher R. Boss 1999||This copy of the EZGUI runtime can not be used with any other application !"
       X&=PBVMsgBox("", D$, "EZGUI Library 1.0",0)
    #ELSE
       D$="{i}EZGUI Beta 2.0||Copyright Christopher R. Boss 2000||Not for Distribution !"
       X&=PBVMsgBox("", D$, "EZGUI Library 1.0",0)
    #ENDIF
#ENDIF

    CALL DWORD PBVAddress(1) USING ProcessStartupX(%EZ_Version)
    FUNCTION=ZFormAnyLeft()
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ProcessWinClose(BYVAL FormName$, BYVAL hWnd AS LONG) AS LONG
LOCAL RetVal&, X&, hWndP AS LONG
RetVal&=-1        ' Close window if no action
LOCAL Cancel&

Cancel&=0
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, 0, 0, 0, Cancel&)
IF Cancel& THEN
   RetVal&=0
ELSE
   X&=ZFormNumH(hWnd)
   IF AppForms(X&).FModal THEN
      hWndP=GetParent(hWnd)
      IF hWndP<>0 THEN
         EnableWindow hWndP, 1
      END IF
   END IF
END IF
FUNCTION=RetVal&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_CharX(BYVAL CV&, BYVAL OFlag&) EXPORT10 AS SINGLE
LOCAL RV!
' OFlag& - compensates by 1 pixels when calculating a width
IF OFlag&<>0 THEN OFlag&=1
RV!=ZLOWRD(CV&)+OFlag&
FUNCTION=RV!/App_EZ_CharW
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_CharY(BYVAL CV&, BYVAL OFlag&) EXPORT10 AS SINGLE
LOCAL RV!
' OFlag& - compensates by 1 pixels when calculating a width
IF OFlag&<>0 THEN OFlag&=1
RV!=ZHIWRD(CV&)+OFlag&
FUNCTION=RV!/App_EZ_CharH
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_Row(BYVAL CVal&) EXPORT10 AS LONG
FUNCTION=LOWRD(CVal&)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_Col(BYVAL CVal&) EXPORT10 AS LONG
FUNCTION=HIWRD(CVal&)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ProcessDMessage(BYVAL hWnd AS LONG, BYVAL V&, BYVAL XY&) AS LONG
     LOCAL RetVal&, FormName$
     RetVal&=0
     LOCAL Cancel&
     FormName$=ZFormNameH(hWnd)
     Cancel&=0
     CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, 0, V&, XY&, Cancel&)
     IF Cancel& THEN
          IF Cancel&=2 THEN
               RetVal&=2
          ELSE
               RetVal&=1
          END IF
     END IF
     FUNCTION=RetVal&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ProcessWinInitialize(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL RFlag&) AS LONG
LOCAL N&, hMenu&, hRgn&, hBmp&, Tmp&, RZFlag&, X&
N&=ZFormNum(FormName$)
hMenu&=AppForms(N&).FMenuHandle
IF hMenu&<>0 THEN
    IF AppForms(N&).FBitmap=0 THEN
        IF GetMyWindowLong(hWnd, 2)<>5 THEN 'not mdi child
            SetMenu hWnd, hMenu&
        END IF
        PBVTrackMenu hMenu&, 0,hWnd, 0
        EZ_SaveMenu FormName$, 0, hMenu&
    ELSE
        AppForms(N&).FMenuHandle=0
    END IF
    App_EZ_CurMenu&=0
END IF
RZFlag&=App_ControlResizeState&
App_ControlResizeState&=0

' defaults for atoms which store size and move limiters are set to zero
PBVPosWindow FormName$, 3, AppForms(N&).FStartUpPosition, 1     ' Resize to correct size and put in correct position

SetSizePass hWnd, 1      ' now allow size event
SetMovePass hWnd, 1      ' now allow move event

IF RFlag& THEN
    IF RZFlag&<>0 THEN
        zAddResizeInfo zFormNumH(GetParent(hWnd)), hWnd, RZFlag&
    END IF
END IF

IF AppForms(N&).FBitmap<>0 THEN
    MakeRgnBitmap hWnd, 0,0, AppForms(N&).FBitmap, AppForms(N&).FTColor, hRgn&, hBmp&, 1
    AppForms(N&).FBitmap=hBmp&
    AppForms(N&).FRegion=hRgn&
    SetWindowRgn hWnd, hRgn&, %NULL
END IF
EZ_SetForm FormName$ , 0
IF FormName$="{ABORTDLG}" THEN
   EZ_Color-1,-1
   EZ_SetLayer 0
   EZ_UseFont -1
   EZ_UseFont 4
   EZ_Button 2, 10, 3.5, 10, 1.5, "Cancel", "T"
END IF


CALL DWORD PBVAddress(3) USING EZ_DesignWindowX(FormName$)


X&=ProcessEZCommands(hWnd, %EZ_Loaded, 0, hWnd)


FUNCTION=0     ' always return a 0 since WinProc will finish process
END FUNCTION


'------------------------------------------------------------------------------

FUNCTION ProcessEZCommands(BYVAL hWnd AS LONG, BYVAL CMsg&, BYVAL hCtrl AS LONG, BYVAL CVal&) AS LONG
LOCAL FormName$, CtrlNum&, Cancel&
Cancel&=0
FormName$=ZFormNameH(hWnd)
' -----------------------
IF LEN(FormName$)=0 THEN
    FormName$=ZFormNameH(ZGetParentForm(hWnd))
    ' later add conversion of any coordinate messages (ie. %EZ_Size)
END IF
' -----------------------
IF hCtrl<>0 THEN
    CtrlNum&=GetDlgCtrlID(hCtrl)
    SELECT CASE AS LONG CMsg&
        CASE %EZ_Loaded, %EZ_Size, %EZ_RButtonUp
            zForwardCustomEvent hCtrl,FormName$, CtrlNum&, CMsg&, CVal&, Cancel&,1
        CASE ELSE
            CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
    END SELECT
ELSE
    CtrlNum&=%EZ_Window
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
END IF
FUNCTION=Cancel&
END FUNCTION

'------------------------------------------------------------------------------

'SUB ZActivateNewMDI(BYVAL hParent AS LONG)
'LOCAL hWnd AS LONG
'hWnd=SendMessage(GetParent(hParent), %WM_MDIGETACTIVE, 0, %NULL)
'IF hWnd<>hParent THEN
'    SendMessage GetParent(hParent), %WM_MDIACTIVATE, hParent,0
'    SetWindowPos hWnd, %HWND_BOTTOM,0,0,0,0,%SWP_NOMOVE OR %SWP_NOSIZE OR %SWP_NOACTIVATE
'END IF
'END SUB

'------------------------------------------------------------------------------


'------------------------------------------------------------------------------

'SUB ZSetDefButton(BYVAL hCtrl AS LONG)
'LOCAL Style&, Tmp&
'IF ZGetClass(hCtrl)="BUTTON" THEN
'    Style&=GetWindowLong(hCtrl, %GWL_STYLE)
'    Tmp&=Style& AND 15
'    IF Tmp&=%BS_PUSHBUTTON THEN
'        Style&=Style& OR %BS_DEFPUSHBUTTON
'        PostMessage hCtrl, %BM_SETSTYLE, Style&, %TRUE
'    END IF
'END IF
'END SUB

'------------------------------------------------------------------------------
'GLOBAL App_MenuSelName$
'GLOBAL App_MenuSelID&
'GLOBAL App_MenuSelhMenu&

'SUB EZ_PushMenuInfo(BYVAL MenuName$, BYVAL MenuID&, BYVAL MI&) EXPORT10
'    App_MenuSelName$=MenuName$
'    App_MenuSelID&=MenuID&
'    App_MenuSelhMenu&=MI&
'END SUB

'SUB EZ_PopMenuInfo(MenuName$, MenuID&, MI&) EXPORT10
'    MenuName$=App_MenuSelName$
'    MenuID&=App_MenuSelID&
'    MI&=App_MenuSelhMenu&
'END SUB

FUNCTION GetSelListBoxVal(BYVAL hCtrl&) AS LONG
     LOCAL WS&, RV& ' , XY AS POINTAPI, XYP AS LONG
     WS&=GetWindowLong(hCtrl&, %GWL_STYLE)
     WS&=WS& AND %LBS_MULTIPLESEL
     IF WS&=%LBS_MULTIPLESEL THEN
'          GetCursorPos XY
'          ScreenToClient hCtrl&, XY
'          XYP=MAKLNG(XY.x, XY.y)
'          RV&=SendMessage(hCtrl&, %LB_ITEMFROMPOINT, 0,XYP)
'          IF HIWRD(RV&)=0 THEN
'               RV&=LOWRD(RV&)
'          ELSE
'               RV&=-1    ' outside client area
'          END IF
          RV&=SendMessage(hCtrl&, %LB_GETCARETINDEX, 0,0)
     ELSE
          RV&=SendMessage(hCtrl&, %LB_GETCURSEL, 0,0)
     END IF
     FUNCTION=RV&
END FUNCTION

%STN_CUSTOM                                 = 87

FUNCTION ProcessWinCommands(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL NCode&, BYVAL CtrlNum&, BYVAL hCtrl AS LONG) AS LONG
' hWnd = Window/Dialog handle
' NCode& = Notify code for control
' CtrlNum& = ID number for control
' hCtrl = Win Handle for Control or Null value
' ******* Most Common Notify Constants for NCode& ********
' >>> Button Codes
' %BN_CLICKED           = 0
' %BN_DBLCLK            = 5
' %BN_SETFOCUS          = 6
' %BN_KILLFOCUS         = 7
' >>> Edit Codes
' %EN_SETFOCUS          = &H100
' %EN_KILLFOCUS         = &H200
' %EN_CHANGE            = &H300
' >>> Static Codes
' %STN_CLICKED          = 0
' %STN_DBLCLK           = 1
' >>> Combobox Codes    .....   Listbox Codes
' %CBN_SELCHANGE        = 1 =   %LBN_SELCHANGE
' %CBN_DBLCLK           = 2 =   %LBN_DBLCLK
' %CBN_SETFOCUS         = 3
' %CBN_KILLFOCUS        = 4
' %CBN_EDITCHANGE       = 5
' %CBN_EDITUPDATE       = 6
'                         4 =  %LBN_SETFOCUS
'                         5 =  %LBN_KILLFOCUS
LOCAL RetVal&
LOCAL CMsg&, CVal&, Cancel&
LOCAL XMsg&, wParam&, lParam&, UFlag&
Cancel&=0
CMsg&=0
RetVal&=0       '   This must be 0 to let MDI work correctly
XMsg&=0         '   extra message to be sent after event
UFlag&=0
IF hCtrl&=0 THEN    ' not a control
    IF NCode&=1 THEN    ' accelerator
        CMsg&=1   ' click message
        CVal&=NCode&
    ELSE
        CMsg&=1   ' normal click message for menu as in EZGUI 3.0
        CVal&=-1
        Cancel&=0
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
        FUNCTION=RetVal&
        EXIT FUNCTION
    END IF
ELSE
  SELECT CASE AS ZGetClass(hCtrl)
    CASE "BUTTON"
        CVal&=0
        IF NCode&=%BN_CLICKED THEN CMsg&=1
        IF Ncode&=%BN_DBLCLK THEN CMsg&=2
        IF NCode&=%BN_SETFOCUS THEN CMsg&=3
        IF NCode&=%BN_KILLFOCUS THEN CMsg&=4
    CASE "EDIT", UCASE$(App_MaskEditClass$)
        CVal&=0
        IF NCode&=%EN_SETFOCUS THEN CMsg&=3
        IF NCode&=%EN_KILLFOCUS THEN CMsg&=4
        IF NCode&=%EN_CHANGE THEN CMsg&=6
        IF NCode&=%EN_UPDATE THEN
             ' InvalidateRect hCtrl, BYVAL %NULL, 1
        END IF
    CASE "RICHEDIT","RICHEDIT20A","RICHEDIT50W"
        CVal&=0
        IF NCode&=%EN_SETFOCUS THEN CMsg&=3
        IF NCode&=%EN_KILLFOCUS THEN CMsg&=4
        IF NCode&=%EN_CHANGE THEN CMsg&=6
    CASE "STATIC"
        CVal&=0
        IF NCode&=%STN_CLICKED THEN CMsg&=1
        IF Ncode&=%STN_DBLCLK THEN CMsg&=2
        IF NCode&=%STN_DISABLE THEN CMsg&=5
    CASE "COMBOBOX", "COMBOBOXEX32"
        CVal&=0
        IF Ncode&=%CBN_DBLCLK THEN
            CMsg&=2
            CVal&=SendMessage(hCtrl, %CB_GETCURSEL, 0,0)
        END IF
        IF NCode&=%CBN_SETFOCUS THEN CMsg&=3
        IF NCode&=%CBN_KILLFOCUS THEN CMsg&=4
        IF NCode&=%CBN_SELCHANGE THEN
            CMsg&=6
            CVal&=SendMessage(hCtrl, %CB_GETCURSEL, 0,0)
        END IF
        IF NCode&=%CBN_EDITCHANGE THEN
            CMsg&=6
            CVal&=-2
        END IF
        IF NCode&=%CBN_EDITUPDATE THEN
            CMsg&=6
            CVal&=-1
        END IF
        IF NCode&=%CBN_DROPDOWN THEN
             CMsg&=%EZ_CBDropDown
             CVal&=0
        END IF
        IF NCode&=%CBN_CLOSEUP THEN
             CMsg&=%EZ_CBDropUp
             CVal&=0
        END IF
    CASE "LISTBOX"
        CVal&=0
        IF Ncode&=%LBN_DBLCLK THEN
            CMsg&=2
            CVal&=GetSelListBoxVal(hCtrl)
        END IF
        IF NCode&=%LBN_SETFOCUS THEN CMsg&=3
        IF NCode&=%LBN_KILLFOCUS THEN CMsg&=4
        IF NCode&=%LBN_SELCHANGE THEN
            CMsg&=6
            CVal&=GetSelListBoxVal(hCtrl)
        END IF
    CASE $FLISTCLASS
        LOCAL TMode&
        TMode&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtomT1&,0))
        IF HIWRD(TMode&)=0 THEN
             CVal&=0
             IF Ncode&=%LBN_DBLCLK THEN
                  CMsg&=2
                  CVal&=GetSelListBoxVal(hCtrl)
                  XMsg&=%FLB_DCLICKON
                  wParam&=0
                  lParam&=CVal&
                  UFlag&=1
             END IF
             IF NCode&=%LBN_SELCHANGE THEN
                 CMsg&=6
                 CVal&=GetSelListBoxVal(hCtrl)
             END IF
        ELSE
             CVal&=0
             IF Ncode&=%LBN_DBLCLK THEN
'                  CMsg&=2
'                  CVal&=GetSelListBoxVal(hCtrl)
'                  XMsg&=%FLB_DCLICKON
'                  wParam&=0
'                  lParam&=CVal&
'                  UFlag&=1
             END IF
             IF NCode&=%LBN_SELCHANGE THEN   ' treat single click like double click
                 CMsg&=6
                 CVal&=GetSelListBoxVal(hCtrl)
                 XMsg&=%FLB_DCLICKON
                 wParam&=0
                 lParam&=CVal&
                 UFlag&=1
             END IF
        END IF
        IF NCode&=%LBN_SETFOCUS THEN CMsg&=3
        IF NCode&=%LBN_KILLFOCUS THEN CMsg&=4
    CASE $PLISTCLASS
        CVal&=0
        IF Ncode&=%LBN_DBLCLK THEN
            CMsg&=2
            CVal&=GetSelListBoxVal(hCtrl)
        END IF
        IF NCode&=%LBN_SETFOCUS THEN CMsg&=3
        IF NCode&=%LBN_KILLFOCUS THEN CMsg&=4
        IF NCode&=%LBN_SELCHANGE THEN
            CMsg&=6
            CVal&=GetSelListBoxVal(hCtrl)
            XMsg&=%PLB_SETCURSEL
            wParam&=0
            lParam&=CVal&
        END IF
    CASE "TOOLBARWINDOW32"
        CVal&=0
        IF NCode&=0 THEN CMsg&=1
        IF NCode&=%TBN_TOOLBARCHANGE THEN CMsg&=6
'        if CtrlNum&=GetWindowLong(hCtrl, %GWL_ID) then
'        end if
        IF SendMessage(hCtrl, %TB_COMMANDTOINDEX,1,0)>=0 THEN
            ' ID 1 exists so it is a toolbar strip
            CVal&=CtrlNum&  ' pass actual button ID in CVal& . ID's are from 1 up
            CtrlNum&=GetWindowLong(hCtrl, %GWL_ID)  ' get toolbars actual ID
        END IF
    CASE $TurtleClassName, $CanvasClassName, $ShapeClassName
        CVal&=0
        IF NCode&=9999 THEN CMsg&=-1      ' Error Event
        IF NCode&=%STN_CLICKED THEN CMsg&=1
        IF Ncode&=%STN_DBLCLK THEN CMsg&=2
        IF NCode&=%WM_SETFOCUS THEN CMsg&=%EZ_Focus
        IF NCode&=%WM_KILLFOCUS THEN CMsg&=%EZ_NoFocus
        IF NCode&=%STN_CUSTOM THEN CMsg&=%EZ_AfterSize   ' only canvas control currently generates this
    CASE ""    ' Menu or Keyboard Accelerator
        CMsg&=1   ' click message
        CVal&=NCode&
    CASE ELSE
  END SELECT
END IF

IF CMsg&=0 THEN
    CMsg&=%EZ_UnKnown   ' or %EZ_Command
    CVal&=NCode&
    IF App_AllowCommand&=0 THEN     ' %EZ_Command events not processed
        FUNCTION=0
        EXIT FUNCTION
    END IF
END IF
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
IF XMsg&<>0 THEN
    IF Cancel&=0 THEN
        SendMessage hCtrl, XMsg&, wParam&, lParam&
        IF UFlag& THEN
            CMsg&=%EZ_Updated
            CVal&=0
            CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
        END IF
    END IF
END IF
FUNCTION=RetVal&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ProcessWinScrollChange(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL CtrlNum&, BYVAL hScroll AS LONG, BYVAL AP&) AS LONG
' AP&= new position
LOCAL CMsg&, CVal&, Cancel&

Cancel&=0
CMsg&=6
CVal&=AP&
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
FUNCTION=-1    ' Don't let Windows process this
END FUNCTION


'------------------------------------------------------------------------------

FUNCTION ProcessWinColors(BYVAL hWnd AS LONG, BYVAL CtrlNum&, BYVAL hCtrl AS LONG, FGC&, BGC&, BRH&, DLGFlag&) AS LONG
LOCAL AFNum&, CFlag&
REGISTER I& , CTNum&
' FGC&-foregrd color, BGC&-backgrd color, BRH&-Brush Handle
' if CtrlNum&=-1 then it is the window itself (only for DialogBoxes)
CFlag&=0    ' set to 1 to change colors

IF CtrlNum&<>0 THEN
'    AFNum&=ZFormNum(ZFormNameH(hWnd))
'    IF CtrlNum&=-1 THEN
'        CTNum&=AFNum&
'    ELSE
'        CTNum&=(CtrlNum&*1000)+AFNum&
'    END IF
'    ' set colors and font
'    ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =CTNum& , TO I&


    IF DLGFlag&<>0 THEN
        AFNum&=ZFormNumH(hWnd)
        CTNum&=AFNum&
        ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =CTNum& , TO I&
    ELSE
        IF IsWindowVisible(hCtrl) THEN
            I&=ZGetControlIndex(hCtrl)
        ELSE    ' controls like Canvas request colors before handle stored in array and before visible
            AFNum&=ZFormNumH(hWnd)
            CTNum&=(CtrlNum&*1000)+AFNum&
            ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =CTNum& , TO I&
        END IF
    END IF

    IF I&>0 THEN
        IF (AppControlBG(I&)<>-1) OR (AppControlFG(I&)<>-1) THEN
            IF AppControlFG(I&)=-1 THEN
                FGC&=0
            ELSE
                FGC&=AppColor(AppControlFG(I&))
            END IF
            IF AppControlBG(I&)=-1 THEN
                BGC&=RGB(255,255,255)
                BRH&=GetStockObject( %WHITE_BRUSH )
            ELSEIF (AppControlBG(I&)>=%APP_LowBrushN) AND (AppControlBG(I&)<-1) THEN
                BGC&=-1     ' use transparent background
                ' BGC&=RGB(255,255,255)
                BRH&=AppBrush(AppControlBG(I&))
            ELSE
                BGC&=AppColor(AppControlBG(I&))
                BRH&=AppBrush(AppControlBG(I&))
            END IF
            CFlag&=1
        END IF
    END IF

END IF

FUNCTION=CFlag&
END FUNCTION

'------------------------------------------------------------------------------


SUB EZ_ScrollForm(BYVAL FormName$, BYVAL XOffset!, BYVAL YOffset!, BYVAL SProp$) EXPORT10
    LOCAL hWnd&, X&, Y&, RV&, R AS RECT, BGFlag&
    hWnd&=ezHandle(FormName$,0,1)
    IF hWnd&<>0 THEN
        IF FormName$="{ME}" THEN FormName$=EZ_GetME
        SProp$=UCASE$(SProp$)
        IF INSTR(SProp$,"BG") THEN BGFlag&=1 ELSE BGFlag&=0
        X&=EZ_X(XOffset!)
        Y&=EZ_Y(YOffset!)
        GetClientRect hWnd&, R
        IF BGFlag&=0 THEN EZ_SetRedrawState FormName$,0,0
        RV&=ScrollWindow(hWnd&, X&,Y&, BYVAL %NULL, R)
        IF BGFlag&=0 THEN
            EZ_SetRedrawState FormName$,0,1
            EZ_RedrawForm FormName$
        END IF
    END IF
END SUB


' *************************************************************************************
'                              EZ to PBV conversion functions
' *************************************************************************************

'------------------------------------------------------------------------------

SUB EZ_ScrollTo(BYVAL FormName$, BYVAL IDNum&, BYVAL PosFlag&, BYVAL OffSet&) EXPORT10
    LOCAL hCtrl AS LONG, LN&, N&, VL&
    hCtrl=ezHandle(FormName$,IDNum&,1)
            IF hCtrl<>0 THEN
                SELECT CASE ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                         LN&=SendMessage(hCtrl, %LB_GETCOUNT, 0,0)-1
                         IF LN&>=0 THEN
                             N&=0
                             IF PosFlag&=1 THEN N&=LN&
                             N&=N&+OffSet&
                             IF N&<0 THEN N&=0
                             IF N&>LN& THEN N&=LN&
                             SendMessage hCtrl, %LB_SETTOPINDEX, N&, 0
                         END IF
                    CASE "EDIT", UCASE$(App_MaskEditClass$), UCASE$(App_RichEditClass$)
                         LN&=SendMessage(hCtrl, %EM_GETLINECOUNT,0,0)-1
                         IF LN&>=0 THEN
                             N&=0
                             IF PosFlag&=1 THEN N&=LN&
                             N&=N&+OffSet&
                             IF N&<0 THEN N&=0
                             IF N&>LN& THEN N&=LN&
                             VL&=SendMessage(hCtrl, %EM_GETFIRSTVISIBLELINE,0,0)
                             N&=N&-VL&
                             SendMessage hCtrl, %EM_LINESCROLL,0, N&
                         END IF
                    CASE ELSE
                END SELECT
            END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AddItems(BYVAL FormName$, BYVAL IDNum&, BYVAL LText$) EXPORT10
    LOCAL P&, CText$, P2&, RFlag&, SFlag&, TB&
    LOCAL CM&, hCtrl AS LONG
    hCtrl=ezHandle(FormName$,IDNum&,1)
            IF hCtrl<>0 THEN
               SFlag&=%TRUE
               SELECT CASE AS CONST$ ZGetClass(hCtrl)
                    CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                        CM&=%LB_ADDSTRING
                        IF IsStyleSet(hCtrl, %LBS_OWNERDRAWFIXED) OR IsStyleSet(hCtrl, %LBS_OWNERDRAWVARIABLE) THEN
                           IF IsStyleSet(hCtrl, %LBS_HASSTRINGS)=0 THEN
                               SFlag&=0
                           END IF
                        END IF
                    CASE "COMBOBOX"
                        CM&=%CB_ADDSTRING
                        IF IsStyleSet(hCtrl, %CBS_OWNERDRAWFIXED) OR IsStyleSet(hCtrl, %CBS_OWNERDRAWVARIABLE) THEN
                           IF IsStyleSet(hCtrl, %CBS_HASSTRINGS)=0 THEN
                               SFlag&=0
                           END IF
                        END IF
                    CASE "SYSTABCONTROL32"
                        TB&=SendMessage(hCtrl, %TCM_GETITEMCOUNT,0,0)   ' returns >0
                        ZAddTabItems hCtrl, LText$, TB&
                        EXIT SUB
                    CASE ELSE
                        EXIT SUB
               END SELECT
               IF INSTR(LText$,App_EZ_DChar$)=0 THEN
                  IF SFlag& THEN
                      SendMessage hCtrl, CM&, 0, STRPTR(LText$)
                  ELSE
                      SendMessage hCtrl, CM&, 0, VAL(LText$)
                  END IF
               ELSE
                  IF LText$<>"" THEN
                     IF RIGHT$(LText$,1)<>App_EZ_DChar$ THEN LText$=LText$+App_EZ_DChar$
                  END IF
                  IF IsWindowVisible(hCtrl) THEN
                      SendMessage hCtrl, %WM_SETREDRAW, %FALSE, 0
                      RFlag&=1
                  END IF
                  P&=1
                  DO
                     P2&=INSTR(P&, LText$, App_EZ_DChar$)
                     IF P2&=0 THEN EXIT DO
                     CText$=LEFT$(LText$, P2&-1)
                     LText$=MID$(LText$, P2&+1)
                     IF SFlag& THEN
                         SendMessage hCtrl, CM&, 0, STRPTR(CText$)
                     ELSE
                         SendMessage hCtrl, CM&, 0, VAL(CText$)
                     END IF
                  LOOP
                  IF RFlag& THEN SendMessage hCtrl, %WM_SETREDRAW, %TRUE, 0
                  InvalidateRect hCtrl, BYVAL %NULL, 0
               END IF
            END IF

END SUB

'------------------------------------------------------------------------------

SUB EZ_DChar (BYVAL C$) EXPORT10
IF C$="" THEN C$="|"
IF LEN(C$)>1 THEN C$=LEFT$(C$,1)
App_EZ_DChar$=C$
END SUB

'------------------------------------------------------------------------------

FUNCTION ZParseMask (BYVAL D$) AS STRING
LOCAL EMask$, P1&, P2&
P1&=INSTR(D$, "{")
P2&=INSTR(D$, "}")
EMask$=""
IF P1&<>0 AND P2&>P1& THEN
    EMask$=MID$(D$, P1&+1, (P2&-P1&)-1)
    D$=LEFT$(D$,P1&-1)+MID$(D$, P2&+1)
    EMask$=LEFT$(EMask$,255)
END IF
'IF EMask$=STRING$(LEN(EMask$),"X") THEN
'    D$=D$+"["+LTRIM$(STR$(LEN(EMask$)))+"]"
'    EMask$=""
'END IF
App_EZ_CurMask$=EMask$
IF EMask$="" THEN
    P1&=INSTR(D$, "[")
    P2&=INSTR(D$, "]")
    EMask$=""
    IF P1&<>0 AND P2&>P1& THEN
        EMask$=MID$(D$, P1&+1, (P2&-P1&)-1)
        D$=LEFT$(D$,P1&-1)+MID$(D$, P2&+1)
    END IF
    P1&=VAL(EMask$)
    IF P1&<1 THEN P1&=0
    IF P1&>%APP_64KB THEN P1&=%APP_64KB
    App_EZ_CurTextLen&=P1&
END IF
FUNCTION=D$
END FUNCTION

'------------------------------------------------------------------------------


FUNCTION ZParse(D1$, D2$) AS STRING
LOCAL P&, D$, A$
D$=""
FOR P&=1 TO LEN(D1$)
    A$=MID$(D1$,P&,1)
    IF INSTR(D2$,A$) THEN D$=D$+A$
NEXT P&
FUNCTION=D$
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB ZHitTest(BYVAL hCTrl AS LONG, BYVAL lParam AS LONG, RV&, RV2&, OKFlag&, DHFlag&)
LOCAL CRect AS Rect, X&, Y&, P1&, P2&, DFX&, DFY&
X&=LOWRD(lParam)
Y&=HIWRD(lParam)
GetWindowRect hCtrl, CRect
P1&=0
P2&=0
' -1 0 1
'  * * * -1
'  *   *  0
'  * * *  1

IF ZGetClass(hCtrl)=$DragHandleControl THEN
    DHFlag&=1
    DFX&=SendMessage(hCtrl, %EZDC_GETSIZE, 0,0)
    IF DFX&<1 THEN DFX&=1
    IF DFX&>32 THEN DFX&=32
ELSE
    DHFlag&=0
    DFX&=8      ' was 4 in EZGUI 1.0
    IF App_EZ_SubClassStyle&=3 THEN OKFlag&=0   ' deactivates other controls from Dragging
END IF
DFY&=DFX&
IF (CRect.nRight-CRect.nLeft) < 24 THEN DFX&=2
IF X& < (CRect.nLeft + DFX&) THEN P1&=-1
IF X& >= (CRect.nRight - DFX&) THEN P1&=1
IF (CRect.nBottom - CRect.nTop) < 24 THEN DFY&=2
IF Y& < (CRect.nTop + DFY&) THEN P2&=-1
IF Y& >= (CRect.nBottom - DFY&) THEN P2&=1
RV&=%HTCAPTION
RV2&=%EZ_Center
IF P1&=-1 THEN
    SELECT CASE AS LONG P2&
        CASE -1
            RV&=%HTTOPLEFT
            RV2&=%EZ_Top OR %EZ_Left
        CASE 0
            RV&=%HTLEFT
            RV2&=%EZ_Left
        CASE 1
            RV&=%HTBOTTOMLEFT
            RV2&=%EZ_Bottom OR %EZ_Left
        CASE ELSE
    END SELECT
ELSEIF P1&=1 THEN
    SELECT CASE AS LONG P2&
        CASE -1
            RV&=%HTTOPRIGHT
            RV2&=%EZ_Top OR %EZ_Right
        CASE 0
            RV&=%HTRIGHT
            RV2&=%EZ_Right
        CASE 1
            RV&=%HTBOTTOMRIGHT
            RV2&=%EZ_Bottom OR %EZ_Right
        CASE ELSE
    END SELECT
ELSE
    SELECT CASE AS LONG P2&
        CASE -1
            RV&=%HTTOP
            RV2&=%EZ_Top
        CASE 0
            RV&=%HTCAPTION
            RV2&=%EZ_Center
        CASE 1
            RV&=%HTBOTTOM
            RV2&=%EZ_Bottom
        CASE ELSE
    END SELECT
END IF
IF RV&=%HTCAPTION THEN RV2&=%EZ_Center
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION ZGetControlIndex(BYVAL hCtrl AS LONG) AS LONG
    LOCAL I&
    I&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtom1&,0))
    IF I&=0 THEN
        ARRAY SCAN AppControlHandle(1) FOR App_EZ_TopCtrl&, = hCtrl , TO I&
    END IF
    FUNCTION=I&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZWM_ERASE(BYVAL I&, BYVAL hCtrl AS LONG, BYVAL wParam AS LONG) AS LONG
    LOCAL EZP AS EZPAINT
    LOCAL CRect AS Rect, Cancel&
    EZP.hDC=wParam
    GetClientRect hCtrl, CRect
    EZP.W=CRect.nRight-CRect.nLeft
    EZP.H=CRect.nBottom-CRect.nTop
    Cancel&=0
    zForwardCustomEvent hCtrl,AppControlForm$(I&), GetDlgCtrlID(hCtrl) ,%EZ_PaintBG, VARPTR(EZP), Cancel&, 0
    FUNCTION=Cancel&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZWM_DESTROY (BYVAL I&, BYVAL OldAddress&, BYVAL hCtrl AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG, BYVAL FNowFlag&) AS LONG
LOCAL Cancel&
IF FNowFlag& THEN
    zForwardCustomEvent hCtrl, AppControlForm$(I&), GetDlgCtrlID(hCtrl) ,%EZ_FreeNow, %NULL, Cancel&,1
END IF
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom1&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom2&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom3&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom5&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom6&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtom7&,0)
RemoveProp hCtrl, BYVAL MAKLNG(AppControlGAtomT1&,0)
IF I&>0 THEN
    SetWindowLong hCtrl&, %GWL_WNDPROC, BYVAL AppControlOrigAddress(I&)
    ZSetControlArray I&,0,0,0,0,0,0,"",0,0,0
END IF
FUNCTION=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
END FUNCTION

' -------------------------------------------------------------------------------------------

GLOBAL App_InsideSubclassFlag&
GLOBAL App_InsideSubClassPTR&

SUB EZ_GetSubClass(BYVAL CVal&, hCtrl&, Msg&, wParam&, lParam&) EXPORT10
    LOCAL A AS LONG PTR
    IF App_InsideSubclassFlag&<>0 AND CVal&=App_InsideSubClassPTR& THEN
        A           =   CVal&
        Msg&        =   @A[0]
        wParam&     =   @A[1]
        lParam&     =   @A[2]
        hCtrl&      =   @A[3]
    ELSE
        Msg&        =   0
        wParam&     =   0
        lParam&     =   0
        hCtrl&      =   0
    END IF
END SUB


FUNCTION ZCallWProc(BYVAL I&, BYVAL OldAddress&, BYVAL hCtrl AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG, BYVAL DefFlag&) AS LONG
LOCAL Cancel&, ID&
DIM MsgData(1 TO 7) AS LONG
MsgData(1)=Msg
MsgData(2)=wParam
MsgData(3)=lParam
MsgData(4)=hCtrl
MsgData(5)=OldAddress&
MsgData(6)=0        ' new flag for passed return value
MsgData(7)=0        ' new for return value

Cancel&=0
' AFNum&=AppControlTNum(I&) MOD 1000
ID&=AppControlTNum(I&)/1000
App_InsideSubclassFlag&=1
App_InsideSubClassPTR&=VARPTR(MsgData(1))

zForwardCustomEvent hCtrl, AppControlForm$(I&), ID& , %EZ_SubClass, VARPTR(MsgData(1)), Cancel&,0
' CALL DWORD PBVAddress(2) USING EZ_EventsX(AppControlForm$(I&), ID& , %EZ_SubClass, VARPTR(MsgData(1)), Cancel&)
App_InsideSubclassFlag&=0
App_InsideSubClassPTR&=0
IF MsgData(6)<>0 THEN Cancel&=1
IF Cancel&=0 THEN
    IF DefFlag&=0 THEN
        FUNCTION=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
    ELSE
        FUNCTION=DefWindowProc(hCtrl, Msg, wParam, lParam)
    END IF
ELSE
    IF MsgData(6)=0 THEN
        FUNCTION=Cancel&
    ELSE
        FUNCTION=MsgData(7)
    END IF
END IF
END FUNCTION


FUNCTION EZ_SubClassDefault(BYVAL CVal&, BYVAL DefFlag&) EXPORT10 AS LONG
    LOCAL A AS LONG PTR, hCtrl&, Msg&, wParam&, lParam&, OldAddress&, RV&   ' , RFlag&
    IF App_InsideSubclassFlag&<>0 AND CVal&=App_InsideSubClassPTR& THEN
        A           =   CVal&
        Msg&        =   @A[0]
        wParam&     =   @A[1]
        lParam&     =   @A[2]
        hCtrl&      =   @A[3]
        OldAddress& =   @A[4]
        IF DefFlag&=0 THEN
            RV&=CallWindowProc(BYVAL OldAddress&, hCtrl&, Msg&, wParam&, lParam&)
        ELSE
            RV&=DefWindowProc(hCtrl&, Msg&, wParam&, lParam&)
        END IF
        @A[5]=1
        @A[6]=RV&
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetSubClassRVal(BYVAL CVal&, BYVAL RV&) EXPORT10
    LOCAL A AS LONG PTR
    IF App_InsideSubclassFlag&<>0 AND CVal&=App_InsideSubClassPTR& THEN
        A           =   CVal&
        @A[5]=1
        @A[6]=RV&
    END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION ZKeyMove(BYVAL wParam AS LONG) AS LONG
SELECT CASE AS LONG wParam
    CASE %VK_RETURN, %VK_DOWN, %VK_UP, %VK_PGUP, %VK_PGDN, %VK_LEFT, %VK_RIGHT, %VK_HOME, %VK_END
        FUNCTION=1
    CASE ELSE
        FUNCTION=0
END SELECT
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB ZScrollBG(BYVAL I&, BYVAL hCtrl AS LONG, BYVAL EV&, BYVAL CVal&)
LOCAL ID&, Cancel&
Cancel&=0
ID&=AppControlTNum(I&)/1000
CALL DWORD PBVAddress(2) USING EZ_EventsX(AppControlForm$(I&), ID& , EV&, CVal&, Cancel&)
IF Cancel&<>0 THEN
    InvalidateRect hCtrl, BYVAL %NULL, %TRUE
END IF
END SUB

' -------------------------------------------------------------------------------------------

' TYPE MINMAXINFO
'    ptReserved AS POINTAPI
'    ptMaxSize AS POINTAPI
'    ptMaxPosition AS POINTAPI
'    ptMinTrackSize AS POINTAPI
'    ptMaxTrackSize AS POINTAPI
' END TYPE

SUB ZSetMinMax(BYVAL hCtrl&, BYVAL lParam&, BYVAL Mode&)
LOCAL MM AS MINMAXINFO PTR
LOCAL FormName$, Cancel&, CMsg&, CVal&, ID&
FormName$=ZFormNameH(GetParent(hCtrl&))
ID&=GetDlgCtrlID(hCtrl&)
Cancel&=0
CVal&=lParam&
CMsg&=%EZ_MinMax
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, ID&, CMsg&, CVal&, Cancel&)
IF Mode&=1 THEN
    IF App_EZ_SubClassMode&=1 THEN
        IF Cancel&=0 THEN
            MM=lParam&
            @MM.ptMinTrackSize.x=4
            @MM.ptMinTrackSize.y=4
        END IF
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_GetMinMax(BYVAL CVal&, MinW!, MinH!, MaxW!, MaxH!) EXPORT10
LOCAL MM AS MINMAXINFO PTR, MM2 AS MINMAXINFO
IF IsBadWritePtr(CVal&, SIZEOF(MM2))=0 THEN
    MM=CVal&
    MinW!=@MM.ptMinTrackSize.x/App_EZ_CharW
    MinH!=@MM.ptMinTrackSize.y/App_EZ_CharH
    MaxW!=@MM.ptMaxTrackSize.x/App_EZ_CharW
    MaxH!=@MM.ptMaxTrackSize.y/App_EZ_CharH
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_SetMinMax(BYVAL CVal&, BYVAL MinW!, BYVAL MinH!, BYVAL MaxW!, BYVAL MaxH!) EXPORT10
LOCAL MM AS MINMAXINFO PTR, MM2 AS MINMAXINFO
IF IsBadWritePtr(CVal&, SIZEOF(MM2))=0 THEN
    MM=CVal&
    @MM.ptMinTrackSize.x=INT(MinW!*App_EZ_CharW)
    @MM.ptMinTrackSize.y=INT(MinH!*App_EZ_CharH)
    @MM.ptMaxTrackSize.x=INT(MaxW!*App_EZ_CharW)
    @MM.ptMaxTrackSize.y=INT(MaxH!*App_EZ_CharH)
END IF
END SUB

' -------------------------------------------------------------------------------------------

TYPE EZCHARRANGE
  cpMin AS LONG
  cpMax AS LONG
  cpSetFlag AS LONG
END TYPE

SUB EZ_SetSelVal(BYVAL CVal&, BYVAL SMin&, BYVAL SMax&) EXPORT10
LOCAL EP AS EZCHARRANGE PTR
IF IsBadWritePtr(CVal&, 12)=0 THEN
    EP=CVal&
    @EP.cpMin=SMin&
    @EP.cpMax=SMax&
    @EP.cpSetFlag=1
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_GetSelVal(BYVAL CVal&, SMin&, SMax&) EXPORT10
LOCAL EP AS EZCHARRANGE PTR
IF IsBadReadPtr(CVal&, 12)=0 THEN
    EP=CVal&
    SMin&=@EP.cpMin
    SMax&=@EP.cpMax
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB ZSetEditFocusProc(BYVAL hCtrl AS LONG, BYVAL Mode&, BYVAL FocusFlag&)
LOCAL FormName$, CtrlNum&, Cancel&, CMsg&, CVal&
LOCAL EP AS EZCHARRANGE
Cancel&=0
FormName$=ZFormNameH(GetParent(hCtrl))
IF hCtrl<>0 THEN
    CtrlNum&=GetDlgCtrlID(hCtrl)
    IF FocusFlag& THEN
         CMsg&=%EZ_EditSetSel
    ELSE
         CMsg&=%EZ_SaveSetSel
    END IF
    IF Mode&=0 THEN
        SendMessage hCtrl, %EM_GETSEL, VARPTR(EP.cpMin), VARPTR(EP.cpMax)
    ELSE
        SendMessage hCtrl, %EM_EXGETSEL, 0, VARPTR(EP)
    END IF
    CVal&=VARPTR(EP)
    CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CtrlNum&, CMsg&, CVal&, Cancel&)
    IF FocusFlag& THEN
         IF EP.cpSetFlag<>0 THEN
             IF Mode&=0 THEN
                 SendMessage hCtrl, %EM_SETSEL, EP.cpMin, EP.cpMax
             ELSE
                 SendMessage hCtrl, %EM_EXSETSEL, 0, VARPTR(EP)
             END IF
         END IF
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB ZSetEditFocus(BYVAL hCtrl&, BYVAL FocusFlag&)
SELECT CASE ZGetClass(hCtrl&)
    CASE "EDIT", UCASE$(App_MaskEditClass$)
        ZSetEditFocusProc hCtrl&, 0, FocusFlag&
    CASE "RICHEDIT", "RICHEDIT20A","RICHEDIT50W"
        ZSetEditFocusProc hCtrl&, 1, FocusFlag&
    CASE ELSE
END SELECT
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION ZChildOwnerDraw(BYVAL hCtrl AS LONG, _
                         BYVAL Msg    AS LONG, _
                         BYVAL wParam AS LONG, _
                         BYVAL lParam AS LONG) AS LONG
LOCAL FormName$, ID&, Cancel&, CMsg&, CVal&, RV&
FormName$=ZFormNameH(GetParent(hCtrl))
ID&=GetDlgCtrlID(hCtrl&)
Cancel&=0
CMsg&=%EZ_SetODChildID
CVal&=0
RV&=0
CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, ID&, CMsg&, CVal&, Cancel&)
IF CVal&>0 THEN
    RV&=SendMessage(GetParent(hCtrl), Msg, CVal&, lParam)
END IF
FUNCTION=RV&
END FUNCTION

%EZ_PollStopSel     =   &H100000
%EZ_PollCustomCode  =   &H400000

FUNCTION ZGetDlgCodeMsg(BYVAL I&, BYVAL OldAddress&, BYVAL hCtrl&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&) AS LONG
    LOCAL Cancel&, RV&, CVal&
    RV&=ZCallWProc(I&, OldAddress&, hCtrl&, Msg&, wParam&, lParam&, 0)
    CVal&=RV&
    Cancel&=ProcessEZCommands(GetParent(hCtrl&), %EZ_PollCtrl, hCtrl&, CVal&)
    IF (Cancel& AND %EZ_PollCustomCode)=%EZ_PollCustomCode THEN
        RV&=Cancel& AND &HFFFFF
    ELSE
        IF (Cancel& AND %EZ_PollStopSel)=%EZ_PollStopSel THEN
            RV&=RV& AND (NOT(%DLGC_HASSETSEL))
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB zSetEZGUIUserData(BYVAL hCtrl&, BYVAL N&, BYVAL V&, BYVAL Mode&)
    LOCAL CData AS CDataInfo
    IF N&>=1 AND N&<=%MaxCDataItems THEN
        GetControlBlock hCtrl&, CData, Mode&
        CData.CC.CCVal(N&)=V&
        SetControlBlock hCtrl&, CData, Mode&


    ' test code
'        CData.CC.CCVal(N&)=0
'        GetControlBlock hCtrl&, CData, Mode&
'        if CData.CC.CCVal(N&)<>V& then msgbox "Error: value is"+str$(CData.CC.CCVal(N&)) else msgbox "OK: value is"+STR$(CData.CC.CCVal(N&))
    END IF
END SUB




%WM_APP =   &H08000
%WM_GetEZPrivateData    =   %WM_APP+100
%WM_SetEZPrivateData    =   %WM_APP+101
%WM_GetEZUserData       =   %WM_APP+102
%WM_SetEZUserData       =   %WM_APP+103
%WM_StartEZCtrlTimer    =   %WM_APP+104
%WM_StopEZCtrlTimer     =   %WM_APP+105
%WM_StartHotTrack       =   %WM_APP+106


FUNCTION zGetEZGUIUserData(BYVAL hCtrl&, BYVAL N&, BYVAL Mode&) AS LONG
    LOCAL CData AS CDataInfo
    IF N&>=1 AND N&<=%MaxCDataItems THEN
        GetControlBlock hCtrl&, CData, Mode&
        FUNCTION=CData.CC.CCVal(N&)
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

FUNCTION MyCtrlTimerProc(BYVAL hCtrl&, BYVAL Msg&, BYVAL TID&, BYVAL DT AS DWORD) AS LONG
    LOCAL PTimer&
    STATIC LastTime AS DWORD, LastTimeCT&
    IF Msg&=%WM_TIMER THEN
        IF TID&>0 THEN
            PTimer&=GetProp(hCtrl&, BYVAL MAKLNG(AppControlGAtom6&,0))
            IF PTimer&=1 THEN
                ProcessEZCommands GetParent(hCtrl&), %EZ_PTimer, hCtrl&, DT
            END IF
            IF TID&>1 THEN
                IF PTimer&>1 THEN
                    PTimer&=PTimer&-1
                ELSE
                    PTimer&=TID&
                END IF
                SetProp hCtrl&, BYVAL MAKLNG(AppControlGAtom6&,0), PTimer&
            END IF
        END IF
    END IF
END FUNCTION

%HotTimerID    =    98799773

FUNCTION MyCtrlHotTimerProc(BYVAL hCtrl&, BYVAL Msg&, BYVAL TID&, BYVAL DT AS DWORD) AS LONG
    LOCAL PTimer&, P AS POINTAPI, hWnd&, Hot&
    IF Msg&=%WM_TIMER THEN
          IF TID&=%HotTimerID THEN
               IF IsWindow(hCtrl&) THEN
                    GetCursorPos P
                    IF WindowFromPoint(P.x, P.y)<>hCtrl& THEN
                         Hot&=GetProp(hCtrl&,BYVAL MAKLNG(AppControlGAtom7&,0))
                         IF (Hot& AND 1)=1 THEN   ' turn of hot tracking flag since no longer over control
                              Hot&=Hot&-1
                              SetProp hCtrl&,BYVAL MAKLNG(AppControlGAtom7&,0), Hot&
                         END IF
                         KillTimer hCtrl&,%HotTimerID
                         hWnd&=GetParent(hCtrl&)
                         ProcessEZCommands  hWnd&, %EZ_HotMouseLeave, hCtrl&, 0
                         IF (Hot& AND 128&)=128& THEN  ' R Property
                              IF IsWindowVisible(hCtrl&) THEN
                                   InvalidateRect hCtrl&, BYVAL %NULL, 1
                              END IF
                         END IF
                    END IF
               END IF
          END IF
    END IF
END FUNCTION

FUNCTION EZ_GetPrivateTime() EXPORT10 AS LONG
    LOCAL CTM AS DWORD
    CTM=GetTickCount
    FUNCTION=CTM
END FUNCTION

SUB zStartStopPrivateTimer(FormName$, BYVAL IDNum&, BYVAL PTime&, BYVAL Mode&)
    LOCAL hCtrl&
    IF IDNum&=0 THEN EXIT SUB
    hCtrl&=ezHandle(FormName$, IDnum&,1)
    IF hCtrl&<>0 THEN
        IF Mode&=1 THEN
            SendMessage hCtrl&, %WM_StartEZCtrlTimer, PTime&,0
        ELSE
            SendMessage hCtrl&, %WM_StopEZCtrlTimer, 0,0
        END IF
    END IF
END SUB

SUB EZ_StartPrivateTimer(BYVAL FormName$, BYVAL IDNum&, BYVAL PTime&) EXPORT10
    zStartStopPrivateTimer FormName$, IDNum&, PTime&, 1
END SUB

SUB EZ_StopPrivateTimer(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    zStartStopPrivateTimer FormName$, IDNum&, 0, 0
END SUB

SUB zHotTrackControl(BYVAL hCtrl&, BYVAL HProp$)
     LOCAL MMFlag&, RFlag&
     IF hCtrl&<>0 THEN
          HProp$=UCASE$(HProp$)
          MMFlag&=0
          RFlag&=0
          IF INSTR(HProp$,"M") THEN MMFlag&=1
          IF INSTR(HProp$,"R") THEN RFlag&=1
          SendMessage hCtrl&, %WM_StartHotTrack, MMFlag&,RFlag&
      END IF
END SUB

SUB EZ_HotTrackControl(BYVAL FormName$, BYVAL IDNum&, BYVAL HProp$) EXPORT10
     IF IDNum&<>0 THEN
          zHotTrackControl ezHandle(FormName$,IDNum&,1), HProp$
     END IF
END SUB

FUNCTION zIsHot(BYVAL hCtrl&) AS LONG
     LOCAL Hot&, RV&
     RV&=0
     Hot&=GetProp(hCtrl&,BYVAL MAKLNG(AppControlGAtom7&,0))
     IF (Hot& AND 1024&) = 1024& THEN     ' hot tracking enabled
          IF (Hot& AND 1&)=1& THEN RV&=1
     END IF
     FUNCTION=RV&
END FUNCTION

FUNCTION EZ_IsHot(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
     LOCAL hCtrl&, RV&
     RV&=0
     IF IDNum&<>0 THEN
          hCtrl&=ezHandle(FormName$, IDNum&,1)
          IF hCtrl&<>0 THEN
               RV&=zIsHot(hCtrl&)
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION

SUB zEraseFrame(BYVAL hCtrl&, BYVAL hDC&, BYVAL Mode&)
     LOCAL BR&, hDlg&, OBR&, CR AS RECT
     BR&=0
     SaveDC hDC&
     hDlg&=GetParent(hCtrl&)
     IF hDlg&<>0 THEN
          IF Mode&=1 THEN
               BR&=SendMessage(hDlg&, %WM_CTLCOLORDLG, hDC&, hDlg&)
          ELSE
               BR&=SendMessage(hDlg&, %WM_CTLCOLORBTN, hDC&, hCtrl&)
          END IF
     END IF
     IF BR&=0 THEN BR&=GetSysColorBrush(%COLOR_3DFACE)
     OBR&=SelectObject(hDC&, BR&)
     GetClientRect hCtrl&, CR
     PatBlt hDC&, CR.nLeft, CR.nTop, CR.nRight-CR.nLeft, CR.nBottom-CR.nTop, %PATCOPY
     RestoreDC hDC&,-1
END SUB

' ###################### Begin EZGUI Touch Engine   #############################################



     %WM_GESTURE    =    &H0119&        ' gesture message
     %WM_GESTURENOTIFY = &H011A&        ' getsure notify message

     TYPE GestureInfo  QWORD FILL
          cbSize    AS DWORD       ' size of structure
          dwFlags   AS DWORD       ' state of gesture                  <align to a quad>
          dwID      AS DWORD       ' ID for getsure command
          hwndT     AS DWORD       ' window handle of target window    <align to a quad>
          pts_x     AS INTEGER     ' x position
          pts_y     AS INTEGER     ' y position
          dwInstID  AS DWORD       ' internal                          <align to a quad>
          dwSeqID   AS DWORD       ' internal
          dummy1    AS DWORD       ' for spacing                       <align to a quad>
          ullArg    AS QUAD        ' arguments for gestures likely in 4 values which are words    <align to a quad>
          cbExtra   AS DWORD       ' size of extra data
          dummy2    AS DWORD       ' for spacing                       <align to a quad>
     END TYPE

     %GF_BEGIN      =    &H01???
     %GF_INERTIA    =    &H02???
     %GF_END        =    &H04???


     %GID_BEGIN     =    &H01???
     %GID_END       =    &H02???
     %GID_ZOOM      =    &H03???
     %GID_PAN       =    &H04???
     %GID_ROTATE    =    &H05???
     %GID_TWOFINGERTAP   =    &H06???
     %GID_PRESSANDTAP    =    &H07???


     DECLARE FUNCTION GetGestureInfoX(BYVAL hGesture&, BYVAL lpGestureInfo AS DWORD) AS LONG
     DECLARE FUNCTION CloseGestureInfoHandleX(BYVAL hGesture&) AS LONG
     DECLARE FUNCTION SetGestureConfigX(BYVAL hWnd&, BYVAL dwR AS DWORD, BYVAL gCount AS DWORD, BYVAL lpGesConfig AS DWORD, BYVAL cbsize AS DWORD) AS LONG

     %GC_ALLGESTURES                         =    &H00001???

     %GC_ZOOM                                =    &H00001???

     %GC_PAN                                 =    &H00001???
     %GC_PAN_WITH_SINGLE_FINGER_VERTICALLY   =    &H00002???
     %GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY =    &H00004???
     %GC_PAN_WITH_GUTTER                     =    &H00008???
     %GC_PAN_WITH_INERTIA                    =    &H00010???

     %GC_ROTATE               =    &H00001???

     %GC_TWOFINGERTAP         =    &H00001???

     %GC_PRESSANDTAP          =    &H00001???


     %TWF_FINETOUCH           = &H0001???
     %TWF_WANTPALM            = &H0002???

     DECLARE FUNCTION RegisterTouchWindowX(BYVAL hWnd&, BYVAL UFlags AS DWORD) AS LONG
     DECLARE FUNCTION UnregisterTouchWindowX(BYVAL hWnd&) AS LONG

     ' register or unregistered a window for WM_TOUCH message processing

     FUNCTION ZRegisterTouch(BYVAL hWnd&, BYVAL TProp$) AS LONG
          STATIC FirstFlag&
          STATIC lpRTouch AS DWORD
          STATIC lpURTouch AS DWORD
          LOCAL RV&, UFlags AS DWORD
          IF FirstFlag&=0 THEN
               IF lpRTouch=0 THEN lpRTouch = zGetDLLProcAddress("USER32.DLL","RegisterTouchWindow")
               IF lpURTouch=0 THEN lpURTouch = zGetDLLProcAddress("USER32.DLL","UnregisterTouchWindow")
               FirstFlag&=1
          END IF
          RV&=0
          IF lpRTouch<>0 AND lpURTouch<>0 THEN
               TProp$=UCASE$(TProp$)
               IF INSTR(TProp$,"U") THEN
                    CALL DWORD lpURTouch USING UnregisterTouchWindowX(hWnd&) TO RV&
               ELSE
                    UFlags=0
                    IF INSTR(TProp$,"F") THEN
                         UFlags=%TWF_FINETOUCH
                    ELSE
                         IF INSTR(TProp$,"P") THEN
                              UFlags=%TWF_WANTPALM
                         END IF
                    END IF
                    CALL DWORD lpRTouch USING RegisterTouchWindowX(hWnd&, UFlags ) TO RV&
               END IF
          END IF
          FUNCTION=RV&
     END FUNCTION


     ' this function can be called right after window creation or
     ' during the WM_GESTURENOTIFY message to change dynamically

     FUNCTION ZSetGestureNotify(BYVAL hWnd&, BYVAL GProp$) AS LONG
          STATIC FirstFlag&
          STATIC lpSetConfig AS DWORD
          LOCAL RV&, gCount AS DWORD
          RV&=0
          IF FirstFlag&=0 THEN
               IF lpSetConfig=0 THEN lpSetConfig = zGetDLLProcAddress("USER32.DLL","SetGestureConfig")
               FirstFlag&=1
          END IF
          IF lpSetConfig<>0 THEN

               GProp$=UCASE$(GProp$)
               gCount=0
               DIM AData(1 TO 3,1 TO 5) AS DWORD
               IF INSTR(GProp$,"Z") THEN
                    gCount=gCount+1
                    AData(1,gCount)=%GID_ZOOM
                    AData(2,gCount)=%GC_ZOOM ' enable
                    AData(3,gCount)=0
               END IF
               IF INSTR(GProp$,"P") THEN
                    gCount=gCount+1
                    AData(1,gCount)=%GID_PAN
                    AData(2,gCount)=%GC_PAN
                    AData(3,gCount)=0
                    IF INSTR(GProp$,"1") THEN
                         ' enable
                         AData(2,gCount)= AData(2,gCount) OR %GC_PAN_WITH_SINGLE_FINGER_VERTICALLY OR %GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY
                    ELSE
                         ' disable
                         AData(3,gCount)= AData(3,gCount) OR %GC_PAN_WITH_SINGLE_FINGER_VERTICALLY OR %GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY
                    END IF
                    IF INSTR(GProp$,"I") THEN
                         ' enable
                         AData(2,gCount)= AData(2,gCount) OR %GC_PAN_WITH_INERTIA
                    ELSE
                         ' disable
                         AData(3,gCount)= AData(3,gCount) OR %GC_PAN_WITH_INERTIA
                    END IF
               END IF
               IF INSTR(GProp$,"R") THEN
                    gCount=gCount+1
                    AData(1,gCount)=%GID_ROTATE
                    AData(2,gCount)=%GC_ROTATE
                    AData(3,gCount)=0
               END IF
               IF INSTR(GProp$,"T2") THEN
                    gCount=gCount+1
                    AData(1,gCount)=%GID_TWOFINGERTAP
                    AData(2,gCount)=%GC_TWOFINGERTAP
                    AData(3,gCount)=0
               ELSE
                    IF INSTR(GProp$,"T") THEN
                         gCount=gCount+1
                         AData(1,gCount)=%GID_PRESSANDTAP
                         AData(2,gCount)=%GC_PRESSANDTAP
                         AData(3,gCount)=0
                    END IF
               END IF
               IF gCount=0 THEN
                    gCount=gCount+1
                    AData(1,gCount)= 0   ' all gestures
                    IF INSTR(GProp$,"A") THEN
                         AData(2,gCount)= %GC_ALLGESTURES   ' enable
                         AData(3,gCount)= 0
                    ELSE
                         AData(2,gCount)= 0
                         AData(3,gCount)= %GC_ALLGESTURES   ' disable
                    END IF
               END IF
               IF gCount<>0 THEN
                    CALL DWORD lpSetConfig USING SetGestureConfigX(hWnd&, 0, gCount, BYVAL VARPTR(AData(1,1)), 12???) TO RV&
                    IF RV&<>0 THEN RV&=1

               END IF
          END IF
          FUNCTION=RV&
     END FUNCTION

     ' this function is to be called from within a window procedure to process the %WM_GESTURE message
     UNION ULQUAD
         Q AS QUAD
         B(1 TO 4) AS BYTE
         D(1 TO 2) AS DWORD
     END UNION


     FUNCTION ZProcessGestureMsg(BYVAL hWnd&, BYVAL wParam&, BYVAL lParam&, gFlags AS DWORD, gid AS DWORD, x AS INTEGER, y AS INTEGER, ExtraD AS DWORD, ERV&) AS LONG
          STATIC FirstFlag&
          STATIC lpGetGesture AS DWORD, lpCloseGesture AS DWORD
          LOCAL hGesture&, GS AS GestureInfo, OKFlag&, RV&, MyDW AS DWORD PTR, MyInt AS INTEGER PTR
          LOCAL MyQ AS ULQUAD
          gflags = 0
          gid = 0
          x = 0
          y = 0
          OKFlag&=0
          hGesture&=lParam&
          ' get address for functions if they exist
          IF FirstFlag&=0 THEN
               IF lpGetGesture=0 THEN lpGetGesture = zGetDLLProcAddress("USER32.DLL","GetGestureInfo")
               IF lpCloseGesture=0 THEN lpCloseGesture = zGetDLLProcAddress("USER32.DLL","CloseGestureInfoHandle")
               FirstFlag&=1
          END IF
          ERV&=-999
          IF lpGetGesture<>0 THEN
               ERV&=0
               GS.cbsize=SIZEOF(GS)
               CALL DWORD lpGetGesture USING GetGestureInfoX(hGesture&, BYVAL VARPTR(GS)) TO RV&
               ERV&=RV&
               IF RV&<>0 THEN
                    gflags = GS.dwFlags
                    gid = GS.dwID
                    x = GS.pts_x
                    y = GS.pts_y
                    MyQ.Q = GS.ullArg ' this cna be broken up into smaller parts using the union
                    ExtraD = MyQ.D(2) ' HI DWORD of a quad
                    SELECT CASE GS.dwID
                         ' don't process %GID_BEGIN or %GID_END, but let through to DefWindowProc
                         CASE %GID_ZOOM
                              OKFlag&=1
                         CASE %GID_PAN
                              OKFlag&=1
                         CASE %GID_ROTATE
                              OKFlag&=1
                         CASE %GID_TWOFINGERTAP
                              OKFlag&=1
                         CASE %GID_PRESSANDTAP
                              OKFlag&=1
                         CASE ELSE
                    END SELECT
                    IF OKFlag&<>0 THEN
                         CALL DWORD lpCloseGesture USING CloseGestureInfoHandleX(hGesture&) TO RV&
                    END IF
               ELSE
                    ERV&=GetLastError()
               END IF
          END IF
          IF OKFlag&<>0 THEN
               FUNCTION=1
          ELSE
               FUNCTION=0     ' not processed so let through to original window procedure
          END IF
     END FUNCTION


     %WM_TOUCH      =    &H0240&         ' touch message                           0

     DECLARE FUNCTION GetTouchInputInfoX(BYVAL hTouch AS LONG, BYVAL cInputs AS DWORD, BYVAL lpArray AS DWORD, BYVAL cbsize AS DWORD) AS LONG
     DECLARE FUNCTION CloseTouchInputHandleX(BYVAL hTouch AS LONG) AS LONG



     UNION DWLONG
          DW AS DWORD
          LG AS LONG
     END UNION


     FUNCTION ZProcessTouchMsg(BYVAL hWnd&, BYVAL wParam&, BYVAL lParam&, D$) AS LONG
          STATIC FirstFlag&
          STATIC lpTouch AS DWORD, lpCTouch AS DWORD
          LOCAL TouchPoints AS DWORD, TouchHandle&, RV&
          LOCAL N&, X&,Y&, dwID AS DWORD, dwFlag AS DWORD
          LOCAL lpD AS DWLONG PTR
          lPD=STRPTR(D$)
          TouchPoints =LOWRD(wParam&)
          @lPD.DW=TouchPoints
          TouchHandle&=lParam&
          IF FirstFlag&=0 THEN
               IF lpTouch=0 THEN lpTouch = zGetDLLProcAddress("USER32.DLL","GetTouchInputInfo")
               IF lpCTouch=0 THEN lpCTouch = zGetDLLProcAddress("USER32.DLL","CloseTouchInputHandle")
               FirstFlag&=1
          END IF
          IF TouchPoints<>0 THEN
               IF lpTouch<>0 THEN
                    DIM AData(1 TO 10,1 TO TouchPoints) AS DWLONG
                    CALL DWORD lpTouch USING GetTouchInputInfoX(lParam&, TouchPoints, VARPTR(AData(1,1)), 40???) TO RV&
                    IF RV&<>0 THEN
                         FOR N&=1 TO TouchPoints
                              INCR lPD
                              @lPD.LG=AData(1,N&).LG/100 ' X point
                              INCR lPD
                              @lPD.LG=AData(2,N&).LG/100 ' Y point
                              INCR lPD
                              @lPD.DW=AData(4,N&).DW  ' ID of point
                              INCR lPD
                              @lPD.DW=AData(5,N&).DW   ' flag
                         NEXT N&
                    END IF
                    IF lpCTouch<>0 THEN
                         CALL DWORD lpCTouch USING CloseTouchInputHandleX(lParam&) TO RV&
                    END IF
                    FUNCTION=1
                    EXIT FUNCTION
               END IF
          END IF
          FUNCTION=0
     END FUNCTION


     SUB EZ_SetTouch(BYVAL FormName$, BYVAL IDNum&, BYVAL TProp$) EXPORT10
          LOCAL hWnd&, TMode&, HiMode&, LoVal&, RV&
          HiMode&=0
          LoVal&=0
          IF IDNum&<>0 THEN
               hWnd&=ezhandle(FormName$,IDNum&,1)
               IF hWnd&<>0 THEN
                    IF IsWindow(hWnd&)<>0 THEN
                         TMode&=GetProp(hWnd&,BYVAL MAKLNG(AppControlGAtomT1&,0))
                         HiMode&=HIWRD(TMode&)
                         LoVal&=LOWRD(TMode&)
                         TProp$=TRIM$(UCASE$(TProp$))
                         ' Mouse Expect Touch behavior = 32 hi mode
                         ' WM_TOUCH = 64 hi mode
                         ' WM_GESTURE = 128 hi mode
                         IF LEFT$(TProp$,3)="{T}" THEN
                              TProp$=MID$(TProp$,4)
                              GOSUB TurnOffTouch
                              LoVal&=0
                              IF INSTR(TProp$,">")<>0 THEN
                                   LoVal&=LoVal& OR 256
                                   TProp$=REMOVE$(TProp$,">")
                              END IF
                              RV&=ZRegisterTouch(hWnd&, TProp$)
                              IF RV&<>0 THEN
                                   HiMode&=64
                              ELSE
                                   HiMode&=0
                                   LoVal&=0
                              END IF
                         ELSE
                             IF LEFT$(TProp$,3)="{G}" THEN
                                   TProp$=MID$(TProp$,4)
                                   GOSUB TurnOffTouch
                                   LoVal&=0
                                   IF INSTR(TProp$,">")<>0 THEN
                                        LoVal&=LoVal& OR 256
                                        TProp$=REMOVE$(TProp$,">")
                                   END IF
                                   IF TProp$="" THEN TProp$="A"
                                   RV&= ZSetGestureNotify(hWnd&, TProp$)
                                   IF RV&<>0 THEN
                                        HiMode&=128
                                   ELSE
                                        HiMode&=0
                                        LoVal&=0
                                   END IF
                             ELSE
                                  IF LEFT$(TProp$,3)="{M}" THEN
                                        TProp$=MID$(TProp$,4)
                                        GOSUB TurnOffTouch
                                        HiMode&=32
                                        LoVal&=0
                                  ELSE
                                        GOSUB TurnOffTouch
                                        IF LEFT$(TProp$,3)="{X}" THEN GOSUB TurnOffGesture
                                        HiMode&=0
                                        LoVal&=0
                                  END IF
                             END IF
                         END IF
                         SetProp hWnd&,BYVAL MAKLNG(AppControlGAtomT1&,0), MAKLNG(LoVal&,HiMode&)
                    END IF
               END IF
          END IF
          EXIT SUB

          TurnOffTouch:
               IF HiMode&=64 THEN
                    ' turn off WM_TOUCH
                    RV&=ZRegisterTouch(hWnd&, "U")
               END IF
          RETURN

          TurnOffGesture:
               IF HiMode&=128 THEN
                    RV&= ZSetGestureNotify(hWnd&, "")
               END IF
          RETURN

     END SUB



' ###################### End EZGUI Touch Engine   #############################################

%EZTouchCount = 4   ' 4 items per touch point

FUNCTION ZProcessWMTOUCH(BYVAL hCtrl&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&, BYVAL LoVal&) AS LONG
          LOCAL hWnd&, T$,TouchPoints AS DWORD, CmphWnd&, N&, TPC&, lpT AS DWORD PTR, PTA AS DWORD
          hWnd&=ZGetParentForm(hCtrl&)
          TouchPoints =LOWRD(wParam&)
          ' T$ contains # of touch points and for each touch point %EZTouchCount items , each of which is 4 bytes long
          T$=STRING$(4+(TouchPoints*%EZTouchCount*4),CHR$(0))
          IF ZProcessTouchMsg(hCtrl&, wParam&, lParam&, T$)=1 THEN
               IF (LoVal& AND 256)=256 THEN   ' forward to parent form
                    CmphWnd& = hWnd&
                    GOSUB ConvertXYtoClient
                    ProcessEZCommands hWnd&, %EZ_Touch, 0, STRPTR(T$)
               ELSE
                    CmphWnd& = hCtrl&
                    GOSUB ConvertXYtoClient
                    ProcessEZCommands hWnd&, %EZ_Touch, hCtrl&, STRPTR(T$)
               END IF
               FUNCTION=1     ' set return value to zero if I process the data using ZProcessTouchMsg
          ELSE
               FUNCTION=0
          END IF
          EXIT FUNCTION

ConvertXYtoClient:
     PTA=STRPTR(T$)
     lPT=PTA
     TPC&=@lPT
     PTA=PTA+4
     FOR N&=1 TO TPC&
          ScreenToClient CmphWnd&, BYVAL PTA
          PTA=PTA+16
     NEXT N&
RETURN

END FUNCTION

TYPE EZGESTUREDATA
     GestureGID AS DWORD
     GestureFlags AS DWORD
     GestureX AS INTEGER
     GestureY AS INTEGER
     GestureEX AS DWORD
END TYPE

FUNCTION ZProcessWMGESTURE(BYVAL hCtrl&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&, BYVAL LoVal&) AS LONG
     LOCAL RV&,ERV&, gFlags AS DWORD, gid AS DWORD, x AS INTEGER, y AS INTEGER, hWnd&
     LOCAL EZG AS EZGESTUREDATA, ExtraD AS DWORD
     LOCAL XY&()
     DIM XY&(1 TO 2)
     RV&=ZProcessGestureMsg( hCtrl&, wParam&, lParam&, gFlags, gid, x, y, ExtraD, ERV&)
     IF RV&=1 THEN
          EZG.GestureGID = gid
          EZG.GestureFlags = gflags
          XY&(1) =  x
          XY&(2) =  y
          EZG.GestureEX  = ExtraD
          hWnd&=ZGetParentForm(hCtrl&)
          IF (LoVal& AND 256)=256 THEN   ' forward to parent form
               ScreenToClient hWnd&, BYVAL VARPTR(XY&(1))
               EZG.GestureX =  XY&(1)
               EZG.GestureY =  XY&(2)
               ProcessEZCommands hWnd&, %EZ_Gesture, 0, VARPTR(EZG)
          ELSE
               ScreenToClient hCtrl&, BYVAL VARPTR(XY&(1))
               EZG.GestureX =  XY&(1)
               EZG.GestureY =  XY&(2)
               ProcessEZCommands hWnd&, %EZ_Gesture, hCtrl&, VARPTR(EZG)
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION

SUB EZ_GetGesture(BYVAL CVal&, GType&, GBegin&, GEnd&, GInertia&, GPar1&, GPar2&, GX&,GY&) EXPORT10
     LOCAL EZG AS EZGESTUREDATA PTR, NoFlag&, GFlag AS DWORD
     NoFlag&=1
     IF CVal&<>0 THEN
          IF IsBadReadPtr(CVal&, 16)=0 THEN
               NoFlag&=0
               EZG=CVal&
               GType& = @EZG.GestureGID
               GFlag = @EZG.GestureFlags
               GBegin& = 0 : IF (GFlag AND %GF_BEGIN) = %GF_BEGIN THEN GBegin& =1
               GEnd& = 0   : IF (GFlag AND %GF_END) = %GF_END THEN GEnd& =1
               GInertia& = 0 : IF (GFlag AND %GF_INERTIA) = %GF_INERTIA THEN GInertia& =1
               GPar1&=0
               GPar2&=0
               IF (GType&=%GID_PAN) AND (GInertia&=1) THEN
                    GPar1&=LOWRD(@EZG.GestureEX)
                    GPar2&=HIWRD(@EZG.GestureEX)
               END IF
               IF GType&=%GID_PRESSANDTAP THEN
                    GPar1&=@EZG.GestureEX
               END IF
               GX& = @EZG.GestureX
               GY& = @EZG.GestureY
          END IF
     END IF
     IF NoFlag& THEN
          GType& = 0
          GBegin& = 0
          GEnd& = 0
          GInertia& = 0
          GPar1& = 0
          GPar2& = 0
          GX& = 0
          GY& = 0
     END IF
END SUB

'     UNION DWLONG
'          DW AS DWORD
'          LG AS LONG
'     END UNION


SUB EZ_GetTouch(BYVAL CVal&, TPCount&, TPID()AS DWORD, TPX() AS LONG, TPY() AS LONG, TPFlag() AS DWORD ) EXPORT10
     LOCAL MyDW AS DWLONG PTR, NoFlag&
     LOCAL N AS DWORD, TPC AS DWORD
     NoFlag&=1
     IF LBOUND(TPID)<>1 THEN EXIT SUB
     IF LBOUND(TPX)<>1 THEN EXIT SUB
     IF LBOUND(TPY)<>1 THEN EXIT SUB
     IF LBOUND(TPFlag)<>1 THEN EXIT SUB
     IF UBOUND(TPID) < TPCount& THEN EXIT SUB
     IF UBOUND(TPX) < TPCount& THEN EXIT SUB
     IF UBOUND(TPY) < TPCount& THEN EXIT SUB
     IF UBOUND(TPFlag) < TPCount& THEN EXIT SUB
     IF CVal&<>0 THEN
          IF IsBadReadPtr(CVal&, 4)=0 THEN
               MyDW=CVal&
               TPC=@MyDW.DW
               IF IsBadReadPtr(CVal&, 4+(TPC*4))=0 THEN
                    IF TPCount&<1 THEN TPCount&=1
                    IF TPCount&>50 THEN TPCount&=50
                    IF TPC>TPCount& THEN TPC=TPCount&
                    FOR N=1 TO TPCount&
                         IF N<=TPC THEN
                              INCR MyDW
                              TPX(N)=@MyDW.LG
                              INCR MyDW
                              TPY(N)=@MyDW.LG
                              INCR MyDW
                              TPID(N)=@MyDW.DW
                              INCR MyDW
                              TPFlag(N)=@MyDW.DW
                         ELSE
                              TPID(N)=0
                              TPX(N)=0
                              TPY(N)=0
                              TPFlag(N)=0
                         END IF
                    NEXT N
                    NoFlag&=0
               END IF
          END IF
     END IF
     IF NoFlag& THEN
          FOR N=1 TO TPCount&
               TPID(N)=0
               TPX(N)=0
               TPY(N)=0
               TPFlag(N)=0
          NEXT N
     END IF
END SUB

FUNCTION ZSubClassProc(BYVAL hCtrl AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) EXPORT10 AS LONG

LOCAL I&, X&, Y&, OldAddress&, hWndP AS LONG, CVal&
LOCAL CRect AS Rect,RV&
LOCAL DefFlag&,  hWnd AS LONG
LOCAL UFlag&, RV2&, OKFlag&, PT AS POINTAPI, DHFlag&, OldRState&, RSFlag&
STATIC StartDragCtrl&, NCDownFlag&, OffSet&, FNowFlag&
LOCAL SMode&, SCEvents&, PTimer&, Hot&, NEFlag&, WS&, EXWS&

I&=ZGetControlIndex(hCtrl)
IF I&=0 THEN
    FUNCTION=0
    EXIT FUNCTION
END IF

OldAddress&=AppControlOrigAddress(I&)
DefFlag&=0
UFlag&=0
FNowFlag&=1
SMode&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtom2&,0))
SELECT CASE AS LONG SMode&
    CASE 1,2
        SCEvents&=1
    CASE 3,4
        SCEvents&=0
        SMode&=SMode&-2 ' makes mode either 1 or 2
    CASE ELSE
        SCEvents&=0
        SMode&=0
        FNowFlag&=0
END SELECT
' messages that must be processed no matter what !
SELECT CASE AS LONG Msg
     CASE %WM_MOUSEWHEEL
                    ' wheel delta is a value of 120
                    ' positive value is forward
                    ' negative value is backwards
                    ' some devices may pass values less than 120, so you should take this into consideration
     CASE %WM_TOUCH
          LOCAL TMode&
          TMode&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtomT1&,0))
          IF HIWRD(TMode&)=64 THEN
               IF ZProcessWMTOUCH(hCtrl, Msg, wParam&,lParam&, LOWRD(TMode&))=1 THEN
                    FUNCTION=0
                    EXIT FUNCTION
               END IF
          END IF
     CASE %WM_GESTURE
          LOCAL GMode&
          GMode&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtomT1&,0))
          IF HIWRD(GMode&)=128 THEN
               IF ZProcessWMGESTURE(hCtrl, Msg, wParam&,lParam&, LOWRD(GMode&))=1 THEN
                    FUNCTION=0
                    EXIT FUNCTION
               END IF
          END IF
    CASE %WM_MOUSEMOVE
          Hot&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtom7&,0))
          IF (Hot& AND 1024&) = 1024& THEN     ' hot tracking enabled
               IF (Hot& AND 1&)=0& THEN
                    ' Mouse Over control for first time !
                    Hot&=Hot& OR 1&
                    SetProp hCtrl,BYVAL MAKLNG(AppControlGAtom7&,0),Hot&
                    SetTimer hCtrl, %HotTimerID , 45, CODEPTR(MyCtrlHotTimerProc)
                    hWnd=GetParent(hCtrl)
                    ProcessEZCommands  hWnd, %EZ_HotMouseEnter, hCtrl, lParam
                    IF (Hot& AND 128&)=128& THEN
                         IF IsWindowVisible(hCtrl) THEN
                              InvalidateRect hCtrl, BYVAL %NULL, 1
                         END IF
                    END IF
               ELSE
                    IF (Hot& AND 2&)=2& THEN   ' Mouse move tracking flag
                         hWnd=GetParent(hCtrl)
                         ProcessEZCommands  hWnd, %EZ_HotMouseMove, hCtrl, lParam
                    END IF
               END IF
          END IF
    CASE %WM_StartHotTrack
          X&=1024
          IF wParam<>0 THEN X&=X& OR 2
          IF lParam<>0 THEN X&=X& OR 128
          SetProp hCtrl,BYVAL MAKLNG(AppControlGAtom7&,0),X&   ' set bit flag for hot tracking
          FUNCTION=1
          EXIT FUNCTION
    CASE %WM_StartEZCtrlTimer
        SendMessage hCtrl,%WM_StopEZCtrlTimer,0,0   ' kill any existing timer
        GOSUB GetPTimer
        IF PTimer&=0 THEN
            IF wParam>=1 AND wParam<=100 THEN
                PTimer&=wParam
                GOSUB SetPTimer
                SetProp hCtrl, BYVAL MAKLNG(AppControlGAtom6&,0), PTimer&
                ' 50 ms generates less than 20 cycles per second
                ' 45 ms produces at least or better than 20 cycles per second
                SetTimer hCtrl, PTimer&, 45, CODEPTR(MyCtrlTimerProc)   ' 1/20 iterations per second
            END IF
        END IF
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_StopEZCtrlTimer
        GOSUB GetPTimer
        IF PTimer&>0 THEN
            SetProp hCtrl, BYVAL MAKLNG(AppControlGAtom6&,0), 0
            KillTimer hCtrl,PTimer&
            PTimer&=0
            GOSUB SetPTimer
        END IF
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_DROPFILES
        ZDropFiles hCtrl, wParam
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_ERASEBKGND
         ' test to see if control is ownerdrawn and prevent background erase to decrease flicker
         NEFlag&=0
         WS&=GetWindowLong(hCtrl,%GWL_STYLE)
         SELECT CASE ZGetClass(hCtrl)
               CASE "BUTTON"
                    IF (WS& AND &H00000F) = %BS_OWNERDRAW THEN NEFlag&=1
                    IF (WS& AND &H00000F) = %BS_GROUPBOX THEN
                         EXWS&=GetWindowLong(hCtrl,%GWL_EXSTYLE)
                         IF (EXWS& AND %WS_EX_TRANSPARENT)=0 THEN
                              ' draw background now
                              zEraseFrame hCtrl, wParam,0
                              NEFlag&=1
                         END IF
                    END IF
               CASE "STATIC"
                    IF (WS& AND &H00001F) = %SS_OWNERDRAW THEN NEFlag&=1
                    IF (WS& AND &H00001F) = %SS_BITMAP THEN NEFlag&=1
               CASE ELSE
         END SELECT
         IF NEFlag& THEN
              FUNCTION=1
              EXIT FUNCTION
         END IF
    CASE %WM_GetEZUserData
        FUNCTION=zGetEZGUIUserData(hCtrl, wParam,%EZ_IsUserData)
        EXIT FUNCTION
    CASE %WM_SetEZUserData
        zSetEZGUIUserData hCtrl, wParam, lParam, %EZ_IsUserData
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_DESTROY
        Hot&=GetProp(hCtrl,BYVAL MAKLNG(AppControlGAtom7&,0))
        IF (Hot& AND 1024&) = 1024& THEN     ' hot tracking enabled
             IF (Hot& AND 1&)=1& THEN        ' hot tracking over control so kill timer
                  KillTimer hCtrl,%HotTimerID
             END IF
        END IF
        SetProp hCtrl,BYVAL MAKLNG(AppControlGAtom7&,0),0   ' end hot tracking
        SendMessage hCtrl,%WM_StopEZCtrlTimer,0,0   ' kill any existing timer
        ' the user data property and memory is created in control creation command for all subclassed controls
        FreeControlBlock hCtrl, %EZ_IsUserData
        RemoveProp hCtrl,BYVAL MAKLNG(App_CustomUserDataAtom1&,0)
        FUNCTION=ZWM_DESTROY(I&, OldAddress&, hCtrl, Msg, wParam, lParam,FNowFlag&)
        EXIT FUNCTION
    CASE %WM_HELP
        IF zDo_WM_HELP(0, hCtrl, lParam)=1 THEN
            FUNCTION=1
            EXIT FUNCTION
        END IF
    CASE ELSE
END SELECT
IF SMode&=0 THEN GOTO SkipMode1

' mode 1 and 2
SELECT CASE AS LONG Msg
    CASE %WM_SETFOCUS
        ZSetEditFocus hCtrl,1
    CASE %WM_KILLFOCUS
        ZSetEditFocus hCtrl,0
    CASE %WM_DRAWITEM, %WM_MEASUREITEM
        RV&=ZChildOwnerDraw(hCtrl, Msg, wParam, lParam)
        IF RV&<>0 THEN
            FUNCTION=RV&
            EXIT FUNCTION
        END IF
    CASE %WM_NCHITTEST
        IF SMode&=2 THEN GOSUB NormalHittest
    CASE %WM_GETMINMAXINFO
        RV&=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
        IF SMode&=1 THEN X&=1 ELSE X&=0
        ZSetMinMax hCtrl, lParam, X&
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_MOVE
        IF SMode&=1 THEN
            IF App_EZ_SubClassMode&>0 THEN
                GOSUB ZRedraw
            END IF
            GOSUB NormalMove
       ELSE
            GOSUB NormalMove
       END IF
    CASE %WM_CAPTURECHANGED
        hWnd=GetParent(hCtrl)
        IF hWnd<>0 THEN
            ProcessEZCommands  hWnd, %EZ_CaptureOff, hCtrl, lParam
        END IF
    CASE %WM_SIZE
        IF App_EZ_SubClassMode&>0 AND SMode&=1 THEN UFlag&=1
        hWnd=GetParent(hCtrl)
        IF hWnd<>0 THEN
            ProcessEZCommands  hWnd, %EZ_Size, hCtrl, 0
        END IF
    CASE %WM_SIZING
        hWnd=GetParent(hCtrl)
        IF hWnd<>0 THEN
           ProcessEZCommands  hWnd, %EZ_Sizing, hCtrl, 0
        END IF
    CASE %WM_LBUTTONDOWN, %WM_LBUTTONUP, %WM_LBUTTONDBLCLK, %WM_RBUTTONUP, %WM_MBUTTONUP
            hWnd=GetParent(hCtrl)
            IF hWnd<>0 THEN
                IF Msg=%WM_LBUTTONDBLCLK THEN
                    IF ZGetClass(hCtrl)="BUTTON" THEN
                        IF (GetWindowLong(hCtrl, %GWL_STYLE) AND 15)=%BS_OWNERDRAW THEN
                            X&=%EZ_NoDClick
                            IF ProcessEZCommands(hWnd, X&, hCtrl, 0)=0 THEN
                                SendMessage hCtrl,%WM_LBUTTONDOWN, wParam, lParam
                                FUNCTION=0
                                EXIT FUNCTION
                            END IF
                        END IF
                    END IF
                END IF
                X&=%EZ_LButtonDC
                IF Msg=%WM_MBUTTONUP THEN X&=%EZ_MButtonUp
                IF Msg=%WM_RBUTTONUP THEN X&=%EZ_RButtonUp
                IF Msg=%WM_LBUTTONDOWN THEN X&=%EZ_LButtonDown
                IF Msg=%WM_LBUTTONUP THEN X&=%EZ_LButtonUp
                IF ProcessEZCommands(hWnd, %EZ_ConvBtnPos, hCtrl, 0)=0 THEN
                    CVal&=PBV_ControlToParentClient(hWnd, hCtrl, lParam)
                ELSE
                    CVal&=lParam
                END IF
                IF SMode&=2 OR (SMode&=1 AND App_EZ_SubClassMode&=1) OR (SMode&=1 AND Msg=%WM_LBUTTONDOWN) THEN
                    IF ProcessEZCommands(hWnd, X&, hCtrl, CVal&) THEN
                        FUNCTION=0
                        EXIT FUNCTION
                    END IF
                END IF
                IF SMode&=1 AND App_EZ_SubClassMode&=1 THEN
                    IF ZGetClass(hCtrl)<>$DragHandleControl THEN
                        FUNCTION=0
                        EXIT FUNCTION
                    END IF
                END IF

            END IF
    CASE %WM_ERASEBKGND
            IF ZWM_ERASE(I&, hCtrl, wParam)<>0 THEN
                FUNCTION=1
                EXIT FUNCTION
            END IF
    CASE %WM_HSCROLL, %WM_VSCROLL
            ZScrollBG I&, hCtrl, %EZ_ScrollBG, 0
    CASE %WM_KEYDOWN
            IF ZKeyMove(wParam) THEN
                ZScrollBG I&, hCtrl, %EZ_ScrollBGKey, wParam
            END IF
    CASE %WM_GETDLGCODE
            FUNCTION=ZGetDlgCodeMsg(I&, OldAddress&, hCtrl, Msg, wParam, lParam)
            EXIT FUNCTION
    CASE %WM_MOUSEACTIVATE
           X&=HIWRD(lParam) ' mouse message
           SELECT CASE AS LONG X&
               CASE %WM_LBUTTONDOWN
                   X&=%EZ_LButtonDown
               CASE %WM_LBUTTONUP
                   X&=%EZ_LButtonUp
               CASE %WM_RBUTTONUP
                   X&=%EZ_RButtonUp
               CASE %WM_MBUTTONUP
                   X&=%EZ_MButtonUp
               CASE ELSE
                   X&=0
           END SELECT
           App_IsInCapturableMsg&=2
           IF ProcessEZCommands(GetParent(hCtrl), %EZ_ActivateMe, hCtrl, X&) THEN
               ' Cancelled
                App_IsInCapturableMsg&=0
                FUNCTION=%MA_NOACTIVATEANDEAT
                EXIT FUNCTION   ' should let message pass through to whats below
           ELSE
               App_IsInCapturableMsg&=0
           END IF
    CASE ELSE
END SELECT

IF SMode&<>1 THEN GOTO SkipMode1

' mode 1 only
SELECT CASE AS LONG Msg
      CASE %WM_NCHITTEST
            IF App_EZ_SubClassMode&=1 THEN
                IF App_EZ_SubClassStyle&<=3 THEN
                    RV&=0
                    RV2&=0
                    OKFlag&=1
                    DHFlag&=0
                    ZHitTest hCTrl, lParam, RV&, RV2&, OKFlag&, DHFlag&
                    IF App_EZ_SubClassStyle&>=2 THEN    ' Select Side to drag
                        IF OKFlag& THEN
                            hWnd=GetParent(hCtrl)
                            IF hWnd<>0 THEN
                                IF RV2&<>0 THEN
                                    IF ProcessEZCommands(hWnd, %EZ_NoDrag, hCtrl, RV2&)=0 THEN RV2&=0
                                END IF
                                IF RV2&=0 THEN
                                    IF DHFlag&<>0 THEN ' This is the Drag Handle control
                                       RV&=%HTBORDER
                                    ELSE
                                       RV&=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
                                       ' RV&=DefWindowProc(hCtrl, Msg, wParam, lParam)
                                    END IF
                                END IF
                            END IF
                        ELSE
                            RV&=%HTBORDER  ' This will never get passed through. Just a placeholder.
                        END IF
                    END IF
                END IF
                IF App_EZ_SubClassStyle&=4 THEN    ' Move Only
                   RV&=%HTCAPTION
                END IF
                IF App_EZ_SubClassStyle&=5 THEN    ' Act Transparent
                   RV&=%HTTRANSPARENT
                END IF
                FUNCTION=RV&
                EXIT FUNCTION
            ELSE
                GOSUB NormalHittest
            END IF
      CASE %WM_SETCURSOR
            IF App_EZ_SubClassMode&=1 THEN
                IF LOWRD(lParam)=%HTCAPTION THEN
                    IF App_CCursor&>0 AND App_CCursor&<=UBOUND(AppCursor) THEN
                        IF AppCursor(App_CCursor&)<>0 THEN
                            SetCursor AppCursor(App_CCursor&)
                            FUNCTION=0
                            EXIT FUNCTION
                        END IF
                    END IF
                END IF
                IF App_EZ_SubClassStyle&=3 THEN
                    IF LOWRD(lParam)=%HTBORDER THEN
                        lParam=(lParam AND &HFFFF0000) OR %HTTRANSPARENT
                        FUNCTION=DefWindowProc(hCtrl, Msg, wParam, lParam)
                        EXIT FUNCTION
                    END IF
                END IF
            ELSE
                IF LOWRD(lParam)=%HTCLIENT THEN
                    IF App_BCursor&>0 AND App_BCursor&<=UBOUND(AppCursor) THEN
                        IF AppCursor(App_BCursor&)<>0 THEN
                            SetCursor AppCursor(App_BCursor&)
                            FUNCTION=0
                            EXIT FUNCTION
                        END IF
                    END IF
                END IF
            END IF

      CASE %WM_NCPAINT
      CASE %WM_NCLBUTTONDBLCLK, %WM_NCRBUTTONUP, %WM_NCMBUTTONUP
            IF App_EZ_SubClassMode&=1 THEN
                hWnd=GetParent(hCtrl)
                IF hWnd<>0 THEN
                    X&=%EZ_LButtonDC
                    IF Msg=%WM_NCMBUTTONUP THEN X&=%EZ_MButtonUp
                    IF Msg=%WM_NCRBUTTONUP THEN X&=%EZ_RButtonUp
                    ProcessEZCommands  hWnd, X&, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                END IF
                IF ZGetClass(hCtrl)<>$DragHandleControl THEN
                    FUNCTION=0
                    EXIT FUNCTION
                END IF
            END IF
      CASE %WM_NCLBUTTONDOWN, %WM_NCLBUTTONUP
            IF App_EZ_SubClassMode&=1 THEN
               DefFlag&=1
               hWnd=GetParent(hCtrl)
               IF hWnd<>0 THEN
                   IF Msg=%WM_NCLBUTTONDOWN THEN
                       IF wParam=%HTBORDER THEN
                          App_LastBMsg&=Msg
                          App_LastBwParam&=wParam
                          App_LastBlParam&=lParam
                       ELSE
                          App_LastBMsg&=0
                          App_LastBwParam&=0
                          App_LastBlParam&=0
                       END IF
                       ProcessEZCommands  hWnd, %EZ_LButtonDown, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                   END IF
                   IF Msg=%WM_NCLBUTTONUP THEN
                       App_LastBMsg&=0
                       App_LastBwParam&=0
                       App_LastBlParam&=0
                       ProcessEZCommands  hWnd, %EZ_LButtonUp, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                       IF wParam<>%HTBORDER THEN
                           IF StartDragCtrl&=hCtrl THEN
                               ProcessEZCommands  hWnd, %EZ_Dropping, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                           END IF
                       END IF
                   END IF
                   IF App_EZ_SubClassStyle&=3 THEN
                       IF wParam=%HTBORDER THEN
                            IF ZGetClass(hCtrl)=$DragHandleControl THEN
                                 SendMessage hCtrl, %EZDC_FAKE_NCLBD, wParam, lParam
                            END IF
                            FUNCTION=0
                            EXIT FUNCTION
                       END IF
                   END IF
               END IF
               IF ZGetClass(hCtrl)=$DragHandleControl THEN
                  OffSet&=SendMessage(hCtrl, %EZDC_GETOFFSET,0,0)
                  DefFlag&=0
               ELSE
                  OffSet&=0
               END IF
               ' -------------------------
               '  Use the Form to draw Drag Rectangle
               IF Msg=%WM_NCLBUTTONDOWN THEN
                   NCDownFlag&=1
'                   IF ZGetClass(hCtrl)=$DragHandleControl THEN
'                        RV&=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
'                   END IF
                   IF wParam<>%HTBORDER THEN
                       ' -------------------------
                       GetWindowRect hCtrl, App_Rect1
                       ' -------------------------
                       ProcessEZCommands  hWnd, %EZ_Drag, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                       StartDragCtrl&=hCtrl
                   END IF

                   App_DragControl&=hCtrl
                   IF LEFT$(ZGetClass(hCtrl),10)="EZGUI_TYPE" THEN App_DragIsPageForm&=1
                   App_Capture&=1
                   App_Capture_hWnd&=hWnd

                   ' X&=LOWRD(lParam)
                   ' Y&=HIWRD(lParam)
                   GetWindowRect hCtrl, CRect
                   PT.x=CRect.nLeft
                   PT.y=CRect.nTop
                   ScreenToClient hWnd, PT
                   App_DragX1&=PT.x+OffSet&
                   App_DragY1&=PT.y+OffSet&
                   PT.x=CRect.nRight-1
                   PT.y=CRect.nBottom-1
                   ScreenToClient hWnd, PT
                   App_DragX2&=PT.x-OffSet&
                   App_DragY2&=PT.y-OffSet&

                   App_DragXA&=App_DragX1&
                   App_DragYA&=App_DragY1&
                   App_DragXB&=App_DragX2&
                   App_DragYB&=App_DragY2&

                   PT.x=LOWRD(lParam)
                   PT.y=HIWRD(lParam)
                   ScreenToClient hWnd, PT
                   App_DragHitTest&=wParam
                   SendMessage hWnd, %WM_LBUTTONDOWN, 0, MAKLNG(PT.x, PT.y)
                   IF ZGetClass(hCtrl)=$DragHandleControl THEN
                       SendMessage hCtrl, %EZDC_FAKE_NCLBD, wParam, lParam
                   END IF
                END IF
                RSFlag&=0
                IF Msg=%WM_NCLBUTTONUP THEN
                    hWnd=GetParent(hCtrl)
                    IF NCDownFlag&<>0 THEN
                        IF App_RedrawState&<>0 THEN
                            OldRState&=App_RedrawState&
                            RSFlag&=1
                            App_RedrawState&=0
                            IF hWnd<>0 THEN SendMessage hWnd, %WM_SETREDRAW, 0, 0
                        END IF
                        App_DragX1&=App_DragX1&-OffSet&
                        App_DragY1&=App_DragY1&-OffSet&
                        App_DragX2&=App_DragX2&+OffSet&
                        App_DragY2&=App_DragY2&+OffSet&
                        MoveWindow hCtrl, App_DragX1&, App_DragY1&, App_DragX2&-App_DragX1&+1, App_DragY2&-App_DragY1&+1, 1
                        UpdateWindow hCtrl
                        IF ZGetClass(hCtrl)=$DragHandleControl THEN
                            RV&=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
                        END IF
                    END IF
                    NCDownFlag&=0
                    IF hWnd<>0 THEN
                        IF wParam<>%HTBORDER THEN
                            IF StartDragCtrl&=hCtrl THEN
                               ' -------------------------
                               GetWindowRect hCtrl, App_Rect2
                               ' -------------------------
                               GOSUB ZAutoRedraw
                               ProcessEZCommands  hWnd, %EZ_Drop, hCtrl, PBV_ScreenToClient(hWnd, lParam)
                            END IF
                            StartDragCtrl&=0
                        END IF
                    END IF
                    GOSUB ZAutoRedraw
                END IF
                FUNCTION=0
                EXIT FUNCTION
               ' -------------------------
            END IF
      CASE %WM_NCMOUSEMOVE
            IF App_EZ_SubClassMode&=1 THEN DefFlag&=1
      CASE ELSE
END SELECT

SkipMode1:
IF SCEvents&=0 THEN    ' Modes 0,3,4 don't generate %EZ_SubClass event
    RV&=CallWindowProc(OldAddress&, hCtrl, Msg, wParam, lParam)
ELSE
    RV&=ZCallWProc(I&, OldAddress&, hCtrl, Msg, wParam, lParam, DefFlag&)
    IF SMode&=1 THEN
        IF UFlag&<>0 THEN
            GOSUB ZRedraw
        END IF
    END IF
END IF
FUNCTION=RV&
EXIT FUNCTION


GetPTimer:
    PTimer&=GetProp(hCtrl, BYVAL MAKLNG(AppControlGAtom5&,0))
RETURN

SetPTimer:
    SetProp hCtrl, BYVAL MAKLNG(AppControlGAtom5&,0), PTimer&
RETURN

NormalHittest:
    X&=ZHitTest2(hCtrl, lParam)
    IF X&<>0 THEN
        FUNCTION=X&
        EXIT FUNCTION
    END IF
RETURN

NormalMove:
    hWnd=GetParent(hCtrl)
    IF hWnd<>0 THEN
        ProcessEZCommands  hWnd, %EZ_Move, hCtrl, lParam
    END IF
RETURN

ZAutoRedraw:
IF RSFlag& THEN
   App_RedrawState&=OldRState&
   RSFlag&=0
   IF hWnd<>0 THEN SendMessage hWnd, %WM_SETREDRAW, 1, 0
   GOSUB ZRedraw
END IF
RETURN

ZRedraw:
IF App_RedrawState&<>0 THEN
    hWndP=GetParent(hCtrl)
    IF hWndP<>0 THEN
        ' X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
        ' RedrawWindow hWndP, BYVAL %NULL, BYVAL %NULL, X&
        ZRedrawForm hWndP
    END IF
ELSE
    hWnd=GetParent(hCtrl)
    X&=0
    IF Msg=%WM_MOVE THEN X&=%EZ_Move
    IF Msg=%WM_SIZE THEN X&=%EZ_Size
    ProcessEZCommands  hWnd, %EZ_Redraw, hCtrl, X&
END IF
RETURN


END FUNCTION

FUNCTION ZHitTest2(BYVAL hCtrl&, BYVAL lParam&) AS LONG
LOCAL hWnd&, RV&, X&, Y&, R AS RECT, EV&, HT&
RV&=0
EV&=0
hWnd&=GetParent(hCtrl&)
IF hWnd&<>0 THEN
    GetWindowRect hCtrl&, R
    X&=LOWRD(lParam&)
    Y&=HIWRD(lParam&)
    IF X&<=R.nLeft+1 THEN
        ' left size
        EV&=%EZ_NoLeftSize
        HT&=%HTLEFT
    ELSEIF X&>=R.nRight-2 THEN
        ' right size
        EV&=%EZ_NoRightSize
        HT&=%HTRIGHT
    ELSEIF Y&<=R.nTop+1 THEN
        ' top size
        EV&=%EZ_NoTopSize
        HT&=%HTTOP
    ELSEIF Y&>=R.nBottom-2 THEN
        ' bottom size
        EV&=%EZ_NoBottomSize
        HT&=%HTBOTTOM
    END IF
    IF EV&<>0 THEN
        IF ProcessEZCommands(hWnd&, EV&, hCtrl&, lParam&)<>0 THEN
            RV&=HT&
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------
SUB zSetRedrawFormRects(BYVAL hDlg&, BYVAL hWnd1&, BYVAL hWnd2&)
    LOCAL Rect1 AS RECT, Rect2 AS RECT
    Rect1.nLeft=0
    Rect1.nTop=0
    Rect1.nRight=0
    Rect1.nBottom=0
    Rect2.nLeft=0
    Rect2.nTop=0
    Rect2.nRight=0
    Rect2.nBottom=0
    IF IsWindow(hDlg&) THEN
        IF IsWindow(hWnd1&) THEN
            GetWindowRect hWnd1&, Rect1
            IF IsWindow(hWnd2&) THEN
                GetWindowRect hWnd2&, Rect2
            ELSE
                Rect2=Rect1
            END IF
            IF Rect2.nLeft<Rect1.nLeft THEN Rect1.nLeft=Rect2.nLeft
            IF Rect2.nTop<Rect1.nTop THEN Rect1.nTop=Rect2.nTop
            IF Rect2.nRight>Rect1.nRight THEN Rect1.nRight=Rect2.nRight
            IF Rect2.nBottom>Rect1.nBottom THEN Rect1.nBottom=Rect2.nBottom

            ScreenToClient hDlg&, BYVAL VARPTR(Rect1)
            ScreenToClient hDlg&, BYVAL VARPTR(Rect1)+8
            RedrawWindow hDlg&, App_Rect1, BYVAL %NULL, %RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN

        END IF
    END IF
END SUB

SUB ZRedrawForm(BYVAL hWnd AS LONG)
     LOCAL X&, TMP AS RECT, hRgn1 AS LONG, hRgn2 AS LONG
     TMP.nLeft=0
     TMP.nTop=0
     TMP.nRight=0
     TMP.nBottom=0
     X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
     IF App_Rect1=TMP AND App_Rect2=TMP THEN
         RedrawWindow hWnd, BYVAL %NULL, BYVAL %NULL, X&
     ELSE
         X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
         ' use rectangles here
         ScreenToClient hWnd, BYVAL VARPTR(App_Rect1)
         ScreenToClient hWnd, BYVAL VARPTR(App_Rect1)+8
         RedrawWindow hWnd, App_Rect1, BYVAL %NULL, X&
     END IF
     ' zero out the Rectangles
     App_Rect1.nLeft=0
     App_Rect1.nTop=0
     App_Rect1.nRight=0
     App_Rect1.nBottom=0
     App_Rect2=App_Rect1
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_WO(BYVAL WObj$) EXPORT10 AS LONG
    LOCAL RV&, EO$, P&, EFlag&, MC&
    RV&=0
    EFlag&=0
    DO
        MC&=-1
        P&=INSTR(WObj$,App_EZ_DChar$)
        IF P&<>0 THEN
            EO$=LEFT$(WObj$,P&-1)
            WObj$=MID$(WObj$,P&+1)
        ELSE
            EO$=WObj$
            EFlag&=1
        END IF
        GOSUB GetWOVal
        IF MC&<>-1 THEN RV&=RV&+GetSystemMetrics(MC&)
        IF EFlag& THEN EXIT DO
    LOOP
    FUNCTION=RV&
    EXIT FUNCTION

    GetWOVal:
        IF ASC(EO$)<>35 THEN   ' not #
            SELECT CASE AS CONST$ UCASE$(EO$)
                CASE "3X":MC&=%SM_CXEDGE
                CASE "3Y":MC&=%SM_CYEDGE

                CASE "BX":MC&=%SM_CXBORDER
                CASE "BY":MC&=%SM_CYBORDER

                CASE "ZX":MC&=%SM_CXSIZEFRAME
                CASE "ZY":MC&=%SM_CYSIZEFRAME

                CASE "FX":MC&=%SM_CXFIXEDFRAME
                CASE "FY":MC&=%SM_CYFIXEDFRAME

                CASE "MB":MC&=%SM_CMOUSEBUTTONS

                CASE "CX":MC&=%SM_CXCURSOR
                CASE "CY":MC&=%SM_CYCURSOR

                CASE "IX":MC&=%SM_CXICON
                CASE "IY":MC&=%SM_CYICON

                CASE "FC":MC&=%SM_CYCAPTION
                CASE "TC":MC&=%SM_CYSMCAPTION

                CASE "MN":MC&=%SM_CYMENU

                CASE "SW":MC&=%SM_CXVSCROLL
                CASE "SH":MC&=%SM_CYHSCROLL
                CASE ELSE
            END SELECT
        ELSE
            SELECT CASE AS CONST$ UCASE$(EO$)
                CASE "#D":MC&=%SM_CMONITORS         ' Win 98 min
                CASE "#VX":MC&=%SM_XVIRTUALSCREEN   ' Win 98 min
                CASE "#VY":MC&=%SM_YVIRTUALSCREEN   ' Win 98 min
                CASE "#VW":MC&=%SM_CXVIRTUALSCREEN  ' Win 98 min
                CASE "#VH":MC&=%SM_CYVIRTUALSCREEN  ' Win 98 min
                CASE "#PW":MC&=%SM_CXSCREEN
                CASE "#PH":MC&=%SM_CYSCREEN
                CASE "#F":MC&=81    ' %SM_SAMEDISPLAYFORMAY ' Win 98 min
                CASE "#MW":MC&=%SM_CXMAXTRACK
                CASE "#MH":MC&=%SM_CYMAXTRACK
                CASE ELSE
            END SELECT
        END IF
    RETURN

END FUNCTION

SUB EZ_GetMouseXY(BYVAL CVal&, X&, Y&) EXPORT10
    X&=ZLOWRD(CVal&)
    Y&=ZHIWRD(CVal&)
END SUB

FUNCTION EZ_SetMouseXY(BYVAL X&, BYVAL Y&) EXPORT10 AS LONG
    LOCAL CV AS LONG, I AS INTEGER PTR
    I=VARPTR(CV)
    @I=X&
    I=I+2
    @I=Y&
    FUNCTION=CV
END FUNCTION

FUNCTION PBV_ScreenToClient(BYVAL hWnd AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL PT AS POINTAPI, X%, Y%
PT.x=ZLOWRD(lParam)
PT.y=ZHIWRD(lParam)
ScreenToClient hWnd, PT
X%=PT.x
Y%=PT.y
FUNCTION=MAKLNG(X%,Y%)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION PBV_ControlToParentClient(BYVAL hWnd AS LONG, BYVAL hCtrl AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL PT AS POINTAPI, X%, Y%
PT.x=ZLOWRD(lParam)
PT.y=ZHIWRD(lParam)
ClientToScreen hCtrl, PT
IF hWnd&<>0 THEN ScreenToClient hWnd, PT
X%=PT.x
Y%=PT.y
FUNCTION=MAKLNG(X%,Y%)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ConvertMousePos(BYVAL hWnd1&, BYVAL hWnd2&, BYVAL CVal&) EXPORT10 AS LONG
FUNCTION=PBV_ControlToParentClient(hWnd1&, hWnd2&,CVal&)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_GetAreaPixels(BYVAL hWnd&, X&, Y&, W&, H&, BYVAL AType$, BYVAL Info1&, BYVAL Info2&) EXPORT10
    LOCAL R AS RECT ', P AS POINTAPI
    IF hWnd&<>0 THEN
        IF IsWindow(hWnd&)=0 THEN EXIT SUB
        SELECT CASE AS CONST$ UCASE$(AType$)
            CASE "WS"    ' screen coordinates of entire window
                GetWindowRect hWnd&, R
            CASE "W"   ' entire window in client coordinates
                GetWindowRect hWnd&, R
                GOSUB MakeClientValues
            CASE "WP"   ' entire window in parents client coordinates
                GetWindowRect hWnd&, R
                hWnd&=GetParent(hWnd&)
                GOSUB MakeClientValues
            CASE "WF"   ' entire window in parent Form coordinates
                GetWindowRect hWnd&, R
                hWnd&=ZGetParentForm(hWnd&)
                GOSUB MakeClientValues
            CASE "CS"   ' client area in screen coordinates
                GetClientRect hWnd&, R
                GOSUB MakeScreenValues
            CASE "C"   ' client coordinates
                GetClientRect hWnd&, R
            CASE "LVI"  ' listview item
                IF ZGetClass(hWnd&)="SYSLISTVIEW32" THEN
                    R.nLeft=%LVIR_BOUNDS
                    SendMessage hWnd&, %LVM_GETITEMRECT, Info1&, VARPTR(R)
                END IF
            CASE "LVSI"  ' listview subitem
                IF ZGetClass(hWnd&)="SYSLISTVIEW32" THEN
                    R.nTop=Info2&
                    R.nLeft=%LVIR_BOUNDS
                    SendMessage hWnd&, %LVM_GETSUBITEMRECT, Info1&, VARPTR(R)
                END IF

            CASE ELSE
            '    "SYSLISTVIEW32", "SYSTREEVIEW32","SYSTABCONTROL32"

        END SELECT
    ELSE
        SELECT CASE AS CONST$ UCASE$(AType$)
            CASE "DW"
                ZGetWorkArea hWnd&, R, 0
        END SELECT
    END IF
    X&=R.nLeft
    Y&=R.nTop
    W&=R.nRight-R.nLeft
    H&=R.nBottom-R.nTop
    EXIT SUB

    MakeClientValues:
    ScreenToClient hWnd&, BYVAL VARPTR(R)
    ScreenToClient hWnd&, BYVAL (VARPTR(R)+8)
    RETURN

    MakeScreenValues:
    ClientToScreen hWnd&, BYVAL VARPTR(R)
    ClientToScreen hWnd&, BYVAL (VARPTR(R)+8)
    RETURN

END SUB

SUB EZ_GetArea(BYVAL Form$, BYVAL ID&, X!, Y!, W!, H!, BYVAL AType$, BYVAL Info1&, BYVAL Info2&) EXPORT10
    LOCAL AX&, AY&, AW&, AH&, hWnd&
    IF UCASE$(AType$)="DW" THEN
        EZ_GetAreaPixels 0, AX&, AY&, AW&, AH&, AType$, Info1&, Info2&
    ELSE
        hWnd&=ezHandle(Form$, ID&,1)
        IF hWnd&<>0 THEN
            EZ_GetAreaPixels hWnd&, AX&, AY&, AW&, AH&, AType$, Info1&, Info2&
        END IF
    END IF
    X!=AX&/App_EZ_CharW
    Y!=AY&/App_EZ_CharH
    W!=AW&/App_EZ_CharW
    H!=AH&/App_EZ_CharH
END SUB

'------------------------------------------------------------------------------

SUB ZSizeWindow(BYVAL hWnd AS LONG, BYVAL lParam AS LONG, BYVAL wParam AS LONG, MovedFlag&)
LOCAL GX&, GY&, CW1&, CH1&, CW2&, CH2&, N&
LOCAL RR AS RECT, AW&, AH&, PT AS POINTAPI

IF App_SnapToDFlag& THEN EXIT SUB

' IF N&>0 THEN
        IF wParam=%SIZE_RESTORED THEN
            ' Window Grid based on Character size
'            IF IsWindowVisible(hWnd) THEN
            IF TestVisible(hWnd) THEN
                SELECT CASE AS LONG App_FormSizeMode&
                   CASE 1 TO 128
                      GY&=App_FormSizeMode&
                      GX&=App_FormSizeMode&
                   CASE -2
                      GY&=App_DDT_CHARY&
                      GX&=App_DDT_CHARX&
                   CASE ELSE
                      GY&=App_EZ_CharH
                      GX&=App_EZ_CharW
                END SELECT
            ELSE
               ' While Form is invisible during creation, no size checking is done
               GY&=1
               GX&=1
            END IF
            IF GX&=1 AND GY&=1 THEN
               EXIT SUB
            END IF
            CW1&=LOWRD(lParam)
            CH1&=HIWRD(lParam)
            CW2&=(CW1&\GX&)*GX&
            IF App_FormSizeOffset&=0 THEN
                CH2&=(CH1&\GY&)*GY&
            ELSE
                CH1&=CH1&-App_FormSizeOffset&
                CH2&=(CH1&\GY&)*GY&
                CH1&=CH1&+App_FormSizeOffset&
                CH2&=CH2&+App_FormSizeOffset&
            END IF
            IF CW2&<CW1& OR CH2&<CH1& THEN
                ' resize form
                GetWindowRect hWnd, RR
                AW&=RR.nRight-RR.nLeft
                AH&=RR.nBottom-RR.nTop
                AW&=AW&-(CW1&-CW2&)
                AH&=AH&-(CH1&-CH2&)
                PT.x=RR.nLeft
                PT.y=RR.nTop
                ' add code here to make location client coordinates if owned
                N&=ZFormNumH(hWnd)
                IF N&<>0 THEN
'                    IF AppForms(N&).FSpecial>=1 THEN
                    IF ZIsChildForm(hWnd) THEN
                        ScreenToClient GetParent(hWnd), PT
                    END IF
                END IF
                ' this was used when it was for MDI child
                '       ScreenToClient GetParent(hWnd), PT
                MoveWindow hWnd, PT.x, PT.y, AW&, AH&, 1
                MovedFlag&=1 ' prevents previous %EZ_Size from finishing processing
            END IF
        END IF
' END IF
END SUB

'------------------------------------------------------------------------------




' *************************************************************************************
'                      Custom SubClassed Control WinProcedures
' *************************************************************************************


FUNCTION ZRForm()AS LONG
LOCAL D$, X&, D2$
STATIC CT&
IF APP_EZ_UnRegistered& THEN
   CT&=CT&+1
   IF CT&=1 THEN
      '   12345678901234567890123456789012345678901234567890123
      '  "{S}EZGUI 3.5 Runtime||Copyright Christopher R. Boss 2003||***** SAMPLE PROJECT *****||Not for Commercial Distribution !"
      '                                   ^33            ^48
      D$=App_EZ_Regtext$
      D2$=MID$(D$,33,1)+MID$(D$,48,1)
      IF D2$<>"CB" THEN
          D$=REPEAT$(10, "Error ! "+CHR$(13)+CHR$(10))
          D$=D$+"Illegal Use of this Software !"
      END IF

      X&=PBVMsgBox("", D$, "Warning !",0)
   END IF
   FUNCTION=0
ELSE
   FUNCTION=1
END IF
END FUNCTION

'------------------------------------------------------------------------------


SUB EZ_ShapeFormToPicture(BYVAL FPicture$, BYVAL TColor&) EXPORT10
App_FormShapeBitmap&=EZ_ImageHandle(FPicture$)
IF App_FormShapeBitmap&<>0 THEN
    App_FormShapeTColor&=TColor&
END IF
END SUB

'------------------------------------------------------------------------------

' *************************************************************************************
'                          EZGUI / EZGUI EXPMACed General Functions
' *************************************************************************************

GLOBAL App_IsComponent&

SUB EZ_Form (BYVAL FormName$, BYVAL Parent$, BYVAL Caption$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL Style$) EXPORT10
LOCAL WS$, MD&, S$, P$, SFlag&, N&, MPFlag&, PrevForm$, PFlag&, FGC&, BGC&, AFont&, Layer&, CMPFlag&
STATIC RWFlag&, FCount&

CMPFlag&=App_IsComponent&

FormName$=UCASE$(TRIM$(FormName$))

IF CMPFlag&=0 THEN
    IF LEFT$(FormName$,1)="[" THEN EXIT SUB ' don't allow regular forms to use this syntax
END IF
IF App_AllowLoading&<>0 THEN
    DIM Pict$
    ZLoading FormName$, 0, C!, R!, W!, H!, Pict$, Caption$, Style$
END IF

EZ_SelectFormHandleEX 0     ' force using form handle for controls parent

Parent$=UCASE$(TRIM$(Parent$))
FGC&=EZ_FG
BGC&=EZ_BG
AFont&=EZ_Font
Layer&=App_EZ_CurLayer&

PrevForm$=App_EZ_CurForm$
PFlag&=0

App_MakeOwnedForm&=0

IF ZRForm()=0 THEN

END IF

IF RWFlag&=0 THEN
    PBVRegDialog ""
    RWFlag&=1
END IF

IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
WS$=""
MD&=0
SFlag&=1
S$=UCASE$(Style$)
MPFlag&=0
IF INSTR(S$,"{MDI-P}") THEN
   WS$=WS$+"4"
   S$=REMOVE$(S$,"{MDI-P}")
   MPFlag&=1
END IF
IF INSTR(S$,"{MDI-C}") THEN
   S$=REMOVE$(S$,"{MDI-C}")
   N&=ZFormNum(Parent$)
   IF N&<>0 THEN
       IF AppForms(N&).FType=4 THEN
           IF AppForms(N&).FhWnd2<>0 THEN
               IF ZGetClass(AppForms(N&).FhWnd2)=$MDIClientClassName THEN
                   WS$=WS$+"5"
               END IF
           END IF
       END IF
   END IF
END IF

P$=Parent$

IF INSTR(S$,"M") THEN MD&=1

IF App_FormShapeBitmap&<>0 THEN
    WS$=WS$+"G"
    IF INSTR(S$,"P") THEN
        WS$=WS$+"&O"
    ELSE
        IF INSTR(S$,"T") THEN WS$=WS$+"T"
    END IF
    IF INSTR(S$,"C") THEN WS$=WS$+"C"
    IF INSTR(S$,"R") THEN WS$=WS$+"O"
    GOTO SkipOthers
END IF

IF INSTR(S$,"N")=0 THEN WS$=WS$+"X"
IF INSTR(S$,"T") THEN WS$=WS$+"T"
IF INSTR(S$,"^") THEN WS$=WS$+"^"
IF INSTR(S$,"_") THEN WS$=WS$+"_"

IF INSTR(S$,"V") THEN WS$=WS$+"V"
IF INSTR(S$,"B") THEN WS$=WS$+"B"
IF INSTR(S$,"C") THEN WS$=WS$+"C"
IF INSTR(S$,"R") THEN WS$=WS$+"O"
IF INSTR(S$,"?") THEN WS$=WS$+"?"
'IF INSTR(S$,"W") THEN WS$=WS$+"W"
' Disable Close
IF INSTR(S$,"D") THEN WS$=WS$+"D"
IF INSTR(S$,"=") THEN WS$=WS$+"="
IF INSTR(WS$,"5") THEN
    IF INSTR(WS$,"O")=0 THEN WS$=WS$+"O"  ' MDI child must be relative offset
END IF
IF INSTR(S$,"4")=0 THEN
    IF INSTR(S$,"5")=0 THEN
        IF INSTR(S$,"P") THEN
            PFlag&=1
            WS$="&"
            IF INSTR(S$,"N")=0 THEN WS$=WS$+"X"
            IF INSTR(S$,"V") THEN WS$=WS$+"V"
            IF INSTR(S$,"B") THEN WS$=WS$+"B"
            IF INSTR(S$,"F") THEN WS$=WS$+"F"
            IF INSTR(S$,"Z") THEN WS$=WS$+"R"
            IF INSTR(S$,"=") THEN WS$=WS$+"="
            IF INSTR(S$,"T") THEN WS$=WS$+"T"
            IF INSTR(S$,"^") THEN WS$=WS$+"^"
            IF INSTR(S$,"_") THEN WS$=WS$+"_"

'            IF INSTR(S$,"I") THEN WS$=WS$+"I"

            MD&=0
            IF INSTR(S$,"C") THEN
                WS$=WS$+"CO"
            ELSE
                WS$=WS$+"O"
            END IF
            IF INSTR(S$,"S") THEN
                WS$=WS$+"!"
                S$=REMOVE$(S$,"S")
            END IF
        END IF
        IF INSTR(S$,"S") THEN
            WS$="S"
        '    MD&=0
            IF INSTR(S$,"V") THEN WS$=WS$+"V"
            IF INSTR(S$,"B") THEN WS$=WS$+"B"
            IF INSTR(S$,"C") THEN WS$=WS$+"C"
            IF INSTR(S$,"R") THEN WS$=WS$+"O"
            IF INSTR(S$,"F") THEN
                WS$=WS$+"F"
            ELSEIF INSTR(S$,"!") THEN
                WS$=WS$+"!"
            END IF
            IF INSTR(S$,"T") THEN WS$=WS$+"T"
        END IF
    END IF
END IF

IF INSTR(S$,"Z") THEN WS$=WS$+"R"

IF MD&=0 THEN
    IF INSTR(S$,"H") THEN
        SFlag&=0
    END IF
    IF INSTR(S$,"P")=0 THEN  ' not a Page Form
       IF INSTR(S$,"T")=0 THEN   ' not a topmost form
          IF INSTR(S$, "S")=0 THEN  ' not a splash form
             IF INSTR(S$,"5")=0 THEN  ' not MDI child
                 IF INSTR(S$,"4")=0 THEN ' not MDI parent
                     IF INSTR(S$,"O") THEN  ' owned window

                         WS$=WS$+"O"     ' coordinates must be relative
                         App_MakeOwnedForm&=1
                     END IF
                 END IF
             END IF
          END IF
       END IF
    END IF
END IF

SkipOthers:

IF INSTR(S$,"#") THEN
   WS$=WS$+"#"   ' add dot BG
   IF INSTR(S$,"|") THEN WS$=WS$+"|"   ' add Line BG
END IF

'IF INSTR(S$,"W") THEN
'    IF WLF_Loaded&=0 THEN
'        MSGBOX "Callbacks for W Property have not been Initialized !"+CHR$(13)+CHR$(10)+"Form - "+FormName$+" not created."
'        EXIT SUB
'    END IF
'END IF
IF INSTR(S$,"K") THEN WS$=WS$+"K"   ' add clipping
IF INSTR(S$,"+") THEN WS$=WS$+"+"


FCount&=FCount&+1
IF INSTR(S$,"O") THEN
    ' Owned Forms cannot be created in another Forms EZ_DesignWindow procedure
    IF FCount&>1 THEN
       FCount&=FCount&-1
       EXIT SUB
    END IF
    IF App_IsEZ_Main& THEN
       FCount&=FCount&-1
       EXIT SUB
    END IF
END IF

App_EZ_CurLayer&=0      ' set layer to zero for controls
PBVDefDialogT FormName$, P$, Caption$, C!, R!, W!, H!, WS$, MD&, CMPFlag&

App_FormShapeBitmap&=0
App_FormShapeTColor&=0


IF SFlag& THEN
    PBVShow FormName$, -1
ELSE
    PBVLoad FormName$
END IF

' restore state of current colors/font/Layer
EZ_Color FGC&, BGC&
EZ_UseFont AFont&
EZ_SetLayer Layer&

App_MakeOwnedForm&=0
App_EZ_CurForm$=FormName$

IF PFlag& THEN
    App_EZ_CurForm$=PrevForm$
    EZ_SetForm PrevForm$, 0
END IF

IF MD&=1 THEN
    ZModalLoop 1    ' start modal loop
END IF
FCount&=FCount&-1
END SUB

'------------------------------------------------------------------------------

SUB EZ_FormEx (BYVAL FormName$, BYVAL Parent$, BYVAL Caption$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL Style$, BYVAL DWPTR AS DWORD, BYVAL EVPTR AS DWORD) EXPORT10
    App_FormJumpAddress1=DWPTR
    App_FormJumpAddress2=EVPTR
    EZ_Form FormName$, Parent$, Caption$, C!, R!, W!, H!, Style$
END SUB

'------------------------------------------------------------------------------



' ------------------------------------
' Component Globals
' ------------------------------------
GLOBAL App_CMPName() AS STRING
GLOBAL App_CMPLibHandle() AS DWORD
GLOBAL App_CMPInitData() AS STRING
GLOBAL App_CMPEventsA() AS DWORD
GLOBAL App_CMPDesignA() AS DWORD
GLOBAL App_MaxCMP&
GLOBAL App_LastCMP&
GLOBAL App_LastCMPDLL&
' ------------------------------------

DECLARE FUNCTION EZ_E() AS STRING

SUB EZ_AddComponent(BYVAL FormName$, BYVAL IDNum&, BYVAL CMPName$, BYVAL InitText$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL Style$) EXPORT10
    LOCAL F$, ST$, LEV&, CT&, QFlag&, hWnd&, DefST$, P&, DT$, CMP$, N&, SBMode&
    RANDOMIZE TIMER
    CMP$=TRIM$(UCASE$(CMPName$))
    DO
        F$="["+CMP$+"|"+TRIM$(STR$(RND(1,9999)))+"]"
        IF ezHandle(F$,0,0)=0 THEN EXIT LOOP
        CT&=CT&+1
        IF CT&>=9999 THEN   ' max time should be able 1/10 second at most
            QFlag&=1
            EXIT LOOP
        END IF
    LOOP
    IF QFlag& THEN EXIT SUB

    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ' generate %EZ_Loading for component as if it is a control
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, InitText$, Style$
    END IF
    ST$="P"
    IF INSTR(Style$,"S") THEN ST$=ST$+"S"
    IF INSTR(Style$,"H") THEN ST$=ST$+"H"
    IF INSTR(Style$,"F") THEN ST$=ST$+"F"
    IF INSTR(Style$,"Z") THEN ST$=ST$+"Z"
    IF INSTR(Style$,"V") THEN ST$=ST$+"V"
    IF INSTR(Style$,"B") THEN ST$=ST$+"B"
    IF INSTR(Style$,"K") THEN ST$=ST$+"K"
    IF INSTR(Style$,"#") THEN ST$=ST$+"#"
    IF INSTR(Style$,"|") THEN ST$=ST$+"|"
    IF INSTR(Style$,"+") THEN ST$=ST$+"+"
    DT$=""
    FOR N&=1 TO App_LastCMP&
        IF App_CMPName(N&)=CMP$ THEN
            DT$=App_CMPInitData(N&)
            EXIT FOR
        END IF
    NEXT N&
    DefST$=""
    ' current data is:   Default properties (EZ_E) Default text (EZ_E) Include name (must be in component folder) without path
    IF DT$<>"" THEN
        P&=INSTR(DT$, EZ_E)
        IF P&<>0 THEN
            DefST$=LEFT$(DT$, P&-1)
        END IF
    END IF
    ST$=ST$+DefST$
    App_IsComponent&=1
    LEV&=App_AllowLoading&
    App_AllowLoading&=2
    ' form generates the %EZ_Loaded, %EZ_Started events for form internally (component)
    App_ComponentID&=IDNum&
    EZ_SaveState
'    InitText$=TRIM$(InitText$)
'    IF RIGHT$(InitText$,1)<>"|" THEN InitText$=InitText$+"|"
'    REPLACE "|" WITH CHR$(1) IN InitText$
    SBMode&=App_EZ_SubClass&
    EZ_Form F$, FormName$, InitText$, C!, R!, W!, H!, ST$
    EZ_RestoreState
'    IF SBMode&<>0 THEN EZ_SubClassEx EZ_Handle(F$,0), SBMode&
    EZ_SubClassEx EZ_Handle(F$,0), SBMode&
    App_EZ_SubClass&=SBMode&
    ' WM_CREATE message for form will zero out App_ComponentID&
    App_AllowLoading&=LEV&
    App_IsComponent&=0
    LOCAL CMsg&, CVal&, Cancel&
    CMsg&=%EZ_Loaded
    IF PBVAddress(2)<>0 THEN
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, IDNum&, CMsg&, CVal&, Cancel&)
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFormSysMenu(BYVAL FormName$, BYVAL MItem$, BYVAL EFlag&) EXPORT10
LOCAL hWnd AS LONG, EF&, hMenu&, N&, OKFlag&, ID&
hWnd=PBVFormHandle(FormName$)
MItem$=UCASE$(MItem$)
IF hWnd<>0 THEN
    hMenu&=GetSystemMenu(hWnd,0)
    FOR N&=1 TO LEN(MItem$)
        OKFlag&=1
        SELECT CASE AS CONST$ MID$(MItem$,N&,1)
            CASE "X"
                ID&=%SC_CLOSE
            CASE "^"
                ID&=%SC_MAXIMIZE
            CASE "_"
                ID&=%SC_MINIMIZE
            CASE "Z"
                ID&=%SC_SIZE
            CASE "R"
                ID&=%SC_RESTORE
            CASE ELSE
                OKFlag&=0
        END SELECT
        IF OKFlag&<>0 THEN
            IF EFlag& THEN
                EF&=%MF_BYCOMMAND OR %MF_ENABLED
            ELSE
                EF&=%MF_BYCOMMAND OR %MF_GRAYED
            END IF
            EnableMenuItem hMenu&, ID&, EF&
        END IF
    NEXT N&
END IF
END SUB

SUB EZ_SetForm (BYVAL FormName$, BYVAL FmFocus&) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=FormName$
    ZSetCurrent hWnd
    IF FmFocus&<>0  THEN
        IF GetMyWindowLong(hWnd,2)=5 THEN
            PostMessage GetParent(hWnd), %WM_MDIACTIVATE, hWnd,0
        ELSE
            SetFocus hWnd
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetGridDisplay(BYVAL FormName$, BYVAL GridVal&) EXPORT10
LOCAL AFNum&
AFNum&=ZFormNum(FormName$)
IF AFNum&<>0 THEN
    IF GridVal&<0 OR GridVal&>2 THEN GridVal&=0
    AppForms(AFNum&).FDotBG=GridVal&
    EZ_RedrawForm FormName$
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SelectFormHandleEX(BYVAL N&) EXPORT10
    App_UseAlternateParent&=0
    IF N&>=0 AND N&<=4 THEN
        App_UseAlternateParent&=N&
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFormHandleEX(BYVAL FormName$, BYVAL hWnd AS LONG, BYVAL N&) EXPORT10
    LOCAL AFNum&, hChild&
    AFNum&=ZFormNum(FormName$)
    hChild&=0
    IF AFNum&<>0 THEN
        IF hWnd<>0 THEN
            IF IsWindow(hWnd) THEN
                IF IsChild(AppForms(AFNum&).FhWnd, hWnd) THEN
                    hChild&=hWnd
                END IF
            END IF
        END IF
    END IF
    App_UseAlternateParent&=0
    IF hChild&<>0 THEN
        IF N&>=0 AND N&<=4 THEN
            App_UseAlternateParent&=N&
        END IF
    END IF
    SELECT CASE AS LONG N&
        CASE 1
            AppForms(AFNum&).FhWnd3=hChild&
        CASE 2
            AppForms(AFNum&).FhWnd4=hChild&
        CASE 3
            AppForms(AFNum&).FhWnd5=hChild&
        CASE 4
            AppForms(AFNum&).FhWnd6=hChild&
        CASE ELSE
            AppForms(AFNum&).FhWnd2=hChild&
    END SELECT
END SUB

SUB EZ_SetFormHandle (BYVAL FormName$, BYVAL hWnd AS LONG) EXPORT10
LOCAL AFNum&
AFNum&=ZFormNum(FormName$)
IF AFNum&<>0 THEN
    IF hWnd<>0 THEN
        IF IsWindow(hWnd) THEN
            IF IsChild(AppForms(AFNum&).FhWnd, hWnd) THEN
                AppForms(AFNum&).FhWnd2=hWnd
            END IF
        END IF
    ELSE
        AppForms(AFNum&).FhWnd2=0
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ShowForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=FormName$
    PBVShow FormName$, 0
END IF
END SUB

'------------------------------------------------------------------------------


SUB EZ_MinimizeForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=FormName$
    PBVShow FormName$, 1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_RestoreForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=FormName$
    PBVShow FormName$, 3
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_MaximizeForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=FormName$
    PBVShow FormName$, 2
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ShowPopups(BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
      ShowOwnedPopups hWnd, -1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_HidePopups(BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
      ShowOwnedPopups hWnd, 0
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ShowPage (BYVAL FormName$) EXPORT10
LOCAL AFNum&, N&
AFNum&=ZFormNum(FormName$)
IF AFNum&<>0 THEN
    IF AppForms(AFNum&).FSpecial=1 THEN
        FOR N&=1 TO AppLastForm&
            IF N&<>AFNum& THEN
                IF AppForms(N&).FSpecial=1 THEN
                    IF AppForms(N&).FParentName=AppForms(AFNum&).FParentName THEN
                        PBVHide LTRIM$(RTRIM$(AppForms(N&).FName))
                    END IF
                END IF
            END IF
        NEXT N&
        App_EZ_CurForm$=FormName$
        PBVShow FormName$, 0
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_HideForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=""
    PBVHide FormName$
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_UnloadForm (BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN    ' does form exist
    App_EZ_CurForm$=""
    PBVUnload FormName$
END IF
END SUB

'------------------------------------------------------------------------------

GLOBAL App_CurrentMCI_Form$
GLOBAL App_CurrentMCI_ID&

SUB EZ_UseMCI(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    App_CurrentMCI_Form$=""
    App_CurrentMCI_ID&=0
    IF PBVGetClass(FormName$, IDNum&)=$MCIClassName THEN
        App_CurrentMCI_Form$=FormName$
        App_CurrentMCI_ID&=IDNum&
    END IF
END SUB

SUB EZ_SetMCI(BYVAL CText$) EXPORT10
    IF App_CurrentMCI_ID&<>0 THEN EZ_SetText App_CurrentMCI_Form$,App_CurrentMCI_ID&, CText$
END SUB

FUNCTION EZ_GetMCI() EXPORT10 AS STRING
    LOCAL RV$
    IF App_CurrentMCI_ID&<>0 THEN
        RV$=EZ_GetText(App_CurrentMCI_Form$,App_CurrentMCI_ID&)
    END IF
    FUNCTION=RV$
END FUNCTION

SUB EZ_SetText (BYVAL FormName$, BYVAL ID&, BYVAL CText$) EXPORT10
PBVSetText FormName$, ID&, CText$
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetTextLen (BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=VAL(PBVGetText(FormName$, ID&, -1))
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetText (BYVAL FormName$, BYVAL ID&) EXPORT10 AS STRING
FUNCTION=PBVGetText(FormName$, ID&, -2)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetItemText (BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10 AS STRING
'    App_EZ_HandleFlag&=1
    IF N&<0 THEN N&=0
    FUNCTION=PBVGetText(FormName$, ID&, N&)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetCheck (BYVAL FormName$, BYVAL ID&, BYVAL V&) EXPORT10
     PBVSetCheck FormName$, ID&, V&
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetCheck (BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
FUNCTION=PBVGetCheck(FormName$, ID&)
END FUNCTION

'------------------------------------------------------------------------------

GLOBAL App_DefaultImageFolder$

SUB EZ_DefImageFolder(BYVAL F$) EXPORT10
    IF RIGHT$(F$,1)="\" THEN F$=LEFT$(F$, LEN(F$)-1)
    IF INSTR(F$,"\")=0 THEN F$=EZ_AppPath+F$
    IF F$<>"" THEN
        IF DIR$(F$,16)<>"" THEN
            App_DefaultImageFolder$=F$+"\"
            EXIT SUB
        END IF
    END IF
    App_DefaultImageFolder$=EZ_AppPath
END SUB

FUNCTION ZGFile(BYVAL F$) AS STRING
    LOCAL DFlag&
    F$=TRIM$(F$)
    DFlag&=1
    IF INSTR(F$,"\") THEN DFlag&=0
    IF DFlag& THEN F$=App_DefaultImageFolder$+F$
    FUNCTION=F$
END FUNCTION

FUNCTION zLoadPicture (BYVAL BName$, BYVAL DIBFlag&) AS STRING
LOCAL PN$, RN$, ISource&, IProp$
' App_EZ_PCount=App_EZ_PCount+1
PN$=""
RN$=""
IProp$=ZParseIProp(BName$)
ISource&=0
IF LEFT$(BName$,1)="%" THEN
    RN$=ZName(MID$(BName$,2))
    ISource&=1
ELSEIF LEFT$(BName$,1)="$" THEN
    RN$=ZName(MID$(BName$,2))
    ISource&=2
ELSE
    App_EZ_PCount=App_EZ_PCount+1
    RN$="$BMP_"+HEX$(App_EZ_PCount)
    PN$=ZGFile(BName$)
END IF
PBVDefImage RN$, PN$, 1, ISource&, IProp$, 0, DIBFlag&,0,0
FUNCTION=RN$
END FUNCTION

FUNCTION EZ_LoadPicture (BYVAL BName$) EXPORT10 AS STRING
    FUNCTION=zLoadPicture(BName$, 0)
END FUNCTION

FUNCTION EZ_LoadDIBPicture (BYVAL BName$) EXPORT10 AS STRING
    FUNCTION=zLoadPicture(BName$, 1)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_LoadImageLib(BYVAL StubFileName$) EXPORT10
LOCAL Stub AS ASCIIZ*265, F$
IF AppStubInstance&=0 THEN  ' hasn't been loaded yet
    IF StubFileName$="" THEN
        F$="EZIMGLIB.DLL"
    ELSE
        F$=StubFileName$
    END IF
    Stub=F$+CHR$(0)
    AppStubInstance&=LoadLibrary(Stub)
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_LoadCursor(BYVAL CName$, BYVAL CurNum&) EXPORT10
LOCAL CN AS ASCIIZ*265, LFlag&, hInst&, Half&, SC&
Half&=UBOUND(AppCursor)/2
IF CurNum&>=LBOUND(AppCursor) AND CurNum&<=Half& THEN
    IF AppCursor(CurNum&)=0 THEN
        IF LEFT$(CName$,1)="%" THEN
            CN=ZName(MID$(CName$,2))+CHR$(0)
            IF AppStubInstance&=0 THEN EZ_LoadImageLib ""   ' load Default stub file if not loaded already
            AppCursor(CurNum&)=LoadCursor(AppStubInstance&, CN)
        ELSEIF LEFT$(CName$,1)="$" THEN
            CN=ZName(MID$(CName$,2))+CHR$(0)
            AppCursor(CurNum&)=LoadCursor(AppInstance&, CN)
        ELSEIF LEFT$(CName$,1)="#" THEN
            SELECT CASE AS CONST$ UCASE$(CName$)
                CASE "#A"
                    SC&=%IDC_ARROW
                CASE "#I"
                    SC&=%IDC_IBEAM
                CASE "#W"
                    SC&=%IDC_WAIT
                CASE "#+"
                    SC&=%IDC_CROSS
                CASE "#UP"
                    SC&=%IDC_UPARROW
                CASE "#\"
                    SC&=%IDC_SIZENWSE
                CASE "#/"
                    SC&=%IDC_SIZENESW
                CASE "#-"
                    SC&=%IDC_SIZEWE
                CASE "#|"
                    SC&=%IDC_SIZENS
                CASE "#<+>"
                    SC&=%IDC_SIZEALL
                CASE "#N"
                    SC&=%IDC_NO
                CASE "#H"
                    SC&=%IDC_HAND
                CASE "#AW"
                    SC&=%IDC_APPSTARTING
                CASE "#?"
                    SC&=%IDC_HELP
                CASE ELSE
            END SELECT
            IF SC&<>0 THEN
                AppCursor(CurNum&)=LoadCursor(0, BYVAL MAKLNG(SC&,0))
            END IF
        ELSE
            CName$=ZGFile(CName$)
            CN=CName$+CHR$(0)
            AppCursor(CurNum&)=LoadCursorFromFile(CN)
        END IF
    END IF
END IF

' destroyable cursors
IF CurNum&>=Half&+1 AND CurNum&<=UBOUND(AppCursor) THEN
    IF AppCursor(CurNum&)=0 THEN
        IF LEFT$(CName$,1)="%" THEN
            CN=ZName(MID$(CName$,2))+CHR$(0)
            IF AppStubInstance&=0 THEN EZ_LoadImageLib ""   ' load Default stub file if not loaded already
            hInst&=AppStubInstance&
            GOSUB LoadDestroyableCursor
        ELSEIF LEFT$(CName$,1)="$" THEN
            CN=ZName(MID$(CName$,2))+CHR$(0)
            hInst&=AppInstance&
            GOSUB LoadDestroyableCursor
        ELSE
            CN=CName$+CHR$(0)
            hInst&=0
            GOSUB LoadDestroyableCursor
        END IF
    END IF
END IF
EXIT SUB

LoadDestroyableCursor:
    LFlag&=0
    IF hInst&=0 THEN
        LFlag&=LFlag& OR %LR_LOADFROMFILE
    END IF
    AppCursor(CurNum&)=LoadImage(hInst&, CN, %Image_Cursor, 0, 0, LFlag&)
RETURN

END SUB

'------------------------------------------------------------------------------

SUB EZ_FreeCursor(BYVAL CurNum&) EXPORT10
    LOCAL Half&
    Half&=UBOUND(AppCursor)/2
    IF CurNum&>=Half&+1 AND CurNum&<=UBOUND(AppCursor) THEN
        IF AppCursor(CurNum&)<>0 THEN
            DestroyCursor AppCursor(CurNum&)
            AppCursor(CurNum&)=0
        END IF
    END IF
END SUB

FUNCTION ZParseIProp(D$) AS STRING
LOCAL IProp$, P&, N&, CMP$
IProp$=""
FOR N&=1 TO 3
    SELECT CASE AS LONG N&
        CASE 1
            CMP$="M"    ' Monochrome
        CASE 2
            CMP$="T"    ' Transparent
        CASE 3
            CMP$="S"    ' map system colors
        CASE ELSE
    END SELECT
    P&=INSTR(UCASE$(D$), "{"+CMP$+"}")
    IF P&<>0 THEN
        D$=LEFT$(D$,P&-1)+MID$(D$,P&+3)
        IProp$=IProp$+CMP$
    END IF
NEXT N&
FUNCTION=IProp$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_LoadIcon (BYVAL BName$) EXPORT10 AS STRING
LOCAL PN$, RN$, ISource&, IProp$, ResID&
' App_EZ_PCount=App_EZ_PCount+1
PN$=""
RN$=""
IProp$=ZParseIProp(BName$)
ISource&=0
ResID&=0
IF LEFT$(BName$,1)="%" THEN
    RN$=ZName(MID$(BName$,2))
    ISource&=1
    IF LEFT$(RN$,2)="EZ" THEN
          SELECT CASE AS CONST$ MID$(RN$,3)
               CASE "STOP1"
                     ResID&=2000
               CASE "STOPH"
                     ResID&=2001
               CASE "YIELD"
                     ResID&=2002
               CASE "GO"
                     ResID&=2003
               CASE "SUNSET"
                     ResID&=2004
               CASE "MTN"
                     ResID&=2005
               CASE "INFO2"
                     ResID&=2006
               CASE "PTR"
                     ResID&=2007
               CASE "GLASS"
                     ResID&=2008
               CASE "LIGHT"
                     ResID&=2009
               CASE ELSE
          END SELECT
    END IF
ELSEIF LEFT$(BName$,1)="$" THEN
    RN$=ZName(MID$(BName$,2))
    ISource&=2
ELSEIF LEFT$(BName$,1)="#" THEN
    RN$="%ICO_"+ZName(MID$(BName$,2))
    ISource&=3
ELSE
    App_EZ_PCount=App_EZ_PCount+1
    RN$="$ICO_"+HEX$(App_EZ_PCount)
    PN$=ZGFile(BName$)
END IF
PBVDefImage RN$, PN$, 0, ISource&, IProp$, ResID&,0,0,0
FUNCTION=RN$
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_FreeImage(BYVAL IName$) EXPORT10
PBVFreeImage IName$
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetVScroll(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&, BYVAL SJmp&) EXPORT10
PBVSetScroll FormName$, ID&, "V", SMin&, SMax&, SJmp&, SPos&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetHScroll(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&, BYVAL SJmp&) EXPORT10
PBVSetScroll FormName$, ID&, "H", SMin&, SMax&, SJmp&, SPos&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetPBar(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&) EXPORT10
PBVSetScroll FormName$, ID&, "P", SMin&, SMax&, 1, SPos&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetUpDown(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&) EXPORT10
PBVSetScroll FormName$, ID&, "U", SMin&, SMax&, 1, SPos&

END SUB

SUB zShowFormScrollBars(FormName$, SProp$, BYVAL SFlag&)
    LOCAL hWnd&, WFlag&
    hWnd&=ezHandle(FormName$,0,1)
    IF hWnd&<>0 THEN
        SELECT CASE AS CONST$ UCASE$(TRIM$(SProp$))
            CASE "V"
                WFlag&=%SB_VERT
            CASE "H"
                WFlag&=%SB_HORZ
            CASE "B", "VH", "HV"
                WFlag&=%SB_BOTH
            CASE ELSE
                EXIT SUB
        END SELECT
        ShowScrollBar hWnd&, WFlag&, SFlag&
    END IF
END SUB

SUB EZ_ShowFormScrollBars(BYVAL FormName$, BYVAL SProp$) EXPORT10
    zShowFormScrollBars FormName$, SProp$, 1
END SUB

SUB EZ_HideFormScrollBars(BYVAL FormName$, BYVAL SProp$) EXPORT10
    zShowFormScrollBars FormName$, SProp$, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetTBar(BYVAL FormName$, BYVAL ID&, BYVAL SMin&, BYVAL SMax&, BYVAL SPos&) EXPORT10
PBVSetScroll FormName$, ID&, "T", SMin&, SMax&, 1, SPos&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetRowCol (BYVAL Flag&) EXPORT10
IF Flag& THEN
    App_EZ_RCMode&=1
ELSE
    App_EZ_RCMode&=0
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefMaxLayer(BYVAL MaxL&) EXPORT10
IF MaxL&>App_MaximumLayer& AND MaxL&<=999 THEN
    App_MaximumLayer&=MaxL&
    App_LayerMax&=App_MaximumLayer&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefCharSize (BYVAL W&, BYVAL H&) EXPORT10
IF W&<1 THEN W&=1
IF W&>64 THEN W&=64
IF H&<1 THEN H&=1
IF H&>64 THEN H&=64
IF W&<>App_EZ_CharW OR H&<>App_EZ_CharH THEN
    App_EZ_CharW=W&
    App_EZ_CharH=H&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefCharSizeA (BYVAL W&, BYVAL H&) EXPORT10
IF W&<1 THEN W&=1
IF W&>64 THEN W&=64
IF H&<1 THEN H&=1
IF H&>64 THEN H&=64
IF W&<>App_EZ_CharW OR H&<>App_EZ_CharH THEN
    App_EZ_CharW=W&
    App_EZ_CharH=H&
    App_FixedFontScale&=1
    ZInitFonts 1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_GetScreenSize ( SW&, SH&) EXPORT10
SW&=GetSystemMetrics(%SM_CXSCREEN)
SH&=GetSystemMetrics(%SM_CYSCREEN)
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefColor(BYVAL N&, BYVAL R&, BYVAL G&, BYVAL B&) EXPORT10
PBVDefBrush N&, RGB(R&,G&,B&)
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefColorL(BYVAL N&, BYVAL C&) EXPORT10
PBVDefBrush N&, C&
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefHColor(BYVAL N&, BYVAL H&, BYVAL R&, BYVAL G&, BYVAL B&) EXPORT10
'       %HS_HORIZONTAL                               = 0     '  -----
'       %HS_VERTICAL                                 = 1     '  |||||
'       %HS_FDIAGONAL                                = 2     '  \\\\\
'       %HS_BDIAGONAL                                = 3     '  -----
'       %HS_CROSS                                    = 4     '  +++++
'       %HS_DIAGCROSS                                = 5     '  xxxxx
'       %HS_FDIAGONAL1                               = 6
'       %HS_BDIAGONAL1                               = 7
IF H&<0 THEN H&=0
IF H&>7 THEN H&=7
PBVDefHBrush N&, H&, RGB(R&,G&,B&)
END SUB

'------------------------------------------------------------------------------

FUNCTION ZFGColorNum(BYVAL FG&) AS LONG
LOCAL RV&
RV&=-1
IF FG&>=0 AND FG&<=UBOUND(AppBrush) THEN
    IF AppBrush(FG&)<>0 THEN RV&=FG&
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION ZBGColorNum(BYVAL BG&) AS LONG
LOCAL RV&
RV&=-1
IF (BG&>=%APP_LowBrushN) AND (BG&<=UBOUND(AppBrush)) THEN
    IF AppBrush(BG&)<>0 THEN  RV&=BG&
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_Color (BYVAL FG&, BYVAL BG&) EXPORT10
    App_RGBColorFlag&=0     ' turn off RGB mode
    ZQBColors FG&, BG&      ' create as QB Colors if not already exist
    App_EZ_AFGColor&=ZFGColorNum&(FG&)
    IF BG&<-1 THEN
       ZPatColor BG&        ' create as Pattern orFake color if not already exist
    END IF
    App_EZ_ABGColor&=ZBGColorNum&(BG&)
    IF App_SystemDlgFreeze=0 THEN
        App_SystemFG=App_EZ_AFGColor&
        App_SystemBG=App_EZ_ABGColor&
    END IF
END SUB

SUB EZ_ColorRGB(BYVAL FGC&, BYVAL BGC&) EXPORT10
    App_RGBColorFlag&=1
    App_RGBColorFG&=FGC&
    App_RGBColorBG&=BGC&
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_FG() EXPORT10 AS LONG
FUNCTION=App_EZ_AFGColor&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_BG() EXPORT10 AS LONG
FUNCTION=App_EZ_ABGColor&
END FUNCTION

FUNCTION EZ_Font() EXPORT10 AS LONG
FUNCTION=App_EZ_AFont&
END FUNCTION

GLOBAL App_PushFlag&

'------------------------------------------------------------------------------

SUB PushPopColors(BYVAL N1&, BYVAL N2&, BYVAL PFlag&)
LOCAL N&
STATIC  PopBrush&(), PopColor&()
IF PFlag&=1 THEN
    REDIM PopBrush&(N1& TO N2&)
    REDIM PopColor&(N1& TO N2&)
    FOR N&=N1& TO N2&
        PopBrush&(N&)=AppBrush(N&)
        AppBrush(N&)=0
        PopColor&(N&)=AppColor(N&)
        AppColor(N&)=0
    NEXT N&
ELSE
    FOR N&=LBOUND(PopBrush&) TO UBOUND(PopBrush&)
        IF AppBrush(N&)<>0 THEN
            DeleteObject AppBrush(N&)
        END IF
        AppBrush(N&)=PopBrush&(N&)
        AppColor(N&)=PopColor&(N&)
    NEXT N&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SaveColors(BYVAL N1&, BYVAL N2&) EXPORT10
IF App_PushFlag&=0 THEN
    IF N1&>N2& THEN SWAP N1&, N2&
    IF N1&>15 AND N1&<=UBOUND(AppBrush) THEN
        IF N2&>15 AND N2&<=UBOUND(AppBrush) THEN
            App_PushFlag&=1
            PushPopColors N1&, N2&, 1
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_RestoreColors() EXPORT10
IF App_PushFlag&=1 THEN
    App_PushFlag&=0
    PushPopColors 0,0,0
END IF
END SUB


SUB ZSaveRestore(BYVAL SFlag&)
STATIC OldV&(), FFlag&, CT&
IF FFlag&=0 THEN
    REDIM OldV&(1 TO 100,1 TO 8)
    FFlag&=1
    CT&=0
END IF
IF SFlag& THEN
    IF CT&<100 THEN
        CT&=CT&+1
        OldV&(CT&,1)=App_EZ_AFGColor&
        OldV&(CT&,2)=App_EZ_ABGColor&
        OldV&(CT&,3)=App_EZ_AFont&
        OldV&(CT&,4)=App_DrawTextFormat&
        OldV&(CT&,5)=App_Par1&
        OldV&(CT&,6)=App_Par2&
        OldV&(CT&,7)=App_Par3&
        OldV&(CT&,8)=App_Par4&
    END IF
ELSE
    IF CT>0 THEN
        App_EZ_AFGColor&=OldV&(CT&,1)
        App_EZ_ABGColor&=OldV&(CT&,2)
        App_EZ_AFont&=OldV&(CT&,3)
        App_DrawTextFormat&=OldV&(CT&,4)
        App_Par1&=OldV&(CT&,5)
        App_Par2&=OldV&(CT&,6)
        App_Par3&=OldV&(CT&,7)
        App_Par4&=OldV&(CT&,8)
        CT&=CT&-1
    END IF
END IF
END SUB


SUB EZ_SaveState() EXPORT10
    ZSaveRestore 1
END SUB

SUB EZ_RestoreState() EXPORT10
    ZSaveRestore 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetOnLayer(BYVAL FormName$, BYVAL IDNum&, BYVAL L&) EXPORT10
    LOCAL hCtrl AS LONG
    LOCAL I&, AFNum&, WLN&
    hCtrl=ezHandle(FormName$,IDNum&,1)
        IF hCtrl<>0 THEN
            I&=ZGetControlIndex(hCtrl)
            IF I&<>0 THEN
                IF L&>=0 AND L&<=App_MaximumLayer& THEN
                    AppControlLayer(I&)=L&
                END IF
            END IF

        END IF
END SUB

'------------------------------------------------------------------------------
SUB ZRedrawColor(BYVAL hCtrl&)
LOCAL X&
IF IsWindowVisible(hCtrl&) THEN
    X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
    RedrawWindow hCtrl&, BYVAL %NULL, BYVAL %NULL, X&
END IF
END SUB

FUNCTION ZSetMsg(BYVAL SFlag&, BYVAL Msg1&, BYVAL Msg2&, SVal&) AS LONG
    LOCAL RV&
    IF SFlag&=0 THEN    ' get
        RV&=Msg1&
        SVal&=0
    ELSE                ' set
        RV&=Msg2&
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION ZTestColor(BYVAL SVal&) AS LONG
    IF SVal&=-1 THEN SVal&=%CLR_DEFAULT
    FUNCTION=SVal&
END FUNCTION

FUNCTION ZGetSetInfo(FormName$, IDNum&, IType$, BYVAL SFlag&, BYVAL SVal&) AS LONG
    LOCAL hCtrl&, Msg&, wParam&, lParam&, RV&, LWFlag&, HWFlag&, CC$
    RV&=0
    LWFlag&=0
    HWFlag&=0
    IType$=UCASE$(IType$)
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        Msg&=0
        wParam&=0
        lParam&=0
        CC$=ZGetClass(hCtrl&)
        SELECT CASE AS CONST$ CC$
             CASE "RICHEDIT", "RICHEDIT20A","RICHEDIT50W"
                 GOSUB MsgRich
             CASE "SYSLISTVIEW32"
                 GOSUB MsgLV
             CASE "SYSTREEVIEW32"
                 GOSUB MsgTV
             CASE "LISTBOX", $PLISTCLASS, $FLISTCLASS
                 GOSUB MsgListbox
             CASE "SYSTABCONTROL32"
                 GOSUB MsgTab
             CASE "TOOLBARWINDOW32"
                 GOSUB MsgTB
             CASE "COMBOBOX"
                 GOSUB MsgCombo
             CASE "BUTTON
                 GOSUB MsgButton
'             CASE "STATIC"

             CASE "EDIT"
                 GOSUB MsgEdit
             CASE "MSCTLS_PROGRESS32"
                 GOSUB MsgPB
             CASE "MSCTLS_UPDOWN32"
                 GOSUB MsgUP
             CASE "MSCTLS_TRACKBAR32"
                 GOSUB MsgTrackBar
             CASE "SYSANIMATE32"
                 GOSUB MsgAnimate
             CASE "MSCTLS_STATUSBAR32"
                 GOSUB MsgStat
             CASE "SYSPAGER"
                 GOSUB MsgPager
             CASE "REBARWINDOW32"
                 GOSUB MsgRebar
             CASE "SYSDATETIMEPICK32"
                 GOSUB MsgDateTime
             CASE "SYSMONTHCAL32"
                 GOSUB MsgCalendar
'            CASE $EZComponent   ' Component
'                GOSUB MsgComponent
             CASE ELSE
                 IF CC$=UCASE$(App_MaskEditClass$) THEN  GOSUB MsgEdit
        END SELECT
        IF Msg&<>0 THEN
            RV&=SendMessage(hCtrl&, Msg&, wParam&, lParam&)
            IF LWFlag& THEN RV&=LOWRD(RV&)
            IF HWFlag& THEN RV&=HIWRD(RV&)
        END IF
    END IF
    FUNCTION=RV&
    EXIT FUNCTION

'MsgComponent:
'IF SFlag& THEN  ' set attribute

'ELSE
'    RV&=SendMessage(hCtrl&, %WM_, len(IType$), strptr(IType$))
'END IF
'RETURN

MsgCalendar:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%MCM_GETCOLOR,%MCM_SETCOLOR, SVal&)
        wParam&=%MCSC_BACKGROUND
        lParam&=SVal&
    CASE "TCOLOR"
        Msg&=ZSetMsg(SFlag&,%MCM_GETCOLOR,%MCM_SETCOLOR, SVal&)
        wParam&=%MCSC_TEXT
        lParam&=SVal&
    CASE "FIRSTDAY"
        Msg&=ZSetMsg(SFlag&,%MCM_GETFIRSTDAYOFWEEK,%MCM_SETFIRSTDAYOFWEEK, SVal&)
        lParam&=SVal&
        LWFlag&=1
    CASE ELSE
END SELECT
RETURN

MsgDateTime:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%DTM_GETMCCOLOR,%DTM_SETMCCOLOR, SVal&)
        wParam&=%MCSC_BACKGROUND
        lParam&=SVal&
    CASE "TCOLOR"
        Msg&=ZSetMsg(SFlag&,%DTM_GETMCCOLOR,%DTM_SETMCCOLOR, SVal&)
        wParam&=%MCSC_TEXT
        lParam&=SVal&

    CASE ELSE
END SELECT
RETURN


MsgButton:
SELECT CASE AS CONST$ IType$
    CASE "CLICK"
        Msg&=ZSetMsg(SFlag&,0,%BM_CLICK, SVal&)
    CASE "CHECK"
        Msg&=ZSetMsg(SFlag&,%BM_GETCHECK,%BM_SETCHECK, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgListbox:
SELECT CASE AS CONST$ IType$
    CASE "ISEL"
        Msg&=ZSetMsg(SFlag&,%LB_GETCURSEL,%LB_SETCURSEL , SVal&)
        wParam&=SVal&
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%LB_GETCOUNT,0, SVal&)
    CASE "IFOCUS"
        Msg&=ZSetMsg(SFlag&,%LB_GETCARETINDEX,%LB_SETCARETINDEX, SVal&)
        IF Msg&=%LB_SETCARETINDEX THEN
            wParam&=SVal&
            lParam&=1
        END IF
    CASE "TINDEX"
        Msg&=ZSetMsg(SFlag&,%LB_GETTOPINDEX,%LB_SETTOPINDEX, SVal&)
        wParam&=SVal&
    CASE "SCOUNT"
        Msg&=ZSetMsg(SFlag&,%LB_GETSELCOUNT,0, SVal&)
    CASE "COLWIDTH"
        Msg&=ZSetMsg(SFlag&,0,%LB_SETCOLUMNWIDTH, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN



MsgCombo:
SELECT CASE AS CONST$ IType$
    CASE "ISEL"
        Msg&=ZSetMsg(SFlag&,%CB_GETCURSEL,%CB_SETCURSEL , SVal&)
        wParam&=SVal&
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%CB_GETCOUNT,0, SVal&)
    CASE "DROPPED"
        Msg&=ZSetMsg(SFlag&,%CB_GETDROPPEDSTATE,%CB_SHOWDROPDOWN, SVal&)
        wParam&=SVal&
    CASE "DROPW"
        Msg&=ZSetMsg(SFlag&,%CB_GETDROPPEDWIDTH,%CB_SETDROPPEDWIDTH, SVal&)
        wParam&=SVal&
    CASE "KEYMODE"
        Msg&=ZSetMsg(SFlag&,%CB_GETEXTENDEDUI,%CB_SETEXTENDEDUI, SVal&)
        wParam&=SVal&
    CASE "TINDEX"
        Msg&=ZSetMsg(SFlag&,%CB_GETTOPINDEX,%CB_SETTOPINDEX, SVal&)
        wParam&=SVal&
    CASE "MAXTEXT"
        Msg&=ZSetMsg(SFlag&,0,%CB_LIMITTEXT, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgPager:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%PGM_GETBKCOLOR,%PGM_SETBKCOLOR, SVal&)
        lParam&=SVal&
    CASE "ESIZE"
        Msg&=ZSetMsg(SFlag&,%PGM_GETBORDER,%PGM_SETBORDER, SVal&)
        lParam&=SVal&
    CASE "BSIZE"
        Msg&=ZSetMsg(SFlag&,%PGM_GETBUTTONSIZE,%PGM_SETBUTTONSIZE, SVal&)
        lParam&=SVal&
    CASE "POS"
        Msg&=ZSetMsg(SFlag&,%PGM_GETPOS,%PGM_SETPOS, SVal&)
        lParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgRebar:
SELECT CASE AS CONST$ IType$
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%RB_GETBANDCOUNT,0 , SVal&)
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%RB_GETBKCOLOR,%RB_SETBKCOLOR , SVal&)
        lParam&=SVal&
    CASE "TCOLOR"
        Msg&=ZSetMsg(SFlag&,%RB_GETTEXTCOLOR,%RB_SETTEXTCOLOR , SVal&)
        lParam&=SVal&
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%RB_GETTOOLTIPS,0 , SVal&)
    CASE "SHOWITEM"
        Msg&=ZSetMsg(SFlag&,0,%RB_SHOWBAND, SVal&)
        IF SFlag& THEN
            wParam&=SVal&
            lParam&=%TRUE
        END IF
    CASE "HIDEITEM"
        Msg&=ZSetMsg(SFlag&,0,%RB_SHOWBAND, SVal&)
        IF SFlag& THEN
            wParam&=SVal&
            lParam&=0
        END IF
    CASE "MAXITEM"
        Msg&=ZSetMsg(SFlag&,0,%RB_MAXIMIZEBAND, SVal&)
        wParam&=SVal&
    CASE "MINITEM"
        Msg&=ZSetMsg(SFlag&,0,%RB_MINIMIZEBAND, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgTrackBar:
SELECT CASE AS CONST$ IType$
    CASE "POS"
        Msg&=ZSetMsg(SFlag&,%TBM_GETPOS,%TBM_SETPOS , SVal&)
        IF SFlag& THEN
            wParam&=%TRUE
            lParam&=SVal&
        END IF
    CASE "MIN"
        Msg&=ZSetMsg(SFlag&,%TBM_GETRANGEMIN,%TBM_SETRANGEMIN , SVal&)
        IF SFlag& THEN
            wParam&=%TRUE
            lParam&=SVal&
        END IF
    CASE "MAX"
        Msg&=ZSetMsg(SFlag&,%TBM_GETRANGEMAX,%TBM_SETRANGEMAX , SVal&)
        IF SFlag& THEN
            wParam&=%TRUE
            lParam&=SVal&
        END IF
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%TBM_GETTOOLTIPS,0 , SVal&)
    CASE "AJUMP"
        Msg&=ZSetMsg(SFlag&,%TBM_GETLINESIZE,%TBM_SETLINESIZE , SVal&)
        lParam&=SVal&
    CASE "PJUMP"
        Msg&=ZSetMsg(SFlag&,%TBM_GETPAGESIZE,%TBM_SETPAGESIZE , SVal&)
        lParam&=SVal&
    CASE "TICUNITS"
        Msg&=ZSetMsg(SFlag&,0,%TBM_SETTICFREQ , SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgStat:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        SVal&=ZTestColor(SVal&)
        Msg&=ZSetMsg(SFlag&,0,%SB_SETBKCOLOR , SVal&)
        lParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgAnimate:
SELECT CASE AS CONST$ IType$
    CASE "SEEK"
        Msg&=ZSetMsg(SFlag&,0,%ACM_PLAY, SVal&)
        IF SFlag& THEN
            wParam&=1
            IF SVal&<0 THEN SVal&=0
            IF SVal&>65536 THEN SVal&=65536
            lParam&=MAKLNG(SVal&, SVal&)
        END IF
    CASE ELSE
END SELECT
RETURN

MsgUP:
SELECT CASE AS CONST$ IType$
    CASE "POS"
        Msg&=ZSetMsg(SFlag&,%UDM_GETPOS32,%UDM_SETPOS32, SVal&)
        lParam&=SVal&
    CASE "BUDDY"
        Msg&=ZSetMsg(SFlag&,%UDM_GETBUDDY,%UDM_SETBUDDY, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgPB:
SELECT CASE AS CONST$ IType$
    CASE "INCPOS"
        Msg&=ZSetMsg(SFlag&,0,%PBM_DELTAPOS, SVal&)
        wParam&=SVal&
    CASE "POS"
        Msg&=ZSetMsg(SFlag&,%PBM_GETPOS,%PBM_SETPOS, SVal&)
        wParam&=SVal&
    CASE "BCOLOR"
        SVal&=ZTestColor(SVal&)
        Msg&=ZSetMsg(SFlag&,0,%PBM_SETBKCOLOR , SVal&)
        lParam&=SVal&
    CASE "LCOLOR"
        SVal&=ZTestColor(SVal&)
        Msg&=ZSetMsg(SFlag&,0,%PBM_SETBARCOLOR , SVal&)
        lParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgTab:
SELECT CASE AS CONST$ IType$
    CASE "IFOCUS"
        Msg&=ZSetMsg(SFlag&,%TCM_GETCURFOCUS,%TCM_SETCURFOCUS, SVal&)
        wParam&=SVal&
    CASE "ISEL"
        Msg&=ZSetMsg(SFlag&,%TCM_GETCURSEL,%TCM_SETCURSEL, SVal&)
        wParam&=SVal&
    CASE "IMGLIST"
        Msg&=ZSetMsg(SFlag&,%TCM_GETIMAGELIST,0, SVal&)
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%TCM_GETITEMCOUNT,0, SVal&)
    CASE "LCOUNT"
        Msg&=ZSetMsg(SFlag&,%TCM_GETROWCOUNT,0, SVal&)
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%TCM_GETTOOLTIPS ,0 , SVal&)
    CASE "MINWIDTH"
        Msg&=ZSetMsg(SFlag&,0,%TCM_SETMINTABWIDTH, SVal&)
        lParam&=SVal&
    CASE ELSE
END SELECT
RETURN

MsgTB:
SELECT CASE AS CONST$ IType$
    CASE "ASIZE"
        Msg&=ZSetMsg(SFlag&,0,%TB_AUTOSIZE, SVal&)
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%TB_BUTTONCOUNT,0, SVal&)
    CASE "IMCOLOR"
        Msg&=ZSetMsg(SFlag&,%TB_GETINSERTMARKCOLOR,%TB_SETINSERTMARKCOLOR, SVal&)
        lParam&=SVal&
    CASE "LCOUNT"
        Msg&=ZSetMsg(SFlag&,%TB_GETROWS,0, SVal&)
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%TB_GETTOOLTIPS ,0 , SVal&)
    CASE ELSE
END SELECT
RETURN

MsgEdit:
SELECT CASE AS CONST$ IType$
    CASE "MAXTEXT"
        Msg&=ZSetMsg(SFlag&,%EM_GETLIMITTEXT,%EM_SETLIMITTEXT , SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
GOSUB MsgRichAndEdit
RETURN

MsgRich:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,0,%EM_SETBKGNDCOLOR , SVal&)
        IF SVal&=-1 THEN
            wParam&=1
            lParam&=0
        ELSE
            wParam&=0
            lParam&=SVal&
        END IF
    CASE "MAXTEXT"  ' different than Edit controls version
        Msg&=ZSetMsg(SFlag&,%EM_GETLIMITTEXT,%EM_SETLIMITTEXT , SVal&)
        lParam&=SVal&
    CASE "HIDESEL"
        Msg&=ZSetMsg(SFlag&,0,%EM_HIDESELECTION , SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
GOSUB MsgRichAndEdit
RETURN

MsgRichAndEdit:
SELECT CASE AS CONST$ IType$
    CASE "FVLINE"
        Msg&=ZSetMsg(SFlag&,%EM_GETFIRSTVISIBLELINE,0 , SVal&)
    CASE "LCOUNT"
        Msg&=ZSetMsg(SFlag&,%EM_GETLINECOUNT,0 , SVal&)
    CASE "LMARGIN"
        GOSUB DoLMargin
    CASE "RMARGIN"
        GOSUB DoRMargin
    CASE "READONLY"
        Msg&=ZSetMsg(SFlag&,0,%EM_SETREADONLY , SVal&)
        wParam&=SVal&
    CASE "UNDOABLE"
        Msg&=ZSetMsg(SFlag&,%EM_CANUNDO,0 , SVal&)
    CASE "UNDO"
        Msg&=ZSetMsg(SFlag&,0,%EM_UNDO,SVal&)
    CASE "MODIFIED"
        Msg&=ZSetMsg(SFlag&,%EM_GETMODIFY,%EM_SETMODIFY , SVal&)
        wParam&=SVal&

    CASE ELSE
END SELECT
RETURN

DoLMargin:
    Msg&=ZSetMsg(SFlag&,%EM_GETMARGINS,%EM_SETMARGINS , SVal&)
    LWFlag&=1
    IF SFlag& THEN
        wParam&=%EC_LEFTMARGIN
        lParam&=MAKLNG(SVal&,0)
    END IF
RETURN

DoRMargin:
    Msg&=ZSetMsg(SFlag&,%EM_GETMARGINS,%EM_SETMARGINS , SVal&)
    HWFlag&=1
    IF SFlag& THEN
        wParam&=%EC_RIGHTMARGIN
        lParam&=MAKLNG(0, SVal&)
    END IF
RETURN

MsgLV:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%LVM_GETBKCOLOR ,%LVM_SETBKCOLOR , SVal&)
        lParam&=SVal&
    CASE "TCOLOR"
        Msg&=ZSetMsg(SFlag&,%LVM_GETTEXTCOLOR ,%LVM_SETTEXTCOLOR , SVal&)
        lParam&=SVal&
    CASE "EDIT"
        Msg&=ZSetMsg(SFlag&,%LVM_GETEDITCONTROL ,0 , SVal&)
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%LVM_GETTOOLTIPS ,0 , SVal&)
    CASE "TBCOLOR"
        Msg&=ZSetMsg(SFlag&,%LVM_GETTEXTBKCOLOR ,%LVM_SETTEXTBKCOLOR , SVal&)
        lParam&=SVal&
    CASE "PCOUNT"
        Msg&=ZSetMsg(SFlag&,%LVM_GETCOUNTPERPAGE ,0 , SVal&)
    CASE "HEADER"
        Msg&=ZSetMsg(SFlag&,%LVM_GETHEADER ,0 , SVal&)
    CASE "ICOUNT"
        Msg&=ZSetMsg(SFlag&,%LVM_GETITEMCOUNT ,0 , SVal&)
    CASE "SCOUNT"
        Msg&=ZSetMsg(SFlag&,%LVM_GETSELECTEDCOUNT ,0 , SVal&)
    CASE "SMARK"
        Msg&=ZSetMsg(SFlag&,%LVM_GETSELECTIONMARK ,%LVM_SETSELECTIONMARK , SVal&)
        lParam&=SVal&
    CASE "TINDEX"
        Msg&=ZSetMsg(SFlag&,%LVM_GETTOPINDEX ,0 , SVal&)
    CASE "UPDATE"
        Msg&=ZSetMsg(SFlag&,0 ,%LVM_UPDATE , SVal&)
    CASE ELSE
END SELECT
RETURN

MsgTV:
SELECT CASE AS CONST$ IType$
    CASE "BCOLOR"
        Msg&=ZSetMsg(SFlag&,%TVM_GETBKCOLOR ,%TVM_SETBKCOLOR , SVal&)
        lParam&=SVal&
    CASE "TCOLOR"
        Msg&=ZSetMsg(SFlag&,%TVM_GETTEXTCOLOR ,%TVM_SETTEXTCOLOR , SVal&)
        lParam&=SVal&
    CASE "LCOLOR"
        Msg&=ZSetMsg(SFlag&, %TVM_GETLINECOLOR,%TVM_SETLINECOLOR , SVal&)
        lParam&=SVal&
    CASE "TOOLTIP"
        Msg&=ZSetMsg(SFlag&,%TVM_GETTOOLTIPS ,0 , SVal&)
    CASE "EDIT"
        Msg&=ZSetMsg(SFlag&,%TVM_GETEDITCONTROL ,0 , SVal&)
    CASE "IMGLIST"
        Msg&=ZSetMsg(SFlag&,%TVM_GETIMAGELIST ,0 , SVal&)
    CASE "IHEIGHT"
        Msg&=ZSetMsg(SFlag&,%TVM_GETITEMHEIGHT ,%TVM_SETITEMHEIGHT , SVal&)
        wParam&=SVal&
    CASE "IMCOLOR"
        Msg&=ZSetMsg(SFlag&,%TVM_GETINSERTMARKCOLOR,%TVM_SETINSERTMARKCOLOR, SVal&)
        lParam&=SVal&
    CASE "INDENT"
        Msg&=ZSetMsg(SFlag&,%TVM_GETINDENT,%TVM_SETINDENT, SVal&)
        wParam&=SVal&
    CASE ELSE
END SELECT
RETURN

END FUNCTION

FUNCTION EZ_GetAttr(BYVAL FormName$, BYVAL IDNum&, BYVAL Attr$) EXPORT10 AS LONG
'    App_EZ_HandleFlag&=1
    FUNCTION=ZGetSetInfo(FormName$, IDNum& , Attr$, 0, 0)
END FUNCTION

SUB EZ_SetAttr(BYVAL FormName$, BYVAL IDNum&, BYVAL Attr$, BYVAL V&) EXPORT10
    LOCAL X&
'    App_EZ_HandleFlag&=1
    X&=ZGetSetInfo(FormName$, IDNum& , Attr$, 1, V&)
END SUB


SUB EZ_SetColor (BYVAL FormName$, BYVAL IDNum&, BYVAL FG&, BYVAL BG&) EXPORT10
LOCAL hWnd AS LONG, hCtrl AS LONG, I&, AFNum&, CN$
ZQBColors FG&, BG&      ' create as QB Colors if not already exist
hWnd=PBVFormHandle(FormName$)
IF BG&<-1 THEN
   ZPatColor BG&        ' create as Pattern orFake color if not already exist
END IF
IF hWnd<>0 THEN
    IF IDNum&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,IDNum&)
        IF hCtrl<>0 THEN
            CN$=ZGetClass(hCtrl)
            SELECT CASE AS CONST$ CN$
                CASE "RICHEDIT", "RICHEDIT20A","RICHEDIT50W"
                    ZSetRichTextColor hCtrl, FG&, BG&
                    ZRedrawColor hCtrl
                CASE "SYSLISTVIEW32"
                    ZSetListViewColor hCtrl, FG&, BG&
                    ZRedrawColor hCtrl
                CASE "SYSTREEVIEW32"
                    ZSetTreeViewColor hCtrl, FG&, BG&
                    ZRedrawColor hCtrl
                CASE "MSCTLS_PROGRESS32"
                    ZSetProgressColor hCtrl, FG&, BG&
                    ZRedrawColor hCtrl
                CASE "SYSMONTHCAL32"
                    ZSetCalendarColor hCtrl, FG&, BG&,0
                    ZRedrawColor hCtrl
                CASE "SYSDATETIMEPICK32"
                    ZSetCalendarColor hCtrl, FG&, BG&,1
                    ZRedrawColor hCtrl
                CASE "SYSPAGER"
                    ZSetPagerColor hCtrl, BG&
                    ZRedrawColor hCtrl
                CASE $EZComponent   ' component
                    SendMessage hCtrl, %WM_SETCMPSTATE, MAKLNG(1,FG&), BG&
                CASE ELSE
                    I&=ZGetControlIndex(hCtrl)
                    IF I&<>0 THEN
                        IF LEFT$(CN$,10)="EZGUI_TYPE" THEN  ' is component
                             AppControlFG(I&)=-1  ' always use -1 for component forms
                             AppControlBG(I&)=ZBGColorNum&(BG&)
                             AFNum&=ZFormNumH(hCtrl)
                             IF AFNum&<>0 THEN
                                   AppForms(AFNum&).FBrush=AppControlBG(I&)
                             END IF
                             ZRedrawColor hCtrl
                        ELSE
                             AppControlFG(I&)=ZFGColorNum&(FG&)
                             AppControlBG(I&)=ZBGColorNum&(BG&)
                             ZRedrawColor hCtrl
                        END IF
                    END IF
            END SELECT
        END IF
    ELSE
        AFNum&=ZFormNum(FormName$)
        IF AFNum&<>0 THEN
            ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =AFNum& , TO I&
            IF I&>0 THEN
                AppControlFG(I&)=-1     ' ZFGColorNum&(FG&)
                AppControlBG(I&)=ZBGColorNum&(BG&)
                AppForms(AFNum&).FBrush=AppControlBG(I&)
                ZRedrawColor hWnd
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------


'------------------------------------------------------------------------------

SUB ZInitFonts(BYVAL Mode&)
LOCAL N&
STATIC FirstFlag&
IF Mode&=0 THEN
    AppFont(0)=GetStockObject(%SYSTEM_FONT)
    AppFont(1)=GetStockObject(%SYSTEM_FIXED_FONT)
    AppFont(2)=GetStockObject(%ANSI_VAR_FONT)
    AppFont(3)=GetStockObject(%ANSI_FIXED_FONT)
    AppFont(4)=GetStockObject(%DEFAULT_GUI_FONT)    ' MS Sans Serif
    AppFont(5)=GetStockObject(%OEM_FIXED_FONT)      ' Terminal Font
ELSE
    IF FirstFlag&=0 THEN
        FOR N&=0 TO 5
            AppFont(N&)=0
        NEXT N&
        EZ_DefFont 0, "System", 10, "BV"
        EZ_DefFont 1, "Fixedsys", 9, "F"
        EZ_DefFont 2, "MS Sans Serif", 8, "V"
        EZ_DefFont 3, "Courier", 10, "F"
        EZ_DefFont 4, "MS Sans Serif", 8, "V"
        EZ_DefFont 5, "Terminal", 9, "OF"
        FirstFlag&=1
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB ZDelFont(BYVAL N&)
LOCAL N1&, N2&, LowN&
IF App_FixedFontScale&<>0 THEN LowN&=0 ELSE LowN&=6
IF N&=-1 THEN
    N1&=0
    N2&=UBOUND(AppFont)
ELSE
    N1&=N&
    N2&=N&
END IF
FOR N&=N1& TO N2&
    IF N&>=LowN& AND N&<=UBOUND(AppFont) THEN
        IF AppFont(N&)<>0 THEN
            DeleteObject AppFont(N&)
            AppFont(N&)=0
        END IF
    END IF
NEXT N&
END SUB

'------------------------------------------------------------------------------

SUB EZ_FreeFont (BYVAL N&) EXPORT10
IF N&>=0 AND N&<=UBOUND(AppFont) THEN
    ZDelFont N&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFont (BYVAL FormName$, BYVAL ID&, BYVAL N&) EXPORT10
    LOCAL hCtrl AS LONG
    hCtrl=ezHandle(FormName$,ID&,1)
        IF hCtrl<>0 THEN
            IF N&>=0 AND N&<=UBOUND(AppFont) THEN
                IF AppFont(N&)<>0 THEN
                    IF zIsFormComponent(hCtrl)=0 THEN
'                        SendMessage hCtrl, %WM_SETFONT, AppFont(N&), %TRUE
                        APISetFont hCtrl, AppFont(N&), %TRUE
                    ELSE
                        SendMessage hCtrl, %WM_SETCMPSTATE, 2, N&
                    END IF
                END IF
            END IF
        END IF
END SUB

'------------------------------------------------------------------------------
SUB zResizeC(BYVAL hCtrl&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!)
     LOCAL X1&, Y1&, W1&, H1&
     IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
     X1&=INT(C! * App_EZ_CharW)
     Y1&=INT(R! * App_EZ_CharH)
     W1&=INT(W! * App_EZ_CharW)
     H1&=INT(H! * App_EZ_CharH)
     IF W!<0 OR H!<0 THEN
          DIM WR AS RECT
          GetWindowRect hCtrl&, WR
          IF W!<0 THEN W1&=WR.nRight-WR.nLeft
          IF H!<0 THEN H1&=WR.nBottom-WR.nTop
     END IF
     MoveWindow hCtrl&, X1&, Y1&, W1&, H1&, 1
END SUB

SUB EZ_ResizeC(BYVAL FormName$, BYVAL ID&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!) EXPORT10
    LOCAL hCtrl&
    IF ID&<>0 THEN
         hCtrl&=ezHandle(FormName$,ID&,1)
         IF hCtrl&<>0 THEN
              zResizeC hCtrl&, C!, R!, W!, H!
         END IF
    END IF
END SUB

SUB EZ_ResizePForm(BYVAL FormName$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!) EXPORT10
     LOCAL hPage&, WS&, VFlag&
     hPage&=ezHandle(FormName$,0,1)
     IF hPage&<>0 THEN
          ' is it a child
          WS&=GetWindowLong(hPage&,%GWL_STYLE)
          IF (WS& AND %WS_CHILD) = %WS_CHILD THEN
               zResizeC hPage&, C!, R!, W!, H!
          END IF
     END IF
END SUB

SUB EZ_MoveForm(BYVAL FormName$, BYVAL C!, BYVAL R!) EXPORT10
    LOCAL X&, Y&, W&, H&, hWnd&, WR AS RECT
    IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
    X&=INT(C! * App_EZ_CharW)
    Y&=INT(R! * App_EZ_CharH)
    hWnd&=ezHandle(FormName$,0,1)
    IF hWnd&<>0 THEN
        GetWindowRect hWnd&, WR
        W&=WR.nRight-WR.nLeft
        H&=WR.nBottom-WR.nTop
        MoveWindow hWnd&, X&, Y&, W&, H&, 1
    END IF
END SUB

'------------------------------------------------------------------------------

GLOBAL App_SetBuddyMode&

FUNCTION IsNotSimpleCombobox(BYVAL hWnd&) AS LONG
    LOCAL WS&, RV&
    WS&=GetWindowLong(hWnd&, %GWL_STYLE)
    WS&=WS& AND 3
    IF WS&<>%CBS_SIMPLE THEN RV&=1
    FUNCTION=RV&
END FUNCTION

SUB EZ_GetSizeC(BYVAL FormName$, BYVAL ID&, C!, R!, W!, H!) EXPORT10
LOCAL X1!, Y1!, W1!, H1!, hWnd AS LONG, hCtrl AS LONG
LOCAL CR AS RECT, PT AS POINTAPI, CR2 AS RECT
hWnd=PBVFormHandle(FormName$)
C!=0
R!=0
W!=0
H!=0
IF hWnd<>0 THEN
    IF ID&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,ID&)
        IF hCtrl<>0 THEN
            GetWindowRect hCtrl, CR
            IF App_SetBuddyMode&=1 THEN
                IF ZGetClass(hCtrl)="COMBOBOX" THEN
                    IF IsNotSimpleCombobox(hCtrl) THEN
                        SendMessage hCtrl, %CB_GETDROPPEDCONTROLRECT, 0, VARPTR(CR2)
                        CR=CR2
                    END IF
                END IF
            END IF
            W1!=CR.nRight-CR.nLeft
            H1!=CR.nBottom-CR.nTop
            PT.x=CR.nLeft
            PT.y=CR.nTop
            ScreenToClient hWnd, PT
            X1!=PT.x
            Y1!=PT.y
            C!=X1!/App_EZ_CharW
            R!=Y1!/App_EZ_CharH
            W!=W1!/App_EZ_CharW
            H!=H1!/App_EZ_CharH
            IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_GetSize(BYVAL FormName$, W!, H!, BYVAL SMode&) EXPORT10
LOCAL hWnd AS LONG
LOCAL CR AS RECT
hWnd=PBVFormHandle(FormName$)
W!=0
H!=0
IF hWnd<>0 THEN
    SELECT CASE AS LONG SMode&
        CASE 1  ' outside in Pixels
            GetWindowRect hWnd, CR
            W!=(CR.nRight-CR.nLeft)
            H!=(CR.nBottom-CR.nTop)
        CASE 2   ' get client area in pixels
            GetClientRect hWnd, CR
            W!=(CR.nRight-CR.nLeft)
            H!=(CR.nBottom-CR.nTop)
        CASE 3
            GetWindowRect hWnd, CR
            W!=(CR.nRight-CR.nLeft)/App_EZ_CharW
            H!=(CR.nBottom-CR.nTop)/App_EZ_CharH
        CASE ELSE   ' get client area
            GetClientRect hWnd, CR
            W!=(CR.nRight-CR.nLeft)/App_EZ_CharW
            H!=(CR.nBottom-CR.nTop)/App_EZ_CharH
    END SELECT
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_GetPos(BYVAL FormName$, C!, R!, BYVAL SMode&) EXPORT10
LOCAL hWnd AS LONG, hParent&
LOCAL CR AS RECT
hWnd=PBVFormHandle(FormName$)
C!=0
R!=0
IF hWnd<>0 THEN
    SELECT CASE AS LONG SMode&
        CASE 1  ' in Pixels
            GetWindowRect hWnd, CR
            C!=CR.nLeft
            R!=CR.nTop
        CASE 2   ' Beginning of Client Area in Chars if Caption and Menu
            GetWindowRect hWnd, CR
            C!=(CR.nLeft+GetSystemMetrics(%SM_CXFRAME))/App_EZ_CharW
            R!=(CR.nTop+GetSystemMetrics(%SM_CYCAPTION)+GetSystemMetrics(%SM_CYMENU))/App_EZ_CharH
        CASE 3   ' Beginning of Client Area in Chars if Caption , but No Menu
            GetWindowRect hWnd, CR
            C!=(CR.nLeft+GetSystemMetrics(%SM_CXFRAME))/App_EZ_CharW
            R!=(CR.nTop+GetSystemMetrics(%SM_CYCAPTION))/App_EZ_CharH
        CASE 4,5   ' position relative to parent window (4) or parent EZGUI form (5)
            GetWindowRect hWnd, CR
            IF SMode&=4 THEN
                hParent&=GetParent(hWnd)
            ELSEIF SMode&=5 THEN
                hParent&=ZGetParentForm(hWnd&)
            END IF
            IF hParent&<>0 THEN
                MapWindowPoints %NULL, hParent&, BYVAL VARPTR(CR), 2
            END IF
            C!=(CR.nLeft)/App_EZ_CharW
            R!=(CR.nTop)/App_EZ_CharH
        CASE ELSE   ' in Chars
            GetWindowRect hWnd, CR
            C!=(CR.nLeft)/App_EZ_CharW
            R!=(CR.nTop)/App_EZ_CharH
    END SELECT
END IF
IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
END SUB

'------------------------------------------------------------------------------

SUB EZ_UseFont (BYVAL N&) EXPORT10
IF N&>=0 AND N&<=UBOUND(AppFont) THEN
    App_EZ_AFont&=N&
ELSE
    App_EZ_AFont&=-1
END IF
END SUB


'------------------------------------------------------------------------------

'TYPE LOGFONT
'  lfHeight AS LONG
'  lfWidth AS LONG
'  lfEscapement AS LONG
'  lfOrientation AS LONG
'  lfWeight AS LONG
'  lfItalic AS BYTE
'  lfUnderline AS BYTE
'  lfStrikeOut AS BYTE
'  lfCharSet AS BYTE
'  lfOutPrecision AS BYTE
'  lfClipPrecision AS BYTE
'  lfQuality AS BYTE
'  lfPitchAndFamily AS BYTE
'  lfFaceName AS ASCIIZ * 32 '(%LF_FACESIZE) AS BYTE
'END TYPE


TYPE EZ_ENUMLOGFONTEX
  elfLogFont AS LOGFONT
  elfFullName AS ASCIIZ * %LF_FULLFACESIZE
  elfStyleas AS ASCIIZ * %LF_FACESIZE
  elfScript AS ASCIIZ * %LF_FACESIZE
END TYPE


GLOBAL App_GetFontList$

FUNCTION EZ_GetFont(BYVAL I&, BYVAL FaceName$, BYVAL Prop$) EXPORT10 AS STRING
LOCAL RV$, hDC&, N&
IF I&<=1 THEN
   Prop$=UCASE$(Prop$)
   IF App_LastPrinterDC=0 THEN
       hDC&=GetDC(%HWND_DESKTOP)
   ELSE
       hDC&=App_LastPrinterDC
   END IF
   DIM F AS LOGFONT, lParam&
   App_GetFontList$=""
   F.lfFaceName=FaceName$
   F.lfCharSet=%ANSI_CHARSET
   IF INSTR(Prop$,"O") THEN F.lfCharSet=%OEM_CHARSET
   IF INSTR(Prop$,"S") THEN F.lfCharSet=%SYMBOL_CHARSET
   lParam&=1
   IF INSTR(Prop$,"F") THEN lParam&=2
   IF INSTR(Prop$,"V") THEN lParam&=3
   IF INSTR(Prop$,"D") THEN
       F.lfCharSet=%DEFAULT_CHARSET
       lParam&=lParam& OR 32
   END IF
   IF FaceName$<>"" THEN lParam&=-lParam&
   EnumFontFamiliesEx hDC&, F, CODEPTR(MyFontEnumProc), lParam&, 0
   IF App_LastPrinterDC=0 THEN
       ReleaseDC %HWND_DESKTOP, hDC&
   END IF
END IF
SELECT CASE AS LONG I&
    CASE >=1
        N&=PARSECOUNT(App_GetFontList$, CHR$(1))
        IF I&<=N& THEN
            RV$=PARSE$(App_GetFontList$, CHR$(1), I&)
        END IF
    CASE -1
        RV$=App_GetFontList$
        REPLACE CHR$(1) WITH App_EZ_DChar$ IN RV$
    CASE ELSE
END SELECT
FUNCTION=RV$
END FUNCTION

FUNCTION MyFontEnumProc(ELF AS EZ_ENUMLOGFONTEX, BYVAL NTM AS DWORD, BYVAL FT&, BYVAL lParam&) AS LONG
LOCAL RV&, OKFlag&, SFlag&, S$
IF lParam&<0 THEN
    lParam&=ABS(lParam&)
    GOSUB TestSFlag
    lParam&=-lParam&
ELSE
    GOSUB TestSFlag
END IF
IF SFlag& THEN
    S$=ELF.elfScript
    IF S$<>"" THEN S$="     ("+S$+")"
END IF
SELECT CASE AS LONG lParam&
    CASE >0
        GOSUB CheckFontType
        IF OKFlag& THEN App_GetFontList$=App_GetFontList$+ELF.elfLogFont.lfFaceName+S$+CHR$(1)
        RV&=1
    CASE <0
        GOSUB CheckFontType
        IF OKFlag& THEN App_GetFontList$=App_GetFontList$+ELF.elfFullName+S$+CHR$(1)
        RV&=1
    CASE ELSE
        RV&=0
END SELECT
FUNCTION=RV&
EXIT FUNCTION

TestSFlag:
IF BIT(lParam&,5) THEN
    SFlag&=1
    BIT RESET lParam&, 5
END IF
RETURN

CheckFontType:
OKFlag&=1
SELECT CASE AS LONG ABS(lParam&)
    CASE 2  ' fixed width
        IF (ELF.elfLogFont.lfPitchAndFamily AND 3)<>%FIXED_PITCH THEN OKFlag&=0
    CASE 3  ' variable width
        IF (ELF.elfLogFont.lfPitchAndFamily AND 3)<>%VARIABLE_PITCH THEN OKFlag&=0
    CASE ELSE
END SELECT
RETURN

END FUNCTION

'REDIM App_StackFont$(1 TO 100)
'REDIM App_StackFontN&(1 TO 100)

SUB EZ_UseIFont(BYVAL TFace$, BYVAL APSize!, BYVAL FProp$) EXPORT10
    LOCAL FName$, I&, N&
    FName$=UCASE$(TFace$+STR$(APSize!)+FProp$)
    ARRAY SCAN App_StackFont$(1), =FName$, TO I&
    IF I&<>0 THEN
        EZ_UseFont App_StackFontN&(I&)
    ELSE
        ARRAY SCAN App_StackFont$(1), ="", TO I&
        IF I&<>0 THEN
            N&=App_FirstStackFont&+I&-1
            App_StackFont$(I&)=FName$
            App_StackFontN&(I&)=N&
            EZ_DefFont N&, TFace$, APSize!, FProp$
            EZ_UseFont N&
        ELSE
            EZ_UseFont 0
        END IF
    END IF
END SUB

FUNCTION EZ_ODIFont() EXPORT10 AS LONG
    LOCAL FNum&, hFont&, I&
    IF App_CurrentOwnerDrawhWnd&<>0 THEN
        hFont&=SendMessage(App_CurrentOwnerDrawhWnd&, %WM_GETFONT,0,0)
        ARRAY SCAN AppFont(App_FirstStackFont&), =hFont&, TO I&
        IF I&>0 THEN
            FNum&=App_FirstStackFont&+I&-1

'            msgbox "App_FirstStackFont& ="+str$(App_FirstStackFont&)+" I& ="+str$(I&)+" FNum& ="+str$(FNum&)

        ELSE   ' not found using WM_GETFONT
            I&=ZGetControlIndex(App_CurrentOwnerDrawhWnd&)
            IF I&>0 THEN
                FNum&=AppControlFont(I&)
            ELSE
                FNum&=0
            END IF
        END IF
    ELSE
        FNum&=0
    END IF
    FUNCTION=FNum&
END FUNCTION

FUNCTION EZ_IFontNum(BYVAL TFace$, BYVAL APSize!, BYVAL FProp$) EXPORT10 AS LONG
    LOCAL FName$, I&, N&
    FName$=UCASE$(TFace$+STR$(APSize!)+FProp$)
    ARRAY SCAN App_StackFont$(1), =FName$, TO I&
    IF I&<>0 THEN
        N&=App_FirstStackFont&+I&-1
    ELSE
        N&=0
    END IF
    FUNCTION=N&
END FUNCTION

FUNCTION EZ_GetFontName(BYVAL FontN&) EXPORT10 AS STRING
    LOCAL hFont&, RV$, hDC&, hOldFont&, zFontName AS ASCIIZ * 257
    RV$=""
    hFont&=EZ_FontHandle(FontN&)
    IF hFont&<>0 THEN
        hDC&=GetDC(%HWND_DESKTOP)
        hOldFont&=SelectObject(hDC&, hFont&)
        IF GetTextFace(hDC&,257, zFontName)<>0 THEN
            RV$=zFontName
        END IF
        SelectObject hDC&, hOldFont&
        ReleaseDC %HWND_DESKTOP, hDC&
    END IF
    FUNCTION=RV$
END FUNCTION

SUB EZ_DefFont (BYVAL N&, BYVAL TFace$, BYVAL APSize!, BYVAL FProp$) EXPORT10
LOCAL hFont AS LONG
LOCAL W&, E&, O&, FW&, I&, U&, ST&, CS&, PR&, CL&, Q&, PF&, FF&
LOCAL zTemp AS ASCIIZ*80, OKFlag&, mode&
LOCAL PFlag&, PSize&, P1&, P2&, DG$, MaxFont&, WP$, LUFlag&
' PT!=abs(PSize&)
' PT!=int(PT!*App_EZ_PointOffSet!)
' PSize&=-int(PT!)    ' a negative value defines by character height, not cell height
PFlag&=0
FProp$=UCASE$(FProp$)
mode&=0
IF INSTR(FProp$,"P") THEN
    IF App_FakePrinterDC<>0 THEN
        mode&=2
    ELSE
        mode&=1
    END IF
END IF
IF INSTR(FProp$,"C") THEN mode&=2   ' canvas font
PSize&=APSize!*100
PSize&=-(MulDiv(PSize&, App_EZ_PixelSY(mode&), 72)/100)
MaxFont&=UBOUND(AppFont)
IF App_ExtraFontAFlag&=0 THEN MaxFont&=MaxFont&-1
IF (N&>=0 AND N&<=MaxFont&) OR N&=-1 THEN
    OKFlag&=0
    IF N&=-1 THEN OKFlag&=1
    IF N&>=0 THEN
       IF AppFont(N&)=0 THEN OKFlag&=1
    END IF
    IF OKFlag& THEN
        W&=0
        E&=0
        O&=0
        FW&=%FW_NORMAL
        I&=0
        U&=0
        ST&=0
        CS&=%ANSI_CHARSET
        PR&=%OUT_DEFAULT_PRECIS
        CL&=%CLIP_DEFAULT_PRECIS
        Q&=%DRAFT_QUALITY
        PF&=%DEFAULT_PITCH
        P1&=INSTR(FProp$,"{")
        IF P1&>0 THEN
            P1&=P1&+1
            P2&=INSTR(FProp$,"}")
            IF P2&>P1& THEN
                DG$=MID$(FProp$,P1&,P2&-P1&)
                E&=INT(VAL(DG$)*10)
                O&=E&
            END IF
        END IF
        P1&=INSTR(FProp$,"[")
        IF P1&>0 THEN
            P1&=P1&+1
            LUFlag&=0
            P2&=INSTR(FProp$,"%]")
            IF P2&=0 THEN
                P2&=INSTR(FProp$,"#]")
                LUFlag&=1
            END IF
            IF P2&>P1& THEN
                WP$=TRIM$(MID$(FProp$,P1&,P2&-P1&))
                IF LUFlag& THEN
                    W&=ABS(VAL(WP$))
                ELSE
                    W&=ABS(PSize&)*ABS(VAL(WP$))/100
                END IF
            END IF
        END IF
        IF INSTR(FProp$,"T") THEN FW&=%FW_THIN
        IF INSTR(FProp$,"L") THEN FW&=%FW_LIGHT
        IF INSTR(FProp$,"M") THEN FW&=%FW_MEDIUM
        IF INSTR(FProp$,"B") THEN FW&=%FW_BOLD
        IF INSTR(FProp$,"X") THEN FW&=%FW_HEAVY
        IF INSTR(FProp$,"I") THEN I&=1
        IF INSTR(FProp$,"U") THEN U&=1
        IF INSTR(FProp$,"-") THEN ST&=1
        IF INSTR(FProp$,"D") THEN CS&=%DEFAULT_CHARSET
        IF INSTR(FProp$,"S") THEN CS&=%SYMBOL_CHARSET
        IF INSTR(FProp$,"O") THEN CS&=%OEM_CHARSET
        IF INSTR(FProp$,"Q") THEN Q&=%PROOF_QUALITY     ' letter quality
        IF INSTR(FProp$,"F") THEN PF&=%FIXED_PITCH
        IF INSTR(FProp$,"V") THEN PF&=%VARIABLE_PITCH
        IF INSTR(FProp$,"+") THEN FW&=FW&+100
        IF INSTR(FProp$,"A") THEN
            IF mode&<>1 THEN
                Q&=%ANTIALIASED_QUALITY     ' antialias quality
            END IF
        END IF
        FF&=%FF_DONTCARE
        '  I can add choices for Font Families later
        PF&=PF& OR FF&
        IF LEN(TFace$)>31 THEN TFace$=LEFT$(TFace$,31)
        zTemp=TFace$+CHR$(0)

        ' Remember this font in LOGFONT structure
        IF N&=-1 THEN
           App_EZ_LastFont.lfHeight=PSize&
           App_EZ_LastFont.lfWidth=W&
           App_EZ_LastFont.lfEscapement=E&
           App_EZ_LastFont.lfOrientation=O&
           App_EZ_LastFont.lfWeight=FW&
           App_EZ_LastFont.lfItalic=I&
           App_EZ_LastFont.lfUnderline=U&
           App_EZ_LastFont.lfStrikeOut=ST&
           App_EZ_LastFont.lfCharSet=CS&
           App_EZ_LastFont.lfOutPrecision=PR&
           App_EZ_LastFont.lfClipPrecision=CL&
           App_EZ_LastFont.lfQuality=Q&
           App_EZ_LastFont.lfPitchAndFamily=PF&
           App_EZ_LastFont.lfFaceName=TFace$+CHR$(0)
         ELSE
           hFont=CreateFont(PSize&,W&, E&, O&, FW&, I&, U&, ST&, CS&, PR&, CL&, Q&, PF&, zTemp)
           IF hFont<>0 THEN
               AppFont(N&)=hFont
               IF Q&=%ANTIALIASED_QUALITY THEN

               END IF
           END IF
         END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB zSleep(BYVAL MS&)
    apiSleep MS&
END SUB

SUB EZ_Sleep(BYVAL S!) EXPORT10
LOCAL MS&
S!=S!*1000
MS&=S!
IF MS&<0 THEN MS&=0
IF MS&>10000 THEN MS&=10000
zSleep MS&
END SUB

'------------------------------------------------------------------------------

SUB EZ_Delay(BYVAL S!) EXPORT10
LOCAL CT!
IF S!<0 THEN S!=0
IF S!>120 THEN S!=120
CT!=TIMER
DO
    IF CT!>TIMER THEN CT!=TIMER
    IF CT!+S!<TIMER THEN EXIT DO
LOOP
END SUB

'------------------------------------------------------------------------------



SUB ZGetSetUserData(FormName$,BYVAL hDlg&, N&, V&, BYVAL Mode&)
    LOCAL AFNum&, LN&, AV AS LONG PTR, Offset AS DWORD
    IF hDlg&=0 THEN
        AFNum&=ZFormNum(FormName$)
    ELSE
        AFNum&=ZFormNumH(hDlg&)
    END IF
    IF AFNum&<>0 THEN
        LN&=%MaxFormListSize/4
        IF N&>=1 AND N&<=LN& THEN
            Offset=(N&-1)*4
            AV=VARPTR(AppForms(AFNum&).FUserList)+Offset
            IF Mode&=1 THEN
                @AV=V&
            ELSE
                V&=@AV
            END IF
        END IF
    END IF
END SUB

SUB EZ_SetUserData(BYVAL FormName$, BYVAL N&, BYVAL V&) EXPORT10
    IF N&>=1 AND N&<=75 THEN
        N&=N&+26
        ZGetSetUserData FormName$, 0, N&, V&, 1
    END IF
END SUB

FUNCTION EZ_GetUserData(BYVAL FormName$, BYVAL N&) EXPORT10 AS LONG
    LOCAL V&
    IF N&>=1 AND N&<=75 THEN
        N&=N&+26
        ZGetSetUserData FormName$, 0, N&, V&, 0
    END IF
    FUNCTION=V&
END FUNCTION

SUB EZ_SaveMenu(BYVAL FormName$, BYVAL N&, BYVAL V&) EXPORT10
    IF N&>=0 AND N&<=25 THEN    '26 menu values
        N&=N&+1
        ZGetSetUserData FormName$,0 , N&, V&, 1
    END IF
END SUB

FUNCTION EZ_GetMenu(BYVAL FormName$, BYVAL N&) EXPORT10 AS LONG
    LOCAL V&
    IF N&>=0 AND N&<=25 THEN    '26 menu values
        N&=N&+1
        ZGetSetUserData FormName$, 0, N&, V&, 0
    END IF
    FUNCTION=V&
END FUNCTION

' faster internal routine which passes string BYREF
FUNCTION ezHandle(FormName$, BYVAL ID&, BYVAL HMode&) AS LONG
    LOCAL hCtrl AS LONG
    LOCAL hWnd AS LONG
    LOCAL RV&
    RV&=0
    IF LEN(FormName$)=0 THEN
        IF HMode& THEN
            FUNCTION=App_EZ_HandlehWnd&
        ELSE
            FUNCTION=GetDesktopWindow
        END IF
'        App_EZ_HandleFlag&=0
        EXIT FUNCTION
    ELSE
        hWnd=PBVFormHandle(FormName$)
    END IF
    IF hWnd<>0 THEN
          IF ID&<>0 THEN
                ' Control
                hCtrl=ZGetDlgItem(hWnd,ID&)
                IF hCtrl<>0 THEN
                    RV&=hCtrl
                END IF
          ELSE
                RV&=hWnd
          END IF
    END IF
'    App_EZ_HandleFlag&=0
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_Handle(BYVAL FormName$, BYVAL ID&) EXPORT10 AS LONG
    FUNCTION=ezHandle(FormName$, ID&,0)  ' bug fix so null string returns desktop handle
END FUNCTION

SUB EZ_SetCtrlUserData(BYVAL FormName$, BYVAL IDNum&, BYVAL V&) EXPORT10
    LOCAL hWnd&
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN SetWindowLong hWnd&, %GWL_USERDATA, V&
END SUB

FUNCTION EZ_GetCtrlUserData(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
    LOCAL hWnd&, RV&
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN RV&=GetWindowLong(hWnd&, %GWL_USERDATA)
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetCustCtrlPData(BYVAL FormName$, BYVAL IDNum&, BYVAL I&, BYVAL V&) EXPORT10
    LOCAL hWnd&
    IF IDNum&=0 THEN EXIT SUB
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN SendMessage hWnd&, %WM_SetEZPrivateData, I&, V&
END SUB

FUNCTION EZ_GetCustCtrlPData(BYVAL FormName$, BYVAL IDNum&, BYVAL I&) EXPORT10 AS LONG
    LOCAL hWnd&, RV&
    IF IDNum&=0 THEN EXIT FUNCTION
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN RV& = SendMessage(hWnd&, %WM_GetEZPrivateData,I&,0)
    FUNCTION=RV&
END FUNCTION

SUB EZ_SetCtrlPData(BYVAL FormName$, BYVAL IDNum&, BYVAL I&, BYVAL V&) EXPORT10
    LOCAL hWnd&
    IF IDNum&=0 THEN EXIT SUB
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN
        LOCAL RV&
        RV&=SendMessage(hWnd&, %WM_SetEZUserData, I&, V&)
'        if RV&<>1 then msgbox "error"
    END IF
END SUB

FUNCTION EZ_GetCtrlPData(BYVAL FormName$, BYVAL IDNum&, BYVAL I&) EXPORT10 AS LONG
    LOCAL hWnd&, RV&
    IF IDNum&=0 THEN EXIT FUNCTION
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN RV& = SendMessage(hWnd&, %WM_GetEZUserData,I&,0)
    FUNCTION=RV&
END FUNCTION

UNION EZ_SL
    S AS SINGLE
    L AS LONG
END UNION

FUNCTION EZ_CopySL(BYVAL V!) EXPORT10 AS LONG
    LOCAL N AS EZ_SL
    N.S=V!
    FUNCTION=N.L
END FUNCTION

FUNCTION EZ_CopyLS(BYVAL V&) EXPORT10 AS SINGLE
    LOCAL N AS EZ_SL
    N.L=V&
    FUNCTION=N.S
END FUNCTION



'------------------------------------------------------------------------------

FUNCTION PBVMsgBox (BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL MType&) AS LONG
LOCAL T$, MT$, RT$, P&, I&, Flag&, hWnd AS LONG
LOCAL MI&, MV&, RV&, MB&, MBX AS MSGBOXPARAMS, Inst&
LOCAL zT AS ASCIIZ*512
LOCAL zC AS ASCIIZ*128
LOCAL IFlag&, IconID AS DWORD
T$=MText$
MI&=0
MB&=0
IF FormName$="" THEN
   hWnd=0
ELSE
   hWnd=PBVFormHandle(FormName$)
END IF
Inst&=%NULL
IFlag&=0
SELECT CASE AS LONG MType&
    CASE 2
        MV&=%MB_OKCANCEL
    CASE 3
        MV&=%MB_RETRYCANCEL
    CASE 4
        MV&=%MB_YESNO
    CASE 5
        MV&=%MB_YESNOCANCEL
    CASE 6
        MV&=%MB_ABORTRETRYIGNORE
    CASE ELSE
        MV&=%MB_OK
END SELECT
FOR I&=1 TO 22
    RT$=""
    SELECT CASE AS LONG I&
        CASE 1
            MT$=App_EZ_DChar$
            RT$=CHR$(13)+CHR$(10)
        CASE 2
            MT$="{S}"
        CASE 3
            MT$="{!}"
        CASE 4
            MT$="{i}
        CASE 5
            MT$="{?}"
        CASE 6
            MT$="{1}"
        CASE 7
            MT$="{2}"
        CASE 8
            MT$="{3}"
        CASE 9 TO 18  ' custom Icons    {C0} to {C9}
            MT$="{C"+LTRIM$(STR$(I&-9))+"}"
        CASE 19 TO 22  ' custom Icons    {E1} to {E4}
            MT$="{E"+LTRIM$(STR$(I&-18))+"}"
        CASE ELSE
    END SELECT
    Flag&=0
    DO
        P&=INSTR(T$, MT$)
        IF P&=0 THEN EXIT DO
        Flag&=1
        T$=LEFT$(T$, P&-1)+RT$+MID$(T$, P&+LEN(MT$))
    LOOP
    IF Flag& THEN
        SELECT CASE AS LONG I&
            CASE 2
                MI&=%MB_ICONSTOP
                Inst&=%NULL
                IFlag&=0
            CASE 3
                MI&=%MB_ICONEXCLAMATION
                Inst&=%NULL
                IFlag&=0
            CASE 4
                MI&=%MB_ICONINFORMATION
                Inst&=%NULL
                IFlag&=0
            CASE 5
                MI&=%MB_ICONQUESTION
                Inst&=%NULL
                IFlag&=0
            CASE 6
                MB&=%MB_DEFBUTTON1
            CASE 7
                MB&=%MB_DEFBUTTON2
            CASE 8
                MB&=%MB_DEFBUTTON3
            CASE 9 TO 18      ' custom icons
                IF AppStubInstance&<>0 THEN
                    IFlag&=1
                    MI&=%MB_USERICON
                    IconID=MAKDWD(1991+I&, 0)
                    ' zI="MB_ICON"+LTRIM$(STR$(I&-9))

                    Inst&=AppStubInstance&  ' is Image Library DLL instance
                END IF
            CASE 19 TO 22      ' custom icons
                #IF %BuildSLL
                    ' these must be found in the apps resources to work
                    IF AppDLLInstance&<>0 THEN
                        IFlag&=1
                        MI&=%MB_USERICON
                        IconID=MAKDWD(981+I&, 0)
                        ' zI="EMB_ICON"+LTRIM$(STR$(I&-18))
                        Inst&=AppDLLInstance&  ' is EZGUI DLL instance
                    END IF
                #ELSE
                    IF AppDLLInstance&<>0 THEN
                        IFlag&=1
                        MI&=%MB_USERICON
                        IconID=MAKDWD(981+I&, 0)
                        ' zI="EMB_ICON"+LTRIM$(STR$(I&-18))
                        Inst&=AppDLLInstance&  ' is EZGUI DLL instance
                    END IF
                #ENDIF
            CASE ELSE
        END SELECT
    END IF
NEXT I&
zT=T$+CHR$(0)
zC=MTitle$+CHR$(0)
MV&=MV& OR %MB_TASKMODAL OR MI& OR %MB_SETFOREGROUND OR MB&

'TYPE MSGBOXPARAMS
'  cbSize AS LONG
'  hwndOwner AS LONG
'  hInstance AS LONG
'  lpszText AS ASCIIZ PTR
'  lpszCaption AS ASCIIZ PTR
'  dwStyle AS LONG
'  lpszIcon AS ASCIIZ PTR
'  dwContextHelpId AS LONG
'  lpfnMsgBoxCallback AS LONG
'  dwLanguageId AS LONG
'END TYPE
' if MI&=0 then Inst&=AppInstance&
MBX.cbSize = SIZEOF(MBX)
MBX.hwndOwner = hWnd
MBX.hInstance = Inst&
MBX.lpszText = VARPTR(zT)
MBX.lpszCaption = VARPTR(zC)
MBX.dwStyle = MV&
IF IFlag&=0 THEN
    MBX.lpszIcon = 0
ELSE
'    MBX.lpszIcon = VARPTR(zI)
    MBX.lpszIcon = IconID
END IF
MBX.dwContextHelpId = 0
MBX.lpfnMsgBoxCallback = 0
MBX.dwLanguageId = MAKLNG(%LANG_ENGLISH, %SUBLANG_DEFAULT)

P&=MessageBoxIndirect(MBX)

' P&=Messagebox(hWnd, zT, zC, MV&)

SELECT CASE AS LONG P&
    CASE %IDOK
        RV&=1
    CASE %IDCANCEL
        RV&=-1
    CASE %IDABORT
        RV&=-1
    CASE %IDRETRY
        RV&=1
    CASE %IDIGNORE
        RV&=0
    CASE %IDYES
        RV&=1
    CASE %IDNO
        RV&=0
    CASE ELSE
        RV&=0
END SELECT
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetEditLen(BYVAL FormName$, BYVAL ID&, BYVAL L&) EXPORT10
LOCAL X&
IF L&<1 THEN L&=1
IF L&>%APP_64KB THEN L&=%APP_64KB
X&=PBVSendMessageR(FormName$, ID&, %EM_SETLIMITTEXT, L&, 0, "EDIT")
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetRichTextLen(BYVAL FormName$, BYVAL ID&, BYVAL L&) EXPORT10
LOCAL X&
IF L&<1 THEN L&=1
X&=PBVSendMessageR(FormName$, ID&, %EM_EXLIMITTEXT, 0, L&, App_RichEditClass$)
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetFocusID() EXPORT10 AS LONG
    LOCAL hCtrl&, CID&
    CID&=0
    hCtrl&=GetFocus
    IF hCtrl&<>0 THEN
        IF LEFT$(ZGetClass(hCtrl&),10)<>"EZGUI_TYPE" THEN
            IF LEFT$(ZGetClass(hCtrl&),6)<>"#32770" THEN
                CID&=GetWindowLong(hCtrl&,%GWL_ID)
            END IF
        END IF
    END IF
    FUNCTION=CID&
END FUNCTION

FUNCTION EZ_GetFocusHandle() EXPORT10 AS LONG
    FUNCTION=GetFocus
END FUNCTION

FUNCTION EZ_GetFocusForm() EXPORT10 AS STRING
    LOCAL hCtrl&, FM$, hParent&
    FM$=""
    hCtrl&=GetFocus
    IF hCtrl&<>0 THEN
        hParent&=ZGetParentForm(hCtrl&)
        IF hParent&<>0 THEN FM$=ZFormNameH(hParent&)
    END IF
    FUNCTION=FM$
END FUNCTION

SUB EZ_SetFocus(BYVAL FormName$, BYVAL ID&) EXPORT10
    LOCAL hWnd&, hCtrl&
    hWnd&=ezHandle(FormName$,0,1)
    IF hWnd&<>0 THEN
        IF ID&<>0 THEN
            hCtrl&=ZGetDlgItem(hWnd&, ID&)
            IF hCtrl&<>0 THEN PostMessage hWnd&, %WM_NEXTDLGCTL, hCtrl&, %TRUE
        ELSE
            SetFocus hWnd&
        END IF
    END IF
END SUB
'------------------------------------------------------------------------------

SUB EZ_SetNextTab(BYVAL FormName$) EXPORT10
    EZ_PostMessage FormName$, 0,%WM_NEXTDLGCTL, 0, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetPrevTab(BYVAL FormName$) EXPORT10
    EZ_PostMessage FormName$, 0,%WM_NEXTDLGCTL, 1, 0
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_DefMainMenu(BYVAL ID&, BYVAL MText$, BYVAL CProp$) EXPORT10 AS LONG
LOCAL RV&, hMenu&
IF App_EZ_CurMenu&=0 THEN
    hMenu&=PBVMenu(0, 0, 0, "", 0, 1, "")
    IF hMenu&<>0 THEN
        App_EZ_CurMenu&=hMenu&
        RV&=PBVMenu(hMenu&, ID&, 0, MText$, 0, 5, CProp$)
    END IF
END IF
FUNCTION=hMenu&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_DefSubMenu(BYVAL ID&, BYVAL MText$, BYVAL CProp$) EXPORT10 AS LONG
LOCAL RV&, hMenu&, MFlag&, AddFlag&
'IF App_EZ_CurSubMenu&=0 THEN
    AddFlag&=1
    hMenu&=PBVMenu(0, 0, 0, "", 0, 2, "")
    CProp$=UCASE$(CProp$)
    IF INSTR(CProp$,"M") THEN
        CProp$=REMOVE$(CProp$, "M")
        MFlag&=1
        IF UCASE$(TRIM$(MText$))="<<EMPTY>>" THEN AddFlag&=0
    ELSE
        MFlag&=-1
    END IF
    IF hMenu&<>0 THEN
        IF AddFlag& THEN
            RV&=PBVMenu(hMenu&, ID&, 0, MText$, 0, 5, CProp$)
        END IF
        PBVTrackMenu hMenu&, 0,0,MFlag&
'        App_EZ_CurSubMenu&=hMenu&
    END IF
'END IF
FUNCTION=hMenu&
END FUNCTION

'------------------------------------------------------------------------------

' EZGUI 3.0 version

'SUB EZ_SetSubMenu(BYVAL hMenu&, BYVAL ID&, BYVAL hSubMenu&) EXPORT10
'LOCAL RV&, N&, P&, hWnd AS LONG
'IF hMenu&<>0 THEN
'    ARRAY SCAN AppSubMenus(1), =0, TO N&
'    IF N&>0 THEN
'        RV&=PBVMenu(hMenu&, ID&, 0, "", hSubMenu&, 8, "")
'        hWnd=AppCurrentDlg
'        ARRAY SCAN AppSubMenus(1), =hMenu&, TO P&
'        IF P&>0 THEN
'            IF AppSubMenusW(P&)<>0 THEN hWnd=AppSubMenusW(P&)
'        END IF
'        PBVTrackMenu hSubMenu&, hMenu&, hWnd, 0
'    END IF
'END IF
'END SUB

' EZGUI 4.0 version

SUB EZ_SetSubMenu(BYVAL hMenu&, BYVAL ID&, BYVAL hSubMenu&) EXPORT10
LOCAL RV&, P&, hWnd AS LONG ', N&
IF IsMenu(hMenu&) THEN
    IF IsMenu(hSubmenu&) THEN
        RV&=PBVMenu(hMenu&, ID&, 0, "", hSubMenu&, 8, "")
        hWnd=AppCurrentDlg
        ARRAY SCAN AppSubMenus(1), =hMenu&, TO P&
        IF P&>0 THEN
            IF AppSubMenusW(P&)<>0 THEN hWnd=AppSubMenusW(P&)
        END IF
        PBVTrackMenu hSubMenu&, hMenu&, hWnd, 0
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVMdiSetMenu(BYVAL hDlg&, BYVAL Mode&)
    LOCAL hMDIClient&, hFrame&, N&
    LOCAL hFrameMenu&, hMDIMenu&, hWinSubMenu&, hWinSubDlg&
    hWinSubMenu&=0
    hWinSubDlg&=0
    IF GetMyWindowLong(hDlg&, 2)=5 THEN  ' mdi child
        hMDIClient&=GetParent(hDlg&)
        hFrame&=GetParent(hMDIClient&)
        IF Mode&=1 THEN
            FOR N&=1 TO UBOUND(AppSubMenusW)
                IF AppSubMenusW(N&)=hDlg& THEN
                    IF AppSubMenusP(N&)=0 THEN
                        IF AppSubMenus(N&)<>0 THEN
                            hMDIMenu&=AppSubMenus(N&)
                            hWinSubDlg&=hDlg&
                            EXIT FOR
                        END IF
                    END IF
                END IF
            NEXT N&
        END IF
    ELSEIF GetMyWindowLong(hDlg&, 2)=4 THEN  ' mdi frame
        hFrame&=hDlg&
        N&=GetMyWindowLong(hDlg&, 1)    ' get form #
        IF N&<>0 THEN
            hMDIClient&=AppForms(N&).FhWnd2
        END IF
    ELSE
        EXIT SUB
    END IF
    FOR N&=1 TO UBOUND(AppSubMenusW)
        IF AppSubMenusW(N&)=hFrame& THEN
            IF AppSubMenusP(N&)=0 THEN
                IF AppSubMenus(N&)<>0 THEN
                    hFrameMenu&=AppSubMenus(N&)
                    EXIT FOR
                END IF
            END IF
        END IF
    NEXT N&
    IF hMDIMenu&=0 THEN hWinSubDlg&=hFrame&
    FOR N&=1 TO UBOUND(AppSubMenusW)
        IF AppSubMenusW(N&)=hWinSubDlg& THEN
            IF AppSubMenusMDIFlag(N&) THEN
                hWinSubMenu&=AppSubMenus(N&)
'                msgbox str$(hWinSubMenu&)+" "+EZ_GetFormName(hWinSubDlg&)
                EXIT FOR
            END IF
        END IF
    NEXT N&
    IF hFrameMenu&<>0 THEN
        IF hMDIMenu&=0 THEN
            IF IsMenu(hFrameMenu&) THEN
                SendMessage hMDIClient&, %WM_MDISETMENU, hFrameMenu&,hWinSubMenu&

'                msgbox "Frame Menu "+str$(hWinSubMenu&)+" MDI Child Menu "+str$(hMDIMenu&)

            END IF
        ELSE
            IF IsMenu(hMDIMenu&) THEN
                SendMessage hMDIClient&, %WM_MDISETMENU, hMDIMenu&,hWinSubMenu&
            END IF
        END IF
        DrawMenuBar hFrame&
    END IF
END SUB

SUB PBVTrackMenu(BYVAL hMenu&, BYVAL hMenuP&, BYVAL hWnd&, BYVAL MFlag&)
LOCAL N&
IF hMenu&<>0 THEN
    ARRAY SCAN AppSubMenus(1), =hMenu&, TO N&
    IF N&<>0 THEN
        AppSubMenusP(N&)=hMenuP&
        AppSubMenusW(N&)=hWnd&
        IF MFlag&=1 THEN
            AppSubMenusMDIFlag(N&)=1
        ELSEIF MFlag&=-1 THEN
            AppSubMenusMDIFlag(N&)=0
        END IF
    ELSE
        ARRAY SCAN AppSubMenus(1), =0, TO N&
        IF N&>0 THEN
            AppSubMenus(N&)=hMenu&
            AppSubMenusP(N&)=hMenuP&
            AppSubMenusW(N&)=hWnd&
            IF MFlag&=1 THEN
                AppSubMenusMDIFlag(N&)=1
            ELSEIF MFlag&=-1 THEN
                AppSubMenusMDIFlag(N&)=0
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVDoMenu(BYVAL hMenu&, BYVAL ID&, BYVAL EID&, BYVAL MText$, BYVAL hSubMenu&, BYVAL MAction&, BYVAL CProp$)
' RV&=PBVMenu(hMenu&, ID&, EID&, MText$, hSubMenu&, MAction&, CProp$)
LOCAL RV&
IF hMenu&<>0 THEN
    RV&=PBVMenu(hMenu&, ID&, EID&, MText$, hSubMenu&, MAction&, CProp$)
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AddMenuItem(BYVAL hMenu&, BYVAL ID&, BYVAL ID2&, BYVAL MText$, BYVAL CProp$) EXPORT10
' RV&=PBVDoMenu(hMenu&, ID&, EID&, MText$, hSubMenu&, MAction&, CProp$)
LOCAL A&
A&=5
IF ID2&<>0 THEN A&=3
IF MText$="-" THEN A&=A&+1
PBVDoMenu hMenu&, ID&, ID2&, MText$, 0, A&, CProp$
END SUB

'------------------------------------------------------------------------------

SUB EZ_UpdateMenu(BYVAL FormName$) EXPORT10
LOCAL hWnd&
hWnd&=PBVFormHandle(FormName$)
IF hWnd&<>0 THEN DrawMenuBar hWnd&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetMenuItem(BYVAL hMenu&, BYVAL ID&, BYVAL MText$, BYVAL CProp$) EXPORT10
' RV&=PBVDoMenu(hMenu&, ID&, EID&, MText$, hSubMenu&, MAction&, CProp$)
PBVDoMenu hMenu&, ID&, 0, MText$, 0, 7, CProp$
END SUB

'------------------------------------------------------------------------------

SUB EZ_DelMenuItem(BYVAL hMenu&, BYVAL ID&) EXPORT10
DeleteMenu hMenu&, ID&, %MF_BYCOMMAND
END SUB

'------------------------------------------------------------------------------

SUB EZ_DelMenu (BYVAL hMenu&) EXPORT10
LOCAL N&
ARRAY SCAN AppSubMenus(1), =hMenu&, TO N&
IF N&>0 THEN
    AppSubMenus(N&)=0
    AppSubMenusP(N&)=0
    AppSubMenusW(N&)=0
    AppSubMenusMDIFlag(N&)=0
    DestroyMenu hMenu&
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVDelFormMenus (BYVAL hWnd AS LONG)
LOCAL N&, I&, MDIChildFlag&
MDIChildFlag&=0
DO
    ARRAY SCAN AppSubMenusW(1), =hWnd, TO N&
    IF N&>0 THEN
        I&=ZFormNumH(hWnd)
        IF I&<>0 THEN
            IF AppForms(I&).FType=5 THEN MDIChildFlag&=1
            IF MDIChildFlag&<>0 THEN
                IF IsMenu(AppSubMenus(N&)) THEN
                    DestroyMenu AppSubMenus(N&)
                END IF
            END IF
            AppSubMenus(N&)=0
            AppSubMenusP(N&)=0
            AppSubMenusW(N&)=0
            AppSubMenusMDIFlag(N&)=0
        END IF
    ELSE
            EXIT DO
    END IF
LOOP
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_MsgBox (BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL CProp$) EXPORT10 AS LONG
LOCAL CP&
SELECT CASE AS CONST$ UCASE$(CProp$)
    CASE "OK"
        CP&=1
    CASE "OKC"
        CP&=2
    CASE "RC"
        CP&=3
    CASE "YN"
        CP&=4
    CASE "YNC"
        CP&=5
    CASE "ARI"
        CP&=6
    CASE ELSE
        CP&=1
END SELECT

FUNCTION=PBVMsgBox (FormName$, MText$, MTitle$, CP&)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SubClass (BYVAL V&) EXPORT10
SELECT CASE AS LONG V&
    CASE 1,2,3,4    ' new modes 3 and 4 are same as 1,2 except no %EZ_SubClass event generated
        App_EZ_SubClass&=V&
    CASE ELSE
        App_EZ_SubClass&=0
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetGrid (BYVAL X&, BYVAL Y&) EXPORT10
' LOCAL W&, H&
' App_EZ_GridDivide allows for a decimal (fraction) for Grid
IF X&<1 THEN X&=1
IF Y&<1 THEN Y&=1
IF X&>64 THEN X&=64
IF Y&>64 THEN Y&=64
App_EZ_GridH=Y&
App_EZ_GridW=X&
END SUB

'------------------------------------------------------------------------------

SUB EZ_SubClassMode(BYVAL N&) EXPORT10
IF N&=0 THEN
    App_EZ_SubClassMode&=0
ELSE
    SELECT CASE AS LONG N&
      CASE 2 TO 5
          ' 2 = User Defined Drag - Sends %EZ_NoDrag event , All Controls
          ' 3 = User Defined Drag - Sends %EZ_NoDrag event only to Drag Handle control
          '     All other controls will act Transparent, except for :
          '     %EZ_DButtonDown and %EZ_DButtonUp events
          ' 4 = Move Controls Only, All Controls
          ' 5 = Controls act transparent, all controls
          App_EZ_SubClassStyle&=N&
      CASE ELSE
         App_EZ_SubClassStyle&=0
    END SELECT
    App_EZ_SubClassStyleOld&=App_EZ_SubClassStyle&
    App_EZ_SubClassMode&=1
END IF
END SUB

'------------------------------------------------------------------------------


SUB EZ_UnloadControl (BYVAL FormName$, BYVAL ID&) EXPORT10
    LOCAL hCtrl AS LONG,CN$
    LOCAL N&, I&, V&
    IF ID&=0 THEN EXIT SUB
    hCtrl=ezHandle(FormName$, ID&,1)
    N&=ZFormNum(FormName$)
            IF hCtrl<>0 THEN
                CN$=zGetClass(hCtrl)
                IF CN$="TOOLBARWINDOW32" THEN
                    IF AppForms(N&).FhToolbar=hCtrl THEN AppForms(N&).FhToolbar=0
                END IF
                IF CN$="MSCTLS_STATUSBAR32" THEN
                    AppForms(N&).FhStatusbar=0
                END IF

                DestroyWindow hCtrl     ' components will check to see if EZ_CLOSE needs to be generated

                ' all controls subclassed by default now so WM_DESTROY will clean in control array
'                I&=ZGetControlIndex(hCtrl)


'                if I&<>0 then
'                    V&=(ID&*1000)+N&
'                    ARRAY SCAN AppControlTNum(1) FOR App_EZ_TopCtrl&, =V& , TO I&
'                    IF I&>0 THEN
'                        IF AppControlOrigAddress(I&)=0 THEN
'                            ZSetControlArray I&,0,0,0,0,0,0,"",0,0,0
'                        END IF
'                    END IF
'                end if
            END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetClipboardFormat(BYVAL Mode&) EXPORT10
STATIC RTF_ID&
SELECT CASE AS LONG Mode&
    CASE 1  ' Bitmap
        App_ClipFormat&=%CF_BITMAP
    CASE 2  ' RTF Text
        IF RTF_ID&=0 THEN
            RTF_ID&=RegisterClipboardFormat("Rich Text Format")
'            RTF_ID&=RegisterClipboardFormat("Rich Text Format Without Objects")
        END IF
        App_ClipFormat&=RTF_ID&
    CASE ELSE
        App_ClipFormat&=%CF_TEXT
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetClipboard(BYVAL D$) EXPORT10
LOCAL hClip AS LONG, lpAddress AS LONG, hBmp&
SELECT CASE AS LONG App_ClipFormat&
    CASE %CF_BITMAP
        hBmp&=EZ_ImageHandle(D$)
        IF hBmp&=0 THEN EXIT SUB
        hClip=CopyImage(hBmp&, %IMAGE_BITMAP, 0,0,0) ' %LR_COPYRETURNORG removed
        IF hClip=0 THEN EXIT SUB
    CASE ELSE   ' assume %CF_TEXT or RTF
        REPLACE CHR$(0) WITH " " IN D$
        D$=D$+CHR$(0)
        hClip=GlobalAlloc(%GMEM_MOVEABLE, LEN(D$))
        lpAddress=GlobalLock(hClip)
        POKE$ lpAddress, D$
        GlobalUnlock hClip
END SELECT
IF OpenClipboard(%NULL) THEN
    EmptyClipboard
    SetClipboardData App_ClipFormat&, hClip
    CloseClipboard
ELSE
    SELECT CASE AS LONG App_ClipFormat&
        CASE %CF_BITMAP
            DeleteObject hClip
        CASE ELSE
            GlobalFree hClip
    END SELECT
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetClipboard() EXPORT10 AS STRING
LOCAL hClip AS LONG, lpAddress AS LONG, D$, L&, hBmp&
D$=""
IF IsClipboardFormatAvailable(App_ClipFormat&) THEN
    IF OpenClipboard(%NULL) THEN
        hClip=GetClipboardData(App_ClipFormat&)
        SELECT CASE AS LONG App_ClipFormat&
            CASE %CF_BITMAP
                hBmp&=CopyImage(hClip, %IMAGE_BITMAP, 0,0,0) ' %LR_COPYRETURNORG removed
                IF hBmp&<>0 THEN
                    D$=EZ_NamePicture(hBmp&)
                END IF
            CASE ELSE
                lpAddress=GlobalLock(hClip)
                L&=GlobalSize(hClip)
                D$=PEEK$(lpAddress, L&)
                L&=INSTR(D$,CHR$(0))
                IF L&<>0 THEN D$=LEFT$(D$,L&-1)
                GlobalUnlock hClip
        END SELECT
        CloseClipboard
    END IF
END IF
FUNCTION=D$
END FUNCTION

'------------------------------------------------------------------------------

'------------------------------------------------------------------------------
'------------------------------------------------------------------------------
'------------------------------------------------------------------------------

' *************************************************************************************
'                         EZGUI / EZGUI EXPMACed Control Functions
' *************************************************************************************

%WS_EZ_FIXEDSTYLES1      = %WS_CHILD OR %WS_VISIBLE OR %WS_DISABLED OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN OR %WS_BORDER OR %WS_DLGFRAME OR %WS_THICKFRAME OR %WS_GROUP OR %WS_TABSTOP OR %WS_VSCROLL OR %WS_HSCROLL
%WS_EZ_FIXEDSTYLES2      = %WS_CHILD OR %WS_VISIBLE
%WS_EZ_FIXEDEXSTYLES1    = %WS_EX_TRANSPARENT OR %WS_EX_MDICHILD OR %WS_EX_CLIENTEDGE

SUB zModifyStyles(WS&, EX&, BYVAL SMode&)
     IF SMode&=1 THEN
          WS&=WS& AND %WS_EZ_FIXEDSTYLES1
          WS&=WS& OR App_EZ_UseStyle&
          EX&=EX& AND %WS_EZ_FIXEDEXSTYLES1
          EX&=EX& OR App_EZ_UseExStyle&
     END IF
     IF SMode&=2 THEN
          WS&=WS& AND %WS_EZ_FIXEDSTYLES2
          WS&=WS& OR App_EZ_UseStyle&
          EX&=App_EZ_UseExStyle&
     END IF
     App_EZ_UseStyle&=0
     App_EZ_UseExStyle&=0
END SUB

SUB EZ_UseStyles(BYVAL wStyle&, BYVAL wExStyle&, BYVAL SMode&) EXPORT10
     IF SMode&=1 THEN
          App_EZ_UsingStyles&=1
          wStyle&=wStyle& AND (NOT(%WS_EZ_FIXEDSTYLES1) )
          wExStyle&=wExStyle& AND (NOT(%WS_EZ_FIXEDEXSTYLES1))
     ELSE
          App_EZ_UsingStyles&=2
          wStyle&=wStyle& AND (NOT(%WS_EZ_FIXEDSTYLES2) )
     END IF
     App_EZ_UseStyle&=wStyle&
     App_EZ_UseExStyle&=wExStyle&
END SUB


SUB EZ_AppendStyle(BYVAL WStyle&) EXPORT10
     App_EZ_AppendStyle&=WStyle&
END SUB


'------------------------------------------------------------------------------

SUB EZ_Button (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_BUTTON, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZ-LXO@RSFA2^<>")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_ODButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    App_UseHotTrack&=1
    PBVControl IDNum&, %CTRL_BUTTON, C!, R!, W!, H!, CText$, ZParse(CProp$, "AGTDHZFRS-I")+"#"
    ZCallLoaded
END SUB

DECLARE FUNCTION SLibCallFuncX (BYVAL S$) AS LONG
DECLARE FUNCTION LLibCallFuncX (BYVAL L&) AS LONG
DECLARE FUNCTION LibCallFuncX () AS LONG

FUNCTION EZ_GetLibFuncAddr(BYVAL hLib&, BYVAL FName$) EXPORT10 AS DWORD
    LOCAL SBName AS ASCIIZ*64
    SBName=FName$
    FUNCTION=GetProcAddress(hLib&, SBName)
END FUNCTION

FUNCTION EZ_CallLibFunc(BYVAL hLib&, BYVAL CData$) EXPORT10 AS LONG
    LOCAL P&, RV&
    LOCAL LibAdd AS DWORD, SBName AS ASCIIZ*64, LData& , SFlag&
    RV&=0
    CData$=LTRIM$(RTRIM$(CData$))
    P&=INSTR(CData$,"|")
    IF P&<>0 THEN
        SBName=MID$(CData$,1,P&-1)
        CData$=MID$(CData$,P&+1)
        SFlag&=0
        SELECT CASE AS CONST$ UCASE$(CData$)
            CASE "{APP_INSTANCE}"
                LData&=GetModuleHandle(BYVAL %NULL)
            CASE ELSE
                IF LEFT$(CData$,1)=CHR$(34) AND RIGHT$(CData$,1)=CHR$(34) THEN
                    SFlag&=1
                    CData$=REMOVE$(CData$,CHR$(34))
                ELSE
                    LData&=VAL(CData$)
                END IF
        END SELECT
        LibAdd=GetProcAddress(hLib&, SBName)
        IF LibAdd<>0 THEN
            IF SFlag& THEN
                CALL DWORD LibAdd USING SLibCallFuncX(CData$) TO RV&
            ELSE
                CALL DWORD LibAdd USING LLibCallFuncX(LData&) TO RV&
            END IF
        END IF
    ELSE    ' no data
        SBName=CData$
        LibAdd=GetProcAddress(hLib&, SBName)
        IF LibAdd<>0 THEN
            CALL DWORD LibAdd USING LibCallFuncX() TO RV&
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------
GLOBAL App_DefRegionPict&

SUB EZ_SetDefaultRgnPict(BYVAL P$) EXPORT10
    IF P$<>"" THEN
        App_DefRegionPict&=EZ_ImageHandle(P$)
    ELSE
        App_DefRegionPict&=0
    END IF
END SUB

SUB ezSetRegion(BYVAL hWnd&, BYVAL RType&, BYVAL MyRgn&, BYVAL IFlag&, BYVAL NW&, BYVAL NH&)
LOCAL hRgn&, R AS RECT, X2&, Y2&, RW&, hBmp1&, hBmp&, TColor&, RC AS RECT
LOCAL OffsetX&, OffsetY&, WS&
IF hWnd&<>0 THEN
    GetWindowRect hWnd&, R
    X2&=(R.nRight-R.nLeft)+1
    Y2&=(R.nBottom-R.nTop)+1
    GetClientRect hWnd&, RC
    OffsetX&=((R.nRight-R.nLeft)-(RC.nRight-RC.nLeft))\2
    OffsetY&=((R.nBottom-R.nTop)-(RC.nBottom-RC.nTop))\2
    IF (NW&<>0) AND (NH&<>0) THEN
          X2&=NW&+1
          Y2&=NH&+1
    END IF
    SELECT CASE AS LONG RType&
        CASE 1  ' ellipse rgn
            hRgn&=CreateEllipticRgn(0,0,X2&,Y2&)
        CASE 2, -2  ' rndrect rgn
            IF App_FixedCorner&<=0 THEN
                IF RType&=-2 THEN
                    RW&=%DefaultCorner
                ELSE
                    RW&=(((X2&)/8)+((Y2&)/8))/2
                END IF
            ELSE
                RW&=App_FixedCorner&
            END IF
            hRgn&=CreateRoundRectRgn(0,0,X2&,Y2&,RW&,RW&)
        CASE 3  ' custom rgn
            hRgn&=MyRgn&
            ' you can pass a %NULL rgn
        CASE 4
            hRgn&=ZDrawPoly(0,0, 0, X2&, Y2&, 0, 2)
        CASE 0
            TColor&=MyRgn&
            IF App_DefRegionPict&=0 THEN
                SELECT CASE AS CONST$ ZGetClass(hWnd&)
                    CASE $TurtleClassName
                        hBmp1&=SendMessage(hWnd&,%EZTG_GETBITMAP,0,0)
                        GOSUB TransCtrl
                    CASE $CanvasClassName
                        IF App_CanvasHandle&=0 THEN ' can't be drawing in a Canvas
                            hBmp1&=SendMessage(hWnd&,%EZCV_GETBITMAP,0,0)
                            GOSUB TransCtrl
                        END IF
                    CASE "STATIC"
                        WS&=GetWindowLong(hWnd&,%GWL_STYLE)
                        SELECT CASE AS LONG WS& AND 31
                            CASE %SS_BITMAP
                                hBmp1&=SendMessage(hWnd&, %STM_GETIMAGE, %IMAGE_BITMAP,0)
                                GOSUB TransCtrl
                            CASE ELSE
                                EXIT SUB
                        END SELECT
                    CASE ELSE
                END SELECT
            ELSE
                hBmp1&=App_DefRegionPict&
                GOSUB TransCtrl
            END IF
            IF hRgn&=0 THEN EXIT SUB
            IF OffsetX&<>0 OR OffsetY&<>0 THEN
                OffsetRgn hRgn&,OffsetX&, OffsetY&
            END IF
        CASE ELSE
            EXIT SUB
    END SELECT
    SetWindowRgn hWnd&, hRgn&, 0
    IF (NW&=0) AND (NH&=0) THEN
         WS&=GetWindowLong(hWnd&,%GWL_STYLE)
         IF IFlag& THEN
              IF (WS& AND %WS_CHILD)=%WS_CHILD THEN
                  InvalidateRect hWnd&, RC,1
                  MapWindowPoints hWnd&, GetParent(hWnd&), BYVAL VARPTR(RC), 2
                  InvalidateRect GetParent(hWnd&),RC, 1
              ELSE
                  InvalidateRect hWnd&, RC,1
              END IF
         END IF
    END IF
END IF
EXIT SUB

TransCtrl:
   IF hBmp1&<>0 THEN
        MakeRgnBitmap hWnd&, 0,0, hBmp1&, TColor&, hRgn&, hBmp&, 0
   END IF
RETURN

END SUB

SUB EZ_SetRegion(BYVAL FormName$, BYVAL ID&, BYVAL RType&, BYVAL MyRgn&) EXPORT10
     LOCAL hWnd&
     hWnd&=ezHandle(FormName$, ID&,1)
     ezSetRegion hWnd&, RType&, MyRgn&, 1,0,0
END SUB

'------------------------------------------------------------------------------

SUB ZAddDragProp(BYVAL IDNum&, BYVAL CProp$)
    STATIC MFlag&
    LOCAL OKFlag&, hWndLB&
    CProp$=UCASE$(CProp$)
    OKFlag&=1
    IF INSTR(CProp$, "A") THEN OKFlag&=0
    IF INSTR(CProp$, ">") THEN OKFlag&=0
    IF INSTR(CProp$, "M") THEN OKFlag&=0
    IF INSTR(CProp$, "E") THEN OKFlag&=0
    IF OKFlag& THEN
        hWndLB&=ezHandle(App_EZ_CurForm$, IDNum&,0)
        IF hWndLB&<>0 THEN
           IF MakeDragList(hWndLB&) THEN
               IF MFlag&=0 THEN
                   MFlag&=1
                   App_DragListMsg&=RegisterWindowMessage($DRAGLISTMSGSTRING)
               END IF
           END IF
       END IF
    END IF
END SUB

SUB EZ_ODListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_LISTBOX, C!, R!, W!, H!, "", ZParse(CProp$, "NGTDHZFRS-?$AJMV#")+"&"
    IF INSTR(CProp$, "^") THEN  ' Make DragListBox
        ZAddDragProp IDNum&, CProp$
    END IF
    IF CText$<>"" THEN
        IF App_EZ_CurForm$<>"" THEN
            EZ_AddItems App_EZ_CurForm$, IDNum&, CText$
        END IF
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_PListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_PLIST, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZFRSAJV>")
    IF CText$<>"" THEN
        IF App_EZ_CurForm$<>"" THEN
            EZ_AddItems App_EZ_CurForm$, IDNum&, CText$
        END IF
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_FListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_FLIST, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZFRSAJV>M")
    IF CText$<>"" THEN
        IF App_EZ_CurForm$<>"" THEN
'            EZ_AddItems App_EZ_CurForm$, IDNum&, CText$
            EZ_SetText App_EZ_CurForm$, IDNum&, CText$
        END IF
    END IF
    ZCallLoaded
END SUB


'------------------------------------------------------------------------------

SUB EZ_CheckBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_CHECKBOX, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZFRS-LA2I3?^<>")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_Radio (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_RADIO, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZFRS-LA2I^<>")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_VScroll (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_VSCROLL, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZ-")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_HScroll (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_HSCROLL, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZ-")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_VTrackBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_VTRACKBAR, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZ-=BFSRLU!123456789")
    ZSetTip IDNum&,%TBM_GETTOOLTIPS
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_HTrackBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_HTRACKBAR, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZ-=BFSRLU!123456789")
    ZSetTip IDNum&,%TBM_GETTOOLTIPS
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_TreeView (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_TREEVIEW, C!, R!, W!, H!, "", ZParse(CProp$, "NBGTDHZFRSE-+VX!")
    ZSetTip IDNum&,%TVM_GETTOOLTIPS
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_ListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_LISTBOX, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZFRS-MAEV>J")
    IF CText$<>"" THEN
        IF App_EZ_CurForm$<>"" THEN
            EZ_AddItems App_EZ_CurForm$, IDNum&, CText$
        END IF
    END IF
    IF INSTR(CProp$, "^") THEN  ' Make DragListBox
        ZAddDragProp IDNum&, CProp$
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_ComboBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_COMBOBOX, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZ-AEVJ"+"O?$")
    IF CText$<>"" THEN
        IF App_EZ_CurForm$<>"" THEN
            EZ_AddItems App_EZ_CurForm$, IDNum&, CText$
            EZ_SelectItem App_EZ_CurForm$, IDNum&, 0
        END IF
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_Frame (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_FRAME, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZ-A2I^<>")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_LoadMaskEditLib(BYVAL F$, BYVAL CName$) EXPORT10
IF F$<>"" THEN
   #IF %BuildSLL
    ' no support for loading external masked edit control in a SLL
   #ELSE
       App_MaskEditDLL$=F$
       IF CName$<>"" THEN
            App_MaskEditClass$=CName$
       END IF
   #ENDIF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_Text (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    STATIC LoadRFlag&
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    CProp$=ZParseMask(Cprop$)
    IF LoadRFlag&=0 THEN
        IF App_EZ_CurMask$<>"" THEN
            #IF %BuildSLL
                EZME_RegisterControlClass
                LoadRFlag&=1
            #ELSE
                DIM F AS ASCIIZ * 255
                F=App_MaskEditDLL$+CHR$(0)
                App_hMaskEdit&=LoadLibrary(F)
                IF App_hMaskEdit&<>0 THEN LoadRFlag&=1
            #ENDIF
        END IF
    END IF
    PBVControl IDNum&, %CTRL_TEXT, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZFRS-ECBVMUN*>")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

FUNCTION zLoadRich(BYVAL N&) AS LONG
    STATIC LoadRFlag&
    IF LoadRFlag&=0 THEN
        RedoLoadLib:
        SELECT CASE N&
             CASE 1
                 App_RichEditClass$="RICHEDIT"
                 App_hRichEd1&=LoadLibrary("RICHED32.DLL")
                 App_RichEditType&=1
             CASE 2,3
                 App_RichEditClass$="RichEdit20A"
                 App_hRichEd1&=LoadLibrary("RICHED20.DLL")
                 IF App_hRichEd1&=0 THEN
                     'rich edit 2 failed, try 1
                     N&=1
                     GOTO RedoLoadLib
                 END IF
                 App_RichEditType&=2
             CASE 4
                 App_RichEditClass$="RichEdit50W"
                 App_hRichEd1&=LoadLibrary("MSFTEDIT.DLL")
                 IF App_hRichEd1&=0 THEN
                     'rich edit 4 failed, try 2
                     N&=2
                     GOTO RedoLoadLib
                 END IF
                 App_RichEditType&=4
        END SELECT
        LoadRFlag&=1
    END IF
    IF App_hRichEd1&<>0 THEN
        FUNCTION=1
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

SUB ZRichText1or2 (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$, BYVAL N&)
    LOCAL hCtrl&, E&
    IF zLoadRich(N&)=0 THEN EXIT SUB
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF

IF INSTR(CProp$,"1")=0 THEN
    CProp$=CProp$+"M"
END IF
PBVControl IDNum&, %CTRL_RICHTEXT, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZS-EBVM]AC>")
hCtrl&=ezHandle(App_EZ_CurForm$, IDNum&,0)
IF hCtrl&<>0 THEN
    E&=SendMessage(hCtrl&, %EM_GETEVENTMASK,0,0)
    IF App_RichEditType&>=2 THEN
        IF INSTR(CProp$,"@") THEN E&=E& OR %ENM_LINK
    END IF
    IF INSTR(CProp$,"?") THEN E&=E& OR %ENM_CHANGE
    SendMessage hCtrl&, %EM_SETEVENTMASK,0,E&
END IF

IF INSTR(CProp$, "]")<>0 THEN  ' resize to prevent maximize
    EZ_ResizeC App_EZ_CurForm$, IDNum&, C!, R!, W!, H!
END IF
ZCallLoaded
END SUB

SUB EZ_ForceRichVersion(BYVAL VerNum&) EXPORT10
     IF App_ForceRichVer&=0 THEN
          IF VerNum&>=1 AND VerNum&<=4 THEN
               App_ForceRichVer&=VerNum&
          END IF
     END IF
END SUB

SUB EZ_RichText1 (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
     LOCAL VN&
     VN&=1
     IF App_ForceRichVer&<>0 THEN VN&=App_ForceRichVer&
     ZRichText1or2 IDNum&, C!, R!, W!, H!, CProp$, VN& ' 1
END SUB

SUB EZ_RichText2 (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
     LOCAL VN&
     VN&=2
     IF App_ForceRichVer&<>0 THEN VN&=App_ForceRichVer&
     ZRichText1or2 IDNum&, C!, R!, W!, H!, CProp$, VN& ' 2
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_LoadLibrary(BYVAL DLLName$) EXPORT10 AS LONG
LOCAL N&, LN AS ASCIIZ*512, hL&
hL&=0
IF DLLName$<>"" THEN
    FOR N&=1 TO %MaxLoadLibrary
        IF AppLibrariesH&(N&)=0 THEN
            LN=DLLName$+CHR$(0)
            hL&=LoadLibrary(LN)
            IF hL&<>0 THEN
                AppLibrariesH&(N&)=hL&
                AppLibrariesN$(N&)=EZ_GetFileText(DLLName$)
            END IF
            EXIT FOR
        END IF
    NEXT N&
END IF
FUNCTION=hL&
END FUNCTION


FUNCTION ZLoadMMDLL() AS LONG
    STATIC LoadRFlag&
    IF LoadRFlag&=0 THEN
        App_hEZGUI_MCI&=LoadLibrary("ezgui5mm.dll")
        LoadRFlag&=1
    END IF
    IF App_hEZGUI_MCI&<>0 THEN
        FUNCTION=1
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

SUB EZ_MCIControl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF ZLoadMMDLL=0 THEN EXIT SUB
    IF App_hEZGUI_MCI&<>0 THEN
        IF App_AllowLoading&<>0 THEN
            DIM Pict$, CText$
            ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
        END IF
        PBVControl IDNum&, %CTRL_MCI, C!, R!, W!, H!, "", ZParse(CProp$, "GTFRDHZS")
        ZCallLoaded
    END IF
END SUB


'------------------------------------------------------------------------------

'SUB EZ_DBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
'    STATIC LoadRFlag&
'    IF App_AllowLoading&<>0 THEN
'        DIM Pict$, CText$
'        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
'    END IF
'    IF LoadRFlag&=0 THEN
'        App_hEZGUI_DBOX&=LoadLibrary("ezgui4bx.dll")
'        IF App_hEZGUI_DBOX&<>0 THEN LoadRFlag&=1
'    END IF
'    PBVControl IDNum&, %CTRL_DBOX, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZS")
'    ZCallLoaded
'END SUB

'------------------------------------------------------------------------------

SUB EZ_Canvas(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    CProp$=UCASE$(CProp$)
    CProp$=REMOVE$(CProp$, ANY "@#*&")
    IF INSTR(CProp$,"{DIB}")<>0 THEN
        CProp$=REMOVE$(CProp$, "{DIB}")+"@"
        IF INSTR(CProp$,"{24}")<>0 THEN
            CProp$=REMOVE$(CProp$, "{24}")+"#"
        ELSEIF INSTR(CProp$,"{16}")<>0 THEN
            CProp$=REMOVE$(CProp$, "{16}")+"*"
        END IF
    END IF
    IF INSTR(CProp$,"{DBUF}")<>0 THEN
        CProp$=REMOVE$(CProp$,"{DBUF}")+"&"
    END IF
    PBVControl IDNum&, %CTRL_CANVAS, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZSFR+@#*&C<")
    ZCallLoaded
END SUB

'GLOBAL App_InitGLClassAddr&
'GLOBAL App_FreeGLClassAddr&
'DECLARE SUB InitGLClassX()
'DECLARE SUB FreeGLClassX()


FUNCTION ZLoadGLCanvas() AS LONG
    STATIC LoadRFlag&
' #IF %BuildSLL
    IF LoadRFlag&=0 THEN
        App_hEZGUI_GL&=LoadLibrary("ezgui5gl.dll")
        LoadRFlag&=1
        IF App_hEZGUI_GL&<>0 THEN
            App_InitGLClassAddr&=GetProcAddress(App_hEZGUI_GL&, "INITGLCLASS")
            App_FreeGLClassAddr&=GetProcAddress(App_hEZGUI_GL&, "FREEGLCLASS")
            IF App_InitGLClassAddr&<>0 THEN
                CALL DWORD App_InitGLClassAddr& USING InitGLClassX()
            END IF
        END IF
    END IF
    IF App_hEZGUI_GL&<>0 THEN
        FUNCTION=1
    ELSE
        FUNCTION=0
    END IF

END FUNCTION

SUB EZ_PreloadGL() EXPORT10
    LOCAL RV&
    RV&=ZLoadGLCanvas
END SUB

SUB EZ_GLCanvas(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF ZLoadGLCanvas THEN
        EZ_UseSuperClass $OPENGLCLASS
        EZ_Canvas IDNum&, C!, R!, W!, H!, CProp$
    END IF
END SUB

'------------------------------------------------------------------------------

DECLARE SUB RenderTurtleX ( BYVAL tbuffer$, BYVAL hDC AS LONG, BYVAL RLEFT AS LONG, BYVAL RTOP AS LONG, BYVAL RRIGHT AS LONG, BYVAL RBOTTOM AS LONG, CFlag&)

GLOBAL App_RenderTurtleAdd AS DWORD

'------------------------------------------------------------------------------
DECLARE FUNCTION RegisterTurtleClass() AS LONG

FUNCTION ZLoadTurtle() AS LONG
    STATIC LoadRFlag&
    IF LoadRFlag&=0 THEN
        App_hTurtle1&=RegisterTurtleClass
        IF App_hTurtle1&<>0 THEN
            App_RenderTurtleAdd=CODEPTR(RenderTurtle)
        END IF
        LoadRFlag&=1
    END IF
    IF App_hTurtle1&=0 THEN
        FUNCTION=0
    ELSE
        FUNCTION=1
    END IF
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_TurtlePicture(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF ZLoadTurtle=0 THEN EXIT SUB
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_TURTLE, C!, R!, W!, H!, CText$, ZParse(CProp$, "GTDHZSFRI+")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------


SUB EZ_DCDrawTurtle(BYVAL hDC&, BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&) EXPORT10
LOCAL X2&, Y2&, CFlag&
IF App_RenderTurtleAdd=0 THEN
    ZLoadTurtle
END IF
IF App_RenderTurtleAdd<>0 THEN
    X2&=X1&+W&-1
    Y2&=Y1&+H&-1
    CFlag&=0
    CALL DWORD App_RenderTurtleAdd USING RenderTurtleX (tbuffer$, hDC&, X1&, Y1&, X2&, Y2&, CFlag&)
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CDrawTurtle(BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCDrawTurtle App_CanvasDC&, tbuffer$, X1&, Y1&, W&, H&
END IF
END SUB

'------------------------------------------------------------------------------

DECLARE FUNCTION RegisterDragHClass() AS LONG

FUNCTION ZLoadDragH() AS LONG
    IF App_DragHandleClass&=0 THEN
        App_DragHandleClass&=RegisterDragHClass
    END IF
    IF App_DragHandleClass&=0 THEN
        FUNCTION=0
    ELSE
        FUNCTION=1
    END IF
END FUNCTION

SUB EZ_HandleCtrl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    IF ZLoadDragH=0 THEN EXIT SUB
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_DRAGHANDLE, C!, R!, W!, H!, "", ZParse(CProp$, "H")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetHCtrlColor (BYVAL FormName$, BYVAL ID&, BYVAL ColorNum&) EXPORT10
LOCAL X&
IF ColorNum&>=0 AND ColorNum&<=UBOUND(AppBrush) THEN
    IF AppBrush(ColorNum&)=0 THEN       ' create QB color if it doesn't exist
        ZQBColors ColorNum&, ColorNum&
    END IF
    IF AppBrush(ColorNum&)<>0 THEN
        X&=PBVSendMessageR(FormName$, ID&, %EZDC_SETCOLOR, AppColor(ColorNum&), 0, $DragHandleControl)
        X&=PBVSendMessageR(FormName$, ID&, %EZDC_SETCOLOR, AppColor(ColorNum&), 2, $DragHandleControl)
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetHCtrlSize (BYVAL FormName$, BYVAL ID&, BYVAL HSize&, BYVAL PFlag&) EXPORT10
LOCAL X&
X&=PBVSendMessageR(FormName$, ID&, %EZDC_SETSIZE, HSize&, PFlag&, $DragHandleControl)
END SUB

'------------------------------------------------------------------------------


SUB EZ_SetSizeMode(BYVAL Mode&) EXPORT10
    SELECT CASE AS LONG Mode&
        CASE <>0
            App_SetBuddyMode&=1
        CASE ELSE
            App_SetBuddyMode&=0
    END SELECT
END SUB

SUB EZ_SetHCtrlBuddy (BYVAL FormName$, BYVAL ID&, BYVAL IDBuddy&, BYVAL AFlag&) EXPORT10
LOCAL hCtrl AS LONG, hWnd AS LONG, hCtrl2 AS LONG, HTVal&, OldRState&
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   IF ID&<>0 THEN
       hCtrl=ZGetDlgItem(hWnd,ID&)
       IF hCtrl<>0 THEN
           IF ZGetClass(hCtrl)=$DragHandleControl THEN
               IF IDBuddy&<>0 THEN
                  hCtrl2=ZGetDlgItem(hWnd,IDBuddy&)
                  IF hCtrl2<>0 THEN
                      OldRState&=App_RedrawState&
                      App_RedrawState&=0
                      IF SendMessage(hCtrl, %EZDC_SETBUDDY, hCtrl2, App_SetBuddyMode&) THEN
                          ' -------------------------
                          zSetRedrawFormRects hWnd,hCtrl,hCtrl2
'                          ZRedrawForm hWnd
                          App_RedrawState&=OldRState&
                          ' -------------------------
                          IF AFlag& THEN
                              IF App_LastBMsg&=%WM_NCLBUTTONDOWN THEN
                                  IF App_LastBwParam&=%HTBORDER THEN
                                      HTVal&=SendMessage(hCtrl, %WM_NCHITTEST, 0, App_LastBlParam&)
                                      IF HTVal&<>%HTBORDER AND HTVal&<>%HTCLIENT THEN
                                          PostMessage hCtrl, %WM_NCLBUTTONDOWN, HTVal&, App_LastBlParam&
                                          IF App_CCursor&>0 AND App_CCursor&<=UBOUND(AppCursor) THEN
                                              IF AppCursor(App_CCursor&)<>0 THEN
                                                  SetCursor AppCursor(App_CCursor&)
                                              END IF
                                          END IF
                                      END IF
                                  END IF
                              END IF
                              App_LastBMsg&=0
                              App_LastBwParam&=0
                              App_LastBlParam&=0
                          END IF
                      ELSE
                         App_RedrawState&=OldRState&
                      END IF
                  END IF
               ELSE
                  ' No Buddy and Hides control
                  SendMessage hCtrl, %EZDC_SETBUDDY, 0, 0
               END IF
            END IF
       END IF
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

'TYPE CHARFORMAT2 BYTE
'  cbSize AS DWORD
'  dwMask AS DWORD
'  dwEffects AS DWORD
'  yHeight AS LONG
'  yOffset AS LONG                ' > 0 for superscript, < 0 for subscript
'  crTextColor AS DWORD
'  bCharSet AS BYTE
'  bPitchAndFamily AS BYTE
'  wFiller AS WORD
'  szFaceName AS ASCIIZ * %LF_FACESIZE
'  wWeight AS WORD                ' Font weight (LOGFONT value)
'  sSpacing AS INTEGER              ' Amount to space between letters
'  crBackColor AS DWORD           ' Background color
'  lcid AS DWORD                  ' Locale ID
'  dwReserved AS DWORD            ' Reserved. Must be 0
'  sStyle AS INTEGER              ' Style handle
'  wKerning AS WORD               ' Twip size above which to kern char pair
'  bUnderlineType AS BYTE         ' Underline type
'  bAnimation AS BYTE             ' Animated text like marching ants
'  bRevAuthor AS BYTE             ' Revision author index
'  bReserved AS BYTE
'END TYPE

SUB EZ_DefRichFontEx(BYVAL BColor&, BYVAL FutureP&) EXPORT10
    App_RichFontBKColorSet&=BColor&
END SUB


'%MAX_TAB_STOPS = 32
'%lDefaultTab   = 720

'TYPE PARAFORMAT
'  cbSize AS LONG
'  dwMask AS DWORD
'  wNumbering AS WORD
'  wReserved AS WORD
'  dxStartIndent AS LONG
'  dxRightIndent AS LONG
'  dxOffset AS LONG
'  wAlignment AS WORD
'  cTabCount AS INTEGER
'  rgxTabs(1 TO %MAX_TAB_STOPS) AS LONG
'END TYPE

FUNCTION ZTwip(BYVAL V!) AS LONG
    FUNCTION=INT(V!*1440)
END FUNCTION

FUNCTION ZUnTwip(BYVAL V!) AS SINGLE
    FUNCTION=ROUND(V!/1440, 3)
END FUNCTION

SUB EZ_GetRichPar(BYVAL FormName$, BYVAL IDNum&, BFlag&, I!, LI!, RI!, AL$, TabList$) EXPORT10
    LOCAL hCtrl&, N&, MaxN&, TB&, TBV$, RV&
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$,IDNum&,1)
    BFlag&=0
    I!=0
    LI!=0
    RI!=0
    AL$=""
    TabList$=""
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=UCASE$(App_RichEditClass$) THEN
            DIM P AS PARAFORMAT
            P.cbSize=SIZEOF(P)
            P.dwMask=%PFM_NUMBERING OR %PFM_STARTINDENT OR %PFM_OFFSET OR %PFM_RIGHTINDENT OR %PFM_ALIGNMENT OR %PFM_TABSTOPS
            RV&=SendMessage(hCtrl&, %EM_GETPARAFORMAT, 0, VARPTR(P))
            IF P.wNumbering=%PFN_BULLET THEN BFlag&=1
            I!=ZUnTwip(P.dxStartIndent)
            LI!=I!+ZUnTwip(P.dxOffset)
            RI!=ZUnTwip(P.dxRightIndent)
            IF P.wAlignment=%PFA_CENTER THEN AL$="C"
            IF P.wAlignment=%PFA_RIGHT THEN AL$="R"
            IF P.wAlignment=%PFA_LEFT THEN AL$="L"
            MaxN&=P.cTabCount
            FOR N&=1 TO MaxN&
                IF N&>%MAX_TAB_STOPS THEN EXIT FOR
                TB&=P.rgxTabs(N&)
                TBV$=FORMAT$(ZUnTwip(TB&), ".####")
                IF N&=1 THEN
                    TabList$=TBV$
                ELSE
                    TabList$=TabList$+"|"+TBV$
                END IF
            NEXT N&
        END IF
    END IF
END SUB

SUB EZ_SetRichPar(BYVAL FormName$, BYVAL IDNum&, BYVAL BFlag&, BYVAL I!, BYVAL LI!, BYVAL RI!, BYVAL AL$, BYVAL TabList$, BYVAL PMask$) EXPORT10
    LOCAL hCtrl&, Mask&, N&, AP&, V!, RV&
    LOCAL TB&(), TL$
    DIM TB&(1 TO %MAX_TAB_STOPS)
'    App_EZ_HandleFlag&=1
    hCtrl&=ezHandle(FormName$,IDNum&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=UCASE$(App_RichEditClass$) THEN
            PMask$=UCASE$(PMask$)
            DIM P AS PARAFORMAT
            P.cbSize=SIZEOF(P)
            Mask&=0
            IF INSTR(PMask$,"B") THEN
                Mask&=Mask& OR %PFM_NUMBERING
                IF BFlag&<=0 THEN BFlag&=0
                IF BFlag&>=1 THEN BFlag&=%PFN_BULLET
                P.wNumbering=BFlag&
            END IF
            IF INSTR(PMask$,"I") THEN
                Mask&=Mask& OR %PFM_STARTINDENT OR %PFM_OFFSET OR %PFM_RIGHTINDENT
                P.dxStartIndent=ZTwip(I!)
                P.dxOffset=ZTwip(LI!)-ZTwip(I!)
                P.dxRightIndent=ZTwip(RI!)
            END IF
            IF INSTR(PMask$,"A") THEN
                Mask&=Mask& OR %PFM_ALIGNMENT
                AL$=UCASE$(LEFT$(AL$,1))
                SELECT CASE AS CONST$ AL$
                    CASE "C"
                        P.wAlignment=%PFA_CENTER
                    CASE "R"
                        P.wAlignment=%PFA_RIGHT
                    CASE "L"
                        P.wAlignment=%PFA_LEFT
                    CASE ELSE
                END SELECT
            END IF
            IF INSTR(PMask$,"T") THEN
                Mask&=Mask& OR %PFM_TABSTOPS
                N&=0
                IF TabList$<>"" THEN
                    IF RIGHT$(TabList$,1)<>App_EZ_DChar$ THEN TabList$=TabList$+App_EZ_DChar$
                END IF
                DO
                    AP&=INSTR(TabList$,App_EZ_DChar$)
                    IF AP&=0 THEN EXIT DO
                    V!=VAL(LEFT$(TabList$,AP&-1))
                    IF N&=%MAX_TAB_STOPS THEN EXIT DO
                    N&=N&+1
                    TB&(N&)=ZTwip(V!)
                    TabList$=MID$(TabList$,AP&+1)
                LOOP
                P.cTabCount=N&
                TL$=PEEK$(VARPTR(TB&(1)),%MAX_TAB_STOPS*4)
                POKE$ VARPTR(P.rgxTabs(1)), TL$
            END IF
            P.dwMask=Mask&
            RV&=SendMessage(hCtrl&, %EM_SETPARAFORMAT, 0, VARPTR(P))
'            MSGBOX STR$(RV&)
        END IF
    END IF
END SUB


SUB EZ_SetRichFont(BYVAL FormName$, BYVAL IDNum&, BYVAL TFace$, BYVAL APSize!, BYVAL FProp$, BYVAL FColor&, BYVAL FMask$, BYVAL Mode&) EXPORT10
LOCAL hCtrl AS LONG, UFlag&, CHF AS CHARFORMAT2, Mask&, Effect&, CS&, PF&, Y&, X&, PSize&, Weight&, BKColor&, ULine AS BYTE
LOCAL SSHeight&
'App_EZ_HandleFlag&=1
hCtrl=ezHandle(FormName$,IDNum&,1)
FProp$=UCASE$(FProp$)
FMask$=UCASE$(FMask$)
IF hCtrl<>0 THEN
    IF ZGetClass(hCtrl)=UCASE$(App_RichEditClass$) THEN
        IF TFace$<>"" THEN Mask&=%CFM_FACE ELSE Mask&=0
        IF APSize!>0 THEN
            Mask&=Mask& OR %CFM_SIZE
            PSize&=APSize!*20   ' convert Points to Twips
        END IF
        UFlag&=0
        SELECT CASE AS LONG Mode&
            CASE 1
                UFlag&=%SCF_SELECTION
            CASE 2
                UFlag&=%SCF_SELECTION OR %SCF_WORD
            CASE 3
                UFlag&=%SCF_ALL
            CASE ELSE
                UFlag&=%SCF_DEFAULT
        END SELECT
        IF INSTR(FMask$,"B") THEN
            IF App_RichEditType&>=2 THEN
                Weight&=400
                Mask&=Mask& OR %CFM_WEIGHT
                IF INSTR(FProp$,"T") THEN Weight&=100
                IF INSTR(FProp$,"L") THEN Weight&=300
                IF INSTR(FProp$,"M") THEN Weight&=500
                IF INSTR(FProp$,"B") THEN Weight&=700
                IF INSTR(FProp$,"X") THEN Weight&=900
                IF INSTR(FProp$,"+") THEN Weight&=Weight&+100
            ELSE
                Mask&=Mask& OR %CFM_BOLD
                IF INSTR(FProp$,"B") THEN Effect&=Effect& OR %CFE_BOLD
            END IF
        END IF
        IF INSTR(FMask$,"I") THEN
            Mask&=Mask& OR %CFM_ITALIC
            IF INSTR(FProp$,"I") THEN Effect&=Effect& OR %CFE_ITALIC
        END IF
        IF INSTR(FMask$,"U") THEN
            Mask&=Mask& OR %CFM_UNDERLINE
            IF INSTR(FProp$,"U") THEN Effect&=Effect& OR %CFE_UNDERLINE
        END IF
        IF INSTR(FMask$,"-") THEN
            Mask&=Mask& OR %CFM_STRIKEOUT
            IF INSTR(FProp$,"-") THEN Effect&=Effect& OR %CFE_STRIKEOUT
        END IF
        ' RichEdit 2.0 Features
        IF App_RichEditType&>=2 THEN
            IF INSTR(FMask$,"@") THEN
                Mask&=Mask& OR %CFM_LINK
                IF INSTR(FProp$,"@") THEN Effect&=Effect& OR %CFE_LINK
            END IF
            IF App_RichFontBKColorSet&>=0 THEN
                Mask&=Mask& OR %CFM_BACKCOLOR
                BKColor&=App_RichFontBKColorSet&
            ELSEIF App_RichFontBKColorSet&=-1 THEN
                Mask&=Mask& OR %CFM_BACKCOLOR
                Effect&=Effect& OR %CFE_AUTOBACKCOLOR
            END IF
        END IF
        IF FColor&>=-1 THEN
            Mask&=Mask& OR %CFM_COLOR
            IF FColor&=-1 THEN Effect&=Effect& OR %CFE_AUTOCOLOR
        END IF
        IF INSTR(FMask$,"^") THEN
            IF INSTR(FProp$,"^") THEN
                SSHeight&=PSize&/4
                Y&=SSHeight&
                PSize&=(PSize& * 3)/4
                Mask&=Mask& OR %CFM_OFFSET
            ELSEIF INSTR(FProp$,"_") THEN
                SSHeight&=PSize&/8
                Y&=-SSHeight&
                PSize&=(PSize& * 3)/4
                Mask&=Mask& OR %CFM_OFFSET
            ELSE
                Y&=0
                Mask&=Mask& OR %CFM_OFFSET
            END IF
        END IF
        CS&=%ANSI_CHARSET
        PF&=%DEFAULT_PITCH
        IF INSTR(FProp$,"D") THEN CS&=%DEFAULT_CHARSET
        IF INSTR(FProp$,"S") THEN CS&=%SYMBOL_CHARSET
        IF INSTR(FProp$,"O") THEN CS&=%OEM_CHARSET
        IF INSTR(FProp$,"F") THEN PF&=%FIXED_PITCH
        IF INSTR(FProp$,"V") THEN PF&=%VARIABLE_PITCH
        IF CS&<>%ANSI_CHARSET THEN Mask&=Mask& OR %CFM_CHARSET
        PF&=PF& OR %FF_DONTCARE
        ' CHARFORMAT and CHARFORMAT2 structures must be divisible by 4
        ' CHARFORMAT has padding of 2 bytes after valid members
        ' CHARFORMAT2 has padding of 2 bytes after valid members
        ' CHARFORMAT must be 60 bytes in size
        ' CHARFORMAT2 must be 84 bytes in size
        IF App_RichEditType&>=2 THEN
            CHF.cbSize=SIZEOF(CHF)
        ELSE
            CHF.cbSize=SIZEOF(CHF)-24   ' CHARFORMAT structure only for 1.0 RichEdit
        END IF
        CHF.dwMask=Mask&
        CHF.dwEffects=Effect&
        CHF.yHeight=PSize&
        CHF.yOffset=Y&   '* > 0 for superscript, < 0 for subscript *
        CHF.crTextColor=FColor&
        CHF.bCharSet=CS&
        CHF.bPitchAndFamily=PF&
        CHF.szFaceName=TFace$+CHR$(0)
        ' RichEdit 2.0 members
        CHF.crBackColor=BKColor&
        CHF.wWeight=Weight&
        CHF.bUnderlineType=ULine
        X&=SendMessage(hCtrl, %EM_SETCHARFORMAT, UFlag&, VARPTR(CHF))
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

GLOBAL App_RichExBKColor&

SUB EZ_GetRichFontEx(BKColor&, FutureP&) EXPORT10
    BKColor&=App_RichExBKColor&
    FutureP&=0
END SUB

SUB EZ_GetRichFont(BYVAL FormName$, BYVAL IDNum&, TFace$, APSize!, FProp$, FColor&, BYVAL Mode&) EXPORT10
LOCAL hCtrl AS LONG, UFlag&, CHF AS CHARFORMAT2, E&, X&, XSFlag&    ', Weight AS WORD
'App_EZ_HandleFlag&=1
IF Mode&=2 THEN
    XSFlag&=1
    Mode&=1
END IF
hCtrl=ezHandle(FormName$,IDNum&,1)
TFace$=""
APSize!=0
FProp$=""
FColor&=-2
App_RichExBKColor&=0
IF hCtrl<>0 THEN
    IF ZGetClass(hCtrl)=UCASE$(App_RichEditClass$) THEN
        IF App_RichEditType&>=2 THEN
            CHF.cbSize=SIZEOF(CHF)
        ELSE
            CHF.cbSize=SIZEOF(CHF)-24   ' CHARFORMAT structure is smaller for RichEdit 1.0
        END IF
        CHF.dwMask=%CFM_FACE OR %CFM_SIZE OR %CFM_BOLD OR %CFM_ITALIC _
                    OR %CFM_UNDERLINE OR %CFM_STRIKEOUT OR %CFM_COLOR _
                    OR %CFM_OFFSET OR %CFM_CHARSET
        IF App_RichEditType&>=2 THEN
            CHF.dwMask=CHF.dwMask OR %CFM_WEIGHT OR %CFM_BACKCOLOR OR %CFM_UNDERLINETYPE OR %CFM_LINK OR %CFM_DISABLED
        END IF
        IF Mode&=0 THEN UFlag&=0 ELSE UFlag&=1
        X&=SendMessage(hCtrl, %EM_GETCHARFORMAT, UFlag&, VARPTR(CHF))
        IF X&<>0 THEN
            TFace$=CHF.szFaceName
            APSize!=CHF.yHeight/20
            E&=CHF.dwEffects
            IF App_RichEditType&>=2 THEN
                SELECT CASE AS LONG CHF.wWeight
                    CASE 100
                        FProp$=FProp$+"T"
                    CASE 200
                        FProp$=FProp$+"T+"
                    CASE 300
                        FProp$=FProp$+"L"
                    CASE 400
                        FProp$=FProp$+"L+"
                    CASE 500
                        FProp$=FProp$+"M"
                    CASE 600
                        FProp$=FProp$+"M+"
                    CASE 700
                        FProp$=FProp$+"B"
                    CASE 800
                        FProp$=FProp$+"B+"
                    CASE 900
                        FProp$=FProp$+"X"
                    CASE ELSE
                        IF CHF.wWeight>=700 THEN FProp$=FProp$+"B"
                END SELECT
            ELSE
                IF (E& AND %CFE_BOLD)=%CFE_BOLD THEN FProp$=FProp$+"B"
            END IF
            IF (E& AND %CFE_ITALIC)=%CFE_ITALIC THEN FProp$=FProp$+"I"
            IF App_RichEditType&>=2 THEN
                IF (E& AND %CFE_LINK)=%CFE_LINK THEN FProp$=FProp$+"@"
                App_RichExBKColor&=CHF.crBackColor
            END IF
            IF (E& AND %CFE_UNDERLINE)=%CFE_UNDERLINE THEN FProp$=FProp$+"U"
            IF (E& AND %CFE_STRIKEOUT)=%CFE_STRIKEOUT THEN FProp$=FProp$+"-"
            IF (E& AND %CFE_AUTOCOLOR)=%CFE_AUTOCOLOR THEN
                FColor&=-1
            ELSE
                FColor&=CHF.crTextColor
            END IF
            IF CHF.yOffset>0 THEN
                IF XSFlag&=0 THEN
                    APSize!=((4*CHF.yHeight)/3)/20
                END IF
                FProp$=FProp$+"^"
            END IF
            IF CHF.yOffset<0 THEN
                IF XSFlag&=0 THEN
                    APSize!=((4*CHF.yHeight)/3)/20
                END IF
                FProp$=FProp$+"_"
            END IF
            IF CHF.bCharSet=%SYMBOL_CHARSET THEN FProp$=FProp$+"S"
            IF CHF.bCharSet=%OEM_CHARSET THEN FProp$=FProp$+"O"
            IF CHF.bCharSet=%DEFAULT_CHARSET THEN FProp$=FProp$+"D"
            IF (CHF.bPitchAndFamily AND %FIXED_PITCH)=%FIXED_PITCH THEN FProp$=FProp$+"F"
            IF (CHF.bPitchAndFamily AND %VARIABLE_PITCH)=%VARIABLE_PITCH THEN FProp$=FProp$+"V"
        END IF
    END IF
END IF

END SUB

'------------------------------------------------------------------------------

TYPE ESInfo
    sBuffer AS DWORD
    sLen AS LONG
    sPos AS LONG
END TYPE

SUB EZ_SetRichText(BYVAL FormName$, BYVAL IDNum&, BYVAL CText$, BYVAL RTF_Flag&, BYVAL Sel_Flag&) EXPORT10
    LOCAL hCtrl AS LONG
    LOCAL TS&, ES AS EDITSTREAM
    LOCAL MyCookie AS ESInfo
' TYPE EDITSTREAM
'   dwCookie AS DWORD    '* user value passed to callback as first parameter *
'   dwError AS DWORD     '* last error *
'   pfnCallback AS DWORD
' END TYPE
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$,IDNum&,1)
      IF hCtrl<>0 THEN
          IF LEFT$(ZGetClass(hCtrl),8)="RICHEDIT" THEN
              IF RTF_Flag& THEN TS&=%SF_RTF ELSE TS&=%SF_TEXT
              IF Sel_Flag& THEN TS&=TS& OR %SFF_SELECTION
              MyCookie.sBuffer=STRPTR(CText$)
              MyCookie.sLen=LEN(CText$)
              MyCookie.sPos=0
              ES.dwCookie=VARPTR(MyCookie)
              ES.dwError=0            '* last error
              ES.pfnCallback=CODEPTR(CB_EditStreamIN)
              SendMessage  hCtrl, %EM_STREAMIN, TS&, VARPTR(ES)
          END IF
      END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION CB_EditStreamIN (BYVAL dwCookie AS DWORD, _
                          BYVAL pbBuff AS LONG, _
                          BYVAL cb AS LONG, _
                          pcb AS LONG) AS DWORD
LOCAL RV&, L&, D$
LOCAL MyCookie AS ESInfo PTR
RV&=0
MyCookie=dwCookie
L&=@MyCookie.sLen-@MyCookie.sPos
IF L&>0 THEN
    IF L&>cb THEN L&=cb
    D$=PEEK$(@MyCookie.sBuffer+@MyCookie.sPos, L&)
    @MyCookie.sPos=@MyCookie.sPos+L&
    POKE$ pbBuff, D$
ELSE
    L&=0
END IF
pcb=L&
FUNCTION=RV&    ' A zero returned means write was successful !
                ' WIN API docs are wrong when it says to return number of bytes written
                ' If a non-zero value is returned, then this means an error occured and the
                ' value is put in the ES.dwError member
END FUNCTION

'------------------------------------------------------------------------------

TYPE ESInfo2
    sBuffer AS DWORD
    sLen AS LONG
    sPos AS LONG
    sCount AS LONG
    sFlag AS LONG
END TYPE

FUNCTION EZ_GetRichText(BYVAL FormName$, BYVAL IDNum&, BYVAL RTF_Flag&, BYVAL Sel_Flag&) EXPORT10 AS STRING
    LOCAL hCtrl AS LONG
    LOCAL TS&, ES AS EDITSTREAM, CText$
    LOCAL MyCookie AS ESInfo2
    CText$=""

    IF App_RTFLinkHandle&<>0 THEN
        hCtrl=App_RTFLinkHandle&
        GOSUB GetRTFTextNow
    ELSE
'        App_EZ_HandleFlag&=1
        hCtrl=ezHandle(FormName$,IDNum&,1)
        GOSUB GetRTFTextNow
    END IF
    FUNCTION=CText$
EXIT FUNCTION


GetRTFTextNow:
      IF hCtrl<>0 THEN
          IF RTF_Flag& THEN TS&=%SF_RTF ELSE TS&=%SF_TEXT
          IF Sel_Flag& THEN TS&=TS& OR %SFF_SELECTION
          MyCookie.sFlag=1      ' get byte count first
          MyCookie.sCount=0
          ES.dwCookie=VARPTR(MyCookie)
          ES.dwError=0            '* last error
          ES.pfnCallback=CODEPTR(CB_EditStreamOUT)
          SendMessage  hCtrl, %EM_STREAMOUT, TS&, VARPTR(ES)
          IF MyCookie.sCount>0 THEN
              CText$=STRING$(MyCookie.sCount, " ")
              MyCookie.sBuffer=STRPTR(CText$)
              MyCookie.sLen=LEN(CText$)
              MyCookie.sPos=0
              MyCookie.sFlag=0      ' retrieve text
              ES.dwCookie=VARPTR(MyCookie)
              ES.dwError=0            '* last error
              ES.pfnCallback=CODEPTR(CB_EditStreamOUT)
              SendMessage  hCtrl, %EM_STREAMOUT, TS&, VARPTR(ES)
          END IF
      END IF
RETURN

END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetRichTextLen(BYVAL FormName$, BYVAL IDNum&, BYVAL RTF_Flag&, BYVAL Sel_Flag&) EXPORT10 AS LONG
    LOCAL hCtrl AS LONG
    LOCAL TS&, ES AS EDITSTREAM
    LOCAL MyCookie AS ESInfo2, RV&
    RV&=0
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$,IDNum&,1)
      IF hCtrl<>0 THEN
          IF RTF_Flag& THEN TS&=%SF_RTF ELSE TS&=%SF_TEXT
          IF Sel_Flag& THEN TS&=TS& OR %SFF_SELECTION
          MyCookie.sFlag=1      ' get byte count first
          MyCookie.sCount=0
          ES.dwCookie=VARPTR(MyCookie)
          ES.dwError=0            '* last error
          ES.pfnCallback=CODEPTR(CB_EditStreamOUT)
          SendMessage  hCtrl, %EM_STREAMOUT, TS&, VARPTR(ES)
          RV&=MyCookie.sCount
      END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION CB_EditStreamOUT(BYVAL dwCookie AS DWORD, _
                          BYVAL pbBuff AS LONG, _
                          BYVAL cb AS LONG, _
                          pcb AS LONG) AS DWORD
LOCAL RV&, L&, D$
LOCAL MyCookie AS ESInfo2 PTR
RV&=0
MyCookie=dwCookie
IF @MyCookie.sFlag THEN
    ' do count first
    @MyCookie.sCount=@MyCookie.sCount+cb
    pcb=cb
ELSE
    L&=@MyCookie.sLen-@MyCookie.sPos
    IF L&>0 THEN
        IF cb<=L& THEN L&=cb
        D$=PEEK$(pbBuff, L&)
        POKE$ @MyCookie.sBuffer+@MyCookie.sPos, D$
        @MyCookie.sPos=@MyCookie.sPos+L&
    ELSE
        L&=0
    END IF
    pcb=cb
END IF
FUNCTION=RV&    ' A zero returned means write was successful !
                ' WIN API docs are wrong when it says to return number of bytes written
                ' If a non-zero value is returned, then this means an error occured and the
                ' value is put in the ES.dwError member
END FUNCTION

'------------------------------------------------------------------------------
SUB EZ_Label (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    IF INSTR(CText$,App_EZ_DChar$) THEN REPLACE App_EZ_DChar$ WITH CHR$(13)+CHR$(10) IN CText$
    PBVControl IDNum&, %CTRL_LABEL, C!, R!, W!, H!, CText$, ZParse(CProp$, "^GTDHZFRS-LCIAO_")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------
SUB EZ_Shape (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL DotText$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, DotText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_SHAPE, C!, R!, W!, H!, DotText$, ZParse(CProp$, "THV/\[(234IA?")
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_Picture (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL BName$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, BName$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_IMAGE, C!, R!, W!, H!, "", "P"+ZParse(CProp$, "GTDHZFRS-+CA")
    IF BName$<>"" THEN
        EZ_SetImage App_EZ_CurForm$, IDNum&, BName$
        IF INSTR(CProp$, "+")<>0 THEN  ' make full size
            EZ_ResizeC App_EZ_CurForm$, IDNum&, C!, R!, W!, H!
        END IF
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_Icon (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL IName$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, IName$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_IMAGE, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZFRS-+A")
    IF IName$<>"" THEN
        EZ_SetImage App_EZ_CurForm$, IDNum&, IName$
        IF INSTR(CProp$, "+")<>0 THEN  ' make full size
            EZ_ResizeC App_EZ_CurForm$, IDNum&, C!, R!, W!, H!
        END IF
    END IF
    ZCallLoaded
END SUB


'------------------------------------------------------------------------------

SUB EZ_PButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL BName$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, BName$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_BUTTON, C!, R!, W!, H!, "", "P"+ZParse(CProp$, "GTDHZ-XO@FRSA2")
    IF BName$<>"" THEN
        EZ_SetImage App_EZ_CurForm$, IDNum&, BName$
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_IButton (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL IName$, BYVAL CProp$) EXPORT10
    IF App_AllowLoading&<>0 THEN
        DIM CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, IName$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_BUTTON, C!, R!, W!, H!, "", "!"+ZParse(CProp$, "GTDHZ-XO@FRSA2")
    IF IName$<>"" THEN
        EZ_SetImage App_EZ_CurForm$, IDNum&, IName$
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_ControlEX(BYVAL FormName$, BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CName$, BYVAL Caption$, BYVAL CStyle&, BYVAL CEXStyle&) EXPORT10 AS LONG
    LOCAL SCFlag&, X&,Y&, W1&, H1&, hCtrl&
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CProp$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, Caption$, CProp$
    END IF
    IF App_EZ_SubClass& THEN SCFlag&=App_EZ_SubClass&
    IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
    X&=INT(C! * App_EZ_CharW)
    Y&=INT(R! * App_EZ_CharH)
    W1&=INT(W! * App_EZ_CharW)
    H1&=INT(H! * App_EZ_CharH)
    App_EZ_LastCtrl&=0
    FormName$=UCASE$(FormName$)
    IF LEN(FormName$)=0 THEN FormName$=App_EZ_CurForm$
    PBVControlEX FormName$, IDNum&, CName$, X&, Y&, W1&, H1&, Caption$,  CStyle&, CEXStyle&, SCFlag&, "", hCtrl&
    ZCallLoaded
    FUNCTION=hCtrl& '   App_EZ_LastCtrl&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_ProgressBar (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    App_EZ_LastCtrl&=0
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_PROGRESS, C!, R!, W!, H!, "", ZParse(CProp$, "GTDH-VF")
    IF App_EZ_LastCtrl&<>0 THEN
        SendMessage App_EZ_LastCtrl&, %PBM_SETRANGE,0, MAKLNG(0,100)
        SendMessage App_EZ_LastCtrl&, %PBM_SETPOS, 0,0
    END IF
    ZCallLoaded
END SUB


SUB EZ_AddRBForm (BYVAL FormName$, BYVAL IDNum&, BYVAL W!, BYVAL H!, BYVAL RBForm$, BYVAL BText$, BYVAL ImgIndex&, BYVAL HWidth&, BYVAL BGPict$, BYVAL BProp$) EXPORT10
    LOCAL hCtrl&, FGC&, BGC&, RMask AS DWORD, RStyle AS DWORD, hBmp&, X&
    LOCAL RB AS REBARBANDINFO, CT&, FP$, VP$, N&, AP$
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)="REBARWINDOW32" THEN
            IF FormName$="{ME}" THEN FormName$=EZ_GetME
            BProp$=UCASE$(BProp$)
            App_TempFormParent&=hCtrl&  ' forces control to be actual parent
            FGC&=EZ_FG
            BGC&=EZ_BG
            FP$="P"
            VP$="SK#F"
            FOR N&=1 TO LEN(VP$)
                AP$=MID$(VP$,N&,1)
                IF INSTR(BProp$,AP$) THEN FP$=FP$+AP$
                BProp$=REMOVE$(BProp$, AP$)
            NEXT N&
            EZ_Form RBForm$, FormName$,"", 0,0, W!, H!, FP$
            RMask=%RBBIM_ID OR %RBBIM_CHILD  OR %RBBIM_SIZE OR %RBBIM_STYLE OR %RBBIM_IDEALSIZE OR %RBBIM_CHILDSIZE
            IF FGC&<>-1 AND BGC&<>-1 THEN
                RMask=RMask OR %RBBIM_COLORS
            END IF
            IF ImgIndex&>=0 THEN
                RMask=RMask OR %RBBIM_IMAGE
            END IF
            IF BText$<>"" THEN
                RMask=RMask OR %RBBIM_TEXT
                BText$=BText$+CHR$(0)
            END IF
            IF hWidth&>=0 THEN  ' -1 is default
                RMask=RMask OR %RBBIM_HEADERSIZE
            END IF
            hBmp&=EZ_ImageHandle(BGPict$)
            IF hBmp&<>0 THEN
                RMask=RMask OR %RBBIM_BACKGROUND
            END IF
            CT&=SendMessage(hCtrl&,%RB_GETBANDCOUNT,0,0)
            RStyle=0
            IF INSTR(BProp$,".") THEN RStyle=RStyle OR %RBBS_BREAK
            IF INSTR(BProp$,"E") THEN RStyle=RStyle OR %RBBS_CHILDEDGE
            IF INSTR(BProp$,"?")=0 THEN RStyle=RStyle OR %RBBS_FIXEDSIZE
            IF INSTR(BProp$,">") THEN RStyle=RStyle OR &H200& ' %RBBS_USECHEVRON
            IF INSTR(BProp$,"|") THEN RStyle=RStyle OR %RBBS_GRIPPERALWAYS ELSE RStyle=RStyle OR %RBBS_NOGRIPPER
            IF INSTR(BProp$,"H") THEN RStyle=RStyle OR %RBBS_HIDDEN
            IF INSTR(BProp$,"V") THEN RStyle=RStyle OR %RBBS_VARIABLEHEIGHT
            ' --------------------------------------------------------
            RB.cbSize=SIZEOF(RB)
            RB.fMask=RMask
            RB.fStyle=RStyle
            RB.clrFore=EZ_ColorVal(FGC&,1)
            RB.clrBack=EZ_ColorVal(BGC&,0)
            RB.lpText=STRPTR(BText$)
            RB.cch=0    ' only for return value of text length
            RB.iImage=ImgIndex&
            RB.hwndChild=ezHandle(RBForm$,0,0)
            RB.cxMinChild=EZ_X(W!)  ' important !
            RB.cyMinChild=EZ_Y(H!)
            RB.cx=EZ_X(W!)          ' actual size
            RB.hbmBack=hBmp&
            RB.wID=IDNum&+CT&+1
            RB.cyChild=EZ_Y(H!)
            RB.cyMaxChild=EZ_Y(H!*3)
            RB.cyIntegral=EZ_Y(.5)
            RB.cxIdeal=EZ_X(W!)     ' ideal size
            RB.lParam=0
            RB.cxHeader=hWidth&   ' width of dragable bar
            ' --------------------------------------------------------
            X&=SendMessage(hCtrl&, %RB_INSERTBAND, -1, VARPTR(RB))
        END IF
    END IF
END SUB

SUB EZ_Rebar(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL ImgListN&, BYVAL CProp$) EXPORT10
    LOCAL RBI AS REBARINFO, X&, hImg&
    App_EZ_LastCtrl&=0
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        Pict$=STR$(ImgListN&)
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
        ImgListN&=VAL(Pict$)
    END IF
    PBVControl IDNum&, %CTRL_REBAR, C!, R!, W!, H!, "", ZParse(CProp$, "TGFRZSDHA[?VB<>N^")
    IF App_EZ_LastCtrl&<>0 THEN
        RBI.cbSize=SIZEOF(RBI)
        hImg&=EZ_ImgListHandle(ImgListN&)
        IF hImg&<>0 THEN
            RBI.fMask=%RBIM_IMAGELIST
            RBI.himl=hImg&
        ELSE
            RBI.fMask=0
            RBI.himl=0
        END IF
        X&=SendMessage(App_EZ_LastCtrl&, %RB_SETBARINFO, 0, VARPTR(RBI))
    END IF
    ZCallLoaded
END SUB

SUB EZ_Pager(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    LOCAL BWidth&, CPix&, BGC&, EW&
    App_EZ_LastCtrl&=0
    EW&=1
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF

    PBVControl IDNum&, %CTRL_PAGER, C!, R!, W!, H!, "", ZParse(CProp$, "DHAVTG")

    IF App_EZ_LastCtrl&<>0 THEN

        CProp$=UCASE$(CProp$)
        BWidth&=-1
        IF INSTR(CProp$,"V") THEN
            CPix&=EZ_Y(.5)
        ELSE
            CPix&=EZ_X(1.0)
        END IF
        IF INSTR(CProp$,"M") THEN EW&=3
        IF INSTR(CProp$,"W") THEN EW&=5
        IF INSTR(CProp$,"N") THEN EW&=0
        IF INSTR(CProp$,"+") THEN EW&=EW&*2
        IF INSTR(CProp$,"0") THEN BWidth&=0
        IF INSTR(CProp$,"1") THEN BWidth&=1
        IF INSTR(CProp$,"2") THEN BWidth&=2
        IF INSTR(CProp$,"3") THEN BWidth&=3
        IF INSTR(CProp$,"4") THEN BWidth&=4
        IF INSTR(CProp$,"5") THEN BWidth&=5
        IF INSTR(CProp$,"6") THEN BWidth&=6
        IF INSTR(CProp$,"7") THEN BWidth&=7
        IF INSTR(CProp$,"8") THEN BWidth&=8
        IF INSTR(CProp$,"9") THEN BWidth&=9
        BGC&=EZ_BG
        IF BGC&>=0 THEN
            BGC&=EZ_ColorVal(BGC&,0)
            SendMessage App_EZ_LastCtrl&, %PGM_SETBKCOLOR,0,BGC&
        END IF
        SendMessage App_EZ_LastCtrl&, %PGM_SETBORDER,0,EW&
        BWidth&=BWidth& * CPix&
        IF BWidth&>=0 THEN  ' if < 0 then default
            SendMessage App_EZ_LastCtrl&, %PGM_SETBUTTONSIZE,0, BWidth&
        END IF

    END IF

    ZCallLoaded
END SUB

SUB zSetStyle(BYVAL hCtrl&, BYVAL wStyle&, BYVAL RFlag&)
     LOCAL WS&
     WS&=GetWindowLong(hCtrl&,%GWL_STYLE)
     IF RFlag& THEN
          WS&=WS& AND (NOT wStyle&)
     ELSE
          WS&=WS& OR wStyle&
     END IF
     SetWindowLong hCtrl&, %GWL_STYLE, WS&
END SUB

SUB EZ_ChangeProp(BYVAL FormName$, BYVAL IDNum&, BYVAL Prop$, BYVAL RFlag&) EXPORT10
     LOCAL hCtrl&, wStyle&
     wStyle&=0
     hCtrl&=ezHandle(FormName$,IDNum&,1)
     IF hCtrl&<>0 THEN
          Prop$=UCASE$(Prop$)
          SELECT CASE zGetClass(hCtrl&)
               CASE "SYSPAGER"
                    IF INSTR(Prop$,"A") THEN wStyle&=wStyle& OR %PGS_AUTOSCROLL
'               CASE "MSCTLS_PROGRESS32"

               CASE "BUTTON"
                    IF INSTR(Prop$,"^") THEN wStyle&=wStyle& OR %BS_CENTER
                    IF INSTR(Prop$,"<") THEN wStyle&=wStyle& OR %BS_LEFT
                    IF INSTR(Prop$,">") THEN wStyle&=wStyle& OR %BS_RIGHT
'                    select case ZGetCListClass(hCtrl&,1)    ' returns EZGUI name, rather the only original classname
'                         CASE "BUTTON"
'                         case "CHECKBOX"
'                         case "RADIO"
'                         case "FRAME"
'                         case else
'                    end select
'               CASE "EDIT", App_MaskEditClass$
'               CASE $PLISTCLASS
'               CASE $FLISTCLASS
'               CASE $TurtleClassName
'               CASE $CanvasClassName
'               CASE $MCIClassName
'               CASE $ShapeClassName
'               CASE $DragHandleControl
'               CASE $EZComponent
'               CASE "MSCTLS_PROGRESS32"
'               CASE "MSCTLS_TRACKBAR32"
'               CASE "MSCTLS_STATUSBAR32"
'               CASE "MSCTLS_UPDOWN32"
'               CASE "REBARWINDOW32"
'               CASE "RICHEDIT", "RICHEDIT20A", "RICHEDIT50W"
'               CASE "STATIC"
'                    SELECT CASE ZGetCListClass(hCtrl&,1)    ' returns EZGUI name, rather the only original classname
'                         case "ICON"
'                         case "PICTURE"
'                         case "LABEL"
'                         case else
'                    end select
'               CASE "SYSTABCONTROL32"
'               CASE "SYSLISTVIEW32"
'               CASE "SYSTREEVIEW32"
'
'               CASE "SYSDATETIMEPICK32"
'               CASE "SYSMONTHCAL32"
'               CASE "SYSANIMATE32"
'               CASE "SYSHEADER32"
'               CASE "TOOLBARWINDOW32"
'               CASE "TOOLTIPS_CLASS32"
'               CASE "#32770"  ' Dialog Class
'               case else
          END SELECT
          IF wStyle&<>0 THEN
               zSetStyle hCtrl&, wStyle&, RFlag&
          END IF
     END IF
END SUB

SUB EZ_AddPGForm (BYVAL FormName$, BYVAL IDNum&, BYVAL W!, BYVAL H!, BYVAL PGForm$, BYVAL FProp$) EXPORT10
    LOCAL hCtrl&, P$, N&, AP$, IP$, hForm&, hOldForm&
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)="SYSPAGER" THEN
            IF FormName$="{ME}" THEN FormName$=EZ_GetME
            hOldForm&=GetWindowLong(hCtrl&, %GWL_USERDATA)
            IF hOldForm&<>0 THEN
                IF LEFT$(ZGetClass(hOldForm&),10)="EZGUI_TYPE" THEN
                    SendMessage hOldForm&, %WM_CLOSE, 0, 0
                ELSE
                    DestroyWindow hOldForm& ' non EZGUI window
                END IF
                SetWindowLong hCtrl&, %GWL_USERDATA,0
            END IF
            P$=""
            AP$="SK#|F"
            FProp$=UCASE$(FProp$)
            FOR N&=1 TO LEN(AP$)
                IP$=MID$(AP$,N&,1)
                IF INSTR(FProp$,IP$) THEN P$=P$+IP$
            NEXT N&
            App_TempFormParent&=hCtrl&  ' forces control to be actual parent
            EZ_Form PGForm$, App_EZ_CurForm$,"", 0,0, W!, H!, "P"+P$
            hForm&=ezHandle(PGForm$,0,0)
            IF hForm&<>0 THEN
                 SetWindowLong hCtrl&, %GWL_USERDATA, hForm&   ' MAKLNG(EZ_X(W!), EZ_Y(H!))
                 SendMessage hCtrl&, %PGM_SETCHILD,0, hForm&
            END IF
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_UpDown (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    App_EZ_LastCtrl&=0
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_UPDOWN, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHS")
    IF App_EZ_LastCtrl&<>0 THEN
        SendMessage App_EZ_LastCtrl&, %UDM_SETRANGE32,0,100
        SendMessage App_EZ_LastCtrl&, %UDM_SETPOS32, 0, 0
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetAnimate(BYVAL Form$, BYVAL IDNum&, BYVAL Action$) EXPORT10
LOCAL hCtrl&, F&, T$, P&, F2&
hCtrl&=ezHandle(Form$, IDNum&,1)
IF hCtrl&<>0 THEN
    IF ZGetClass(hCtrl&)="SYSANIMATE32" THEN
        SELECT CASE AS CONST$ LEFT$(UCASE$(Action$),4)
            CASE "PLAY"
                SendMessage hCtrl&, %ACM_PLAY,-1, MAKLNG(0, -1)
            CASE "GOTO"
                F&=VAL(TRIM$(MID$(Action$,5)))
                IF F&<0 THEN F&=0
                IF F&>65536 THEN F&=65536
                SendMessage hCtrl&, %ACM_PLAY,1, MAKLNG(F&, F&)
            CASE "LOOP"
                T$=TRIM$(MID$(Action$,5))
                F&=VAL(PARSE$(T$,",",1))
                F2&=VAL(PARSE$(T$,",",2))
                IF F&<0 THEN F&=0
                IF F&>65536 THEN F&=65536
                IF F2&<F& THEN F2&=F&
                IF F2&>65536 THEN F2&=65536
                SendMessage hCtrl&, %ACM_PLAY,-1, MAKLNG(F&, F2&)
            CASE "STOP"
                SendMessage hCtrl&, %ACM_STOP,0, 0
            CASE ELSE
                Action$=ZGFile(Action$)
                SendMessage hCtrl&, %ACM_OPEN,0, STRPTR(Action$)
        END SELECT
    END IF
END IF
END SUB

SUB EZ_Animate (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL AFile$, BYVAL CProp$) EXPORT10
    App_EZ_LastCtrl&=0
    IF App_AllowLoading&<>0 THEN
        DIM CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, AFile$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_ANIMATE, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHSFRAIC")
    IF App_EZ_LastCtrl&<>0 THEN
        IF AFile$<>"" THEN
            AFile$=ZGFile(AFile$)
            SendMessage App_EZ_LastCtrl&, %ACM_OPEN,0, STRPTR(AFile$)
        END IF
    END IF
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

FUNCTION ZISMultiSel(BYVAL hCtrl&) AS LONG
    LOCAL WS&, RV&
    WS&=GetWindowLong(hCtrl&, %GWL_STYLE)
    IF (WS& AND %MCS_MULTISELECT) = %MCS_MULTISELECT THEN RV&=1 ELSE RV&=0
    FUNCTION=RV&
END FUNCTION

SUB PBVGetSetDateTime(BYVAL FormName$, BYVAL ID&, ST AS SYSTEMTIME, BYVAL Mode&)
LOCAL hCtrl&, RV&
hCtrl&=ezHandle(FormName$, ID&,1)
IF hCtrl&<>0 THEN
    SELECT CASE AS CONST$ ZGetClass(hCtrl&)
        CASE "SYSDATETIMEPICK32"
            SELECT CASE AS LONG Mode&
                CASE 1
                    RV&=SendMessage(hCtrl&, %DTM_SETSYSTEMTIME, %GDT_VALID, VARPTR(ST))
                CASE 0
                    RV&=SendMessage(hCtrl&, %DTM_GETSYSTEMTIME, 0, VARPTR(ST))
                CASE 99
                    RV&=SendMessage(hCtrl&, %DTM_SETRANGE, %GDTR_MAX OR %GDTR_MIN, VARPTR(ST))
                CASE -1
                    RV&=SendMessage(hCtrl&, %DTM_SETSYSTEMTIME, %GDT_NONE, VARPTR(ST))
                CASE ELSE
            END SELECT
        CASE "SYSMONTHCAL32"
            SELECT CASE AS LONG Mode&
                CASE 101
                    IF ZISMultiSel(hCtrl&)=0 THEN
                        RV&=SendMessage(hCtrl&, %MCM_SETCURSEL, 0, VARPTR(ST))
                    END IF
                CASE 102
                    IF ZISMultiSel(hCtrl&)=0 THEN
                        RV&=SendMessage(hCtrl&, %MCM_GETCURSEL, 0, VARPTR(ST))
                    END IF
                CASE 103
                    RV&=SendMessage(hCtrl&, %MCM_SETRANGE, %GDTR_MAX OR %GDTR_MIN, VARPTR(ST))
                CASE 104
                    RV&=SendMessage(hCtrl&, %MCM_GETRANGE, %GDTR_MAX OR %GDTR_MIN, VARPTR(ST))
                CASE 105
                    IF ZISMultiSel(hCtrl&) THEN
                        RV&=SendMessage(hCtrl&, %MCM_SETSELRANGE, 0, VARPTR(ST))
                    END IF
                CASE 106
                    IF ZISMultiSel(hCtrl&) THEN
                        RV&=SendMessage(hCtrl&, %MCM_GETSELRANGE, 0, VARPTR(ST))
                    END IF
                CASE ELSE
            END SELECT
        CASE ELSE
    END SELECT
END IF
END SUB

'TYPE SYSTEMTIME
'  wYear AS INTEGER
'  wMonth AS INTEGER
'  wDayOfWeek AS INTEGER
'  wDay AS INTEGER
'  wHour AS INTEGER
'  wMinute AS INTEGER
'  wSecond AS INTEGER
'  wMilliseconds AS INTEGER
'END TYPE

SUB ZSetDateTime(ST AS SYSTEMTIME,BYVAL MN%, BYVAL DY%, BYVAL WD%, BYVAL YR%, BYVAL HR%, BYVAL Mnt%, BYVAL Sec%, BYVAL MS%)
    ST.wYear=YR%
    ST.wMonth=MN%
    ST.wDayOfWeek=WD%
    ST.wDay=DY%
    ST.wHour=HR%
    ST.wMinute=Mnt%
    ST.wSecond=Sec%
    ST.wMilliseconds=MS%
END SUB

SUB ZGetDateTime(ST AS SYSTEMTIME, MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MS%)
    YR%=ST.wYear
    MN%=ST.wMonth
    WD%=ST.wDayOfWeek
    DY%=ST.wDay
    HR%=ST.wHour
    Mnt%=ST.wMinute
    Sec%=ST.wSecond
    MS%=ST.wMilliseconds
END SUB

' date time control commands

SUB EZ_SetDateTime (BYVAL FormName$, BYVAL ID&, BYVAL MN%, BYVAL DY%, BYVAL YR%, BYVAL HR%, BYVAL Mnt%, BYVAL Sec%) EXPORT10
    LOCAL ST AS SYSTEMTIME
                 'ST ,MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MS%)
    ZSetDateTime  ST, MN%, DY%,  0 , YR%, HR%, Mnt%, Sec%,  0
    PBVGetSetDateTime FormName$, ID&, ST, 1
END SUB

SUB EZ_GetDateTime (BYVAL FormName$, BYVAL ID&, MN%, DY%, YR%, HR%, Mnt%, Sec%, WDay%, MSec%) EXPORT10
    LOCAL ST AS SYSTEMTIME
    PBVGetSetDateTime FormName$, ID&, ST, 0
                'ST ,MN%, DY%, WD%,   YR%, HR%, Mnt%, Sec%, MS%)
    ZGetDateTime ST, MN%, DY%, WDay%, YR%, HR%, Mnt%, Sec%, MSec%
END SUB

SUB EZ_SetDateTimeMinMax (BYVAL FormName$, BYVAL ID&, BYVAL MN1%, BYVAL DY1%, BYVAL YR1%, BYVAL HR1%, BYVAL Mnt1%, BYVAL Sec1%, BYVAL MN2%, BYVAL DY2%, BYVAL YR2%, BYVAL HR2%, BYVAL Mnt2%, BYVAL Sec2%) EXPORT10
    LOCAL ST() AS SYSTEMTIME
    DIM ST(1 TO 2) AS SYSTEMTIME
                'ST     ,MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MS%)
    ZSetDateTime ST(1), MN1%, DY1%, 0, YR1%, HR1%, Mnt1%,Sec1%,0
    ZSetDateTime ST(2), MN2%, DY2%, 0, YR2%, HR2%, Mnt2%,Sec2%,0
    PBVGetSetDateTime FormName$, ID&, ST(1), 99
END SUB

' calendar commands

SUB EZ_SetDate (BYVAL FormName$, BYVAL ID&, BYVAL MN%, BYVAL DY%, BYVAL YR%) EXPORT10
    LOCAL ST AS SYSTEMTIME
                'ST ,MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MS%)
    ZSetDateTime ST, MN%, DY%,  0,  YR%,  0,   0,    0,    0
    PBVGetSetDateTime FormName$, ID&, ST, 101
END SUB

SUB EZ_GetDate (BYVAL FormName$, BYVAL ID&, MN%, DY%, YR%, WD%) EXPORT10
    LOCAL ST AS SYSTEMTIME, HR%, Mnt%, Sec%, MSec%
    PBVGetSetDateTime FormName$, ID&, ST, 102
                'ST ,MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MS%)
    ZGetDateTime ST, MN%, DY%, WD%, YR%, HR%, Mnt%, Sec%, MSec%
END SUB

SUB EZ_SetDateMinMax(BYVAL FormName$, BYVAL ID&, BYVAL MN1%, BYVAL DY1%, BYVAL YR1%, BYVAL MN2%, BYVAL DY2%, BYVAL YR2%) EXPORT10
    DIM ST(1 TO 2) AS SYSTEMTIME
    ZSetDateTime ST(1), MN1%, DY1%, 0, YR1%, 0,0,0,0
    ZSetDateTime ST(2), MN2%, DY2%, 0, YR2%, 0,0,0,0
    PBVGetSetDateTime FormName$, ID&, ST(1), 103
END SUB

SUB EZ_GetDateMinMax(BYVAL FormName$, BYVAL ID&, MN1%, DY1%, YR1%, MN2%, DY2%, YR2%) EXPORT10
    DIM ST(1 TO 2) AS SYSTEMTIME, WD%, HR%, Mnt%, Sec%, MSec%
    PBVGetSetDateTime FormName$, ID&, ST(1), 104
    ZGetDateTime ST(1), MN1%, DY1%, WD%, YR1%, HR%, Mnt%, Sec%, MSec%
    ZGetDateTime ST(2), MN2%, DY2%, WD%, YR2%, HR%, Mnt%, Sec%, MSec%
END SUB

SUB EZ_SetDateRange(BYVAL FormName$, BYVAL ID&, BYVAL MN1%, BYVAL DY1%, BYVAL YR1%, BYVAL MN2%, BYVAL DY2%, BYVAL YR2%) EXPORT10
    DIM ST(1 TO 2) AS SYSTEMTIME
    ZSetDateTime ST(1), MN1%, DY1%, 0, YR1%, 0,0,0,0
    ZSetDateTime ST(2), MN2%, DY2%, 0, YR2%, 0,0,0,0
    PBVGetSetDateTime FormName$, ID&, ST(1), 105
END SUB

SUB EZ_GetDateRange(BYVAL FormName$, BYVAL ID&, MN1%, DY1%, YR1%, MN2%, DY2%, YR2%) EXPORT10
    DIM ST(1 TO 2) AS SYSTEMTIME, WD%, HR%, Mnt%, Sec%, MSec%
    PBVGetSetDateTime FormName$, ID&, ST(1), 106
    ZGetDateTime ST(1), MN1%, DY1%, WD%, YR1%, HR%, Mnt%, Sec%, MSec%
    ZGetDateTime ST(2), MN2%, DY2%, WD%, YR2%, HR%, Mnt%, Sec%, MSec%
END SUB


SUB EZ_Calendar(BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    App_EZ_LastCtrl&=0
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_MONTH, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHRSF_?M#@")
    IF App_EZ_LastCtrl&<>0 THEN

    END IF
    ZCallLoaded
END SUB

GLOBAL App_CalendarEXColor1&
GLOBAL App_CalendarEXColor2&
GLOBAL App_CalendarEXColor3&

SUB EZ_DefCalendarExColors(BYVAL TFG&, BYVAL TBG&, BYVAL TT&) EXPORT10
    App_CalendarEXColor1&=TFG&
    App_CalendarEXColor2&=TBG&
    App_CalendarEXColor3&=TT&
    ZQBColors TFG&, TBG&
    ZQBColors TT&, TBG&
END SUB

'

SUB ZSetCalendarColor(BYVAL hCtrl AS LONG, BYVAL FG&, BYVAL BG&, BYVAL Mode&)
    LOCAL CFG&, CBG&, TBG&, TFG&, TT&, CMsg&
    CMsg&=%MCM_SETCOLOR
    IF Mode&=1 THEN CMsg&=%DTM_SETMCCOLOR
    CFG&=ZFGColorNum(FG&)
    CBG&=ZFGColorNum(BG&)
    IF CFG&=-1 THEN CFG&=GetSysColor(%COLOR_WINDOWTEXT) ELSE CFG&=AppColor(CFG&)
    IF CBG&=-1 THEN CBG&=GetSysColor(%COLOR_WINDOW) ELSE CBG&=AppColor(CBG&)
    SendMessage hCtrl, CMsg&, %MCSC_BACKGROUND, CBG&
    SendMessage hCtrl, CMsg&, %MCSC_MONTHBK, CBG&
    SendMessage hCtrl, CMsg&, %MCSC_TEXT, CFG&
    TFG&=ZFGColorNum(App_CalendarEXColor1&)
    TBG&=ZFGColorNum(App_CalendarEXColor2&)
    TT&=ZFGColorNum(App_CalendarEXColor3&)
    IF TFG&=-1 THEN TFG&=GetSysColor(%COLOR_HIGHLIGHTTEXT) ELSE TFG&=AppColor(TFG&)
    IF TT&=-1 THEN TT&=GetSysColor(%COLOR_GRAYTEXT) ELSE TT&=AppColor(TT&)
    IF TBG&=-1 THEN TBG&=GetSysColor(%COLOR_HIGHLIGHT) ELSE TBG&=AppColor(TBG&)
    SendMessage hCtrl, CMsg&, %MCSC_TITLETEXT, TFG&
    SendMessage hCtrl, CMsg&, %MCSC_TITLEBK, TBG&
    SendMessage hCtrl, CMsg&, %MCSC_TRAILINGTEXT, TT&
END SUB


SUB EZ_DateTime (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CProp$) EXPORT10
    LOCAL P&, F$, P2&
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, CText$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF

App_EZ_LastCtrl&=0
CProp$=REMOVE$(CProp$, ANY "1234")
P&=INSTR(CProp$,"{")
IF P&<>0 THEN
    P2&=INSTR(CProp$,"}")
    IF P2&<=P& THEN P2&=LEN(CProp$)
    F$=MID$(CProp$,P&+1, P2&-P&-1)
    CProp$=LEFT$(CProp$,P&-1)+MID$(CProp$,P2&+1)
    SELECT CASE AS CONST$ UCASE$(F$)
        CASE "LONGDATE"
            CProp$=CProp$+"1"
            F$=""
        CASE "SHORTDATE"
            CProp$=CProp$+"2"
            F$=""
        CASE "LONGDATEC"
            CProp$=CProp$+"3"
            F$=""
        CASE "TIME"
            CProp$=CProp$+"4"
            F$=""
        CASE ELSE
            F$=F$+CHR$(0)   ' custom format
    END SELECT
ELSE
    CProp$=CProp$+"1"
    F$=""
END IF
PBVControl IDNum&, %CTRL_DATETIME, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHR1234XU")
IF App_EZ_LastCtrl&<>0 THEN
    IF F$<>"" THEN
        REPLACE "PM" WITH "tt" IN F$
        REPLACE "DD" WITH "dd" IN F$
        REPLACE "DY." WITH "ddd" IN F$
        REPLACE "DAY" WITH "dddd" IN F$
        ' "MM" is same and "M" is same
        REPLACE "MON." WITH "MMM" IN F$
        REPLACE "MONTH" WITH "MMMM" IN F$
        REPLACE "YEAR" WITH "yyyy" IN F$
        REPLACE "YY" WITH "yy" IN F$
        SendMessage App_EZ_LastCtrl&, %DTM_SETFORMAT,0,STRPTR(F$)
    END IF
END IF
ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_StatusBar(BYVAL ID&, BYVAL CText$, BYVAL CProp$) EXPORT10
    LOCAL hWnd AS LONG, N&, WS&, P&, TMPS&, R AS RECT, H&, F&, FW!, FH!
    IF App_AllowLoading&<>0 THEN
        DIM Pict$, C2!, R2!, W2!, H2!
        ZLoading "", ID&, C2!, R2!, W2!, H2!, Pict$, CText$, CProp$
    END IF

DIM Perc(1 TO 32) AS LONG
hWnd=PBVFormHandle(App_EZ_CurForm$)
IF hWnd<>0 THEN
    N&=ZFormNumH(hWnd)
    IF N&>0 THEN
        IF AppForms(N&).FhStatusbar=0 THEN
            CText$=CText$+CHR$(0)
            IF INSTR(CProp$,"H") THEN
                WS&=%WS_CHILD
            ELSE
                WS&=%WS_CHILD OR %WS_VISIBLE
            END IF
            TMPS&=GetWindowLong(hWnd, %GWL_STYLE)
            TMPS&=TMPS& AND %WS_THICKFRAME
            IF TMPS&<>0 THEN WS&=WS& OR %SBARS_SIZEGRIP
            IF App_EZ_AppendStyle&<>0 THEN
                WS&=WS& OR App_EZ_AppendStyle&
                App_EZ_AppendStyle&=0
            END IF
            IF App_Allow_Ctrl_Clipping& THEN
               WS&=WS& OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS
            ELSE
               App_Allow_Ctrl_Clipping&=1
            END IF
            IF INSTR(CProp$,"D") THEN WS&=WS& OR %WS_DISABLED
            IF App_EZ_AFont&>=0 THEN F&=App_EZ_AFont& ELSE F&=0
            EZ_GetTextSize F&, "X", FW!, FH!, 0 ' pixels
            H&=FH!+(GetSystemMetrics(%SM_CYEDGE))
            PBVControlEX App_EZ_CurForm$, ID&, "msctls_statusbar32", 0, 0, 10, H&, _
                         CText$,  WS&, 0, App_EZ_SubClass&, "", AppForms(N&).FhStatusbar
'            AppForms(N&).FhStatusbar=CreateStatusWindow(WS&, STRPTR(CText$), hWnd, ID&)
            IF AppForms(N&).FhStatusbar<>0 THEN
                GetClientRect hWnd, R
                SendMessage AppForms(N&).FhStatusbar, %WM_SIZE, %SIZE_RESTORED, MAKDWD(R.nRight, R.nBottom)
                P&=1
                IF INSTR(CProp$,"2") THEN P&=2
                IF INSTR(CProp$,"3") THEN P&=3
                IF INSTR(CProp$,"4") THEN P&=4
                IF INSTR(CProp$,"5") THEN P&=5
                IF AppForms(N&).FhStatusbar<>0 THEN
                    IF P&>=1 THEN
                        ZSetSBEqualParts hWnd, AppForms(N&).FhStatusbar, P&, Perc()
                    END IF
                END IF
            END IF
            ZCallLoaded
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB ZSetSBEqualParts(BYVAL hWnd AS LONG, BYVAL hCtrl AS LONG, BYVAL N&, Perc&())
LOCAL R AS RECT, I&, W&, AW!, UW!
IF N&<1 THEN N&=1
IF N&>32 THEN N&=32
GetClientRect hWnd, R

AW!=R.nRight-R.nLeft
UW!=AW!/100
W&=INT(AW!)
'W&=R.nRight\N&

DIM P(1 TO N&) AS LONG

FOR I&=1 TO N&
    IF I&=N& THEN
        P(I&)=-1    ' whats left
    ELSEIF I&=1 THEN
        P(I&)=INT(Perc&(I&)*UW!)
    ELSE
        P(I&)=P(I&-1)+INT(Perc&(I&)*UW!)
    END IF
NEXT I&

'IF Perc&(1)>0 THEN
'    P(1)=(Perc&(1)*R.nRight)\100
'ELSE
'    P(1)=W&
'END IF
'FOR I&=2 TO N&
'    IF Perc&(I&)>0 THEN
'        P(I&)=P(I&-1)+((Perc&(I&)*R.nRight)\100)
'    ELSE
'        P(I&)=P(I&-1)+W&
'    END IF
'NEXT I&

SendMessage hCtrl, %SB_SETPARTS, N&, VARPTR(P(1))
SendMessage hCtrl, %SB_SIMPLE, 0,0
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetSBParts(BYVAL FormName$, BYVAL ID&, BYVAL Parts&, BYVAL PPerc$) EXPORT10
LOCAL hWnd AS LONG, hCtrl AS LONG, N&, P&, X&, MX&, V$, R AS RECT, AW&, QFlag&
DIM Perc(1 TO 32) AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   GetClientRect hWnd, R
   AW&=R.nRight-R.nLeft
   IF PPerc$<>"" THEN
        IF RIGHT$(PPerc$,1)<>"|" THEN PPerc$=PPerc$+"|"
        MX&=100
        FOR N&=1 TO 32
            Perc(N&)=1  ' at least 1%
        NEXT N&
        FOR N&=1 TO 32
           P&=INSTR(PPerc$, "|")
           IF P&=0 THEN EXIT FOR
           V$=LEFT$(PPerc$, P&-1)
           IF LEFT$(V$,1)="@" THEN
               V$=MID$(V$,2)
               X&=INT((VAL(V$)*App_EZ_CharW*100)/AW&)
           ELSEIF LEFT$(V$,1)="?" THEN
               IF QFlag&=0 THEN
                   ' X&=MX&
                   X&=0
                   QFlag&=N&
               ELSE
                   X&=0
               END IF
           ELSE
               X&=VAL(V$)
           END IF
           PPerc$=MID$(PPerc$, P&+1)
           IF X&<1 THEN X&=1
           IF X&>MX& THEN X&=MX&
           MX&=MX&-X&
           Perc(N&)=X&
        NEXT N&
        IF QFlag&<>0 THEN
            Perc(QFlag&)=MX&
        END IF
   END IF
   IF ID&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,ID&)
        IF hCtrl<>0 THEN
            IF ZGetClass(hCtrl)="MSCTLS_STATUSBAR32" THEN
                ZSetSBEqualParts hWnd, hCtrl, Parts&, Perc()
            END IF
        END IF
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetSBText(BYVAL FormName$, BYVAL ID&, BYVAL Part&, BYVAL CText$, BYVAL CProp$) EXPORT10
    LOCAL hCtrl AS LONG
'    App_EZ_HandleFlag&=1
    hCtrl=ezHandle(FormName$,ID&,1)
        IF hCtrl<>0 THEN
            IF ZGetClass(hCtrl)="MSCTLS_STATUSBAR32" THEN
                IF Part&<1 THEN Part&=1
                IF Part&>32 THEN Part&=32
                Part&=Part&-1
                IF INSTR(CProp$,"O") THEN
                    Part&=Part& OR %SBT_OWNERDRAW
                    SendMessage hCtrl, %SB_SETTEXT, Part&, VAL(Ctext$)
                ELSE
                    IF INSTR(CProp$, "N") THEN
                       Part&=Part& OR %SBT_NOBORDERS
                    ELSE
                       IF INSTR(CProp$, "P") THEN
                           Part&=Part& OR %SBT_POPOUT
                       END IF
                    END IF
                    CText$=CText$+CHR$(0)
                    SendMessage hCtrl, %SB_SETTEXT, Part&, STRPTR(Ctext$)
                END IF
            END IF
        END IF
END SUB

'------------------------------------------------------------------------------

GLOBAL App_AppendTBPict&

SUB EZ_AppendTBPict(BYVAL PName$) EXPORT10
App_AppendTBPict&=EZ_ImageHandle(PName$)
END SUB

SUB PBV_AppendTBPict(BYVAL hCtrl&)
LOCAL TBAB AS tagTBADDBITMAP, hBmp&, BMPW&, BMPH&, BMPI&
IF hCtrl&<>0 THEN
    hBmp&=App_AppendTBPict&
    IF hBmp&<>0 THEN
        TBAB.hInst  =   0
        TBAB.nId    =   hBmp&
        EZ_GetBitmapSize hBmp, BMPW&, BMPH&
        IF BMPW&>0 THEN
            BMPI&=BMPW&/BMPH&
            SendMessage hCtrl&, %TB_ADDBITMAP, BMPI&, VARPTR(TBAB)
        END IF
    END IF
END IF
App_AppendTBPict&=0
END SUB

'------------------------------------------------------------------------------

TYPE EZTBWIDTH
    cbSize AS DWORD
    dwMask AS DWORD
    dummy1 AS STRING*10
    cx AS WORD
    dummy2 AS STRING*12
END TYPE

%TB_SETBUTTONINFO         = %WM_USER + 66
%TB_GETPADDING           = %WM_USER + 86

SUB ZSetTBtnWidth(BYVAL hCtrl&, BYVAL BtnID&, BYVAL W&)
    LOCAL EZTB AS EZTBWIDTH, T$, L&, HP&
    LOCAL hDC AS LONG, hOldFont AS LONG, hFont AS LONG, OldSP&, SZ AS SIZEL
    EZTB.cbSize=SIZEOF(EZTB)
    EZTB.dwMask=&H00000040  ' %TBIF_SIZE
    IF W&<0 THEN
        T$=STRING$(256,"0")
        L&=SendMessage(hCtrl&, %TB_GETBUTTONTEXT, BtnID&, STRPTR(T$))
        IF L&>0 THEN
            T$=LEFT$(T$,L&)
        ELSE
            T$=""
        END IF
        hFont=SendMessage(hCtrl&,%WM_GETFONT,0,0)
        hDC = GetDC(%HWND_DESKTOP)
        hOldFont=SelectObject(hDC, hFont)
        OldSP&=GetTextCharacterExtra(hDC)
        SetTextCharacterExtra hDC,0
        GetTextExtentPoint32 hDC, BYVAL STRPTR(T$), LEN(T$), SZ
        SetTextCharacterExtra hDC,OldSP&
        W&=SZ.cx    '   +(EZ_WO("3X")*4)
        SelectObject hDC, hOldFont
        ReleaseDC %HWND_DESKTOP, hDC
        HP&=SendMessage(hCtrl&, %TB_GETPADDING,0,0)
        HP&=LOWRD(HP&)
        HP&=HP&*2
        W&=W&+HP&+4
    END IF
    EZTB.cx=W&
    SendMessage hCtrl&,%TB_SETBUTTONINFO,BtnID&,VARPTR(EZTB)
END SUB

SUB zResizeToolbarStrip(BYVAL hCtrl&, BYVAL VFlag&)
    LOCAL BW&, BH&, BR AS RECT, NW&, NH&
    LOCAL CT&, I&, PD AS DWORD
    IF VFlag&=-1 THEN EXIT SUB
    IF IsWindow(hCtrl&) THEN
        CT&=SendMessage(hCtrl&, %TB_BUTTONCOUNT,0,0)-1
        FOR I&=0 TO CT&
            IF SendMessage(hCtrl&, %TB_ISBUTTONHIDDEN, I&+1,0)=0 THEN   ' uses command ID
                SendMessage hCtrl&, %TB_GETITEMRECT, I&, VARPTR(BR) ' uses zero index
                BW&=(BR.nRight-BR.nLeft)
                BH&=(BR.nBottom-BR.nTop)
                IF VFlag& THEN
                    IF BW&>NW& THEN NW&=BW&
                    NH&=NH&+BH&
                ELSE
                    IF BH&>NH& THEN NH&=BH&
                    NW&=NW&+BW&
                END IF
            END IF
        NEXT I&
        PD=SendMessage(hCtrl&,%TB_GETPADDING,0,0)
        NW&=NW&+LOWRD(PD)
        NH&=NH&+HIWRD(PD)
        SetWindowPos hCtrl&,0,0,0, NW&, NH&, %SWP_NOACTIVATE OR %SWP_NOCOPYBITS OR %SWP_NOMOVE OR %SWP_NOOWNERZORDER OR %SWP_NOZORDER
    END IF
END SUB

SUB EZ_AutoSizeTBStrip(BYVAL FormName$, BYVAL IDNum&, BYVAL VFlag&) EXPORT10
    LOCAL hCtrl&
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="TOOLBARWINDOW32" THEN
        IF SendMessage(hCtrl&, %TB_COMMANDTOINDEX,1,0)>=0 THEN
            IF VFlag&<>0 THEN VFlag&=1
            zResizeToolbarStrip hCtrl&, VFlag&
        END IF
    END IF
END SUB

SUB EZ_SetTBButtonColors(BYVAL FormName$, BYVAL IDNum&, BYVAL HColor&, BYVAL SColor&) EXPORT10
    LOCAL hCtrl&
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF ZGetClass(hCtrl&)="TOOLBARWINDOW32" THEN
        DIM D(1 TO 3) AS DWORD
        D(1)=12
        IF HColor&=-1 THEN D(2)=%CLR_DEFAULT ELSE D(2)=EZ_ColorVal(HColor&,0)
        IF SColor&=-1 THEN D(3)=%CLR_DEFAULT ELSE D(3)=EZ_ColorVal(SColor&,0)
        SendMessage hCtrl&,%CCM_SETCOLORSCHEME,0,VARPTR(D(1))
    END IF
END SUB

%MaxTBButtons   =   100 ' 62 unique image positions but more buttons allowed

' NEW!    TMode& defines type of toolbar to support new secondary toolbars
' TMode& = 0  is default toolbar type

'%CCS_TOP                 = &H00000001&
'%CCS_NOMOVEY             = &H00000002&
'%CCS_BOTTOM              = &H00000003&
'%CCS_NORESIZE            = &H00000004&
'%CCS_NOPARENTALIGN       = &H00000008&
'%CCS_ADJUSTABLE          = &H00000020&
'%CCS_NODIVIDER           = &H00000040&
' ------------------------------------   not in PB 6 include
'%CCS_VERT          = &H00000080&
'%CCS_LEFT          = %CCS_VERT OR %CCS_TOP
'%CCS_RIGHT         = %CCS_VERT OR %CCS_BOTTOM
'%CCS_NOMOVEX       = %CCS_VERT OR %CCS_NOMOVEY

SUB zToolBar(BYVAL ID&, BYVAL BName$, BYVAL BInfo$, BYVAL CProp$, BYVAL TMode&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!)
LOCAL P&, P1&, P2&, hWnd AS LONG, hCtrl AS LONG
LOCAL WS&, EWS&, BI$, A$, I&, hBmp AS LONG, N&, ID1&, V&
LOCAL XI&, YI&, MInstance&, OKFlag&, BInfoP$, B$, TX$ ', NL$
LOCAL BW!, BH!, BPR&, BR AS RECT, FW!, FH!, BC&
LOCAL TBAB AS tagTBADDBITMAP, BX&, BY&, BMPI&, BMPW&, BMPH&
LOCAL BFlag&, hImg&, ImgN&(), J&,J1&,J2&, hTip&, VTFlag&
LOCAL DBV&, TModeFlag&, TBSVFlag&, TBS_ID&
DIM ImgN&(1 TO 3)

    IF App_AllowLoading&<>0 THEN
        DIM C2!, R2!, W2!, H2!
        ZLoading "", ID&, C2!, R2!, W2!, H2!, BName$, BInfo$, CProp$
    END IF

BFlag&=1
BPR&=0
BC&=0
BX&=0
BY&=0
P1&=INSTR(BInfo$,"{")
P2&=INSTR(BInfo$,"}")
IF P1&<>0 AND P2&>P1& THEN
   TX$=MID$(BInfo$, P1&+1, (P2&-P1&)-1)
   BInfo$=LEFT$(BInfo$,P1&-1)+MID$(BInfo$,P2&+1)
   IF TX$<>"" THEN
      DO
          DBV&=INSTR(TX$,"||")
          IF DBV&=0 THEN EXIT DO
          ' add spaces between ||
          TX$=LEFT$(TX$,DBV&)+" "+MID$(TX$, DBV&+1)
      LOOP
      IF RIGHT$(TX$,1)<>"|" THEN TX$=TX$+"|"
      TX$=TX$+"|"
      REPLACE "|" WITH CHR$(0) IN TX$
   END IF
ELSE
   TX$=""
END IF
P&=INSTR(BInfo$,"|")
IF P&>0 THEN
    BInfoP$=LTRIM$(RTRIM$(MID$(BInfo$,P&+1)))
    BInfo$=LEFT$(BInfo$, P&-1)
END IF
BInfo$=UCASE$(BInfo$)
hWnd=PBVFormHandle(App_EZ_CurForm$)
IF hWnd<>0 THEN
    EWS&=0  ' extended window style
    IF App_Allow_Ctrl_Clipping& THEN
        WS&=%WS_CHILD OR %WS_CLIPSIBLINGS
    ELSE
        WS&=%WS_CHILD
        App_Allow_Ctrl_Clipping&=1
    END IF
    VTFlag&=0   ' variable width text flag
    IF INSTR(CProp$,"!") THEN WS&=WS& OR %TBSTYLE_TOOLTIPS
    IF TMode&=0 THEN
        IF INSTR(CProp$,"-")=0 THEN
            WS&=WS& OR %TBSTYLE_WRAPABLE
        END IF
    ELSE
        WS&=WS& OR %TBSTYLE_WRAPABLE
    END IF
    IF INSTR(CProp$,"T") THEN WS&=WS& OR %WS_TABSTOP
    IF TMode&=0 THEN
        IF INSTR(CProp$,"B") THEN
            WS&=WS& OR %CCS_BOTTOM
        ELSE
            WS&=WS& OR %CCS_TOP
        END IF
    ELSE
        WS&=WS& OR %CCS_NOPARENTALIGN OR %CCS_NORESIZE ' or &H00000080& or %CCS_TOP
    END IF
    IF INSTR(CProp$,"N") THEN
        WS&=WS& OR %CCS_NODIVIDER
    END IF
    IF INSTR(CProp$,"A") THEN
        WS&=WS& OR %CCS_ADJUSTABLE OR %TBSTYLE_ALTDRAG
    END IF
    IF INSTR(CProp$,"L") THEN
        WS&=WS& OR %TBSTYLE_LIST
        IF INSTR(CProp$,"?") THEN VTFlag&=1
    END IF
    IF INSTR(CProp$,"F") THEN
        WS&=WS& OR %TBSTYLE_FLAT
    END IF
    IF INSTR(CProp$,"H")=0 THEN WS&=WS& OR %WS_VISIBLE
    IF INSTR(CProp$,"O")=0 THEN
        IF INSTR(CProp$,"R") THEN
             WS&=WS& OR %WS_DLGFRAME
        ELSE
             WS&=WS& OR %WS_BORDER
        END IF
    END IF
    IF INSTR(CProp$,"{1}") THEN
        BPR&=1
    ELSEIF INSTR(CProp$,"{2}") THEN
        BPR&=2
    ELSEIF INSTR(CProp$,"{3}") THEN
        BPR&=3
    ELSEIF INSTR(CProp$,"{4}") THEN
        BPR&=4
    ELSEIF INSTR(CProp$,"{5}") THEN
        BPR&=5
    ELSEIF INSTR(CProp$,"{6}") THEN
        BPR&=6
    ELSEIF INSTR(CProp$,"{7}") THEN
        BPR&=7
    ELSEIF INSTR(CProp$,"{8}") THEN
        BPR&=8
    ELSEIF INSTR(CProp$,"{9}") THEN
        BPR&=9
    END IF
    TBSVFlag&=0
    IF TMode&=0 THEN
        IF INSTR(CProp$,"V") THEN BC&=-1
    ELSE
        IF INSTR(CProp$,"V") THEN TBSVFlag&=1
        IF INSTR(CProp$,"?") THEN TBSVFlag&=-1   ' no resize
        BPR&=0
    END IF

    IF INSTR(CProp$,"D") THEN WS&=WS& OR %WS_DISABLED
    IF INSTR(CProp$,"X16") THEN YI&=16
    IF INSTR(CProp$,"X24") THEN YI&=24
    IF INSTR(CProp$,"X32") THEN YI&=32
    IF INSTR(CProp$,"16X") THEN XI&=16
    IF INSTR(CProp$,"24X") THEN XI&=24
    IF INSTR(CProp$,"32X") THEN XI&=32
    IF INSTR(CProp$,"64X") THEN XI&=64
    IF INSTR(CProp$,"96X") THEN XI&=96
    IF INSTR(CProp$,"128X") THEN XI&=128
    IF INSTR(CProp$,"1X1") THEN YI&=1:XI&=1
    IF INSTR(CProp$,"[24]") THEN
        BX&=24
        BY&=24
    END IF
    IF INSTR(CProp$,"[32]") THEN
        BX&=32
        BY&=32
    END IF
    IF INSTR(CProp$,"[40]") THEN
        BX&=40
        BY&=40
    END IF
    IF INSTR(CProp$,"[48]") THEN
        BX&=48
        BY&=48
    END IF
    DIM TB(1 TO %MaxTBButtons) AS TBBUTTON
    BI$=""
    P1&=1
    P2&=0
    FOR P&=1 TO LEN(BInfo$)
        A$=UCASE$(MID$(BInfo$,P&,1))
        IF INSTR("B XR<DA", A$) THEN
            BI$=BI$+A$
            P2&=P2&+1
        END IF
    NEXT P&
    IF P2&=0 THEN
        EXIT SUB
    END IF
    IF P2&>%MaxTBButtons THEN P2&=%MaxTBButtons
    IF BC&=-1 THEN BC&=P2&
    I&=0
    ID1&=ID&
    ID&=ID&+1
    TBS_ID&=0
    FOR P&=P1& TO P2&
        N&=I&
        A$=MID$(BInfoP$, I&+1, 1)
        IF A$<>"" THEN
            V&=ASC(A$)
            SELECT CASE AS LONG V&
                CASE 48 TO 57
                    N&=V&-48
                CASE 65 TO 90
                    N&=(V&-65)+10
                CASE 97 TO 122
                    N&=(V&-97)+36
                CASE 45, 63
                    N&=-1
                CASE ELSE
            END SELECT
        END IF
        B$=MID$(BI$,P&,1)
        TB(P&).dwData=0
        IF TMode&<>0 THEN
            IF INSTR("DA", B$) THEN B$="B"
        END IF
        SELECT CASE AS CONST$ B$
            CASE "D"
                TB(P&).iBitmap=N&
                TB(P&).idCommand=ID&+I&
                TB(P&).iString=I&
                I&=I&+1
                TB(P&).fsState=%TBSTATE_ENABLED
                TB(P&).fsStyle=%TBSTYLE_DROPDOWN OR %TBSTYLE_GROUP
            CASE "A"
                TB(P&).iBitmap=N&
                TB(P&).idCommand=ID&+I&
                TB(P&).iString=I&
                I&=I&+1
                TB(P&).fsState=%TBSTATE_ENABLED
                TB(P&).fsStyle=%BTNS_WHOLEDROPDOWN OR %TBSTYLE_GROUP
            CASE "B"
                TB(P&).iBitmap=N&
                TB(P&).idCommand=ID&+I&
                TB(P&).iString=I&
                I&=I&+1
                TB(P&).fsState=%TBSTATE_ENABLED
                TB(P&).fsStyle=%TBSTYLE_BUTTON OR %TBSTYLE_GROUP
            CASE "X"    ' checkbox type
                TB(P&).iBitmap=N&
                TB(P&).idCommand=ID&+I&
                TB(P&).iString=I&
                I&=I&+1
                TB(P&).fsState=%TBSTATE_ENABLED
                TB(P&).fsStyle=%TBSTYLE_CHECK
            CASE "R"    ' Radio Button type
                TB(P&).iBitmap=N&
                TB(P&).idCommand=ID&+I&
                TB(P&).iString=I&
                I&=I&+1
                TB(P&).fsState=%TBSTATE_ENABLED
                TB(P&).fsStyle=%TBSTYLE_CHECK OR %TBSTYLE_GROUP
            CASE ELSE
                TB(P&).iBitmap=0
                TB(P&).idCommand=0
                TB(P&).iString=0
                IF B$="<" THEN
                    TB(P&).fsState=%TBSTATE_ENABLED OR %TBSTATE_WRAP
                ELSE
                    TB(P&).fsState=0
                END IF
                TB(P&).fsStyle=%TBSTYLE_SEP
        END SELECT
        IF TMode&<>0 THEN
            IF TB(P&).idCommand<>0 THEN
                ' toolstrip must have button ID's starting at 1
                ' EZGUI can then test the first button ID to see if it is 1
                TBS_ID&=TBS_ID&+1
                TB(P&).idCommand=TBS_ID&
            END IF
        END IF
    NEXT P&
    ID&=ID&+I&
    hBmp=0
    MInstance&=%HINST_COMMCTRL
    OKFlag&=1
    BMPI&=I&
    SELECT CASE AS CONST$ UCASE$(BName$)
        CASE "", "#SMALLSTD"
            hBmp=%IDB_STD_SMALL_COLOR
            XI&=16
            YI&=16
        CASE "#LARGESTD"
            hBmp=%IDB_STD_LARGE_COLOR
            XI&=32
            YI&=32
        CASE "#SMALLVIEW"
            hBmp=%IDB_VIEW_SMALL_COLOR
            XI&=16
            YI&=16
        CASE "#LARGEVIEW"
            hBmp=%IDB_VIEW_LARGE_COLOR
            XI&=32
            YI&=32
        CASE ELSE
            IF LEFT$(BName$,1)<>"[" THEN
                OKFlag&=0
                ARRAY SCAN APPImageName$(1), = BName$, TO N&
                IF N&>0 THEN
                     IF APPImageType(N&)=%OBJ_BITMAP THEN
                         MInstance&=%NULL
                         hBmp=APPImage(N&)
                         IF XI&>1 THEN
                            ' calculate number of images in bitmap
                            EZ_GetBitmapSize hBmp, BMPW&, BMPH&
                            IF BMPW&>0 THEN
                                BMPI&=BMPW&/XI&
                            END IF
                         END IF
                         OKFlag&=1
                     END IF
                END IF
            ELSE
                BFlag&=0
                hBmp&=0
                IF XI&=0 THEN
                    XI&=24
                    YI&=24
                END IF
            END IF
     END SELECT
     IF XI&=0 OR YI&=0 THEN EXIT SUB
     IF OKFlag& THEN
            N&=ZFormNumH(hWnd)
            IF N&>0 THEN
                TModeFlag&=1
                IF TMode&=0 AND AppForms(N&).FhToolbar<>0 THEN TModeFlag&=0 ' only one normal toolbar per form
                IF TModeFlag& THEN
                    IF App_EZ_AppendStyle&<>0 THEN
                        WS&=WS& OR App_EZ_AppendStyle&
                        App_EZ_AppendStyle&=0
                    END IF
                    GOSUB CreateTB
                    ' hCtrl=CreateToolbarEX(hWnd, WS&, ID1&, I&, MInstance&, hBmp, TB(1), P2&, 0, 0, XI&, YI&, SIZEOF(TB(1)))
                    IF TMode&=0 THEN AppForms(N&).FhToolbar=hCtrl
                    IF hCtrl<>0 THEN
                        IF TX$<>"" THEN
                            SendMessage hCtrl, %TB_ADDSTRING, 0, STRPTR(TX$)
                            IF VTFlag& THEN
                                FOR P&=1 TO P2&
                                    IF TB(P&).idCommand<>0 THEN
                                        ZSetTBtnWidth hCtrl, TB(P&).idCommand, -1
                                    END IF
                                NEXT P&
                            END IF
                        END IF
                        IF TMode&=0 THEN
                            IF BPR&>0 THEN
                                ' resize form to fit toolbar
                                SendMessage hCtrl, %TB_GETITEMRECT, 0, VARPTR(BR)
                                BW!=(BR.nRight-BR.nLeft)' +1
                                BW!=(BW!*BPR&)
                                BH!=(BR.nBottom-BR.nTop)+1
                                EZ_GetSize App_EZ_CurForm$, FW!, FH!, 0
                                FW!=EZ_ScaleToCharSize (BW!, "PX")
                                IF BC&>0 THEN
                                    IF BC& MOD BPR& = 0 THEN
                                        BC&=BC&/BPR&
                                    ELSE
                                        BC&=(BC&/BPR&)+1
                                    END IF
                                    BH!=(BH!*BC&)
                                    FH!=EZ_ScaleToCharSize (BH!,"PY")
                                END IF
                                GOSUB RePosForm
                                SendMessage hCtrl, %TB_AUTOSIZE, 0, 0
                            ELSE
                                SendMessage hCtrl, %TB_AUTOSIZE, 0, 0
                            END IF
                        ELSE
                            zResizeToolbarStrip hCtrl, TBSVFlag&
                            SendMessage hCtrl, %TB_AUTOSIZE, 0, 0
                        END IF
                        hTip&=SendMessage(hCtrl, %TB_GETTOOLTIPS,0,0)
                        IF hTip&<>0 THEN
                            ZSetToolTipColors hTip&, 1
                        END IF
                    END IF
                    ZCallLoaded
                END IF
            END IF
     END IF
END IF
EXIT SUB

RePosForm:
N&=ZFormNum(App_EZ_CurForm$)
IF N&>0 THEN
    AppForms(N&).FWidth=FW!*App_EZ_CharW
    AppForms(N&).FHeight=FH!*App_EZ_CharH
    AppForms(N&).FCol=FW!
    AppForms(N&).FRow=FH!
    PBVPosWindow App_EZ_CurForm$, 6, AppForms(N&).FStartUpPosition, 1
END IF
RETURN

' hCtrl=CreateToolbarEX(hWnd, WS&, ID1&, I&, MInstance&, hBmp, TB(1), P2&, 0, 0, XI&, YI&, SIZEOF(TB(1)))
CreateTB:
' I&    -   Number of Bitmaps in Image
' MInstance&    -   Process Instance for Bitmap
' hBmp  -   Bitmap handle or Resource ID
' TB(1) -   TBButton structure
' P2&   -   Number of Buttons
' 0, 0  -   size of buttons (default)
' XI&, YI&  - size of Images in Bitmap
' SIZEOF(TB(1))     -   size of TBButton structure used
IF TMode&=0 THEN
    C!=0:R!=0:W!=12:H!=6    ' dummy values since form will resize toolbar
END IF
PBVControlEX App_EZ_CurForm$, ID1&, "ToolbarWindow32", EZ_X(C!), EZ_Y(R!), EZ_X(W!), EZ_Y(H!), _
     "",  WS&, EWS&, App_EZ_SubClass&, "", hCtrl
' ZCallLoaded called above after CreateTB routine called !

IF hCtrl<>0 THEN
    SendMessage hCtrl, %TB_BUTTONSTRUCTSIZE, SIZEOF(TB(1)),0
    IF BFlag&<>0 THEN
        SendMessage hCtrl, %TB_SETBITMAPSIZE, 0, MAKLNG(XI&,YI&)
        'TYPE tagTBADDBITMAP
        '  hInst         AS DWORD
        '  nId           AS DWORD
        'END TYPE
        TBAB.hInst  =   MInstance&
        TBAB.nId    =   hBmp
        SendMessage hCtrl, %TB_ADDBITMAP, BMPI&, VARPTR(TBAB)
        PBV_AppendTBPict hCtrl
    ELSE
        ' use Imagelists
        J&=0
        DO
            J1&=INSTR(BName$,"[")
            J2&=INSTR(BName$,"]")
            IF J1&>0 AND J2&>J1&+1 THEN
            J&=J&+1
            IF J&>=4 THEN EXIT DO
                ImgN&(J&)=VAL(MID$(BName$,J1&+1,J2&-(J1&+1)))
                BName$=MID$(BName$,J2&+1)
            ELSE
                EXIT DO
            END IF
        LOOP
        hImg&=EZ_ImgListHandle(ImgN&(1))
        IF hImg&<>0 THEN
            SendMessage hCtrl, %TB_SETIMAGELIST,0,hImg&
        END IF
        hImg&=EZ_ImgListHandle(ImgN&(2))
        IF hImg&<>0 THEN
            SendMessage hCtrl, %TB_SETHOTIMAGELIST,0,hImg&
        END IF
        hImg&=EZ_ImgListHandle(ImgN&(3))
        IF hImg&<>0 THEN
            SendMessage hCtrl, %TB_SETDISABLEDIMAGELIST,0,hImg&
        END IF
    END IF
    IF BX&<>0 AND BY&<>0 THEN
        SendMessage hCtrl, %TB_SETBUTTONSIZE, 0, MAKLNG(BX&,BY&)
    END IF
    SendMessage hCtrl, %TB_ADDBUTTONS, P2&, VARPTR(TB(1))

END IF
RETURN

END SUB

'------------------------------------------------------------------------------

SUB EZ_ToolBar(BYVAL ID&, BYVAL BName$, BYVAL BInfo$, BYVAL CProp$) EXPORT10
    zToolBar ID&, BName$, BInfo$, CProp$,0,0,0,0,0  ' normal toolbar
END SUB


SUB EZ_ToolBarStrip(BYVAL ID&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL BName$, BYVAL BInfo$, BYVAL CProp$) EXPORT10
    zToolBar ID&, BName$, BInfo$, CProp$,1, C!, R!, W!, H!
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetTBButtons(BYVAL FormName$, BYVAL IDNum&, BYVAL BtnID&, BYVAL BInfo$) EXPORT10
     LOCAL hCtrl&, TB AS TBBUTTONINFO, I&, LastImg& , V&, P&, AI&
     LOCAL BtnImages$, BtnStyle$, LastID&
     P&=INSTR(BInfo$,"|")
     IF P&<>0 THEN
          BtnImages$=MID$(BInfo$,P&+1)
          BtnStyle$=LEFT$(BInfo$,P&-1)
     ELSE
          BtnImages$=""
          BtnStyle$=BInfo$
     END IF
     hCtrl&=ezHandle(FormName$, IDNum&,1)
     IF ZGetClass(hCtrl&)="TOOLBARWINDOW32" THEN
          BtnStyle$=UCASE$(BtnStyle$)
          LastImg&=0
          LastID&=BtnID&
          AI&=1
          FOR I&=1 TO LEN(BtnStyle$)
               TB.cbSize=SIZEOF(TB)
               TB.dwMask=%TBIF_IMAGE OR %TBIF_STYLE
               IF AI&<=LEN(BtnImages$) THEN
                    V&=ASC(MID$(BtnImages$, AI&,1))
               ELSE
                    V&=0
               END IF
               SELECT CASE AS LONG V&
                    CASE 48 TO 57
                         LastImg&=V&-48
                    CASE 65 TO 90
                         LastImg&=(V&-65)+10
                    CASE 97 TO 122
                         LastImg&=(V&-97)+36
                    CASE 45, 63
                         LastImg&=-1
                    CASE ELSE
                         TB.dwMask=%TBIF_STYLE    ' no image being set
                         LastImg&=0
               END SELECT
               TB.iImage=LastImg&
               SELECT CASE AS CONST$ MID$(BtnStyle$, I&,1)
                    CASE "D"
                         TB.fsStyle=%TBSTYLE_DROPDOWN OR %TBSTYLE_GROUP
                    CASE "A"
                         TB.fsStyle=%BTNS_WHOLEDROPDOWN OR %TBSTYLE_GROUP
                    CASE "B"
                         TB.fsStyle=%TBSTYLE_BUTTON OR %TBSTYLE_GROUP
                    CASE "X"    ' checkbox type
                         TB.fsStyle=%TBSTYLE_CHECK
                    CASE "R"    ' Radio Button type
                         TB.fsStyle=%TBSTYLE_CHECK OR %TBSTYLE_GROUP
'                    CASE " "
'                         TB.fsStyle=%TBSTYLE_SEP
                    CASE ELSE
                         ITERATE FOR
               END SELECT
               TB.idCommand=LastID&
               LastID&=LastID&+1
               AI&=AI&+1
               SendMessage hCtrl&,%TB_SETBUTTONINFO, TB.idCommand, VARPTR(TB)
          NEXT I&
     END IF
END SUB

SUB ZAddTabItems(BYVAL hCtrl&, BYVAL CText$, BYVAL TB&)
    LOCAL pItem AS TC_ITEM
    LOCAL zText AS ASCIIZ*80
    LOCAL D$, P&
    DO
        IF CText$="" THEN EXIT DO
        P&=INSTR(CText$,App_EZ_DChar$)
        IF P&>0 THEN
            D$=LEFT$(CText$,P&-1)
            CText$=MID$(CText$,P&+1)
        ELSE
            D$=CText$
            IF CText$="" THEN EXIT DO
            CText$=""
        END IF
        pItem.Mask=%TCIF_TEXT
        zText=D$+CHR$(0)
        pItem.pszText=VARPTR(zText)
        SendMessage hCtrl&, %TCM_INSERTITEM, TB&, VARPTR(pItem)
        TB&=TB&+1
    LOOP
END SUB

SUB zINCRTabSize(BYVAL hCtrl&, BYVAL X&, BYVAL Y&, BYVAL SMode&)
     LOCAL CT&, I&, W&,H&, MaxW&, MaxH&, WS&, OKFlag&, R AS RECT
     IF IsWindow(hCtrl&) THEN
          IF zGetClass(hCtrl&)="SYSTABCONTROL32" THEN
               WS&=GetWindowLong(hCtrl&,%GWL_STYLE)
               OKFlag&=0
               IF (WS& AND %TCS_FIXEDWIDTH)=%TCS_FIXEDWIDTH THEN OKFlag&=1
               IF (WS& AND %TCS_OWNERDRAWFIXED)=%TCS_OWNERDRAWFIXED THEN OKFlag&=1
               IF OKFlag&=0 THEN EXIT SUB
               CT&=SendMessage(hCtrl&, %TCM_GETITEMCOUNT,0,0)
               IF CT&>=1 THEN
                    MaxW&=0
                    MaxH&=0
                    FOR I&=0 TO (CT&-1)
                         IF SendMessage(hCtrl&, %TCM_GETITEMRECT, I&, VARPTR(R))<>0 THEN
                              W&=R.nRight-R.nLeft
                              H&=R.nBottom-R.nTop
                              IF W&>MaxW& THEN MaxW&=W&
                              IF H&>MaxH& THEN MaxH&=H&
                         END IF
                    NEXT I&
                    IF SMode&=0 THEN
                         MaxW&=MaxW&+X&
                         MaxH&=MaxH&+Y&
                    ELSE
                         MaxW&=X&
                         MaxH&=Y&
                    END IF
                    IF MaxW&<32 THEN MaxW&=32
                    IF MaxH&<12 THEN MaxH&=12
                    GetWindowRect hCtrl&,R
                    W&=(R.nRight-R.nLeft)-8
                    H&=(R.nBottom-R.nTop)-4
                    IF MaxW&>W& THEN MaxW&=W&
                    IF MaxH&>H& THEN MaxH&=H&
                    SendMessage hCtrl&, %TCM_SETITEMSIZE,0,MAKLNG(MaxW&,MaxH&)
               END IF
          END IF
     END IF
END SUB

SUB EZ_TABSetSize(BYVAL FormName$, BYVAL IDNum&, BYVAL X&, BYVAL Y&, BYVAL SMode&) EXPORT10
     LOCAL hCtrl&
     IF IDNum&<>0 THEN
          hCtrl&=ezHandle(FormName$, IDNum&,1)
          zINCRTabSize hCtrl&, X&,Y&,SMode&
     END IF
END SUB

SUB EZ_TabControl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    LOCAL hCtrl AS LONG
    IF App_AllowLoading&<>0 THEN
        DIM Pict$
        ZLoading "", IDNum&, C!, R!, W!, H!, Pict$, CText$, CProp$
    END IF
    PBVControl IDNum&, %CTRL_TAB, C!, R!, W!, H!, "", ZParse(CProp$, "GTDHZMRSFB_=LO<>U!")
    hCtrl=ezHandle(App_EZ_CurForm$, IDNum&,1)
    IF hCtrl<>0 THEN
        ZAddTabItems hCtrl, CText$, 0
        ' store text in window test (WM_SETTEXT) for storage for drawing later
        IF INSTR(CProp$,"O") THEN EZ_SetText App_EZ_CurForm$, IDNum&, CText$
        IF INSTR(CProp$,"+") THEN
               zINCRTabSize hCtrl, 12,12, 0
        END IF
    END IF
    ZSetTip IDNum&,%TCM_GETTOOLTIPS
    ZCallLoaded
END SUB

'------------------------------------------------------------------------------

SUB EZ_StartTimer (BYVAL FormName$, BYVAL ID&, BYVAL TM!) EXPORT10
LOCAL hWnd AS LONG, MS&
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    IF ID&<>0 THEN
        MS&=INT(TM!*1000)
        IF MS&<5 THEN MS&=5
        SetTimer hWnd, ID&, MS&, %NULL
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_StopTimer (BYVAL FormName$, BYVAL ID&) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    IF ID&<>0 THEN
        KillTimer hWnd, ID&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

DECLARE FUNCTION GetOpenFileNameX (lpofn AS OPENFILENAME) AS LONG
DECLARE FUNCTION GetSaveFileNameX (lpofn AS OPENFILENAME) AS LONG

FUNCTION ZOpenSaveFileDlg(TMP AS OPENFILENAME, BYVAL Mode&, BYVAL MMFlag&) AS LONG
    LOCAL RV&
    STATIC LoadFlag&, AddrOpenFile AS DWORD, AddrSaveFile AS DWORD
    IF MMFlag&<>0 THEN
        IF LoadFlag&=0 THEN
            App_hVideoFW&=LoadLibrary("MSVFW32.DLL")
            IF App_hVideoFW&<>0 THEN
                LoadFlag&=1
                AddrOpenFile=GetProcAddress(App_hVideoFW&,"GetOpenFileNamePreviewA")
                AddrSaveFile=GetProcAddress(App_hVideoFW&,"GetSaveFileNamePreviewA")
                IF AddrOpenFile=0 OR AddrSaveFile=0 THEN LoadFlag&=-1
            ELSE
                LoadFlag&=-1
            END IF
        END IF
    END IF
    IF LoadFlag&<>1 THEN MMFlag&=0
    IF Mode&=0 THEN
        IF MMFlag&=0 THEN
            RV&=GetOpenFileName(TMP)
        ELSE
            CALL DWORD AddrOpenFile USING GetOpenFileNameX(TMP) TO RV&
        END IF
    ELSE
        IF MMFlag&=0 THEN
            RV&=GetSaveFileName(TMP)
        ELSE
            CALL DWORD AddrSaveFile USING GetSaveFileNameX(TMP) TO RV&
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION PBVFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL SFile$, BYVAL Filter$, BYVAL DExt$, BYVAL DProp$, BYVAL FMode&) AS STRING
LOCAL TMP AS OPENFILENAME    ' extended version of structure is 12 bytes longer than normal 4.00 version
LOCAL hWnd AS LONG, RV$, Flag&, P&
LOCAL zFilter AS ASCIIZ*265
LOCAL ZFile AS ASCIIZ*2048
LOCAL zFileTitle AS ASCIIZ*265
LOCAL zTitle AS ASCIIZ*265
LOCAL zInitDir AS ASCIIZ*265
LOCAL zDefExt AS ASCIIZ*4
LOCAL OKFlag&, GetMFlag&, MMFlag&
MMFlag&=0
GetMFlag&=0
RV$=""
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    IF App_CurrentOS&>=500 THEN
        TMP.lStructSize=SIZEOF(TMP)     ' for 2000 and XP
    ELSE
        TMP.lStructSize=SIZEOF(TMP)-12  ' use version 4.00 instead for 95 to NT
    END IF
    TMP.hWndOwner=hWnd
    TMP.hInstance=0      ' No template
    REPLACE "|" WITH CHR$(0) IN Filter$

'    zFilter=Filter$+CHR$(0)+CHR$(0)
'    TMP.lpstrFilter=VARPTR(zFilter)

    Filter$=Filter$+CHR$(0)+CHR$(0)
    TMP.lpstrFilter=STRPTR(Filter$)


    TMP.lpstrCustomFilter=%NULL
    TMP.nMaxCustFilter=%NULL
    TMP.nFilterIndex=1
    IF FMode&=0 THEN
        zFile=CHR$(0)
    ELSE
        zFile=SFile$+CHR$(0)
    END IF
    TMP.lpstrFile=VARPTR(zFile)  '   returns path name
    TMP.nMaxFile=SIZEOF(zFile)
    TMP.lpstrFileTitle=VARPTR(zFileTitle)
    TMP.nMaxFileTitle=SIZEOF(zFileTitle)
    IF InitDir$="" THEN
        TMP.lpstrInitialDir=%NULL    '  Default current directory
    ELSE
        zInitDir=InitDir$+CHR$(0)
        TMP.lpstrInitialDir=VARPTR(zInitDir)
    END IF
    zTitle=Title$+CHR$(0)
    TMP.lpstrTitle=VARPTR(zTitle)
    Flag&=%OFN_FILEMUSTEXIST OR %OFN_LONGNAMES OR %OFN_PATHMUSTEXIST
    DProp$=UCASE$(DProp$)
    IF INSTR(DProp$, "A") THEN MMFlag&=1
    IF INSTR(DProp$, "S")=0 THEN
        Flag&=Flag& OR %OFN_EXPLORER
        IF App_CurrentOS&>=410 THEN      ' win98 or better
             IF INSTR(DProp$,"Z") THEN Flag&=Flag& OR %OFN_ENABLESIZING
        END IF
        App_CommonDlgExType&=1
        IF App_CurrentOS&>=500 THEN
             IF INSTR(DProp$, "I") THEN
                  TMP.flagsex=0
             ELSE
                  TMP.flagsex=1    ' no icons
             END IF
        END IF
    ELSE
        App_CommonDlgExType&=0
    END IF
    IF FMode&=0 THEN
        IF INSTR(DProp$, "M") THEN
            Flag&=Flag& OR %OFN_ALLOWMULTISELECT
            GetMFlag&=1
        END IF
        IF INSTR(DProp$, "P") THEN Flag&=Flag& OR %OFN_CREATEPROMPT
        IF INSTR(DProp$,"R")=0 THEN
            Flag&=Flag& OR %OFN_NOREADONLYRETURN OR %OFN_HIDEREADONLY
        ELSE
            Flag&=Flag&  OR %OFN_HIDEREADONLY
        END IF
    ELSE
        Flag&=Flag& OR %OFN_NOREADONLYRETURN OR %OFN_HIDEREADONLY
        IF INSTR(DProp$, "P") THEN Flag&=Flag& OR %OFN_OVERWRITEPROMPT
    END IF
    IF INSTR(DProp$, "N") THEN Flag&=Flag& OR %OFN_NOCHANGEDIR
    TMP.Flags=Flag& OR %OFN_ENABLEHOOK     ' add custom Dialog procedure
    TMP.nFileOffset=0        ' returns 0 based offset of filename in lpstrFile
    TMP.nFileExtension=0
    IF LEN(DExt$)<>3 THEN
        TMP.lpstrDefExt=%NULL
    ELSE
        zDefExt=DExt$+CHR$(0)
        TMP.lpstrDefExt=VARPTR(zDefExt)
    END IF
    TMP.lCustData=0
    TMP.lpfnHook=CODEPTR(CustDlgProc)
    TMP.lpTemplateName=%NULL
    App_CommonDlgParent$=UCASE$(FormName$)
    App_CommonDlgTitle$=Title$
    App_SystemDlgFreeze=1
    IF FMode&=0 THEN
        App_CommonDlgInitType& = 1   ' "{OPENDLG}"
        IF ZOpenSaveFileDlg(TMP,0,MMFlag&) THEN OKFlag&=1
        App_CommonDlgHandle_OF& = 0
        App_CommonDlgHandle_OFX& = 0
    ELSE
        App_CommonDlgInitType& =  2  ' "{SAVEDLG}"
        IF ZOpenSaveFileDlg(TMP,1,MMFlag&) THEN OKFlag&=1
        App_CommonDlgHandle_SF& = 0
        App_CommonDlgHandle_SFX& = 0
    END IF
    App_SystemDlgFreeze=0
    App_CommonDlgInitType&=0
    App_CommonDlgExType&=0
    '  msgbox hex$(CommDlgExtendedError())
    IF OKFlag& THEN
        RV$=PEEK$(VARPTR(zFile), SIZEOF(zFile))
        IF GetMFlag& THEN
            P&=INSTR(RV$,CHR$(0)+CHR$(0))
            IF P&>0 THEN RV$=LEFT$(RV$, P&-1)
            REPLACE CHR$(0) WITH App_EZ_DChar$ IN RV$
        ELSE
            P&=INSTR(RV$,CHR$(0))
            IF P&>0 THEN RV$=LEFT$(RV$, P&-1)
        END IF
    END IF
END IF
EZ_Color -1,-1
App_WedgeComDProc=0
FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_OpenFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL Filter$, BYVAL DProp$) EXPORT10 AS STRING
FUNCTION=PBVFile(FormName$, Title$, InitDir$, "", Filter$, "", DProp$, 0)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_SaveFile (BYVAL FormName$, BYVAL Title$, BYVAL InitDir$, BYVAL SFile$, BYVAL Filter$, BYVAL DExt$, BYVAL DProp$) EXPORT10 AS STRING
FUNCTION=PBVFile(FormName$, Title$, InitDir$, SFile$, Filter$, DExt$, DProp$, 1)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ChooseColor(BYVAL FormName$, MyColor&, BYVAL CProp$) EXPORT10 AS LONG
LOCAL CC AS CHOOSECOLORAPI
LOCAL hWnd AS LONG, Flag&, RV&, N&
STATIC CL1 AS DWORD
STATIC FirstFlag&


RV&=0
CProp$=UCASE$(CProp$)
IF MyColor&>=0 AND MyColor&<=RGB(255,255,255) THEN
    CL1=MyColor&
ELSE
    CL1=0
    MyColor&=0
END IF
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    CC.lStructSize=SIZEOF(CC)
    CC.hwndOwner=hWnd
    CC.hInstance=0
    IF FirstFlag&=0 THEN
        DIM CustCL(1 TO 16) AS STATIC DWORD
        FOR N&=1 TO 16
            CustCL(N&)=RGB(255,255,255)
        NEXT N&
        FirstFlag&=1
    END IF
    CC.rgbResult=CL1
    CC.lpCustColors=VARPTR(CustCL(1))
    Flag&=%CC_RGBINIT
    IF INSTR(CProp$, "N") THEN
        Flag&=Flag& OR %CC_PREVENTFULLOPEN
    ELSE
        IF INSTR(CProp$, "F") THEN Flag&=Flag& OR %CC_FULLOPEN
    END IF
    CC.Flags=Flag& OR %CC_ENABLEHOOK
    CC.lCustData=0
    CC.lpfnHook=CODEPTR(CustDlgProc)
    CC.lpTemplateName=0
    App_CommonDlgParent$=UCASE$(FormName$)
    App_CommonDlgInitType& =  3  ' "{COLORDLG}"
    App_SystemDlgFreeze=1
    IF ChooseColor(CC) THEN
        RV&=1
        MyColor&=CC.rgbResult
    END IF
    App_SystemDlgFreeze=0
    App_CommonDlgInitType&=0
    App_CommonDlgHandle_CL& = 0
END IF
App_WedgeComDProc=0
EZ_Color -1,-1
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ChooseFont(BYVAL FormName$, MyColor&, BYVAL DProp$) EXPORT10 AS LONG
LOCAL hWnd AS LONG, Flag&, FTFlag&
LOCAL zFStyle AS ASCIIZ*80
LOCAL FMin&, FMax&, RV&
LOCAL FF AS CHOOSEFONTAPI
LOCAL LF AS LOGFONT
IF MyColor&<0 OR MyColor&>RGB(255,255,255) THEN MyColor&=0
FMin&=1
FMax&=127
RV&=0
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
            Flag&=%CF_SCREENFONTS OR %CF_LIMITSIZE
            LF=App_EZ_LastFont
            FF.lStructSize=SIZEOF(FF)
            FF.hWndOwner=hWnd
            IF App_LastPrinterDC<>0 THEN
                FF.hDC=App_LastPrinterDC
                IF INSTR(DProp$,"P") THEN
                    Flag&=%CF_PRINTERFONTS OR %CF_LIMITSIZE
                ELSE
                    Flag&=%CF_BOTH OR %CF_LIMITSIZE
                END IF
            ELSE
                FF.hDC=0
            END IF

            FF.lpLogFont=VARPTR(LF)
            FF.iPointSize=10     ' returns Point size
            IF INSTR(DProp$,"C") THEN Flag&=Flag& OR %CF_EFFECTS
            IF INSTR(DProp$,"F") THEN Flag&=Flag& OR %CF_FIXEDPITCHONLY
            IF INSTR(DProp$,"T") THEN Flag&=Flag& OR %CF_TTONLY
            ' if FirstFlag&<>0 then Flag&=Flag& or %CF_INITTOLOGFONTSTRUCT
            IF LF.lfHeight<>0 THEN Flag&=Flag& OR %CF_INITTOLOGFONTSTRUCT

            IF INSTR(DProp$,"S") THEN   ' standard size fonts
                FMin&=8
                FMax&=14
            END IF
            FF.Flags=Flag& OR %CF_ENABLEHOOK
            FF.rgbColors=MyColor&
            FF.lCustData=0
            FF.lpfnHook=CODEPTR(CustDlgProc)
            FF.lpTemplateName=0
            FF.hInstance=0
            zFStyle=CHR$(0)
            FF.lpszStyle=VARPTR(zFStyle)
            FTFlag&=%SCREEN_FONTTYPE
            IF App_LastPrinterDC<>0 THEN
                IF INSTR(DProp$,"P") THEN
                    FTFlag&=%PRINTER_FONTTYPE
                ELSE
                    FTFlag&=%SCREEN_FONTTYPE OR %PRINTER_FONTTYPE
                END IF
            END IF
            ' add this later. Will require an HDC to printer
            '  if instr(DProp$,"P") then FTFlag&=%PRINTER_FONTTYPE
            FF.nFontType=FTFlag&
            FF.Alignment=0
            FF.nSizeMin=FMin&
            FF.nSizeMax=FMax&
            App_CommonDlgParent$=UCASE$(FormName$)
            App_CommonDlgInitType& =  4  ' "{FONTDLG}"
            App_SystemDlgFreeze=1
            IF ChooseFont(FF) THEN
                App_EZ_ChooseFont=LF
                App_EZ_LastFont=LF
                App_EZ_ChoseFont&=1
                MyColor&=FF.rgbColors
                RV&=1
            END IF
            App_SystemDlgFreeze=0
            App_CommonDlgInitType&=0
            App_CommonDlgHandle_FNT& = 0
END IF
EZ_Color -1,-1
App_WedgeComDProc=0
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_DefSFont(BYVAL N&) EXPORT10
LOCAL hFont AS LONG
IF App_EZ_ChoseFont&<>0 THEN
    IF N&>=0 AND N&<=UBOUND(AppFont) THEN
        IF AppFont(N&)=0 THEN
           hFont=CreateFontIndirect(App_EZ_ChooseFont)
           IF hFont<>0 THEN
               AppFont(N&)=hFont
           END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_GetSFont(TFace$, PSize&, FProp$) EXPORT10
LOCAL TF$, PS!, FP$

' LOCAL D$
LOCAL LF AS LOGFONT
IF App_EZ_ChoseFont&<>0 THEN
    LF=App_EZ_ChooseFont
    IF LF.lfItalic<>0 THEN FP$=FP$+"I"
    IF LF.lfUnderline<>0 THEN FP$=FP$+"U"
    IF LF.lfStrikeOut<>0 THEN FP$=FP$+"-"
    SELECT CASE AS LONG LF.lfWeight
        CASE 100
            FP$=FP$+"T"
        CASE 200
            FP$=FP$+"T+"
        CASE 300
            FP$=FP$+"L"
        CASE 400
            FP$=FP$+"L+"
        CASE 500
            FP$=FP$+"M"
        CASE 600
            FP$=FP$+"M+"
        CASE 700
            FP$=FP$+"B"
        CASE 800
            FP$=FP$+"B+"
        CASE 900
            FP$=FP$+"X"
        CASE 1000
            FP$=FP$+"X+"
        CASE ELSE
    END SELECT
    SELECT CASE AS LONG LF.lfCharSet
        CASE %DEFAULT_CHARSET
            FP$=FP$+"D"
        CASE %SYMBOL_CHARSET
            FP$=FP$+"S"
        CASE %OEM_CHARSET
            FP$=FP$+"O"
        CASE ELSE
    END SELECT
    IF LF.lfQuality=%PROOF_QUALITY THEN FP$=FP$+"Q"
    IF LF.lfQuality=%ANTIALIASED_QUALITY THEN FP$=FP$+"A"
    LF.lfPitchAndFamily=LF.lfPitchAndFamily AND 3
    IF LF.lfPitchAndFamily=%FIXED_PITCH THEN FP$=FP$+"F"
    IF LF.lfPitchAndFamily=%VARIABLE_PITCH THEN FP$=FP$+"V"
    TF$=LTRIM$(RTRIM$(LF.lfFaceName))
    TFace$=TF$
    PSize&=ABS(MulDiv(LF.lfHeight, 72, App_EZ_PixelSY(0)))
    FProp$=FP$
ELSE
    TFace$=TF$
    PSize&=ABS(INT(PS!))
    FProp$=FP$
END IF
END SUB

'------------------------------------------------------------------------------
SUB ZGetWkey(BYVAL K$, FV&, AKY&, BYVAL Mode&)
    FV&=0
    AKY&=0
    DO
        SELECT CASE AS CONST$ LEFT$(K$,1)
            CASE "&"
                IF Mode&=1 THEN
                    FV&=FV& OR %FALT OR %FNOINVERT   ' this is a menu accellerator
                ELSE
                    AKY&=0
                END IF
            CASE "%"
                IF Mode&=1 THEN
                    FV&=FV& OR %FALT
                ELSE
                    AKY&=%VK_MENU   ' another name for alt
                END IF
            CASE "^"
                IF Mode&=1 THEN
                    FV&=FV& OR %FCONTROL
                ELSE
                    AKY&=%VK_CONTROL
                END IF
            CASE "$"
                IF Mode&=1 THEN
                    FV&=FV& OR %FSHIFT
                ELSE
                    AKY&=%VK_SHIFT
                END IF
            CASE ELSE
                EXIT DO
        END SELECT
        K$=MID$(K$,2)
        IF LEN(K$)=0 THEN EXIT DO
    LOOP
    SELECT CASE AS LONG LEN(K$)      ' compare only in groups by text length
        CASE 1
            SELECT CASE K$
                CASE "A" TO "Z"
                    AKY&=ASC(K$)
                CASE ELSE
            END SELECT
        CASE 2
            SELECT CASE K$
                CASE "UP"
                    AKY&=%VK_UP
                CASE "F1" TO "F9"
                    AKY&= 111+VAL(MID$(K$,2))
                CASE ELSE
                    GOSUB TestForNumVal
            END SELECT
        CASE 3
            SELECT CASE K$
                CASE "DEL"
                    AKY&=%VK_DELETE
                CASE "INS"
                    AKY&=%VK_INSERT
                CASE "TAB"
                    AKY&=%VK_TAB
                CASE "END"
                    AKY&=%VK_END
                CASE "ESC"
                    AKY&=%VK_ESCAPE
                CASE "F10" TO "F12"
                    AKY&= 111+VAL(MID$(K$,2))
                CASE ELSE
                    GOSUB TestForNumVal
            END SELECT
        CASE 4
            SELECT CASE AS CONST$ K$
                CASE "LEFT"
                    AKY&=%VK_LEFT
                CASE "DOWN"
                    AKY&=%VK_DOWN
                CASE "BACK
                    AKY&=%VK_BACK
                CASE "HOME"
                    AKY&=%VK_HOME
                CASE "PGUP"
                    AKY&=%VK_PGUP
                CASE "PGDN"
                    AKY&=%VK_PGDN
                CASE ELSE
                    GOSUB TestForNumVal
            END SELECT
        CASE ELSE
            SELECT CASE AS CONST$ K$
                CASE "RIGHT"
                    AKY&=%VK_RIGHT
                CASE "PRINT"
                    AKY&=%VK_PRINT
                CASE "RETURN"
                    AKY&=%VK_RETURN
                CASE "SPACE"
                    AKY&=%VK_SPACE
                CASE ELSE
                    GOSUB TestForNumVal
            END SELECT
    END SELECT
    FV&=FV& OR %FVIRTKEY
    EXIT SUB

    TestForNumVal:
    IF LEFT$(K$,1)="#" THEN
        AKY&=VAL(MID$(K$,2))
    END IF
    RETURN

END SUB

FUNCTION EZ_GetVKey(BYVAL K$) EXPORT10 AS LONG
    LOCAL FV&, AKY&
    ZGetWkey K$, FV&, AKY&, 0
    FUNCTION=AKY&
END FUNCTION

SUB EZ_DefAccel(BYVAL FormName$, BYVAL myaccel$) EXPORT10
LOCAL AFNum&, N&, H&, P1&, P2&, K$, FV&, AKY&, CM&, J&  ', V&
LOCAL UFlag&
' **************************************************************************
' Note:    Win API is in error
' The first item in ACCEL Type (.fVirt) is an Integer, Not a Byte !!!!!!!!!
' **************************************************************************
myaccel$ = REMOVE$(myaccel$," ")
IF myaccel$<>"" THEN
   IF RIGHT$(myaccel$,1)<>"|" THEN myaccel$=myaccel$+"|"
END IF
AFNum&=ZFormNum(FormName$)
UFlag&=0
IF AFNum&>0 THEN
    IF AppForms(AFNum&).FAccel<>0 THEN
        IF AppCurrentAccel=AppForms(AFNum&).FAccel THEN
            UFlag&=1
            AppCurrentAccel=0
        END IF
        DestroyAcceleratorTable AppForms(AFNum&).FAccel
        AppForms(AFNum&).FAccel=0
    END IF
    IF AppForms(AFNum&).FAccel=0 THEN
        DIM AC(1 TO 400) AS ACCEL_API   ' type name changed for PB 8.0
        N&=0
        P1&=1
        FOR J&=1 TO 400
          P2&=INSTR(P1&, myaccel$, ",")
          IF P2&=0 THEN EXIT FOR
          K$=MID$(myaccel$,P1&, P2&-P1&)
          P1&=P2&+1
          K$=UCASE$(TRIM$(K$))
          IF K$="" THEN EXIT FOR
          ' -----------------------
          ZGetWkey K$, FV&, AKY&, 1
          ' -----------------------
          P2&=INSTR(P1&, myaccel$, "|")
          IF P2&=0 THEN EXIT FOR
          CM&=VAL(MID$(myaccel$, P1&, P2&-P1&))
          P1&=P2&+1
          IF CM&<1 OR CM&>32000 THEN EXIT FOR
          IF AKY&<>0 THEN   ' key is defined
              N&=N&+1
              AC(N&).fVirt=FV&
              AC(N&).key=AKY&
              AC(N&).cmd=CM&
          END IF
        NEXT J&
        IF N&>0 THEN
            H&=CreateAcceleratorTable(AC(1), N&)
            IF H&<>0 THEN
                AppForms(AFNum&).FAccel=H&
                IF UFlag&<>0 THEN
                    AppCurrentAccel=H&
                END IF
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetToolTip (BYVAL TT$) EXPORT10
    LOCAL CR$
    CR$=CHR$(13)+CHR$(10)
    REPLACE App_EZ_DChar$ WITH CR$ IN TT$
    AppTTipText$=TT$
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetZorder(BYVAL FormName$, BYVAL IDList$) EXPORT10
PBVSetOrder FormName$, IDList$, 1, 0 , 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_MoveControls(BYVAL FormName$, BYVAL IDList$, BYVAL X&, BYVAL Y&) EXPORT10
PBVSetOrder FormName$, IDList$, 2, X& , Y&
END SUB

'------------------------------------------------------------------------------

SUB PBVSetOrder(BYVAL FormName$, BYVAL IDList$, BYVAL Mode&, BYVAL X&, BYVAL Y&)
LOCAL hWnd AS LONG, hCtrl AS LONG
LOCAL ID&, P1&, P2&, MX&, N&, L&, WF&
LOCAL AX&, AY&, CRect AS RECT, PT AS POINTAPI
LOCAL LFlag&, RFlag&, RFlag2&

hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    P1&=1
    N&=0
    L&=LEN(IDList$)
    IF L&>0 THEN
        LFlag&=0
        GOSUB MLIST
        MX&=N&
        IF MX&<5 THEN MX&=5
        DIM hZCtrl(1 TO MX&) AS LONG
        LFlag&=1
        GOSUB MLIST
        IF N&>0 THEN
            IF IsWindowVisible(hWnd) THEN
                SendMessage hWnd, %WM_SETREDRAW, 0,0
                RFlag2&=1
            END IF
            SELECT CASE AS LONG Mode&
               CASE 1      ' Set ZOrder
                  P1&=1
                  WF&=%SWP_NOMOVE OR %SWP_NOSIZE OR %SWP_NOACTIVATE OR %SWP_NOREDRAW
                  SetWindowPos hZCtrl(P1&), %HWND_TOP, 0,0,0,0, WF&
                  DO
                      P1&=P1&+1
                      IF P1&>N& THEN EXIT DO
                      SetWindowPos hZCtrl(P1&), hZCtrl(P1&-1), 0,0,0,0, WF&
                  LOOP
               CASE 2      ' Move by Pixels
                  P1&=1
                  WF&=%SWP_NOZORDER OR %SWP_NOSIZE OR %SWP_NOACTIVATE OR %SWP_NOREDRAW
                  DO
                      IF P1&>N& THEN EXIT DO
                      GetWindowRect hZCtrl(P1&), CRect
                      PT.x=CRect.nLeft
                      PT.y=CRect.nTop
                      ScreenToClient hWnd, PT
                      AX&=PT.x+X&
                      AY&=PT.y+Y&
                      SetWindowPos hZCtrl(P1&), %NULL, AX&, AY&,0,0, WF&
                      P1&=P1&+1
                  LOOP
               CASE ELSE
            END SELECT
            IF RFlag2& THEN SendMessage hWnd, %WM_SETREDRAW, 1,0
            RFlag&=%RDW_INVALIDATE OR %RDW_ERASE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
            RedrawWindow hWnd, BYVAL %NULL, %NULL, RFlag&
        END IF
    END IF
END IF
EXIT SUB

MLIST:
P1&=1
N&=0
DO
   P2&=INSTR(P1&, IDList$, ",")
   IF P2&=0 THEN
      ID&=VAL(MID$(IDList$,P1&))
      P1&=L&+1
   ELSE
      ID&=VAL(MID$(IDList$,P1&,P2&-P1&))
      P1&=P2&+1
   END IF
   IF ID&<=0 THEN EXIT DO
   IF LFlag& THEN
      hCtrl=ZGetDlgItem(hWnd,ID&)
      IF hCtrl<>0 THEN
         N&=N&+1
         hZCtrl(N&)=hCtrl
      END IF
   ELSE
      N&=N&+1
   END IF
   IF P1&>L& THEN EXIT DO
LOOP
RETURN

END SUB

'------------------------------------------------------------------------------

SUB EZ_SetDepth(BYVAL FormName$, BYVAL ID&, BYVAL D$) EXPORT10
LOCAL hWnd AS LONG, WF&, ID2&, hCtrl2&
hWnd=ezHandle(FormName$, ID&,1)
WF&=%SWP_NOMOVE OR %SWP_NOSIZE OR %SWP_NOACTIVATE
IF hWnd<>0 THEN
    SELECT CASE AS CONST$ UCASE$(D$)
        CASE "F"
            SetWindowPos hWnd, %HWND_TOP, 0,0,0,0, WF&
        CASE "B"
            SetWindowPos hWnd, %HWND_BOTTOM, 0,0,0,0, WF&
        CASE "DB"    ' set drag handle to just above buddy
            IF ZGetClass(hWnd)=$DragHandleControl THEN
                hCtrl2&=SendMessage(hWnd,%EZDC_GETBUDDY,0,0)
                IF hCtrl2&<>0 THEN
                    ' put drag handle behind Buddy
                    SetWindowPos hWnd, hCtrl2&, 0,0,0,0, WF& OR %SWP_NOREDRAW
                    ' now swap and put buddy behind drag handle
                    SetWindowPos hCtrl2&, hWnd, 0,0,0,0, WF&
                END IF
            END IF
        CASE ELSE   ' assume ID passed as string
            ID2&=VAL(D$)
            IF ID2&<>0 THEN
                hCtrl2&=ezHandle(FormName$, ID2&,1)
                IF hCtrl2&<>0 THEN
                    SetWindowPos hWnd, hCtrl2&, 0,0,0,0, WF&
                END IF
            END IF
    END SELECT
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVSetState(BYVAL FormName$, BYVAL ID&, BYVAL N&, BYVAL EV&, BYVAL Mode&)
LOCAL hWnd AS LONG, hCtrl AS LONG, I&
IF EV&<>0 THEN EV&=1
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    IF ID&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,ID&)
        IF hCtrl<>0 THEN
            IF N&>0 THEN
                IF UCASE$(ZGetClass(hCtrl))="TOOLBARWINDOW32" THEN
                    SELECT CASE AS LONG Mode&
                        CASE 1
                            Sendmessage hCtrl, %TB_CHECKBUTTON, N&, EV&
                        CASE 2
                            Sendmessage hCtrl, %TB_ENABLEBUTTON, N&, EV&
                        CASE 3
                            Sendmessage hCtrl, %TB_HIDEBUTTON, N&, EV&
                        CASE ELSE
                    END SELECT
                END IF
            ELSE
                IF Mode&=0 THEN
                    IF TestVisible(hCtrl)=0 THEN
                        ' control is hidden - assume layers
                        I&=ZGetControlIndex(hCtrl)
                        IF I&>0 THEN
                            IF EV&=0 THEN
                                AppControlState(I&)=1   ' disable flag
                            ELSE
                                AppControlState(I&)=0
                            END IF
                        END IF
                    END IF
                    EnableWindow hCtrl, EV&
                END IF
            END IF
        END IF
    ELSE
        IF Mode&=0 THEN EnableWindow hWnd, EV&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_Enable(BYVAL FormName$) EXPORT10
PBVSetState FormName$, 0, 0, 1, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_Disable(BYVAL FormName$) EXPORT10
PBVSetState FormName$, 0, 0, 0, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_EnableC(BYVAL FormName$, BYVAL ID&) EXPORT10
PBVSetState FormName$, ID&, 0, 1, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_DisableC(BYVAL FormName$, BYVAL ID&) EXPORT10
PBVSetState FormName$, ID&, 0, 0, 0
END SUB

'------------------------------------------------------------------------------

SUB EZ_EnableTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&) EXPORT10
PBVSetState FormName$, ID&, ID2&, 1, 2
END SUB

'------------------------------------------------------------------------------

SUB EZ_DisableTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&) EXPORT10
PBVSetState FormName$, ID&, ID2&, 0, 2
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetCheckTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&, BYVAL CV&) EXPORT10
PBVSetState FormName$, ID&, ID2&, CV&, 1
END SUB

'------------------------------------------------------------------------------

SUB EZ_ShowTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&) EXPORT10
PBVSetState FormName$, ID&, ID2&, 0, 3
END SUB

'------------------------------------------------------------------------------

SUB EZ_HideTB(BYVAL FormName$, BYVAL ID&, BYVAL ID2&) EXPORT10
PBVSetState FormName$, ID&, ID2&, 1, 3
END SUB

'------------------------------------------------------------------------------

SUB EZ_ExpandForm (BYVAL FormName$, BYVAL XW!, BYVAL XH!) EXPORT10
    LOCAL hWnd AS LONG, DRect AS Rect, AW&, AH&
    hWnd=ezHandle(FormName$,0,1)
    IF hWnd<>0 THEN
        GetWindowRect hWnd, DRect
        XW!=XW!*App_EZ_CharW
        XH!=XH!*App_EZ_CharH
        AW&=(DRect.nRight-DRect.nLeft)+XW!
        AH&=(DRect.nBottom-DRect.nTop)+XH!
        SetWindowPos hWnd,0,0,0,AW&,AH&,%SWP_NOMOVE OR %SWP_NOACTIVATE OR %SWP_DRAWFRAME OR %SWP_NOOWNERZORDER OR %SWP_NOZORDER
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ResizeForm (BYVAL FormName$, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL MFlag&) EXPORT10
     LOCAL N&, hForm&, VFlag&
     N&=ZFormNum(FormName$)
     IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
     IF N&>0 THEN
         AppForms(N&).FWidth=W! * App_EZ_CharW
         AppForms(N&).FHeight=H! * App_EZ_CharH
         AppForms(N&).FTop=C! * App_EZ_CharW
         AppForms(N&).FLeft=R! * App_EZ_CharH
         AppForms(N&).FCol=W!
         AppForms(N&).FRow=H!
         AppForms(N&).FColLeft=C!
         AppForms(N&).FRowTop=R!
         hForm&=ezHandle(FormName$,0,1)
         IF hForm&<>0 THEN
              IF FormName$="{ME}" THEN FormName$=EZ_GetME
              SELECT CASE AS LONG MFlag&
                  CASE 0
                      PBVPosWindow FormName$, 6, 0,1    ' Resize to correct size, but don't move
                  CASE <0
                      PBVPosWindow FormName$, 6, 5,1    ' Resize to correct size and put in correct position
                  CASE ELSE
                      PBVPosWindow FormName$, 6, AppForms(N&).FStartUpPosition,1    ' Resize to correct size and put in correct position
              END SELECT
         END IF
     END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DragForm(BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    SendMessage hWnd, %WM_NCLBUTTONDOWN, %HTCAPTION, BYVAL %NULL
END IF
END SUB

'------------------------------------------------------------------------------
GLOBAL App_OldDragMode&

SUB EZ_SetWDragMode(BYVAL Mode&) EXPORT10
SELECT CASE AS LONG Mode&
    CASE 0
        SystemParametersInfo %SPI_SETDRAGFULLWINDOWS, %FALSE, 0 , 0   ' %SPIF_UPDATEINIFILE OR %SPIF_SENDWININICHANGE
    CASE 1
        SystemParametersInfo %SPI_SETDRAGFULLWINDOWS, %TRUE, 0 , 0   ' %SPIF_UPDATEINIFILE OR %SPIF_SENDWININICHANGE
    CASE 2
        App_OldDragMode&=SystemParametersInfo(%SPI_GETDRAGFULLWINDOWS, 0, 0 , 0)
        SystemParametersInfo %SPI_SETDRAGFULLWINDOWS, %TRUE, 0 , 0  ' %SPIF_UPDATEINIFILE OR %SPIF_SENDWININICHANGE
    CASE 3
        SystemParametersInfo %SPI_SETDRAGFULLWINDOWS, App_OldDragMode&, 0 , 0  ' %SPIF_UPDATEINIFILE OR %SPIF_SENDWININICHANGE
    CASE 4
        App_OldDragMode&=SystemParametersInfo(%SPI_GETDRAGFULLWINDOWS, 0, 0 , 0)
    CASE ELSE
END SELECT
END SUB

GLOBAL App_OldSmoothMode&

SUB EZ_SetWFontSmoothMode(BYVAL Mode&) EXPORT10
SELECT CASE AS LONG Mode&
    CASE 0
        SystemParametersInfo %SPI_SETFONTSMOOTHING, %FALSE, 0 , 0
    CASE 1
        SystemParametersInfo %SPI_SETFONTSMOOTHING, %TRUE, 0 , 0
    CASE 2
        App_OldSmoothMode&=SystemParametersInfo(%SPI_GETFONTSMOOTHING, 0, 0 , 0)
        SystemParametersInfo %SPI_SETFONTSMOOTHING, %TRUE, 0 , 0
    CASE 3
        SystemParametersInfo %SPI_SETFONTSMOOTHING, App_OldSmoothMode&, 0 , 0
    CASE 4
        App_OldSmoothMode&=SystemParametersInfo(%SPI_GETFONTSMOOTHING, 0, 0 , 0)
    CASE ELSE
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_RedrawForm(BYVAL FormName$) EXPORT10
LOCAL hWnd AS LONG ', X&
IF LEN(FormName$)=0 THEN
    hWnd=GetDesktopWindow
ELSE
    hWnd=PBVFormHandle(FormName$)
END IF
IF hWnd<>0 THEN
    IF IsWindowVisible(hWnd) THEN
         RedrawWindow hWnd, BYVAL %NULL, BYVAL %NULL, %RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
'        ZRedrawForm hWnd
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_RedrawControl(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    LOCAL hCtrl AS LONG, X&
    hCtrl=ezHandle(FormName$, IDNum&,1)
      IF hCtrl<>0 THEN
         IF IsWindowVisible(hCtrl) THEN
             X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
             RedrawWindow hCtrl, BYVAL %NULL, BYVAL %NULL, X&
         END IF
      END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DelayDrawClient(BYVAL FormName$, BYVAL IDNum&) EXPORT10
LOCAL hWnd AS LONG
hWnd=ezHandle(FormName$, IDNum&,1)
IF hWnd<>0 THEN
    IF IsWindowVisible(hWnd) THEN
        InvalidateRect hWnd, BYVAL %NULL, 1
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_GetTBPos(BYVAL FormName$, BYVAL IDNum&, BYVAL ButtonID&, BYVAL DForm$, X1!, Y1!, X2!, Y2!) EXPORT10
LOCAL hWnd AS LONG, hCtrl AS LONG, X&
LOCAL R AS RECT, hWnd2 AS LONG
hWnd=PBVFormHandle(FormName$)
X1!=0
Y1!=0
X2!=0
Y2!=0
IF hWnd<>0 THEN
   IF IDNum&<>0 THEN
      hCtrl=ZGetDlgItem(hWnd,IDNum&)
      IF hCtrl<>0 THEN
          IF ZGetClass(hCtrl)="TOOLBARWINDOW32" THEN
              X&=SendMessage(hCtrl, %TB_GETRECT, ButtonID&, VARPTR(R))
              IF X&<>0 THEN
                  IF DForm$<>"" THEN hWnd2=PBVFormHandle(DForm$)


'                  IF hWnd2<>0 THEN
'                      IF hWnd2<>hWnd THEN
'                            MapWindowPoints hWnd, hWnd2, R, 2
'                      END IF
'                  END IF
                  IF hWnd2<>0 THEN hWnd=hWnd2
                  MapWindowPoints hCtrl, hWnd, R, 2


                  X1!=R.nLeft/App_EZ_CharW
                  Y1!=R.nTop/App_EZ_CharH
                  X2!=R.nRight/App_EZ_CharW
                  Y2!=R.nBottom/App_EZ_CharH
              END IF
          END IF
      END IF
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetAutoRedrawState(BYVAL ARState&) EXPORT10
IF ARState&=0 THEN
    App_RedrawState&=0
ELSE
    App_RedrawState&=1
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetReDrawState(BYVAL FormName$, BYVAL IDNum&, BYVAL FDState&) EXPORT10
    LOCAL hWnd AS LONG
    hWnd=ezHandle(FormName$,IDNum&,1)
    IF hWnd<>0 THEN
          IF FDState&=0 THEN
               IF IsWindowVisible(hWnd) THEN     ' if window has redraw state off then don't allow it turned off again
                     SendMessage hWnd, %WM_SETREDRAW, FDState&, 0
               END IF
          ELSE
               SendMessage hWnd, %WM_SETREDRAW, FDState&, 0
          END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFormIcon(BYVAL FormName$, BYVAL IName$) EXPORT10
LOCAL hImage AS LONG
LOCAL hWnd AS LONG
LOCAL RV AS LONG    ', I&
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    hImage=0
    IF IName$<>"" THEN hImage=EZ_IconHandle(IName$)
    ' if not found zero is passed which clears icon
    RV = SendMessage(hWnd, %WM_SETICON, %ICON_BIG, hImage)
    RV = SendMessage(hWnd, %WM_SETICON, %ICON_SMALL, hImage)
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetLayer(BYVAL Layer&) EXPORT10
IF Layer&<>-1 THEN
    IF Layer&<0 THEN Layer&=0
    IF Layer&>App_MaximumLayer& THEN Layer&=App_MaximumLayer&
END IF
App_EZ_CurLayer&=Layer&
END SUB

'------------------------------------------------------------------------------

SUB EZ_AssignID (BYVAL hCtrl&, BYVAL NewIDNum&) EXPORT10
IF NewIDNum&>0 THEN
    IF IsWindow(hCtrl&) THEN
       SetWindowLong hCtrl&, %GWL_ID, NewIDNum&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

' Subclasses control as well

SUB EZ_PutOnLayer(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    LOCAL I&, hCtrl&
    IF IDNum&<>0 THEN
        hCtrl&=ezHandle(FormName$, IDNum&,1)
        IF hCtrl&<>0 THEN
            EZ_SubClassEx hCtrl&, App_EZ_SubClass&
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION TestVisible(BYVAL hCtrl AS LONG) AS LONG
     LOCAL WS&, RV&
     RV&=0
     WS&=GetWindowLong(hCtrl, %GWL_STYLE)
     IF (WS& AND %WS_VISIBLE)=%WS_VISIBLE THEN RV&=1
     FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetFormName(BYVAL hWnd&) EXPORT10 AS STRING
FUNCTION=ZFormNameH(hWnd&)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetFormParent(BYVAL FormName$) EXPORT10 AS STRING
LOCAL hWnd AS LONG, RV$
RV$=""
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    hWnd=ZGetParentForm(GetParent(hWnd))
    IF hWnd<>0 THEN
        RV$=ZFormNameH(hWnd)
    END IF
END IF
FUNCTION=RV$
END FUNCTION

FUNCTION EZ_GetFormTopLevel(BYVAL FormName$) EXPORT10 AS STRING
     LOCAL hWnd AS LONG, RV$, WS&
     RV$=""
     hWnd=PBVFormHandle(FormName$)
     IF hWnd<>0 THEN
         DO
              hWnd=ZGetParentForm(hWnd) ' tests existing form if EZGUI type
              IF hWnd&=0 THEN EXIT DO
              WS&=GetWindowLong(hWnd&, %GWL_STYLE) AND %WS_CHILD
              IF WS&=0 THEN EXIT DO
              hWnd&=GetParent(hWnd&)
         LOOP
         IF hWnd<>0 THEN
             RV$=ZFormNameH(hWnd)
         END IF
     END IF
     FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetParentForm(BYVAL hCtrl&) EXPORT10 AS STRING
LOCAL hWnd AS LONG, RV$
RV$=""
IF hCtrl&<>0 THEN
    hWnd=ZGetParentForm(GetParent(hCtrl&))
    IF hWnd<>0 THEN
        RV$=ZFormNameH(hWnd)
    END IF
END IF
FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ActiveMDIChild() EXPORT10 AS STRING
LOCAL RV$
RV$=""
IF AppCurrentMDIChild<>0 THEN
    RV$=ZFormNameH(AppCurrentMDIChild)
END IF
FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------


FUNCTION ZIsForm(FormName$, BYVAL ID&, FState$) AS LONG
LOCAL hWnd AS LONG, RV&, X& ', C$
hWnd=ezHandle(FormName$, ID&,1)  ' PBVFormHandle(FormName$)
RV&=0
IF hWnd<>0 THEN
    SELECT CASE AS CONST$ UCASE$(FState$)
        CASE "MIN", "MINIMIZED"
            IF IsIconic(hWnd) THEN RV&=1
        CASE "MAX", "MAXIMIZED"
            IF IsZoomed(hWnd) THEN RV&=1
        CASE "E", "ENABLED"
            IF IsWindowEnabled(hWnd) THEN RV&=1
        CASE "V", "VISIBLE"
            ' affected by redrawstate
            IF IsWindowVisible(hWnd) THEN RV&=1
        CASE "VS", "VSTYLE", "VISIBLESTYLE"
            IF TestVisible(hWnd) THEN RV&=1
        CASE "MDI"
            IF ID&=0 THEN
                X&=GetMyWindowLong(hWnd,2)
                IF X&=4 THEN RV&=1
                IF X&=5 THEN RV&=2
            END IF
        CASE "PG", "PAGE", "CHILD"
            X&=GetWindowLong(hWnd, %GWL_STYLE) AND %WS_CHILD
            IF X&=%WS_CHILD THEN RV&=1
        CASE ELSE
    END SELECT
END IF
FUNCTION=RV&
END FUNCTION

FUNCTION EZ_IsForm(BYVAL FormName$, BYVAL FState$) EXPORT10 AS LONG
    FUNCTION=ZIsForm(FormName$, 0, FState$)
END FUNCTION

FUNCTION EZ_IsControl(BYVAL FormName$, BYVAL IDNum&, BYVAL FState$) EXPORT10 AS LONG
    FUNCTION=ZIsForm(FormName$, IDNum&, FState$)
END FUNCTION

FUNCTION EZ_IsMsg(BYVAL Msg&, BYVAL MType$) EXPORT10 AS LONG
    LOCAL RV&
    RV&=0
    MType$=UCASE$(MType$)
    IF INSTR(MType$, "K") THEN
        IF Msg&>=%WM_KEYFIRST AND Msg&<=%WM_KEYLAST THEN RV&=1
    END IF
    IF INSTR(MType$, "B") THEN
        IF Msg&>=%WM_LBUTTONDOWN AND Msg&<=%WM_MBUTTONDBLCLK THEN RV&=2
    END IF
    IF INSTR(MType$, "M") THEN
        IF Msg&=%WM_MOUSEMOVE THEN RV&=3
    END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_PlayBeep(BYVAL Mode$) EXPORT10
SELECT CASE AS CONST$ UCASE$(Mode$)
    CASE "*"
        MessageBeep %MB_ICONASTERISK
    CASE "!"
        MessageBeep %MB_ICONEXCLAMATION
    CASE "S"
        MessageBeep %MB_ICONHAND
    CASE "?"
        MessageBeep %MB_ICONQUESTION
    CASE ELSE
        MessageBeep %MB_OK
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefLayerGroup(BYVAL LayerMin&, BYVAL LayerMax&, BYVAL EFlag&) EXPORT10
IF LayerMin&=0 THEN LayerMin&=1
IF LayerMax&=0 THEN LayerMax&=App_MaximumLayer&
IF LayerMin&>=1 AND LayerMin&<=App_MaximumLayer& THEN
    IF LayerMax&>=1 AND LayerMax&<=App_MaximumLayer& THEN
        IF LayerMax&>=LayerMin& THEN
            App_LayerMin&=LayerMin&
            App_LayerMax&=LayerMax&
            App_LayerMode&=EFlag&
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DisplayLayer(BYVAL FormName$, BYVAL Layer&, BYVAL Mode&) EXPORT10
LOCAL hWnd AS LONG, I&, AFNum&, hCtrl AS LONG, X&, MaxC&, RFlag&
LOCAL RW AS RECT, RC AS RECT, PT AS POINTAPI, W&, H&, IVFlag&
LOCAL OldFhWnd&, RFlag2&, DEFlag&, hDlg&, OKFlag&, CFNum&
REGISTER L&, ID&
DEFLag&=0
IF (Mode& AND 32)=32 THEN DEFlag&=1
Mode&=Mode& AND 31  ' remove high bit flags
IVFlag&=App_LayerMode&
hDlg&=ezHandle(FormName$,0,1)
IF Layer&>=0 AND Layer&<=App_MaximumLayer& THEN
    AFNum&=ZFormNum(FormName$)
    IF AFNum&<>0 THEN    ' does form exist
        ' ---------------------
        OldFhWnd&=GetFocus
        SetFocus %NULL
        ' ---------------------
'        IF AppForms(AFNum&).FType=3 THEN
'        END IF
        hWnd=AppForms(AFNum&).FhWnd
        ' -----------------------
        GetClientRect hWnd, RW
        W&=RW.nRight
        H&=RW.nBottom
        SWAP RW.nLeft, RW.nRight
        SWAP RW.nTop, RW.nBottom
        ' -----------------------
        RFlag&=0
        IF IsWindowVisible(hWnd) THEN
            SendMessage hWnd, %WM_SETREDRAW, 0,0
            RFlag&=1
            RFlag2&=1
        END IF
        MaxC&=App_EZ_TopCtrl&
        IF MaxC&>UBOUND(AppControlTNum) THEN MaxC&=UBOUND(AppControlTNum)
        FOR I&=1 TO MaxC&
           OKFlag&=0
           ID&=INT(AppControlTNum(I&)/1000)
           CFNum&=AppControlTNum(I&) MOD 1000
           IF ID&>0 THEN
               IF CFNum&=AFNum& THEN OKFlag&=1
           ELSEIF ID&=0 THEN    ' must be form
               ' test for component form
               IF CFNum&<>AFNum& THEN   ' not this form
                    IF CFNum&>=1 AND CFNum&<=AppLastForm& THEN
                        IF AppForms(CFNum&).FType=3 THEN    ' is a component

                        END IF
                    END IF
               END IF
           END IF
           IF OKFlag& THEN
              L&=AppControlLayer(I&)
              IF L&=0 OR (L&>=App_LayerMin& AND L&<=App_LayerMax&)THEN
                  hCtrl=ZGetDlgItem(hWnd,ID&)
                  GOSUB CDISP
              END IF
           END IF
        NEXT I&
        IF RFlag& THEN
           SendMessage hWnd, %WM_SETREDRAW, 1,0
           IF IVFlag&<>0 THEN
               IF RW.nLeft>RW.nRight THEN SWAP RW.nLeft, RW.nRight
               IF RW.nTop>RW.nBottom THEN SWAP RW.nTop, RW.nBottom
               IF RW.nLeft<0 THEN RW.nLeft=0
               IF RW.nTop<0 THEN RW.nTop=0
               IF RW.nRight>W& THEN RW.nRight=W&
               IF RW.nBottom>H& THEN RW.nBottom=H&
               RFlag&=%RDW_INVALIDATE OR %RDW_ERASE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
               RedrawWindow hWnd, RW, %NULL, RFlag&
           ELSE
               RFlag&=%RDW_INVALIDATE OR %RDW_ERASE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
               RedrawWindow hWnd, BYVAL %NULL, %NULL, RFlag&
           END IF
        ELSE
           RFlag&=%RDW_INVALIDATE OR %RDW_ERASE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
           RedrawWindow hWnd, BYVAL %NULL, %NULL, RFlag&
        END IF
        IF RFlag2& THEN
            IF OldFhWnd&<>%NULL THEN
                IF IsWindowVisible(OldFhWnd&) THEN
'                    SetFocus OldFhWnd&
                    PostMessage hDlg&, %WM_NEXTDLGCTL, OldFhWnd&, %TRUE
                ELSE
                    EZ_SetNextTab FormName$
                END IF
            ELSE
                EZ_SetNextTab FormName$
            END IF
        END IF
    END IF
END IF
EXIT SUB


CDISP:
SELECT CASE AS LONG Mode&
   CASE 0
      IF L&=0 OR L&=Layer& THEN
         GOSUB CSHOW
      ELSE
         GOSUB CHIDE
      END IF
   CASE 1
      IF L&=Layer& THEN
         GOSUB CSHOW
      ELSE
         GOSUB CHIDE
      END IF
   CASE 2
      IF L&=Layer& THEN
         GOSUB CSHOW
      END IF
   CASE 3
      IF L&=Layer& THEN
         GOSUB CHIDE
      END IF
   CASE 4
      GOSUB CSHOW
   CASE ELSE
END SELECT
RETURN


CSHOW:
IF hCtrl<>0 THEN
   ' Note:   IsWindowVisible returns incorrect value when redraw State is off
   IF TestVisible(hCtrl)=0 THEN
       GOSUB AddToRect
       IF DEFLag& THEN
           IF AppControlState(I&)=0 THEN
               EnableWindow hCtrl, %TRUE
           END IF
       END IF
       X&=ShowWindow(hCtrl, %SW_SHOW)
   END IF
END IF
RETURN

CHIDE:
IF hCtrl<>0 THEN
   IF TestVisible(hCtrl) THEN
       GOSUB AddToRect
       X&=ShowWindow(hCtrl, %SW_HIDE)
       IF DEFLag& THEN
           IF IsWindowEnabled(hCtrl&) THEN
               EnableWindow hCtrl, %FALSE
               AppControlState(I&)=0
           ELSE
               AppControlState(I&)=1
           END IF
       END IF
   END IF
END IF
RETURN

AddToRect:
IF RFlag& THEN
    GetWindowRect hCtrl, RC
    PT.x=RC.nLeft
    PT.y=RC.nTop
    ScreenToClient hWnd, PT
    IF PT.x<RW.nLeft THEN RW.nLeft=PT.x
    IF PT.y<RW.nTop THEN RW.nTop=PT.y
    PT.x=RC.nRight
    PT.y=RC.nBottom
    ScreenToClient hWnd, PT
    IF PT.x>RW.nRight THEN RW.nRight=PT.x
    IF PT.y>RW.nBottom THEN RW.nBottom=PT.y
END IF
RETURN
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_CopyFile(BYVAL Source$, BYVAL Dest$) EXPORT10 AS LONG
LOCAL RV&, S AS ASCIIZ*%MAX_PATH, D AS ASCIIZ*%MAX_PATH
RV&=0
IF LEN(Source$)<%MAX_PATH THEN
    IF LEN(Dest$)<%MAX_PATH THEN
        S=LTRIM$(RTRIM$(Source$))+CHR$(0)
        D=LTRIM$(RTRIM$(Dest$))+CHR$(0)
        RV&=CopyFile(S, D, 0)
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_AppPath() EXPORT10 AS STRING
LOCAL F$
F$=EZ_GetAppPathName()
F$=EZ_GetPathText(F$)
IF RIGHT$(F$,1)<>"\" THEN F$=F$+"\"
FUNCTION=F$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetAppPathName() EXPORT10 AS STRING
     LOCAL P AS ASCIIZ*%MAX_PATH, L&, F$
     L&=GetModuleFileName(AppInstance&, P, %MAX_PATH-1)
     IF L&>0 THEN
         F$=LEFT$(P,L&)
     ELSE
         F$=""
     END IF
     FUNCTION=F$
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetPathText(BYVAL P$) EXPORT10 AS STRING
LOCAL P1&, P2&, ST&
ST&=1
P1&=0
DO
    P2&=INSTR(ST&,P$,"\")
    IF P2&=0 THEN EXIT DO
    P1&=P2&
    ST&=P2&+1
LOOP
FUNCTION=LEFT$(P$,P1&)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_GetFileText(BYVAL P$) EXPORT10 AS STRING
LOCAL P2&, ST&
ST&=1
DO
    P2&=INSTR(ST&,P$,"\")
    IF P2&=0 THEN EXIT DO
    ST&=P2&+1
LOOP
FUNCTION=MID$(P$,ST&)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_SetTextMode(BYVAL Mode&) EXPORT10
App_EZ_MaskMode&=Mode&
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_ImageHandle(BYVAL IName$) EXPORT10 AS LONG
LOCAL I&, RV&
RV&=0
ARRAY SCAN APPImageName$(1), = IName$, TO I&
IF I&>0 THEN
   IF APPImageType(I&)=%OBJ_BITMAP THEN
      RV&=APPImage(I&)
   END IF
END IF
FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetBitmapName(BYVAL hBmp&) EXPORT10 AS STRING
    LOCAL I&, RV$
    RV$=""
    IF hBmp&<>0 THEN
        FOR I&=1 TO UBOUND(APPImage())
            IF APPImageType(I&)=%OBJ_BITMAP THEN
                IF APPImage(I&)=hBmp& THEN
                    RV$=APPImageName$(I&)
                    EXIT FOR
                END IF
            END IF
        NEXT I&
    END IF
    FUNCTION=RV$
END FUNCTION

FUNCTION EZ_GetIconName(BYVAL hIcon&) EXPORT10 AS STRING
    LOCAL I&, RV$
    RV$=""
    IF hIcon&<>0 THEN
        FOR I&=1 TO UBOUND(APPImage())
            IF APPImageType(I&)<>%OBJ_BITMAP THEN
                IF APPImage(I&)=hIcon& THEN
                    RV$=APPImageName$(I&)
                    EXIT FOR
                END IF
            END IF
        NEXT I&
    END IF
    FUNCTION=RV$
END FUNCTION

FUNCTION zGetFreeObject(BYVAL ObjNum&) AS LONG
    LOCAL RV&, I&, MaxI&, Half&
    RV&=-1
    SELECT CASE AS LONG ObjNum&
        CASE 1  ' free font
            FOR I&=0 TO UBOUND(AppFont)
                IF AppFont(I&)=0 THEN RV&=I&:EXIT FOR
            NEXT I&
        CASE 2  ' free color
            MaxI&=UBOUND(AppBrush)-%App_ExtraColors
            FOR I&=32 TO MaxI&  ' ignore first 32 colors (0 to 31)
               IF AppBrush(I&)=0 THEN RV&=I&:EXIT FOR
            NEXT I&
        CASE 3  ' free cursor shared
            Half&=UBOUND(AppCursor)/2
            FOR I&=LBOUND(AppCursor) TO Half&
                IF AppCursor(I&)=0 THEN RV&=I&:EXIT FOR
            NEXT I&
        CASE 4  ' free cursor destroyable
            Half&=(UBOUND(AppCursor)/2)+1
            FOR I&=Half& TO UBOUND(AppCursor)
                IF AppCursor(I&)=0 THEN RV&=I&:EXIT FOR
            NEXT I&
        CASE 5  ' Image list
            FOR I&=0 TO UBOUND(App_ImgList)
                IF App_ImgList(I&).hImg=0 THEN  RV&=I&:EXIT FOR
            NEXT I&
        CASE ELSE
    END SELECT
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetFreeFont() EXPORT10 AS LONG
    FUNCTION=zGetFreeObject(1)
END FUNCTION

FUNCTION EZ_GetFreeColor() EXPORT10 AS LONG
    FUNCTION=zGetFreeObject(2)
END FUNCTION

FUNCTION EZ_GetFreeSCursor() EXPORT10 AS LONG
    FUNCTION=zGetFreeObject(3)
END FUNCTION

FUNCTION EZ_GetFreeDCursor() EXPORT10 AS LONG
    FUNCTION=zGetFreeObject(4)
END FUNCTION

FUNCTION EZ_GetFreeImgList() EXPORT10 AS LONG
    FUNCTION=zGetFreeObject(5)
END FUNCTION

DECLARE SUB EZ_GetBitmapInfo(BYVAL hBmp&, W&, H&, PixelBits&, DIBPtr&)

TYPE EZGUISTAT
    BmpCT AS LONG
    BmpKB AS LONG
    IconCT AS LONG
    ImagesFree AS LONG
    FontCT AS LONG
    SCursorCT AS LONG
    DCursorCT AS LONG
    ImgListCT AS LONG
    ImgListIconCT AS LONG
    ColorCT AS LONG
    SpriteCT AS LONG
    ' ------------------
    FormCT AS LONG
    CmpCT AS LONG
    ControlCT AS LONG
    MaxFormCmps AS LONG
    MaxControls AS LONG
    MaxImages AS LONG
    MaxFonts AS LONG
    MaxCursors AS LONG
    MaxColors AS LONG
    MaxImgLists AS LONG
    MaxSprites AS LONG
END TYPE

DECLARE FUNCTION zGetSpriteCount() AS LONG
DECLARE FUNCTION zGetSpriteLimit() AS LONG

SUB EZ_GetGUIStats(G AS EZGUISTAT) EXPORT10
        LOCAL I&, W&, H&, PixelBits&, DIBPtr&, SZ&, EX&, ASZ AS DOUBLE, Half&, MaxI&, CNCount&, FMCount&, CMPCount&, C$, AFNum&, hDlg&
        G.BmpCT=0
        G.IconCT=0
        G.BmpKB=0
        G.FontCT=0
        G.SCursorCT=0
        G.DCursorCT=0
        G.ImgListCT=0
        G.ImgListIconCT=0
        G.ColorCT=0
        G.ImagesFree=0

        G.FormCT=0
        G.CmpCT=0
        G.ControlCT=0


        G.MaxFormCmps   = UBOUND(AppFormResize$())  ' this array matches form count
        G.MaxControls   = UBOUND(AppControlHandle())-G.MaxFormCmps
        G.MaxImages     = UBOUND(APPImage())
        G.MaxFonts      = UBOUND(AppFont())-101 ' 101 extra font indexes for special internal purposes
        G.MaxCursors    = UBOUND(AppCursor())
        G.MaxColors     = UBOUND(AppColor())-%App_ExtraColors
        G.MaxImgLists   = UBOUND(App_ImgList())
        G.MaxSprites    = zGetSpriteLimit
        IF G.MaxSprites<10 THEN G.MaxSprites=0  ' not defined yet
                            ' AppSubMenus()
        FMCount&=0
        CNCount&=0
        CMPCount&=0
        FOR I&=1 TO UBOUND(AppControlTNum)
            IF AppControlTNum(I&)<>0 THEN   ' is defined
                IF AppControlHandle(I&)=0 THEN
                    ' must be a form
                    AFNum&=AppControlTNum(I&) MOD 1000
                    IF AFNUM&>0 AND AFNum&<=UBOUND(AppFormResize$) THEN
                        hDlg&=AppForms(AFNum&).FhWnd
                        IF ZGetClass(hDlg&)="EZGUI_TYPE3_32" THEN
                            CMPCount&=CMPCount&+1
                        ELSE
                            FMCount&=FMCount&+1
                        END IF
                    END IF
                ELSE
                    C$=ZGetClass(AppControlHandle(I&))
                    IF LEFT$(C$,10)="EZGUI_TYPE" THEN
                        IF C$="EZGUI_TYPE3_32" THEN
                            CMPCount&=CMPCount&+1
                        ELSE
                            FMCount&=FMCount&+1
                        END IF
                    ELSE
                        CNCount&=CNCount&+1
                    END IF
                END IF
            END IF
        NEXT I&
        G.FormCT=FMCount&
        G.CmpCT=CMPCount&
        G.ControlCT=CNCount&

        FOR I&=1 TO UBOUND(APPImage())
            IF APPImage(I&)<>0 THEN
                IF APPImageType(I&)=%OBJ_BITMAP THEN
                    G.BmpCT=G.BmpCT+1
                    EZ_GetBitmapInfo  APPImage(I&), W&, H&, PixelBits&, DIBPtr&
                    SELECT CASE AS LONG PixelBits&
                        CASE 32
                            SZ&=W&*H&*4
                        CASE 24
                            SZ&=W*3
                            EX&=SZ& MOD 4
                            IF EX&>0 THEN SZ&=SZ&+(4-EX&)
                            SZ&=SZ*H&
                        CASE 15,16
                            SZ&=W*2
                            EX&=SZ& MOD 4
                            IF EX&>0 THEN SZ&=SZ&+(4-EX&)
                            SZ&=SZ*H&
                        CASE 8
                            SZ&=(W&*H&)+(256*3) ' add palette count
                        CASE 4
                            SZ&=((W&*H&)/2)+(16*3) ' add palette count
                        CASE 1
                            SZ&=(W&*H&)/8
                        CASE ELSE
                            SZ&=(W&*H&)/(PixelBits&/8)
                    END SELECT
                    ASZ=ASZ+(SZ&/1024)
                ELSE
                    G.IconCT=G.IconCT+1
                END IF
            END IF
        NEXT I&
        G.ImagesFree=UBOUND(APPImage())-(G.BmpCT+G.IconCT)
        G.BmpKB=CEIL(ASZ)
        FOR I&=0 TO UBOUND(AppFont)
            IF AppFont(I&)<>0 THEN G.FontCT=G.FontCT+1
        NEXT I&

        Half&=UBOUND(AppCursor)/2
        FOR I&=LBOUND(AppCursor) TO Half&
            IF AppCursor(I&)<>0 THEN G.SCursorCT=G.SCursorCT+1
        NEXT I&
        Half&=Half&+1
        FOR I&=Half& TO UBOUND(AppCursor)
            IF AppCursor(I&)<>0 THEN G.DCursorCT=G.DCursorCT+1
        NEXT I&
        FOR I&=0 TO UBOUND(App_ImgList)
            IF App_ImgList(I&).hImg<>0 THEN
                G.ImgListCT=G.ImgListCT+1
                G.ImgListIconCT=G.ImgListIconCT+ImageList_GetImageCount(App_ImgList(I&).hImg)
            END IF
        NEXT I&
        MaxI&=UBOUND(AppBrush)-%App_ExtraColors
        FOR I&=0 TO MaxI&
           IF AppBrush(I&)<>0 THEN G.ColorCT=G.ColorCT+1
        NEXT I&
        G.SpriteCT=zGetSpriteCount

        ' App_EZ_PCount is an Image tracking value for images which are not resources

END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_IconHandle(BYVAL IName$) EXPORT10 AS LONG
LOCAL I&, RV&
RV&=0
ARRAY SCAN APPImageName$(1), = IName$, TO I&
IF I&>0 THEN
   IF APPImageType(I&)<>%OBJ_BITMAP THEN
      RV&=APPImage(I&)
   END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_BrushHandle(BYVAL N&) EXPORT10 AS LONG
FUNCTION=PBVBrush(N&)
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_FontHandle(BYVAL N&) EXPORT10 AS LONG
LOCAL RV&
RV&=0
IF N&>=0 AND N&<=UBOUND(AppFont) THEN
   IF AppFont(N&)<>0 THEN
      RV&=AppFont(N&)
   END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_PopupMenu(BYVAL hMenu&, BYVAL FormName$, BYVAL X!, BYVAL Y!, BYVAL MProp$) EXPORT10
LOCAL RV&, MF&, hWnd AS LONG, TFlag&
LOCAL AX&, AY&, PT AS POINTAPI
IF IsMenu(hMenu&) THEN
   MF&=%TPM_LEFTBUTTON
   IF INSTR(MProp$,"T") THEN
       TFlag&=1
   ELSE
       TFlag&=0
   END IF
   IF INSTR(MProp$,"C") THEN
      MF&=MF& OR %TPM_CENTERALIGN
   ELSE
      IF INSTR(MProp$,"R") THEN
         MF&=MF& OR %TPM_RIGHTALIGN
      ELSE
         MF&=MF& OR %TPM_LEFTALIGN
      END IF
   END IF
   hWnd=PBVFormHandle(FormName$)
   IF hWnd<>0 THEN
      ' if hWnd=0 it is DeskTop
      AX&=INT(X! * App_EZ_CharW)
      AY&=INT(Y! * App_EZ_CharH)
      IF INSTR(MProp$,"S")=0 THEN    ' Not Screen Coordinates
            PT.x=AX&
            PT.y=AY&
            ClientToScreen hWnd, PT
            AX&=PT.x
            AY&=PT.y
      END IF
      IF TFlag&<>0 THEN SetForegroundWindow hWnd
      RV&=TrackPopupMenuEX(hMenu&, MF&, AX&, AY&, hWnd, BYVAL %NULL)
      IF TFlag&<>0 THEN PostMessage hWnd, %WM_NULL,0,0
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DoPopupMenu(BYVAL FormName$, BYVAL CVal&, BYVAL FirstID&, BYVAL MenuD$, BYVAL MProp$) EXPORT10
    LOCAL MenuT$, MenuP$, hPopupMenu&, N&, Tmp$, P&, FFlag&, CT&, D$
    D$=App_EZ_DChar$
    N&=0
    FFlag&=1
    CT&=0
    DO
        N&=N&+1
        Tmp$=TRIM$(PARSE$(MenuD$,D$,N&))
        IF Tmp$="" THEN EXIT DO
        P&=INSTR(Tmp$,",")
        IF P&=0 THEN
            MenuT$=Tmp$
            MenuP$=""
        ELSE
            MenuT$=TRIM$(LEFT$(Tmp$,P&-1))
            MenuP$=TRIM$(MID$(Tmp$,P&+1))
        END IF
        IF MenuT$<>"" THEN
            IF FFlag& THEN
                hPopupMenu&=EZ_DefSubMenu(FirstID&, MenuT$, MenuP$)
                FFlag&=0
            ELSE
                EZ_AddMenuItem hPopupMenu&, FirstID&, 0, MenuT$, MenuP$
            END IF
            FirstID&=FirstID&+1
            CT&=CT&+1
        END IF
    LOOP
    IF CT&>0 THEN
        EZ_PopupMenu hPopupMenu&, FormName$,  EZ_CharX(CVal&,0 ), EZ_CharY(CVal&, 0), MProp$
        EZ_DelMenu hPopupMenu&
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_UseDialogProc (CP AS DWORD) EXPORT10
App_FormDialogProc=CP
END SUB

'------------------------------------------------------------------------------

SUB EZ_HookDialogProc(CP AS DWORD) EXPORT10
App_WedgeDProc=CP
END SUB

SUB EZ_HookDialogProcEx(CP AS DWORD) EXPORT10
App_WedgeDProcEx=CP
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFGridHOffset(BYVAL PH&) EXPORT10
    IF PH&>=0 AND PH&<=320 THEN
        App_FormSizeOffset&=PH&
    ELSE
        App_FormSizeOffset&=0
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_SetFGrid(BYVAL N&) EXPORT10
LOCAL W&, H&
IF N&<-2 THEN N&=0
IF N&>128 THEN N&=128
IF N&=-1 THEN N&=0
App_FormSizeMode&=N&
IF N&=-2 THEN
   EZ_GetCharSize App_DDT_FontNum&, W&, H&, 1
   App_DDT_CHARX&=W&
   App_DDT_CHARY&=H&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefToolTipProp(BYVAL FGC&, BYVAL BGC&, BYVAL TProp$) EXPORT10
    LOCAL P1&,P2&, CW!
    App_ToolTipStyle&=0
    App_ToolTipWidth&=0
    TProp$=UCASE$(TProp$)
    IF INSTR(TProp$,"B") THEN App_ToolTipStyle&=App_ToolTipStyle& OR %TTS_BALLOON
    IF INSTR(TProp$,"&") THEN App_ToolTipStyle&=App_ToolTipStyle& OR %TTS_NOPREFIX
    IF INSTR(TProp$,"{DF}") THEN App_ToolTipStyle&=App_ToolTipStyle& OR %TTS_NOFADE
    IF INSTR(TProp$,"{DS}") THEN App_ToolTipStyle&=App_ToolTipStyle& OR %TTS_NOANIMATE
    P1&=INSTR(TProp$,"[")
    IF P1&>0 THEN
        P2&=INSTR(P1&+1,TProp$,"]")
        IF P2&>P1& THEN
            CW!=ABS(VAL(MID$(TProp$,P1&+1,P2&-(P1&+1))))
            App_ToolTipWidth&=EZ_X(CW!)
        END IF
    END IF
    ZQBColors FGC&, BGC&
    IF FGC&>=-1 AND FGC&<=App_TopColor& THEN
        App_ToolTipFGC&=FGC&
    END IF
    IF BGC&>=-1 AND BGC&<=App_TopColor& THEN
        App_ToolTipBGC&=BGC&
    END IF
END SUB

SUB EZ_AddToolTip(BYVAL FormName$, BYVAL ID&) EXPORT10
LOCAL hWnd AS LONG, hCtrl AS LONG, N&
LOCAL TT AS TOOLINFO5    ' for 4.7 common ctrl or better
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   IF ID&<>0 THEN
        hCtrl=ZGetDlgItem(hWnd,ID&)
        IF hCtrl<>0 THEN
            N&=ZFormNumH(hWnd)
            IF N&<>0 THEN
               IF App_CurrentOS&>=501 THEN
                    TT.cbsize=SIZEOF(TT)
               ELSE
                    TT.cbsize=SIZEOF(TT)-4   ' use smaller structure without .lpReserve member
               END IF
               TT.uFlags=%TTF_IDISHWND OR %TTF_SUBCLASS OR %TTF_TRANSPARENT
               TT.hWnd=hWnd
               TT.uId=hCtrl
               ' TT.rect
               TT.hinst=AppInstance&
               ' TT.lpszText=%LPSTR_TEXTCALLBACK  ' =-1 constant for Listview control
               TT.lpszText=-1
               'msgbox FormName$+" , "+ZFormNameH(GetParent(AppForms(N&).FhToolTip))
               SendMessage AppForms(N&).FhToolTip, %TTM_ADDTOOL,0, VARPTR(TT)
            END IF
        END IF
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZGetDlgItem(BYVAL hWnd AS LONG, BYVAL ID&) AS LONG
LOCAL hCtrl AS LONG, N&
hCtrl=GetDlgItem(hWnd,ID&)
IF hCtrl=0 THEN
    ' Assume Control is on a Child of the Form
    N&=ZFormNumH(hWnd)
    IF N&<>0 THEN
        IF AppForms(N&).FhWnd2<>0 THEN
            IF hCtrl=0 THEN hCtrl=GetDlgItem(AppForms(N&).FhWnd2,ID&)
        END IF
        IF AppForms(N&).FhWnd3<>0 THEN
            IF hCtrl=0 THEN hCtrl=GetDlgItem(AppForms(N&).FhWnd3,ID&)
        END IF
        IF AppForms(N&).FhWnd4<>0 THEN
            IF hCtrl=0 THEN hCtrl=GetDlgItem(AppForms(N&).FhWnd4,ID&)
        END IF
        IF AppForms(N&).FhWnd5<>0 THEN
            IF hCtrl=0 THEN hCtrl=GetDlgItem(AppForms(N&).FhWnd5,ID&)
        END IF
        IF AppForms(N&).FhWnd6<>0 THEN
            IF hCtrl=0 THEN hCtrl=GetDlgItem(AppForms(N&).FhWnd6,ID&)
        END IF
    END IF
END IF
FUNCTION=hCtrl
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_DProc() EXPORT10 AS DWORD
FUNCTION=CODEPTR(WndProc)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_HookMsgLoopProc(CP AS DWORD) EXPORT10
App_WedgeMLoop=CP
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_GetDropList() EXPORT10 AS STRING
FUNCTION=App_DropFile$
App_DropFile$=""
END FUNCTION

'------------------------------------------------------------------------------

SUB ezSetDropFiles(BYVAL hWnd&, BYVAL DFlag&)
     LOCAL F&
     IF IsWindow(hWnd&) THEN
          F&=0
          IF DFlag&<>0 THEN F&=%TRUE
          DragAcceptFiles hWnd&, F&
     END IF
END SUB

SUB EZ_SetDropFiles(BYVAL FormName$, BYVAL DFlag&) EXPORT10
     LOCAL hWnd AS LONG
     hWnd=PBVFormHandle(FormName$)
     IF hWnd<>0 THEN ezSetDropFiles hWnd, DFlag&
END SUB

SUB EZ_SetDropFilesEx(BYVAL FormName$, BYVAL IDNum&, BYVAL DFlag&) EXPORT10
     LOCAL hWnd AS LONG
     hWnd=ezHandle(FormName$, IDNum&,1)
     IF hWnd<>0 THEN ezSetDropFiles hWnd, DFlag&
END SUB

'------------------------------------------------------------------------------

SUB PBVRegistry(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, VText$, VNum AS DWORD, BYVAL Mode&, RV&)
LOCAL MK&, SB AS ASCIIZ*260, NK&, NKR&
LOCAL KC AS ASCIIZ*70, VN AS ASCIIZ*70
LOCAL VT AS ASCIIZ*260
LOCAL EMsg&, DT&, DBS AS STRING*260, DL&
RV&=0
SELECT CASE AS CONST$ UCASE$(MKey$)
   CASE "CR", "CLASSES_ROOT", "HKEY_CLASSES_ROOT"
      MK&=%HKEY_CLASSES_ROOT
   CASE "CU", "CURRENT_USER", "HKEY_CURRENT_USER"
      MK&=%HKEY_CURRENT_USER
   CASE "LM", "LOCAL_MACHINE", "HKEY_LOCAL_MACHINE"
      MK&=%HKEY_LOCAL_MACHINE
   CASE "U", "USERS", "HKEY_USERS"
      MK&=%HKEY_USERS
   CASE "PD", "PERFORMANCE_DATA", "HKEY_PERFORMANCE_DATA"
      MK&=%HKEY_PERFORMANCE_DATA
   CASE "CC", "CURRENT_CONFIG", "HKEY_CURRENT_CONFIG"
      MK&=%HKEY_CURRENT_CONFIG
   CASE "DD", "DYN_DATA", "HKEY_DYN_DATA"
      MK&=%HKEY_DYN_DATA
   CASE ELSE
      EXIT SUB
END SELECT
IF SKey$="" THEN
   EXIT SUB
END IF
IF Mode&<5 THEN
    ' IF VName$="" THEN EXIT SUB
    ' allow blank value name, since win 95 uses this for default
END IF
SB=LEFT$(SKey$, 255)+CHR$(0)
VN=LEFT$(VName$, 64)+CHR$(0)
VText$=LEFT$(VText$,255)
VT=VText$+CHR$(0)
SELECT CASE AS LONG Mode&
   CASE 1,2   ' save string or Save DWord
      IF KClass$="" THEN KClass$="Unknown"
      KC=LEFT$(KClass$, 64)+CHR$(0)
      EMsg&=RegCreateKeyEx(MK&, SB, 0, KC, 0, %KEY_ALL_ACCESS, BYVAL %NULL, NK&, NKR&)
      '    if NKR&=%REG_CREATED_NEW_KEY then  ' a new key is created
   CASE 3,4, 5    ' 3 is get string, 4 get DWORD, 5 is does Key exist
      EMsg&=RegOpenKeyEx(MK&, SB, 0, %KEY_ALL_ACCESS, NK&)
   CASE 6
      EMsg&=RegDeleteKey(MK&, SB)
      IF EMsg&=%ERROR_SUCCESS THEN RV&=1
      EXIT SUB
   CASE ELSE
      EXIT SUB
END SELECT


IF EMsg&=%ERROR_SUCCESS THEN
   SELECT CASE AS LONG Mode&
      CASE 1
         IF RegSetValueEx(NK&, VN, 0, %REG_SZ, VT, LEN(VText$)+1)=%ERROR_SUCCESS THEN
            RV&=1
         END IF
      CASE 2
         IF RegSetValueEx(NK&, VN, 0, %REG_DWORD, VNum, SIZEOF(VNum))=%ERROR_SUCCESS THEN
            RV&=1
         END IF
      CASE 3,4
         DL&=256
         IF RegQueryValueEx(NK&, VN, 0, DT&, DBS, DL&)=%ERROR_SUCCESS THEN
            IF DT&=%REG_SZ THEN
               IF DL&<1 THEN DL&=1
               VText$=LEFT$(DBS, DL&-1)
               RV&=1
            END IF
            IF DT&=%REG_DWORD THEN
               VNum=CVDWD(LEFT$(DBS, 4),1)
               RV&=2
            END IF
            ' msgbox str$(DT&)
         END IF
      CASE 5
         RV&=1       ' Key exists
      CASE ELSE
   END SELECT
   RegClosekey NK&
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_SaveRegString(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, BYVAL VText$) EXPORT10 AS LONG
LOCAL RV&, Dummy AS DWORD
PBVRegistry MKey$, SKey$, KClass$, VName$, VText$, Dummy, 1, RV&
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_SaveRegDWord(BYVAL MKey$, BYVAL SKey$, BYVAL KClass$, BYVAL VName$, BYVAL VNum AS DWORD) EXPORT10 AS LONG
LOCAL RV&, Dummy$
PBVRegistry MKey$, SKey$, KClass$, VName$, Dummy$, VNum, 2, RV&
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ReadReg(BYVAL MKey$, BYVAL SKey$, BYVAL VName$, VText$, VNum AS DWORD) EXPORT10 AS LONG
LOCAL RV&, KClass$
PBVRegistry MKey$, SKey$, KClass$, VName$, VText$, VNum, 3, RV&
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_RegExist(BYVAL MKey$, BYVAL SKey$) EXPORT10 AS LONG
LOCAL RV&, KClass$, VName$, VNum AS DWORD, VText$
PBVRegistry MKey$, SKey$, KClass$, VName$, VText$, VNum, 5, RV&
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_RegDelete(BYVAL MKey$, BYVAL SKey$) EXPORT10 AS LONG
LOCAL RV&, KClass$, VName$, VNum AS DWORD, VText$
PBVRegistry MKey$, SKey$, KClass$, VName$, VText$, VNum, 6, RV&
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

' Does not support {ME}
SUB EZ_DebugForm(BYVAL FormName$) EXPORT10
LOCAL CW&, CH&, SW&, SH&
CW&=App_EZ_CharW
CH&=App_EZ_CharH
EZ_GetScreenSize SW&, SH&

IF FormName$<>"" THEN
   IF App_DebugForm$="" THEN
      App_DebugForm$=FormName$
      App_Debug&=1
      App_EZ_CharW=8
      App_EZ_CharH=16
      EZ_Color -1, -1
      SW&=SW&\8
      SH&=SH&\16
      EZ_Form FormName$, "", "EZGUI Debug :", (SW&-34),(SH&-6), 32, 4, "T_^Z"
      App_DebugHandle&=ezHandle(FormName$,0,0)
      EZ_Color 0, 15
      EZ_UseFont 4
      EZ_Text 100, 0, 0, 32, 4, "", "MSTVE"
      EZ_UseFont -1
      EZ_Color -1, -1
   END IF
END IF

App_EZ_CharW=CW&
App_EZ_CharH=CH&

END SUB

'------------------------------------------------------------------------------

SUB EZ_DPrint(BYVAL D$) EXPORT10
LOCAL N&, D1$, CR$
IF App_Debug&=1 THEN
   N&=ZFormNum(App_DebugForm$)
   IF N&>0 THEN
      CR$=CHR$(13)+CHR$(10)
      REPLACE "|" WITH CR$ IN D$
      REPLACE "'" WITH CHR$(34) IN D$
      D1$=EZ_GetText(App_DebugForm$, 100)
      IF LEN(D1$)>32000 THEN D1$=""
      D1$=D1$+D$+CHR$(13)+CHR$(10)
      EZ_SetText App_DebugForm$, 100, D1$
      EZ_ScrollTo App_DebugForm$, 100, 1,0
   END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_Reg(BYVAL ID&, BYVAL RNum&) EXPORT10
' Your ID Number is:  6163
' Your Registration Number is: 838893985
' Must use these registration codes when compiling your own runtime
IF ID&=6163& THEN
     IF RNum&=838893985& THEN
             APP_EZ_UnRegistered&=0
     END IF
END IF

END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_WinHelp(BYVAL FormName$, BYVAL HelpName$, BYVAL KeyName$, BYVAL HProp$) EXPORT10 AS LONG
LOCAL hWnd AS LONG, RV&, HN AS ASCIIZ*256
LOCAL ID&
RV&=0
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
   HN=HelpName$+CHR$(0)
   SELECT CASE AS CONST$ UCASE$(HProp$)
      CASE "Q", "QUIT"     ' Quit
         RV&=WinHelp(hWnd, HN, %HELP_QUIT, 0)
      CASE "M", "MACRO"    ' Macros
         Keyname$=KeyName$+CHR$(0)
         RV&=WinHelp(hWnd, HN, %HELP_COMMAND, VARPTR(KeyName$))
      CASE "K", "KEY"      ' By key
         Keyname$=KeyName$+CHR$(0)
         RV&=WinHelp(hWnd, HN, %HELP_KEY, STRPTR(KeyName$))
      CASE "I", "ID"       ' By ID
         ID&=INT(VAL(KeyName$))
         RV&=WinHelp(hWnd, HN, %HELP_CONTEXT, ID&)
      CASE "P", "POPUP"       ' By ID
         ID&=INT(VAL(KeyName$))
         RV&=WinHelp(hWnd, HN, %HELP_CONTEXTPOPUP, ID&)
      CASE ELSE    ' Display Finder
         RV&=WinHelp(hWnd, HN, %HELP_FINDER, 0)
   END SELECT
END IF
FUNCTION=RV&
END FUNCTION

GLOBAL App_HHelpLib&
GLOBAL App_HHelpAdd AS DWORD
DECLARE FUNCTION HHelpX(BYVAL hWnd&, BYVAL lpHFile&, BYVAL uCommand&, BYVAL lpDwData&) AS LONG

SUB zDoWebPage(BYVAL FormName$, BYVAL HData$)
     LOCAL RV AS DWORD, zVerb AS ASCIIZ*32, zFile AS ASCIIZ * 1024, zParam AS ASCIIZ *256, zDir AS ASCIIZ *1024
     LOCAL hParent&, SVal&
     zVerb="open"
     zFile=HData$
     zParam=""
     zDir=EZ_AppPath
     hParent&=0
     IF FormName$<>"" THEN hParent&=EZ_Handle(FormName$,0)
     SVal&=%SW_SHOWNORMAL
     IF hParent&=0 THEN SVal&=%SW_SHOWMAXIMIZED
     RV=ShellExecute( hParent&, zVerb,zFile,zParam, zDir,SVal&)
END SUB

SUB EZ_HHelp(BYVAL FormName$, BYVAL HFile$, BYVAL HData$, BYVAL HType$) EXPORT10
     LOCAL hWnd&, lpszFile&, UCommand&, DwData&, hHelpWin&, HT$
     STATIC LoadFlag&
     HT$=TRIM$(UCASE$(HType$))
     IF HT$="W" OR HT$="WEB" THEN
          zDoWebPage FormName$, HData$
          EXIT SUB
     END IF
     IF LoadFlag&=0 THEN
         App_HHelpLib&=LoadLibrary("hhctrl.ocx")
         IF App_HHelpLib&<>0 THEN
             LoadFlag&=1
             App_HHelpAdd=GetProcAddress(App_HHelpLib&, "HtmlHelpA")
         END IF
     END IF
     IF App_HHelpLib&<>0 THEN
          IF App_HHelpAdd<>0 THEN
               hWnd&=ezHandle(FormName$,0,1)
               HData$=TRIM$(HData$)
               lpszFile&=STRPTR(HFile$)
               DwData&=0
               SELECT CASE AS CONST$ HT$
                    CASE ""
                         UCommand&=0
                         DwData&=0
                    CASE "T", "TOPIC"
                         UCommand&=0
                         DwData&=STRPTR(HData$)
                    CASE "I", "ID"
                         UCommand&=15
                         DwData&=VAL(HData$)
                    CASE "K", "KEY"
                         UCommand&=2
                         DwData&=STRPTR(HData$)
                    CASE "Q", "QUIT"
                         hWnd&=0
                         lpszFile&=0
                         UCommand&=18
                    CASE ELSE
                         EXIT SUB
               END SELECT
               CALL DWORD App_HHelpAdd USING HHelpX(hWnd&, lpszFile&,UCommand&, Dwdata&) TO hHelpWin&
          END IF
     END IF
END SUB

SUB ZCleanUpHHelp()
     LOCAL X&
     IF App_HHelpLib&<>0 THEN
          IF App_HHelpAdd<>0 THEN
               ' close all
               CALL DWORD App_HHelpAdd USING HHelpX(0, 0,18, 0) TO X&
          END IF
          FreeLibrary App_HHelpLib&
          App_HHelpLib&=0
     END IF
END SUB


'  Raster Capabilities
'%RC_NONE                                     = 0
'%RC_BITBLT                                   = 1       '  Can do standard BLT.
'%RC_BANDING                                  = 2       '  Device requires banding support
'%RC_SCALING                                  = 4       '  Device requires scaling support
'%RC_BITMAP64                                 = 8       '  Device can support >64K bitmap
'%RC_GDI20_OUTPUT                             = &H10    '  has 2.0 output calls
'%RC_GDI20_STATE                              = &H20
'%RC_SAVEBITMAP                               = &H40
'%RC_DI_BITMAP                                = &H80    '  supports DIB to memory
'%RC_PALETTE                                  = &H100   '  supports a palette
'%RC_DIBTODEV                                 = &H200   '  supports DIBitsToDevice
'%RC_BIGFONT                                  = &H400   '  supports >64K fonts
'%RC_STRETCHBLT                               = &H800   '  supports StretchBlt
'%RC_FLOODFILL                                = &H1000  '  supports FloodFill
'%RC_STRETCHDIB                               = &H2000  '  supports StretchDIBits
'%RC_OP_DX_OUTPUT                             = &H4000
'%RC_DEVBITS                                  = &H8000

TYPE PBVPAGEINFO
    x AS LONG
    y AS LONG
    w AS LONG
    h AS LONG
    aw AS LONG
    ah AS LONG
    xdpi AS LONG
    ydpi AS LONG
    fgc AS LONG
    bgc AS LONG
END TYPE

GLOBAL App_hDevMode AS LONG    ' stores a memory handle
GLOBAL App_hDevNames AS LONG   ' stores a memory handle

GLOBAL App_LastPrintCount AS LONG
GLOBAL App_LastPrintID AS LONG

GLOBAL App_PictureWindow&

'------------------------------------------------------------------------------

SUB EZ_GetAPITextSize(BYVAL TesthDC&, BYVAL hFont&, BYVAL Text$, W!, H!, BYVAL Mode&) EXPORT10
LOCAL hOldFont AS LONG, hDC AS LONG
' LOCAL TM AS TEXTMETRIC
LOCAL TM AS NEWTEXTMETRICEX_SAFE
LOCAL SZ AS SIZEL, RSFlag&, OldSP&, hPrinter&
' LOCAL AW&, AW2&, AH&
W!=0
H!=0
RSFlag&=0
IF Mode&>=10 THEN
    Mode&=Mode&-10
    RSFlag&=1
END IF
IF Mode&=2 THEN
    hPrinter&=ZGetPrnDC
    IF hPrinter&=0 THEN Mode&=0
END IF
IF Mode&=3 THEN
    IF App_CanvasDC&=0 THEN Mode&=0
END IF
'EZ_DPrint "EZ_GetTextSize executes:
'IF (FontNum&>=0) AND (FontNum&<=UBOUND(AppFont)) THEN
'    EZ_DPrint "Font number:"+str$(FontNum&)
    IF Mode&=2 THEN
        hDC = hPrinter&
    ELSEIF Mode&=3 THEN
        hDC = App_CanvasDC&
    ELSE
        IF TesthDC&=0 THEN
            hDC = GetDC(%HWND_DESKTOP)
        ELSE
            hDC=TesthDC&
        END IF
    END IF

    hOldFont=SelectObject(hDC, hFont&)  ' Use Font 4 - MS Sans Serif 8
    GetTextMetrics hDC, TM
    IF RSFlag& THEN
        OldSP&=GetTextCharacterExtra(hDC)
        SetTextCharacterExtra hDC,0
    END IF
    GetTextExtentPoint32 hDC, BYVAL STRPTR(Text$), LEN(Text$), SZ
    IF RSFlag& THEN
        SetTextCharacterExtra hDC,OldSP&
    END IF
    W!=SZ.cx
    H!=TM.tmHeight
    IF Mode&=1 THEN
        ' return as Character size
        W!=W!/App_EZ_CharW
        H!=H!/App_EZ_CharH
    END IF
    SelectObject hDC, hOldFont
    IF Mode&<2 THEN
        IF TesthDC&=0 THEN
            ReleaseDC %HWND_DESKTOP, hDC
        END IF
    END IF
'END IF
END SUB

SUB EZ_GetTextSize(BYVAL FontNum&, BYVAL Text$, W!, H!, BYVAL Mode&) EXPORT10
    LOCAL hFont&
    IF (FontNum&>=0) AND (FontNum&<=UBOUND(AppFont)) THEN
        hFont&=AppFont(FontNum&)
        IF hFont&<>0 THEN
            EZ_GetAPITextSize 0, hFont&, Text$, W!, H!, Mode&
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION App_EZ_PixelSY(BYVAL Mode&)AS LONG
LOCAL hDC AS LONG, PT AS POINTAPI
LOCAL RV&, Y!
IF Mode&=1 THEN
    IF App_LastPrinterDC=0 THEN Mode&=0
END IF
IF Mode&=2 THEN
    IF App_CanvasDC&=0 THEN Mode&=0
END IF
IF Mode&=1 THEN
    PT.x=1
    PT.y=GetDeviceCaps(App_LastPrinterDC, %LOGPIXELSY)
    DPtoLP App_LastPrinterDC, PT, 1
    RV&=PT.y
ELSEIF Mode&=2 THEN
    IF App_ChooseCanvasDPIx&<>0 AND App_ChooseCanvasDPIy&<>0 THEN
        RV&=App_ChooseCanvasDPIy&
    ELSE
        IF App_FixedFontScale&<>0 THEN
            IF GetMapMode(App_CanvasDC&)=%MM_TEXT THEN
                RV&=(App_EZ_CharH/16)*96
            ELSE
                hDC = GetDC(%HWND_DESKTOP)
                Y!=GetDeviceCaps(hDC, %LOGPIXELSY)
                ReleaseDC %HWND_DESKTOP, hDC
                Y!=((App_EZ_CharH/16)*96)/Y!
                RV&=Y!*GetDeviceCaps(App_CanvasDC&, %LOGPIXELSY)
            END IF
        ELSE
            RV&=GetDeviceCaps(App_CanvasDC&, %LOGPIXELSY)
        END IF
    END IF
ELSE
    IF App_FixedFontScale&<>0 THEN
        RV&=(App_EZ_CharH/16)*96
    ELSE
        hDC = GetDC(%HWND_DESKTOP)
        RV&=GetDeviceCaps(hDC, %LOGPIXELSY)
        ReleaseDC %HWND_DESKTOP, hDC
    END IF
END IF
FUNCTION=RV&
END FUNCTION


'------------------------------------------------------------------------------

'GLOBAL App_LastPMapMode AS LONG
'GLOBAL App_LastPWEx AS LONG
'GLOBAL App_LastPWEy AS LONG
'GLOBAL App_LastPVEx AS LONG
'GLOBAL App_LastPVEy AS LONG

GLOBAL App_AbortParent$
GLOBAL App_PrintOK AS LONG


%MCW_EM         =   &H1f???

SUB ZInitFPU()
LOCAL CW AS WORD, TCW AS WORD
   ! FSTCW CW
   TCW=CW AND %MCW_EM
   IF TCW<>%MCW_EM THEN
       CW=CW OR %MCW_EM
       ! FCLEX
       ! FLDCW CW
   END IF
END SUB

GLOBAL App_AutoStartDoc$
GLOBAL App_EZ_AFont_2&
GLOBAL App_EZ_AFGColor_2&
GLOBAL App_EZ_ABGColor_2&

' ---------------------------------------------

SUB EZ_DefAutoStartDoc(BYVAL D$) EXPORT10
IF D$<>"" THEN
    IF App_AutoStartDoc$="" THEN
        App_EZ_AFont_2&=App_EZ_AFont&
        App_EZ_AFGColor_2&=App_EZ_AFGColor&
        App_EZ_ABGColor_2&=App_EZ_ABGColor&
        App_AutoStartDoc$=D$
    END IF
END IF
END SUB

' ---------------------------------------------


'TYPE PRINTER_INFO_4
'  pPrinterName AS ASCIIZ PTR
'  pServerName AS ASCIIZ PTR
'  Attributes AS LONG
'END TYPE

'TYPE OSVERSIONINFO
'  dwOSVersionInfoSize AS LONG
'  dwMajorVersion AS LONG
'  dwMinorVersion AS LONG
'  dwBuildNumber AS LONG
'  dwPlatformId AS LONG
'  szCSDVersion AS ASCIIZ * 128          'Maintenance string for PSS usage
'END TYPE

DECLARE FUNCTION EnumPrintersX (BYVAL dwFlags AS DWORD, BYVAL xname AS DWORD, BYVAL Level AS DWORD, BYVAL pPrinterEnum AS DWORD, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD) AS LONG

%MaxPrinters        =   500

'%PRINTER_ENUM_DEFAULT
'%PRINTER_ENUM_LOCAL
    '%PRINTER_ENUM_CONNECTIONS          ' same
    '%PRINTER_ENUM_FAVORITE             ' same
'%PRINTER_ENUM_NAME
'%PRINTER_ENUM_REMOTE
'%PRINTER_ENUM_SHARED
'%PRINTER_ENUM_NETWORK

FUNCTION EZ_GetPrinter(BYVAL I&) EXPORT10 AS STRING
STATIC PInfo$(), SFlag&
LOCAL hWSP&, PA AS DWORD, NTFlag&, OSVI AS OSVERSIONINFO
IF SFlag&=0 THEN
    REDIM PInfo$(1 TO %MaxPrinters)
    SFlag&=1
END IF
NTFlag&=0
OSVI.dwOSVersionInfoSize=SIZEOF(OSVI)
IF GetVersionEx(OSVI) THEN
    IF OSVI.dwPlatformId>=%VER_PLATFORM_WIN32_NT THEN NTFlag&=1
END IF
IF I&<=1 THEN
    hWSP&=LoadLibrary("WINSPOOL.DRV")
    IF hWSP&<>0 THEN
        PA=GetProcAddress(hWSP&,"EnumPrintersA")
        IF PA<>0 THEN
            LOCAL PFlag AS DWORD, RV&, N&
            LOCAL BL AS DWORD
            LOCAL BLR AS DWORD, PIR AS DWORD
            LOCAL PN AS ASCIIZ PTR
            IF NTFlag& THEN
                DIM NTPI(1 TO %MaxPrinters) AS PRINTER_INFO_4
                BL=SIZEOF(NTPI(1))*%MaxPrinters
                PFlag=%PRINTER_ENUM_LOCAL OR %PRINTER_ENUM_CONNECTIONS
                CALL DWORD PA USING EnumPrintersX(PFlag,0,4, VARPTR(NTPI(1)), BL, BLR, PIR) TO RV&
            ELSE
                DIM PI(1 TO %MaxPrinters) AS PRINTER_INFO_5
                BL=SIZEOF(PI(1))*%MaxPrinters
                PFlag=%PRINTER_ENUM_LOCAL
                CALL DWORD PA USING EnumPrintersX(PFlag,0,5, VARPTR(PI(1)), BL, BLR, PIR) TO RV&
            END IF
            IF RV& THEN
                FOR N&=1 TO %MaxPrinters
                    IF N&<=PIR THEN
                        IF NTFlag& THEN
                            PN=NTPI(N&).pPrinterName
                        ELSE
                            PN=PI(N&).pPrinterName
                        END IF
                        PInfo$(N&)=@PN
                    ELSE
                        PInfo$(N&)=""
                    END IF
                NEXT N&
            END IF
        END IF
        FreeLibrary hWSP&
    END IF
END IF
SELECT CASE AS LONG I&
    CASE -1
        DIM D$
        D$=""
        FOR N&=1 TO %MaxPrinters
            IF PInfo$(N&)<>"" THEN
                IF D$="" THEN
                    D$=PInfo$(N&)
                ELSE
                    D$=D$+App_EZ_DChar$+PInfo$(N&)
                END IF
            END IF
        NEXT N&
        FUNCTION=D$
    CASE 1 TO %MaxPrinters
        FUNCTION=PInfo$(I&)
    CASE ELSE
        FUNCTION=""
END SELECT
END FUNCTION

' ---------------------------------------------------------------------

DECLARE FUNCTION DocumentPropertiesX (BYVAL hWnd AS LONG, BYVAL hPrinter AS DWORD, pDeviceName AS ASCIIZ, pDevModeOutput AS DEVMODE, pDevModeInput AS DEVMODE, BYVAL fMode AS LONG) AS LONG
DECLARE FUNCTION OpenPrinterX (pPrinterName AS ASCIIZ, phPrinter AS DWORD, BYVAL pDefault AS DWORD) AS LONG
DECLARE FUNCTION ClosePrinterX (BYVAL hPrinter AS DWORD) AS LONG

'    PrnColor AS LONG            ' 1 = Monochrome, 2 = Color

FUNCTION ZIsOS_NT() AS LONG
LOCAL OV AS OSVERSIONINFO, RV&
RV&=0
OV.dwOSVersionInfoSize=SIZEOF(OV)
IF GetVersionEx(OV) THEN
    IF OV.dwPlatformId>=%VER_PLATFORM_WIN32_NT THEN RV&=1
    'msgbox str$(OV.dwPlatformId)
END IF
FUNCTION=RV&
END FUNCTION

FUNCTION ZGetPrinterDC(BYVAL PName$, BYVAL hWnd&, EZP AS EZPRINTER, hReturnDevMode&) AS LONG
LOCAL hWSP&, PA AS DWORD, RV&, PN AS ASCIIZ*256, hPrinter AS DWORD
LOCAL OPA AS DWORD, CPA AS DWORD, DVL&, DFlag&, PQ&, CL&
LOCAL hDVM&, DVMA AS DWORD, hDC&
hReturnDevMode&=0
hDC&=0
hWSP&=LoadLibrary("WINSPOOL.DRV")
IF hWSP&<>0 THEN
    PA=GetProcAddress(hWSP&,"DocumentPropertiesA")
    IF PA<>0 THEN
        PN=PName$
        OPA=GetProcAddress(hWSP&,"OpenPrinterA")
        CPA=GetProcAddress(hWSP&,"ClosePrinter")
        IF OPA<>0 AND CPA<>0 THEN
            CALL DWORD OPA USING OpenPrinterX (PN, hPrinter, %NULL) TO RV&
            IF RV&<>0 THEN
                CALL DWORD PA USING DocumentPropertiesX (hWnd&, hPrinter, PN, BYVAL %NULL, BYVAL %NULL, 0) TO DVL&
                hDVM&=GlobalAlloc(%GMEM_MOVEABLE, DVL&)
                DVMA=GlobalLock(hDVM&)
                POKE$ DVMA, STRING$(DVL&,CHR$(0))
                DIM DV AS DEVMODE PTR
                DV=DVMA
                SELECT CASE AS LONG EZP.PrnNameSetup
                    CASE 1
                        DFlag&=%DM_OUT_BUFFER OR %DM_PROMPT
                        CALL DWORD PA USING DocumentPropertiesX (hWnd&, hPrinter, PN, BYVAL DVMA, BYVAL %NULL, DFlag&) TO RV&
                    CASE 2
                        DFlag&=%DM_OUT_BUFFER
                        CALL DWORD PA USING DocumentPropertiesX (hWnd&, hPrinter, PN, BYVAL DVMA, BYVAL %NULL, DFlag&) TO RV&
                        ' customize DEVMODE based on EZP values here
                        IF EZP.PrnOrientation<>0 THEN
                             @DV.dmFields=@DV.dmFields OR %DM_ORIENTATION
                             IF EZP.PrnOrientation<>1 AND EZP.PrnOrientation<>2 THEN EZP.PrnOrientation=1
                             @DV.dmOrientation=EZP.PrnOrientation
                        END IF
                        IF EZP.Copies<=0 THEN EZP.Copies=1
                        @DV.dmFields=@DV.dmFields OR %DM_COPIES
                        @DV.dmCopies=EZP.Copies
                        @DV.dmFields=@DV.dmFields OR %DM_COLLATE
                        IF EZP.CollateFlag<>0 THEN
                            @DV.dmCollate=%DMCOLLATE_TRUE
                        ELSE
                            @DV.dmCollate=%DMCOLLATE_FALSE
                        END IF
                        IF EZP.PrnPaperWidth>0 AND EZP.PrnPaperLength>0 THEN
                            @DV.dmFields=(@DV.dmFields OR %DM_PAPERSIZE OR %DM_PAPERWIDTH OR %DM_PAPERLENGTH)  AND (NOT %DM_FORMNAME)
                            @DV.dmPaperSize=%DMPAPER_USER
                            @DV.dmPaperWidth=EZP.PrnPaperWidth
                            @DV.dmPaperLength=EZP.PrnPaperLength
                        ELSEIF EZP.PrnPaperSize<>0 THEN
                            @DV.dmFields=(@DV.dmFields OR %DM_PAPERSIZE) AND (NOT (%DM_FORMNAME OR %DM_PAPERWIDTH OR %DM_PAPERLENGTH))
                            @DV.dmPaperSize=EZP.PrnPaperSize
                        END IF
                        IF EZP.PrnBin<>0 THEN
                            @DV.dmFields=@DV.dmFields OR %DM_DEFAULTSOURCE
                            @DV.dmDefaultSource=EZP.PrnBin
                        END IF
                        IF EZP.PrnQuality<>0 THEN
                            @DV.dmFields=@DV.dmFields OR %DM_PRINTQUALITY
                            PQ&=EZP.PrnQuality
                            IF PQ&>=1 AND PQ&<=4 THEN PQ&=-PQ&
                            @DV.dmPrintQuality=PQ&
                        END IF
                        IF EZP.PrnColor<>0 THEN
                            @DV.dmFields=@DV.dmFields OR %DM_COLOR
                            CL&=EZP.PrnColor
                            IF CL&<>2 THEN CL&=1
                            @DV.dmColor=CL&
                        END IF
                        IF EZP.PrnDuplex>=1 AND EZP.PrnDuplex<=3 THEN
                              @DV.dmduplex=EZP.PrnDuplex
                        END IF
                        DFlag&=%DM_IN_BUFFER OR %DM_OUT_BUFFER
                        CALL DWORD PA USING DocumentPropertiesX (hWnd&, hPrinter, PN, BYVAL DVMA, BYVAL DVMA, DFlag&) TO RV&
                    CASE ELSE
                        DFlag&=%DM_OUT_BUFFER
                        CALL DWORD PA USING DocumentPropertiesX (hWnd&, hPrinter, PN, BYVAL DVMA, BYVAL %NULL, DFlag&) TO RV&
                END SELECT
'                EZP.PrnName=@DV.dmDeviceName
                EZP.Copies=@DV.dmCopies
                EZP.CollateFlag=@DV.dmCollate
                EZP.PrnOrientation=@DV.dmOrientation
                EZP.PrnPaperWidth=@DV.dmPaperWidth
                EZP.PrnPaperLength=@DV.dmPaperLength
                EZP.PrnPaperSize=@DV.dmPaperSize
                EZP.PrnBin=@DV.dmDefaultSource
                EZP.PrnQuality=@DV.dmPrintQuality
                EZP.PrnColor=@DV.dmColor
                IF RV&=%IDOK THEN
                    IF ZIsOS_NT() THEN
'                        hDC&=CreateDC("WINSPOOL", PN, BYVAL %NULL, BYVAL DVMA)
                        hDC&=CreateDC("WINSPOOL", PN, BYVAL %NULL, BYVAL %NULL)
                    ELSE
'                        hDC&=CreateDC(BYVAL %NULL, PN, BYVAL %NULL, BYVAL DVMA)
                        hDC&=CreateDC(BYVAL %NULL, PN, BYVAL %NULL, BYVAL %NULL)
                    END IF
                    IF hDC&<>0 THEN
                        ResetDC hDC&, BYVAL DVMA
                    END IF
                END IF
                GlobalUnlock hDVM&
                ' --------------------------
                ' GlobalFree hDVM&
                IF hDC&=0 THEN      ' free DEVMODE only if DC fails to be created
                    GlobalFree hDVM&
                    hReturnDevMode&=0
                ELSE
                    hReturnDevMode&=hDVM&
                END IF
                ' --------------------------
                CALL DWORD CPA USING ClosePrinterX (hPrinter) TO RV&
            END IF
        END IF
    END IF
    FreeLibrary hWSP&
END IF
FUNCTION=hDC&
END FUNCTION

' ---------------------------------------------------------------------

FUNCTION ZGetGlobalBlock(BYVAL hData AS LONG) AS STRING
    LOCAL lpAddress AS DWORD, L&
    IF hData<>0 THEN
        lpAddress=GlobalLock(hData)
        IF lpAddress<>0 THEN
            L&=GlobalSize(hData)
            FUNCTION=PEEK$(lpAddress, L&)
            GlobalUnlock hData
        END IF
    END IF
END FUNCTION

SUB ZCalcViewPorts(BYVAL hDC&, BYVAL PUnits&,PWidth&,PHeight&,AWidth&,AHeight&,DPIx&,DPIy&)
    LOCAL PT() AS POINTAPI, PT2() AS POINTAPI, N&
    DIM PT(1 TO 3) AS POINTAPI
    DIM PT2(1 TO 3) AS POINTAPI
    PT(1).x=GetDeviceCaps(hDC&, %PHYSICALWIDTH)
    PT(1).y=GetDeviceCaps(hDC&, %PHYSICALHEIGHT)
    PT(2).x=GetDeviceCaps(hDC&, %HORZRES)
    PT(2).y=GetDeviceCaps(hDC&, %VERTRES)
    PT(3).x=GetDeviceCaps(hDC&, %LOGPIXELSX)
    PT(3).y=GetDeviceCaps(hDC&, %LOGPIXELSY)
    SELECT CASE AS LONG PUnits&
        CASE 1
            SetMapMode hDC&, %MM_LOENGLISH   ' .01 inches
            GOSUB CalcViewPort
        CASE 2
            SetMapMode hDC&, %MM_HIENGLISH   ' .001 inches
            GOSUB CalcViewPort
        CASE 3
            SetMapMode hDC&, %MM_LOMETRIC    ' .1 mm
            GOSUB CalcViewPort
        CASE 4
            SetMapMode hDC&, %MM_HIMETRIC    ' .01 mm
            GOSUB CalcViewPort
        CASE 5
            SetMapMode hDC&, %MM_TWIPS       '  Twips
            GOSUB CalcViewPort
        CASE ELSE
            SetMapMode hDC&, %MM_TEXT        ' pixels
    END SELECT
    PWidth&=PT(1).x
    PHeight&=PT(1).y
    AWidth&=PT(2).x
    AHeight&=PT(2).y
    DPIx&=PT(3).x
    DPIy&=PT(3).y
    EXIT SUB


    CalcViewPort:
        FOR N&=1 TO 3
            PT2(N&)=PT(N&)  ' Copy the Original values
        NEXT N&
        DPtoLP hDC&, PT2(1), 3    ' Convert the copies
        SetMapMode hDC&, %MM_ANISOTROPIC
        ' SetWindowExtEx must be called before SetViewportExtEx !
        SetWindowExtEx hDC&, PT2(1).x, ABS(PT2(1).y), BYVAL %NULL   ' use logical size
        SetWindowOrgEx hDC&, 0, 0, BYVAL %NULL
        SetViewportExtEx hDC&, PT(1).x, PT(1).y, BYVAL %NULL   ' use Real size
        SetViewportOrgEx hDC&, 0, 0, BYVAL %NULL
        DPtoLP hDC&, PT(1), 3
    RETURN
END SUB

GLOBAL App_CurrentPUnits&

FUNCTION EZ_ChoosePrinter(BYVAL FormName$, EZP AS EZPRINTER) EXPORT10 AS LONG
LOCAL PD AS PRINTDLGAPI, hWnd AS LONG, RV&, OKFlag&, TempDC&
LOCAL  N&, PName$, ByNameFlag&, D$
LOCAL hReturnDevMode&

RV&=0
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    OKFlag&=0
    ZCleanUPPrint 0
    ZCleanUPPrint 1     ' make sure DEVMODE cleared just in case
    ' ZInitPrinter
    IF EZP.MinPage=0 THEN EZP.MinPage=EZP.FromPage
    IF EZP.MaxPage=0 THEN EZP.MaxPage=EZP.ToPage
    IF EZP.PrintWhat<0 OR EZP.PrintWhat>3 THEN EZP.PrintWhat=1
    ByNameFlag&=0

    PName$=TRIM$(EZP.PrnName)
    IF PName$<>"" THEN
        IF EZP.PrnVerifyName<>0 THEN
            FOR N&=1 TO %MaxPrinters
                D$=EZ_GetPrinter(N&)
                IF D$=PName$ THEN
                    ByNameFlag&=1
                    EXIT FOR
                ELSEIF D$="" THEN
                    EXIT FOR
                END IF
            NEXT N&
        ELSE
            ByNameFlag&=1
        END IF
    END IF
    IF ByNameFlag&=0 THEN
        PD.lStructSize=SIZEOF(PD)
        PD.hWndOwner=hWnd
        PD.hDevMode=0
        PD.hDevNames=0
        PD.hDC=0
        PD.Flags=%PD_HIDEPRINTTOFILE OR %PD_RETURNDC
        IF EZP.AllowPages=0 THEN
            PD.Flags=PD.Flags OR %PD_NOPAGENUMS
            IF EZP.PrintWhat=2 THEN EZP.PrintWhat=1
        END IF
        IF EZP.AllowSelection=0 THEN
            PD.Flags=PD.Flags OR %PD_NOSELECTION
            IF EZP.PrintWhat=3 THEN EZP.PrintWhat=1
        END IF
        IF EZP.CollateFlag<>0 THEN PD.Flags=PD.Flags OR %PD_COLLATE
        IF EZP.PrintWhat=1 THEN PD.Flags=PD.Flags OR %PD_ALLPAGES
        IF EZP.PrintWhat=2 THEN PD.Flags=PD.Flags OR %PD_PAGENUMS
        IF EZP.PrintWhat=3 THEN PD.Flags=PD.Flags OR %PD_SELECTION
        PD.nFromPage=EZP.FromPage
        PD.nToPage=EZP.ToPage
        PD.nMinPage=EZP.MinPage
        PD.nMaxPage=EZP.MaxPage
        PD.nCopies=EZP.Copies

        PD.hInstance=0
        PD.lCustData=0
        PD.Flags=PD.Flags OR %PD_ENABLEPRINTHOOK
        PD.lpfnPrintHook=CODEPTR(CustDlgProc)
        PD.lpfnSetupHook=0
        PD.lpPrintTemplateName=0
        PD.lpPrintSetupTemplateName=0
        PD.hPrintTemplate=0
        PD.hSetupTemplate=0
        IF EZP.PrintWhat=0 THEN
           PD.Flags=%PD_RETURNDEFAULT OR %PD_RETURNDC
           PD.hDevMode=0
           PD.hDevNames=0
        END IF
        App_CommonDlgParent$=UCASE$(FormName$)
        App_CommonDlgInitType& =  5  ' "{PRINTDLG}"
        App_SystemDlgFreeze=1
        IF PrintDlg(PD) THEN
             OKFlag&=1
             IF PD.hDevNames<>0 THEN
                 LOCAL PNA AS DWORD, PNC AS BYTE PTR, NOffset AS WORD PTR, L&
                 D$=ZGetGlobalBlock(PD.hDevNames)
                 PNA=STRPTR(D$)
                 NOffset=PNA+2
                 PNA=PNA+@NOffset
                 PNC=PNA
                 L&=0
                 DO
                     IF @PNC=0 THEN EXIT DO
                     INCR PNC
                     INCR L&
                     IF L&>256 THEN EXIT DO
                 LOOP
                 PName$=PEEK$(PNA,L&)
                 EZP.PrnName=PName$
             END IF
        END IF
        App_SystemDlgFreeze=0
        App_CommonDlgInitType&=0
        App_CommonDlgHandle_PR& = 0
    ELSE
        ' create DC by name
        hReturnDevMode&=0
        TempDC&=ZGetPrinterDC(PName$, hWnd,EZP, hReturnDevMode&)
        IF TempDC&<>0 THEN
            OKFlag&=1
            PD.hDC=TempDC&
            PD.hDevMode=hReturnDevMode&
            PD.hDevNames=0
        END IF
    END IF
    IF OKFlag& THEN
        ZInitFPU

        App_hDevMode=PD.hDevMode
        App_hDevNames=PD.hDevNames
        ' ZCleanUPPrint 1       ' now cleaned up during EZ_EndDoc or EZ_AbortDoc

        EZP.hDC=PD.hDC
        App_LastPrinterDC=PD.hDC
        App_LastPrintCount=0
        IF ByNameFlag&=0 THEN
            EZP.FromPage=PD.nFromPage
            EZP.ToPage=PD.nToPage
            EZP.MinPage=PD.nMinPage
            EZP.MaxPage=PD.nMaxPage
            EZP.Copies=PD.nCopies
            EZP.PrintWhat=1
            IF (PD.Flags AND %PD_PAGENUMS)=%PD_PAGENUMS THEN EZP.PrintWhat=2
            IF (PD.Flags AND %PD_SELECTION)=%PD_SELECTION THEN EZP.PrintWhat=3
            IF (PD.Flags AND %PD_COLLATE)=%PD_COLLATE THEN EZP.CollateFlag=1 ELSE EZP.CollateFlag=0
        END IF
        ' --------------------
        App_AbortParent$=FormName$
        IF App_AutoStartDoc$<>"" THEN
            EZ_UseFont App_EZ_AFont_2&
            EZ_Color App_EZ_AFGColor_2&, App_EZ_ABGColor_2&
            EZ_StartDoc App_AutoStartDoc$
        END IF
        App_EZ_AFont&=-1
        App_EZ_AFGColor&=-1
        App_EZ_ABGColor&=-1
        App_EZ_AFont_2&=-1
        App_EZ_AFGColor_2&=-1
        App_EZ_ABGColor_2&=-1
        ' --------------------
        ZCalcViewPorts PD.hDC,EZP.PUnits,EZP.PWidth,EZP.PHeight,EZP.AWidth,EZP.AHeight,EZP.DPIx,EZP.DPIy
        App_CurrentPUnits&=EZP.PUnits
        RV&=1
    ELSE
        ZInitFPU
    END IF
END IF
EZ_Color -1,-1
App_WedgeComDProc=0
App_AutoStartDoc$=""
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_StartDoc(BYVAL  DocName$) EXPORT10
LOCAL NM AS ASCIIZ*256, DI AS DOCINFO, FP$
IF App_LastPrinterDC<>0 THEN
    IF App_LastPrintCount=0 THEN
        App_LastPrintCount=1
        IF INSTR(DocName$,"{HIDE}") THEN
            DocName$=REMOVE$(DocName$, "{HIDE}")
            FP$="CNH"
        ELSE
            FP$="CN"
        END IF
        IF LEN(DocName$)>255 THEN DocName$=LEFT$(DocName$,255)
        NM=DocName$+CHR$(0)
        DI.cbSize=SIZEOF(DI)
        DI.lpszDocName=VARPTR(NM)
        DI.lpszOutput=%NULL
        DI.lpszpDataType=%NULL
        DI.fwType=%NULL
        App_LastPrintID=StartDoc(App_LastPrinterDC, DI)
        App_PrintOK=1
        SetAbortProc App_LastPrinterDC, CODEPTR(ZAbortProc)
        ' Allow EZ_Color to work here so color can be set
        EZ_Form "{ABORTDLG}", App_AbortParent$, "Printing - "+DocName$, 0, 0, 30, 6, FP$
    END IF
END IF
IF App_FakePrinterDC<>0 THEN
    App_FakePrinterCount=0
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_AbortDoc() EXPORT10
    IF App_FakePrinterDC<>0 THEN EXIT SUB
    IF App_LastPrinterDC<>0 THEN
        IF App_LastPrintCount>0 THEN
            AbortDoc App_LastPrinterDC
        END IF
        DeleteDC App_LastPrinterDC
        ' -------------------
        ZCleanUPPrint 1         ' DEVMODE must now be unallocated
        ' -------------------
    END IF
    App_LastPrintCount=0
    App_LastPrinterDC=0
    App_EZ_AFont&=-1
    App_EZ_AFGColor&=-1
    App_EZ_ABGColor&=-1
    IF App_PrintOK THEN
        App_PrintOK=0
        EZ_UnloadForm "{ABORTDLG}"
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION ZAbortProc(BYVAL hDC AS LONG, BYVAL ECode AS LONG) AS LONG
LOCAL Msg AS tagMsg, FormName$, CID&, M&, CVal&, Cancel&
IF Ecode THEN
    IF App_PrintOK THEN
        FormName$="{ABORTDLG}"
        CID&=0
        M&=%EZ_PrintError
        CVal&=ECode&
        Cancel&=0
        CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, CID&, M&, CVal&, Cancel&)
        IF Cancel&=0 THEN
             EZ_AbortDoc
        END IF
    END IF
END IF

DO
   IF PeekMessage(Msg,%NULL,0,0, %PM_REMOVE) THEN
      ZProcessMsg Msg
   ELSE
      EXIT DO
   END IF
LOOP
FUNCTION=App_PrintOK
END FUNCTION

'------------------------------------------------------------------------------
GLOBAL App_ResetPrintFlag&

GLOBAL App_EZP AS EZPRINTER PTR

SUB EZ_SetPageAttr(EZP AS EZPRINTER) EXPORT10
    App_ResetPrintFlag&=1
    App_EZP=VARPTR(EZP)
END SUB

SUB ZResetPrintDC(BYVAL hDC&)
    LOCAL DV AS DEVMODE PTR, DVMA AS DWORD
    LOCAL EZP AS EZPRINTER, Flag1&, PQ&, CL&, X&
    IF App_ResetPrintFlag&=0 THEN
        StartPage hDC&
        ZCalcViewPorts hDC&, App_CurrentPUnits&,EZP.PWidth,EZP.PHeight,EZP.AWidth,EZP.AHeight,EZP.DPIx,EZP.DPIy
        EXIT SUB
    END IF
    EZP=@App_EZP
    IF App_hDevMode<>0 THEN
        DVMA=GlobalLock(App_hDevMode)
        IF DVMA<>0 THEN
            DV=DVMA
            @DV.dmFields=0
            IF EZP.PrnOrientation<>0 THEN
                @DV.dmFields=@DV.dmFields OR %DM_ORIENTATION
                IF EZP.PrnOrientation<>1 AND EZP.PrnOrientation<>2 THEN EZP.PrnOrientation=1
                @DV.dmOrientation=EZP.PrnOrientation
            END IF
            IF EZP.PrnPaperWidth>0 AND EZP.PrnPaperLength>0 THEN
                @DV.dmFields=(@DV.dmFields OR %DM_PAPERSIZE OR %DM_PAPERWIDTH OR %DM_PAPERLENGTH)  AND (NOT %DM_FORMNAME)
                @DV.dmPaperSize=%DMPAPER_USER
                @DV.dmPaperWidth=EZP.PrnPaperWidth
                @DV.dmPaperLength=EZP.PrnPaperLength
                Flag1&=1
            ELSEIF EZP.PrnPaperSize<>0 THEN
                @DV.dmFields=(@DV.dmFields OR %DM_PAPERSIZE) AND (NOT (%DM_FORMNAME OR %DM_PAPERWIDTH OR %DM_PAPERLENGTH))
                @DV.dmPaperSize=EZP.PrnPaperSize
                Flag1&=1
            END IF
            IF EZP.PrnBin<>0 THEN
                @DV.dmFields=@DV.dmFields OR %DM_DEFAULTSOURCE
                @DV.dmDefaultSource=EZP.PrnBin
            END IF
            IF EZP.PrnQuality<>0 THEN
                @DV.dmFields=@DV.dmFields OR %DM_PRINTQUALITY
                PQ&=EZP.PrnQuality
                IF PQ&>=1 AND PQ&<=4 THEN PQ&=-PQ&
                @DV.dmPrintQuality=PQ&
            END IF
            IF EZP.PrnColor<>0 THEN
                @DV.dmFields=@DV.dmFields OR %DM_COLOR
                CL&=EZP.PrnColor
                IF CL&<>2 THEN CL&=1
                @DV.dmColor=CL&
            END IF
            IF EZP.PrnDuplex>=1 AND EZP.PrnDuplex<=3 THEN
                @DV.dmduplex=EZP.PrnDuplex
            END IF

            X&=ResetDC(hDC&, BYVAL DVMA)


'            MSGBOX "Printer reset "+STR$(X&)

            IF Flag1& THEN
                EZP.PrnPaperWidth=@DV.dmPaperWidth
                EZP.PrnPaperLength=@DV.dmPaperLength
            END IF
        END IF
        GlobalUnlock App_hDevMode
    END IF
    StartPage hDC&
    ZCalcViewPorts hDC&, EZP.PUnits&,EZP.PWidth,EZP.PHeight,EZP.AWidth,EZP.AHeight,EZP.DPIx,EZP.DPIy
    App_CurrentPUnits&=EZP.PUnits&
    @App_EZP=EZP
    App_ResetPrintFlag&=0
END SUB

SUB EZ_StartPage() EXPORT10
    IF App_FakePrinterDC<>0 THEN
        App_FakePrinterCount=App_FakePrinterCount+1
        EXIT SUB
    END IF
    IF App_LastPrinterDC<>0 THEN
        IF App_LastPrintCount=1 THEN
            App_LastPrintCount=2
            ' The DC seems to be changed here and reset after StartPage
            ' All DC specific data must be reset
            ZResetPrintDC App_LastPrinterDC
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_EndPage() EXPORT10
    IF App_FakePrinterDC<>0 THEN
        EXIT SUB
    END IF
    IF App_LastPrinterDC<>0 THEN
        IF App_LastPrintCount=2 THEN
            App_LastPrintCount=1
            EndPage App_LastPrinterDC
        END IF
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_EndDoc() EXPORT10
    IF App_FakePrinterDC<>0 THEN
        App_FakePrinterCount=0
        App_FakePrinterDC=0
        App_FakePrinterForm$=""
        App_FakePrinterID&=0
        EZ_EndDraw
        App_ChooseCanvasDPIx&=0
        App_ChooseCanvasDPIy&=0
        EXIT SUB
    END IF
    IF App_LastPrinterDC<>0 THEN
        IF App_LastPrintCount=1 THEN
            EndDoc App_LastPrinterDC
        ELSEIF App_LastPrintCount=2 THEN
            EndPage App_LastPrinterDC
            EndDoc App_LastPrinterDC
        END IF
        DeleteDC App_LastPrinterDC
        ' -------------------
        ZCleanUPPrint 1         ' DEVMODE must now be unallocated
        ' -------------------
    END IF
    App_LastPrintCount=0
    App_LastPrinterDC=0
    App_EZ_AFont&=-1
    App_EZ_AFGColor&=-1
    App_EZ_ABGColor&=-1
    IF App_PrintOK THEN
        App_PrintOK=0
        EZ_UnloadForm "{ABORTDLG}"
    END IF
    EZ_Color -1,-1
END SUB

'------------------------------------------------------------------------------

SUB ZCleanUPPrint(BYVAL Mode&)
IF Mode&=0 THEN
    IF App_LastPrinterDC<>0 THEN
        IF App_LastPrintCount>0 THEN
            App_LastPrintCount=0
            EndDoc App_LastPrinterDC
        END IF
        DeleteDC App_LastPrinterDC
        App_LastPrinterDC=0
        App_LastPrintID=0
    END IF
END IF
IF Mode&=1 THEN
    IF App_hDevMode<>0 THEN
        GlobalFree App_hDevMode
        App_hDevMode=0
    END IF
    IF App_hDevNames<>0 THEN
       GlobalFree App_hDevNames
       App_hDevNames=0
    END IF
END IF
END SUB

SUB EZ_DefPoly(BYVAL ShapeInfo$) EXPORT10
    IF INSTR(ShapeInfo$, ANY "[]") THEN
        REPLACE "[" WITH "(" IN ShapeInfo$
        REPLACE "]" WITH ")" IN ShapeInfo$
    END IF
    App_PolyStyle$=ShapeInfo$   ' assume a 1 inch by 1 inch box using decimal values
END SUB

SUB EZ_DefPolyEx(BYVAL ShapeInfo$, BYVAL MaxRange&) EXPORT10
    LOCAL SI$, N&, PTI$, MX!, CT&
    IF MaxRange&>1 AND MaxRange&<1000000 THEN
        MX!=MaxRange&
        IF INSTR(ShapeInfo$, ANY "[]") THEN
            REPLACE "[" WITH "(" IN ShapeInfo$
            REPLACE "]" WITH ")" IN ShapeInfo$
        END IF
        ' convert all the numbers of new coordinates
        SI$=""
        CT&=TALLY(ShapeInfo$, ")")
        FOR N&=1 TO CT&
            PTI$=PARSE$(ShapeInfo$, ")", N&)
            PTI$=REMOVE$(PTI$,"(")
            IF INSTR(PTI$,",") THEN
                SI$=SI$+"("+LTRIM$(STR$(VAL(PARSE$(PTI$,",",1))/MX!))+","+LTRIM$(STR$(VAL(PARSE$(PTI$,",",2))/MX!))+")"
            ELSE
                SI$=SI$+"("+LTRIM$(STR$(VAL(PTI$)/MX!))+")"
            END IF
        NEXT N&
        App_PolyStyle$=SI$   ' assume a 1 inch by 1 inch box
    END IF
END SUB

TYPE EZPolyPT
    X AS LONG
    Y AS LONG
END TYPE

FUNCTION ZDrawPoly(BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL FillFlag&, BYVAL PolyType&) AS LONG
    LOCAL OldPMode&, CT&, N&, PTI$, OKFlag&, BZCT&
    LOCAL DifX&, DifY&, hRgn&
    LOCAL PolyPT!(), PolyXY() AS EZPolyPT
    IF LEN(App_PolyStyle$)>0 THEN
        OKFlag&=0
        CT&=TALLY(App_PolyStyle$, ")")
        SELECT CASE AS LONG PolyType&
            CASE 0,2  ' polyline    and Polyregion
                IF CT&>2 THEN OKFlag&=1
            CASE 1  ' polybezier
                IF CT&>3 THEN
                    OKFlag&=1
                    BZCT&=((CT&\3)*3)+1
                    IF BZCT&>CT& THEN   ' not full sets of points
                        CT&=BZCT&-3     ' go to one less curve and ignore extra points
                    END IF
                END IF
            CASE ELSE
                EXIT FUNCTION
        END SELECT
        IF OKFlag& THEN
            DIM PolyPT!(1 TO 2), PolyXY(1 TO CT&) AS EZPolyPT
            DifX&=(X2&-X1&)+1
            DifY&=(Y2&-Y1&)+1
            FOR N&=1 TO CT&
                PTI$=PARSE$(App_PolyStyle$, ")", N&)
                PTI$=REMOVE$(PTI$,"(")
                IF INSTR(PTI$,",") THEN
                    PolyPT!(1)=VAL(PARSE$(PTI$,",",1))
                    PolyPT!(2)=VAL(PARSE$(PTI$,",",2))
                ELSE
                    PolyPT!(1)=VAL(PTI$)
                    PolyPT!(2)=PolyPT!(1)
                END IF
                PolyXY(N&).X=X1&+(PolyPT!(1)*DifX&)
                PolyXY(N&).Y=Y1&+(PolyPT!(2)*DifY&)
            NEXT N&
            IF PolyType&<>2 THEN
                OldPMode&=GetPolyFillMode(hDC&)
                SetPolyFillMode hDC&, %WINDING
            END IF
            SELECT CASE AS LONG PolyType&
                CASE 0  ' polyline
                    IF FillFlag& THEN
                        POLYGON hDC&, BYVAL VARPTR(PolyXY(1)), CT&
                    ELSE
                        POLYLINE hDC&, BYVAL VARPTR(PolyXY(1)), CT&
                    END IF
                CASE 1  ' polybezier
                    IF FillFlag& THEN
                        IF BeginPath(hDC&)<>0 THEN
                            PolyBezier hDC&, BYVAL VARPTR(PolyXY(1)), CT&
                            EndPath hDC&
                            StrokeAndFillPath hDC&
                        END IF
                    ELSE
                        PolyBezier hDC&, BYVAL VARPTR(PolyXY(1)), CT&
                    END IF
                CASE 2  ' polyregion
                    hRgn&=CreatePolygonRgn(BYVAL VARPTR(PolyXY(1)), CT&,%WINDING)
                CASE ELSE
            END SELECT
            IF PolyType&<>2 THEN
                SetPolyFillMode hDC&,OldPMode&
            END IF
        END IF
    END IF
    FUNCTION=hRgn&  ' only region function returns a value
END FUNCTION


'------------------------------------------------------------------------------

GLOBAL App_UseTheme&
GLOBAL App_UseThemehWnd&


' these globals are for theme routines
DECLARE SUB ezDrawEdge(BYVAL hDC&, R AS RECT, BYVAL Edge&, BYVAL EFlag&)
DECLARE SUB ezDrawFrameControl(BYVAL hDC&, R AS RECT, BYVAL UType&, BYVAL UState&, BYVAL PartID&, BYVAL StateID&, BYVAL TC$)

DECLARE SUB ezCustomObjDraw(BYVAL CurrentDC&, BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&, BYVAL RGB_FG&, BYVAL RGB_BG&)


SUB EZ_DCDraw (BYVAL CurrentDC&, BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&) EXPORT10
LOCAL OldPen&, NewPen&, OldBG&, NewBG&, OldBGMode&, FG&, BG&, RV&, RW&, OldRop2&
LOCAL lastpoint AS POINTAPI, AColorFG&, AColorBG&, DBFlag&, DotsFlag& , RGBFlag&, RGBColorFG&, RGBColorBG&
LOCAL ThemePart&, ThemeState&, TC$
'X1&=ABS(X1&)
'X2&=ABS(X2&)
'Y1&=ABS(Y1&)
'Y2&=ABS(Y2&)
IF DObj&>=0 THEN    ' negative constants can't be OR'ed with %EZ_DOTS
    IF (DObj& AND %EZ_DOTS) = %EZ_DOTS THEN
        DotsFlag&=1
        DObj&=DObj& AND (NOT %EZ_DOTS)
    END IF
    IF DOBj&=5 THEN DObj&=-1    ' return %EZ_XLINE back to its 3.0 value
END IF
SELECT CASE DObj&
     CASE >0
         ' must be a rectangle area
         IF X1&>X2& THEN SWAP X1&, X2&
         IF Y1&>Y2& THEN SWAP Y1&, Y2&
         X2&=X2&+1
         Y2&=Y2&+1
     CASE %EZ_CUSTOBJ TO %EZ_CUSTOBJ+2000
'         ' must be a rectangle area
'         IF X1&>X2& THEN SWAP X1&, X2&
'         IF Y1&>Y2& THEN SWAP Y1&, Y2&
     CASE ELSE
END SELECT
DBFlag&=0
RGBFlag&=App_RGBColorFlag&
RGBColorFG&=App_RGBColorFG&
RGBColorBG&=App_RGBColorBG&
SELECT CASE AS LONG DObj&
    CASE %EZ_CAPA, %EZ_CAPAR
        RGBFlag&=1
        RGBColorFG&=GetSysColor(%COLOR_ACTIVECAPTION)
        RGBColorBG&=GetSysColor(%COLOR_ACTIVECAPTION)
        FillFlag&=1
    CASE %EZ_CAPI, %EZ_CAPIR
        RGBFlag&=1
        RGBColorFG&=GetSysColor(%COLOR_INACTIVECAPTION)
        RGBColorBG&=GetSysColor(%COLOR_INACTIVECAPTION)
        FillFlag&=1
    CASE %EZ_TABBG, %EZ_TABBGF, %EZ_REBARBG
        RGBFlag&=1
        IF DObj&=%EZ_TABBGF THEN
             RGBColorFG&=GetSysColor(%COLOR_3DDKSHADOW)
        ELSE
             RGBColorFG&=GetSysColor(%COLOR_3DFACE)
        END IF
        RGBColorBG&=GetSysColor(%COLOR_3DFACE)
        FillFlag&=1
END SELECT

IF RGBFlag&=0 THEN
    FG&=ZFGColorNum(App_EZ_AFGColor&)
    BG&=ZBGColorNum(App_EZ_ABGColor&)
    IF FG&<>-1 THEN AColorFG&=AppColor(FG&)
    IF BG&<>-1 THEN AColorBG&=AppBrush(BG&)
ELSE
    AColorFG&=RGBColorFG&
    AColorBG&=CreateSolidBrush(RGBColorBG&)
    DBFlag&=1   ' force brush to be deleted
    FG&=1       ' fake out rest of code to use RGB colors
    BG&=1       ' fake out rest of code to use RGB colors
END IF

IF FG&<>-1 THEN
    IF Dobj&<=0 THEN
        NewPen&=CreatePen(%PS_SOLID, PenWidth&, AColorFG&)
    ELSE
        IF DotsFlag&=1 THEN
            NewPen&=CreatePen(%PS_DOT, PenWidth&, AColorFG&)
        ELSE
            NewPen&=CreatePen(%PS_INSIDEFRAME, PenWidth&, AColorFG&)
        END IF
    END IF
    OldPen&=SelectObject(CurrentDC&, NewPen&)
END IF
IF FillFlag& THEN
    OldBGMode&=SetBkMode(CurrentDC&, %OPAQUE)
    IF BG&<>-1 THEN
        NewBG&=AColorBG&
        OldBG&=SelectObject(CurrentDC&, NewBG&)
    END IF
ELSE
    OldBGMode&=SetBkMode(CurrentDC&, %TRANSPARENT)
    NewBG&=GetStockObject(%NULL_BRUSH)
    OldBG&=SelectObject(CurrentDC&, NewBG&)
END IF
IF App_DrawMode&<>0 THEN
    OldROP2&=SetROP2(CurrentDC&,App_DrawMode&)
END IF

SELECT CASE AS LONG DObj&
     CASE -1, 0     ' %EZ_XLine is now 5, but will be changed to -1 above
          ' --------------------------------------------
          RV&=MovetoEX(CurrentDC&, X1&, Y1&,lastpoint)
          RV&=Lineto(CurrentDC&, X2&, Y2&)
          ' --------------------------------------------
          IF DObj&=0 THEN
              RV&=MovetoEX(CurrentDC&, X2&, Y2&,lastpoint)
              RV&=Lineto(CurrentDC&, X1&, Y1&)
          END IF
     CASE 1
          RV&=Rectangle(CurrentDC&, X1&, Y1&, X2&, Y2&)
     CASE 2
          IF App_FixedCorner&<=0 THEN
              RW&=(((X2&-X1&)/8)+((Y2&-Y1&)/8))/2
          ELSE
              RW&=App_FixedCorner&
          END IF
          RV&=RoundRect(CurrentDC&, X1&, Y1&, X2&, Y2&, RW&, RW&)
     CASE 3
          RV&=ELLIPSE(CurrentDC&, X1&, Y1&, X2&, Y2&)
     CASE 4
          PatBlt CurrentDC&, X1&, Y1&, X2&-X1&, Y2&-Y1&, %PATCOPY
     CASE %EZ_FLOODFILL
          ExtFloodFill CurrentDC&, X1&, Y1&, GetPixel(CurrentDC&, X1&, Y1&), %FLOODFILLSURFACE
     CASE %EZ_FLOODFILLB
          DIM BColor&
          IF FG&<>-1 THEN
                BColor&=AColorFG&   ' AppColor(FG&)
          ELSE
                BColor&=FillFlag&
          END IF
          ExtFloodFill CurrentDC&, X1&, Y1&, BColor&, %FLOODFILLBORDER
     CASE %EZ_EDGE_B        ' Theme Aware!
          RW&=%EDGE_BUMP
          GOSUB DrawMyEdge
     CASE %EZ_EDGE_E        ' Theme Aware!
          RW&=%EDGE_ETCHED
          GOSUB DrawMyEdge
     CASE %EZ_EDGE_R        ' Theme Aware!
          RW&=%EDGE_RAISED
          GOSUB DrawMyEdge
     CASE %EZ_EDGE_S        ' Theme Aware!
          RW&=%EDGE_SUNKEN
          GOSUB DrawMyEdge
     CASE %EZ_BTNDEF TO %EZ_REBARBG  ' %EZ_TABBGF     ' Theme Aware!
          GOSUB DrawMyFrame
     CASE %EZ_POLY
          ZDrawPoly CurrentDC&,X1&, Y1&, X2&, Y2&, FillFlag&, 0
     CASE %EZ_POLYBEZ
          ZDrawPoly CurrentDC&,X1&, Y1&, X2&, Y2&, FillFlag&, 1
     CASE %EZ_CUSTOBJ TO %EZ_CUSTOBJ+2000
          ezCustomObjDraw CurrentDC&, DObj&, X1&, Y1&, X2&, Y2&, PenWidth&, FillFlag&, AColorFG&, AColorBG&
     CASE ELSE
         ' do nothing
END SELECT
IF App_DrawMode&<>0 THEN
    IF OldROP2&<>0 THEN
        SetROP2 CurrentDC&,OldROP2&
    END IF
END IF

IF FG&<>-1 THEN
     SelectObject CurrentDC&, OldPen&
     DeleteObject NewPen&
END IF
IF NewBG&<>0 THEN
     SelectObject CurrentDC&, OldBG&
     ' don't delete brush
END IF
IF DBFlag& THEN
    DeleteObject AColorBG&  ' delete RGB brush
END IF
SetBkMode CurrentDC&, OldBGMode&
EXIT SUB

DrawMyEdge:
DIM R AS RECT
R.nLeft=X1&
R.nRight=X2&
R.nTop=Y1&
R.nBottom=Y2&
ezDrawEdge CurrentDC&, R, RW&, %BF_RECT
RETURN

DrawMyFrame:
DIM UType&, UState&
SELECT CASE AS LONG DObj&
    CASE %EZ_BTNDEF
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONPUSH OR %DFCS_MONO
        TC$="BUTTON"
        ThemePart&=1
        ThemeState&=5   ' 2= Hot (focus) 4= disabled , 5 - default
        GOSUB DoDrawFrame
    CASE %EZ_BTNHOT
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONPUSH OR %DFCS_HOT
        TC$="BUTTON"
        ThemePart&=1
        ThemeState&=2   ' 2= Hot (focus) 4= disabled
        GOSUB DoDrawFrame
    CASE %EZ_BTNDIS
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONPUSH OR %DFCS_INACTIVE
        TC$="BUTTON"
        ThemePart&=1
        ThemeState&=4   ' 2= Hot (focus) 4= disabled
        GOSUB DoDrawFrame
    CASE %EZ_BTNUP        ' Theme Aware!
        ' %DFCS_HOT can be added for hot tracking
        ' %DFCS_INACTIVE can be added for disabled
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONPUSH
        TC$="BUTTON"
        ThemePart&=1
        ThemeState&=1   ' 2= Hot (focus) 4= disabled
        GOSUB DoDrawFrame
    CASE %EZ_BTNDN        ' Theme Aware!
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONPUSH OR %DFCS_PUSHED
        TC$="BUTTON"
        ThemePart&=1
        ThemeState&=3   ' 2= Hot (focus) 4= disabled
        GOSUB DoDrawFrame
    CASE %EZ_CHECK_0        ' Theme Aware!
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONCHECK
        TC$="BUTTON"
        ThemePart&=3
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_CHECK_1        ' Theme Aware!
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONCHECK OR %DFCS_CHECKED
        TC$="BUTTON"
        ThemePart&=3
        ThemeState&=5
        GOSUB DoDrawFrame
    CASE %EZ_RADIO_0        ' Theme Aware!
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONRADIO
        TC$="BUTTON"
        ThemePart&=2
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_RADIO_1        ' Theme Aware!
        UType&  =   %DFC_BUTTON
        UState& =   %DFCS_BUTTONRADIO OR %DFCS_CHECKED
        TC$="BUTTON"
        ThemePart&=2
        ThemeState&=5
        GOSUB DoDrawFrame
    CASE %EZ_BULLET
        UType&  =   %DFC_MENU
        UState& =   %DFCS_MENUBULLET
        TC$="BUTTON"
        ThemePart&=0
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE %EZ_MCHECK
        UType&  =   %DFC_MENU
        UState& =   %DFCS_MENUCHECK
        TC$="BUTTON"
        ThemePart&=0
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE %EZ_MARROW
        UType&  =   %DFC_MENU
        UState& =   %DFCS_MENUARROW
        TC$="BUTTON"
        ThemePart&=0
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE %EZ_DROPDN        ' Theme Aware!
        UType&  =   %DFC_SCROLL
        UState& =   %DFCS_SCROLLDOWN
        TC$="SCROLLBAR"
        ThemePart&=1
        ThemeState&=5
        GOSUB DoDrawFrame
    CASE %EZ_DROPUP        ' Theme Aware!
        UType&  =   %DFC_SCROLL
        UState& =   %DFCS_SCROLLUP
        TC$="SCROLLBAR"
        ThemePart&=1
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_DROPLF        ' Theme Aware!
        UType&  =   %DFC_SCROLL
        UState& =   %DFCS_SCROLLLEFT
        TC$="SCROLLBAR"
        ThemePart&=1
        ThemeState&=9
        GOSUB DoDrawFrame
    CASE %EZ_DROPRT        ' Theme Aware!
        UType&  =   %DFC_SCROLL
        UState& =   %DFCS_SCROLLRIGHT
        TC$="SCROLLBAR"
        ThemePart&=1
        ThemeState&=13
        GOSUB DoDrawFrame

    CASE %EZ_XBTNUP        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONCLOSE
        TC$="WINDOW"
        ThemePart&=18
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_XBTNDN        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONCLOSE OR %DFCS_PUSHED
        TC$="WINDOW"
        ThemePart&=18
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_HBTNUP        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONHELP
        TC$="WINDOW"
        ThemePart&=23
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_HBTNDN        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONHELP OR %DFCS_PUSHED
        TC$="WINDOW"
        ThemePart&=23
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_MXBTNUP        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONMAX
        TC$="WINDOW"
        ThemePart&=17
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_MXBTNDN        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONMAX OR %DFCS_PUSHED
        TC$="WINDOW"
        ThemePart&=17
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_MNBTNUP        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONMIN
        TC$="WINDOW"
        ThemePart&=15
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_MNBTNDN        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONMIN OR %DFCS_PUSHED
        TC$="WINDOW"
        ThemePart&=15
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_RBTNUP        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONRESTORE
        TC$="WINDOW"
        ThemePart&=21
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_RBTNDN        ' Theme Aware!
        UType&  =   %DFC_CAPTION
        UState& =   %DFCS_CAPTIONRESTORE OR %DFCS_PUSHED
        TC$="WINDOW"
        ThemePart&=21
        ThemeState&=3
        GOSUB DoDrawFrame
    CASE %EZ_CAPA        ' Theme Aware!
        UType&  =   -1
        UState& =   -1
        TC$="WINDOW"
        ThemePart&=2
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_CAPI        ' Theme Aware!
        UType&  =   -1
        UState& =   -1
        TC$="WINDOW"
        ThemePart&=2
        ThemeState&=2
        GOSUB DoDrawFrame
    CASE %EZ_CAPAR        ' Theme Aware!
        UType&  =   -1
        UState& =   -2
        TC$="WINDOW"
        ThemePart&=3
        ThemeState&=1
        GOSUB DoDrawFrame
    CASE %EZ_CAPIR        ' Theme Aware!
        UType&  =   -1
        UState& =   -2
        TC$="WINDOW"
        ThemePart&=3
        ThemeState&=2
        GOSUB DoDrawFrame
    CASE %EZ_TABBG        ' Theme Aware!
        UType&  =   -1
        UState& =   -1
        TC$="TAB"
        ThemePart&=10
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE %EZ_TABBGF        ' Theme Aware!
        UType&  =   -1
        UState& =   -1
        TC$="TAB"
        ThemePart&=9
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE %EZ_REBARBG      ' Theme Aware!
        UType&  =   -1
        UState& =   -1
        TC$="REBAR"
        ThemePart&=6
        ThemeState&=0
        GOSUB DoDrawFrame
    CASE ELSE
END SELECT
RETURN

DoDrawFrame:
DIM RR AS RECT
RR.nLeft=X1&
RR.nRight=X2&
RR.nTop=Y1&
RR.nBottom=Y2&
ezDrawFrameControl CurrentDC&, RR, UType&, UState&, ThemePart&, ThemeState&, TC$

RETURN

END SUB



'------------------------------------------------------------------------------

FUNCTION ZGetPrnDC() AS LONG
    LOCAL RV&
    RV&=0
    IF App_FakePrinterDC<>0 THEN
        IF App_FakePrinterPage=App_FakePrinterCount THEN
            RV&=App_FakePrinterDC
        END IF
    ELSE
        IF App_LastPrinterDC<>0 THEN
            IF App_LastPrintCount>0 THEN
                RV&=App_LastPrinterDC
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_ActivePrinterDC() EXPORT10 AS LONG
    FUNCTION=ZGetPrnDC
END FUNCTION

SUB EZ_LDraw (BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        EZ_DCDraw hDC&, DObj&, X1&, Y1&, X2&, Y2&, PenWidth&, FillFlag&
    END IF
END SUB


'------------------------------------------------------------------------------

' Bitmap Header Definition
'TYPE BITMAP                             '14 bytes
'  bmType AS LONG
'  bmWidth AS LONG
'  bmHeight AS LONG
'  bmWidthBytes AS LONG
'  bmPlanes AS INTEGER
'  bmBitsPixel AS INTEGER
'  bmBits AS LONG
'END TYPE


'TYPE BITMAPINFOHEADER                   '40 bytes
'  biSize AS LONG
'  biWidth AS LONG
'  biHeight AS LONG
'  biPlanes AS INTEGER
'  biBitCount AS INTEGER
'  biCompression AS LONG
'  biSizeImage AS LONG
'  biXPelsPerMeter AS LONG
'  biYPelsPerMeter AS LONG
'  biClrUsed AS LONG
'  biClrImportant AS LONG
'END TYPE

'TYPE BITMAPINFO
'  bmiHeader AS BITMAPINFOHEADER
'  bmiColors(256) AS RGBQUAD
'END TYPE


SUB EZ_DCScroll(BYVAL CurrentDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL HScrollU&, BYVAL VScrollU&) EXPORT10
LOCAL R1 AS RECT, R2 AS RECT, W&,H&
IF X2&<X1& THEN SWAP X1&,X2&
IF Y2&<Y1& THEN SWAP Y1&,Y2&
R1.nLeft=X1&
R1.nTop=Y1&
R1.nRight=X2&
R1.nBottom=Y2&
W&=(R1.nRight-R1.nLeft)+1
H&=(R1.nBottom-R1.nTop)+1
IF W&>=1 THEN
    IF H&>1 THEN
        IF ABS(HScrollU&)<W& THEN
            IF ABS(VScrollU&)<H& THEN
                R2=R1
                ScrollDC CurrentDC&, HScrollU&, VScrollU&, R1, R2, BYVAL %NULL, BYVAL %NULL
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CScroll(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL HScrollU&, BYVAL VScrollU&) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCScroll App_CanvasDC&, X1&, Y1&, X2&, Y2&, HScrollU&, VScrollU&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CalcPoint (BYVAL AX&,BYVAL AY&,BYVAL AL&,BYVAL ADG&,RX&,RY&) EXPORT10
LOCAL X#, Y#, R#, MFV&, DG&, X1#, Y1#, DG1#
' X#=Center Horizontal Position
' Y#=Center Vertical Position
' R#=Radius of Circle in Pixels
' DM&=Number of degrees to move for next position
X#=AX&
Y#=AY&
R#=AL& ' radius equals line length
MFV&=ADG&
IF MFV&<0 THEN MFV&=0
IF MFV&>360 THEN MFV&=MFV&-360
IF MFV&=0 THEN MFV&=360
SELECT CASE AS LONG MFV&
   CASE 1 TO 89
      X1#=1
      Y1#=-1
      DG&=90-MFV&
   CASE 90
      X1#=R#
      Y1#=0
      DG&=0
   CASE 91 TO 179
      X1#=1
      Y1#=1
      DG&=MFV&-90
   CASE 180
      X1#=0
      Y1#=R#
      DG&=0
   CASE 181 TO 269
      X1#=-1
      Y1#=1
      DG&=270-MFV&
   CASE 270
      X1#=-R#
      Y1#=0
      DG&=0
   CASE 271 TO 359
      X1#=-1
      Y1#=-1
      DG&=MFV&-270
   CASE ELSE
      X1#=0
      Y1#=-R#
      DG&=0
END SELECT
IF DG&<>0 THEN
   DG1#=DG&
   DG1#=DG1#*.01745333
   X1#=X1#*INT(COS(DG1#)*R#)
   Y1#=Y1#*INT(SIN(DG1#)*R#)
END IF
X1#=X#+X1#
Y1#=Y#+Y1#
RX&=INT(X1#)
RY&=INT(Y1#)
END SUB

'------------------------------------------------------------------------------

SUB EZ_DCTilePicture(BYVAL CurrentDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL hBmp&) EXPORT10
LOCAL BW&, BH&, X&,Y&, MemDC AS LONG, AW&, AH&, BMode&
IF GetObjectType(hBmp&)<>%OBJ_BITMAP THEN EXIT SUB
EZ_GetBitmapSize hBmp&, BW&, BH&
IF X1&>X2& THEN SWAP X1&,X2&
IF Y1&>Y2& THEN SWAP Y1&,Y2&
MemDC=CreateCompatibleDC(%NULL)     ' get screen mem DC
SelectObject MemDC, hBmp&
IF App_DrawMode&=0 THEN
    BMode&=%SRCCOPY
ELSE
    BMode&=App_DrawMode&
END IF

FOR Y&=Y1& TO Y2& STEP BH&
    FOR X&=X1& TO X2& STEP BW&
        AW&=(X2&-X&)+1
        IF AW&>BW& THEN AW&=BW&
        AH&=(Y2&-Y&)+1
        IF AH&>BH& THEN AH&=BH&
        BitBlt CurrentDC&, X&,Y&, AW&, AH&,MemDC,0,0,BMode&
    NEXT Y&
NEXT X&
DeleteDC MemDC
END SUB

SUB EZ_CTilePicture(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Pict$) EXPORT10
LOCAL hBmp&
IF App_CanvasDC&<>0 THEN
    hBmp&=EZ_ImageHandle(Pict$)
    IF hBmp&<>0 THEN
        EZ_DCTilePicture App_CanvasDC&, X1&, Y1&, X2&, Y2&, hBmp&
    END IF
END IF
END SUB

SUB EZ_DCDrawImage(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL ImgListNum&, BYVAL ImgIndex&, BYVAL Mode&) EXPORT10
LOCAL RV&, LI&, IStyle&, FG&, AFG&, BG&
IF ImgListNum&>=1 AND ImgListNum&<=UBOUND(App_ImgList) THEN
    IF App_ImgList(ImgListNum&).hImg<>0 THEN
        LI&=ImageList_GetImageCount(App_ImgList(ImgListNum&).hImg)-1
        IF ImgIndex&>=0 AND ImgIndex&<=LI& THEN
            IStyle&=%ILD_TRANSPARENT
            BG&=%CLR_NONE
            FG&=%CLR_NONE
            SELECT CASE AS LONG Mode&
                CASE 1
                    IStyle&=IStyle& OR %ILD_BLEND50
                CASE 2
                    IStyle&=IStyle& OR %ILD_BLEND25
                CASE 3
                    GOSUB GetEZFGColors
                    IStyle&=IStyle& OR %ILD_BLEND50
                CASE 4
                    GOSUB GetEZFGColors
                    IStyle&=IStyle& OR %ILD_BLEND25
                CASE ELSE   ' 0
            END SELECT
            RV&=ImageList_DrawEx(App_ImgList(ImgListNum&).hImg, ImgIndex&, CurrentDC&, X&,Y&,0,0,BG&, FG&, IStyle&)
        END IF
    END IF
END IF
EXIT SUB

GetEZFGColors:
AFG&=ZFGColorNum(App_EZ_AFGColor&)
IF AFG&<>-1 THEN
    FG&=AppColor(AFG&)
ELSE
    FG&=GetSysColor(%COLOR_HIGHLIGHT)
END IF
RETURN

END SUB

SUB EZ_CDrawImage(BYVAL X&, BYVAL Y&, BYVAL ImgListNum&, BYVAL ImgIndex&, BYVAL Mode&) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCDrawImage App_CanvasDC&, X&, Y&, ImgListNum&, ImgIndex&, Mode&
END IF
END SUB

TYPE EZ_DIB_RGB32
    B   AS BYTE
    G   AS BYTE
    R   AS BYTE
    Alpha AS BYTE
END TYPE

DECLARE SUB ExternalFilterX(BYVAL X&, BYVAL Y&, BYVAL LastX&, BYVAL LastY&, BYVAL lpPixel AS DWORD)
' this is the syntax for the external filters
' DECLARE SUB ExternalFilterX(BYVAL X&, BYVAL Y&, BYVAL LastX&, BYVAL LastY&, BYREF P as EZ_DIB_RGB32)

FUNCTION zCalcP(BYVAL P&, BYVAL PMin&, BYVAL PMax&) AS LONG
    IF P&<PMin& THEN P&=PMin&
    IF P&>PMax& THEN P&=PMax&
    FUNCTION=P&
END FUNCTION

SUB zDrawFilter(BYVAL lpDIBPixel AS DWORD, BYVAL BW&, BYVAL BH&, BYVAL FMode&, BYVAL Param1&, BYVAL TColor&)
    LOCAL P AS EZ_DIB_RGB32 PTR, C&
    LOCAL CP AS EZ_DIB_RGB32 PTR
    LOCAL TP AS EZ_DIB_RGB32 PTR, TColorCmp&
    LOCAL lpFilter AS DWORD, lpFilterLabel AS DWORD, lpFilterSub AS DWORD
    LOCAL X&, Y&, Offset&, SL&, MaxV&, MulV&
    REGISTER V&, DV&
    IF FMode&=0 THEN EXIT SUB
    IF TColor&<>-1 THEN
        TColorCmp&=TColor&
        TP=VARPTR(TColorCmp&)
        SWAP @TP.R, @TP.B   ' convert to BGR
    END IF
    ' define the filter call here
    IF FMode&<0 THEN    ' built in filters
        lpFilter=CODEPTR(FilterLabel)
        SELECT CASE AS LONG FMode&
            CASE -1    ' GrayScale
                DV&=6+zCalcP(Param1&,0,32)
                lpFilterLabel=CODEPTR(FilterG)
            CASE -2    ' Invert and Grayscale
                DV&=6+zCalcP(Param1&,0,32)
                lpFilterLabel=CODEPTR(FilterGI)
            CASE -3    ' Red Only
                lpFilterLabel=CODEPTR(FilterRO)
            CASE -4    ' Blue Only
                lpFilterLabel=CODEPTR(FilterBO)
            CASE -5    ' Green Only
                lpFilterLabel=CODEPTR(FilterGO)
            CASE -6    ' Mask Red
                lpFilterLabel=CODEPTR(FilterRM)
            CASE -7    ' Mask Blue
                lpFilterLabel=CODEPTR(FilterBM)
            CASE -8    ' Mask Green
                lpFilterLabel=CODEPTR(FilterGM)
            CASE -9    ' Invert Colors
                lpFilterLabel=CODEPTR(FilterI)
            CASE -10, -12, -14, -16    ' Tint using RGB color
                C&=Param1&
                CP=VARPTR(C&)
                SWAP @CP.R, @CP.B   ' convert to BGR
                Offset&=-127: IF FMode&=-12 THEN Offset&=0
                IF FMode& < -12 THEN lpFilterLabel=CODEPTR(FilterTC2) ELSE lpFilterLabel=CODEPTR(FilterTC)
            CASE -11, -13, -15, -17    ' Invert and Tint using RGB color
                C&=Param1&
                CP=VARPTR(C&)
                SWAP @CP.R, @CP.B   ' convert to BGR
                Offset&=-127: IF FMode&=-13 THEN Offset&=0
                IF FMode&<-13 THEN lpFilterLabel=CODEPTR(FilterTCI2) ELSE lpFilterLabel=CODEPTR(FilterTCI)
            ' cases -10, -11, -12, -13, -14, -15, -16, -17 above
            ' -10 = Tint using Color (Natural)
            ' -12 = Tint using Color (Natural) additive
            ' -14 = Tint using Color
            ' -16 = Tint using Color additive
            ' -11 = Invert and Tint using Color (Natural)
            ' -13 = Invert and Tint using Color (Natural) additive
            ' -15 = Invert and Tint using Color
            ' -17 = Invert and Tint using Color additive
            CASE -18
                lpFilterLabel=CODEPTR(FilterMono)
            CASE -19, -20, -21    ' Convert to GrayScale using 16,8,4 colors
                ' 4 color GrayScale SL& = 6, MaxV&=3, MulV&=64
                ' 8  color GrayScale SL& = 5, MaxV&=7, MulV&=32
                ' 16 color GrayScale SL& = 4, MaxV&=15, MulV&=16
                V&=21+FMode&    ' (2 to 0)
                SL&=4+V&            ' 6,5,4
                MaxV&=(2^(4-V&))-1  ' 3,7,15
                MulV&=2^(4+V&)      ' 64,32,16
                lpFilterLabel=CODEPTR(FilterGSFixed)
            CASE -22        ' water color 256 color (8 bits)
                lpFilterLabel=CODEPTR(FilterWC256)
            CASE ELSE
                EXIT SUB
        END SELECT
    ELSE                ' external filters
        lpFilter=CODEPTR(FilterSub)
        lpFilterSub=0
        ' search filter list for external filter by FMode& # which is 1 to max filter
        EXIT SUB
    END IF
    BW&=BW&-1
    BH&=BH&-1
    P=lpDIBPixel
    IF TColor&=-1 THEN
        FOR Y&=0 TO BH&
            FOR X&=0 TO BW&
                ' modify pixel here
                GOSUB DWORD lpFilter
                INCR P
            NEXT X&
        NEXT Y&
    ELSE
        ' don't modify the transparent color
        FOR Y&=0 TO BH&
            FOR X&=0 TO BW&
                ' modify pixel here
                IF @TP.R<>@P.R OR @TP.G<>@P.G OR @TP.B<>@P.B THEN   ' not transparent color
                    GOSUB DWORD lpFilter
                END IF
                INCR P
            NEXT X&
        NEXT Y&
    END IF
    EXIT SUB

FilterSub:
    CALL DWORD lpFilterSub USING ExternalFilterX(X&, Y&, BW&, BH&, P)
RETURN

FilterLabel:
    GOSUB DWORD lpFilterLabel
RETURN

FilterG:    ' GrayScale
    V&=(@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\DV&  ' DV& = 6 or greater
    @P.R=V&
    @P.G=V&
    @P.B=V&
RETURN

FilterGI:
    @P.R=NOT @P.R   ' invert
    @P.G=NOT @P.G
    @P.B=NOT @P.B
    V&=(@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\DV&    ' grayscale   DV&=6 or greater
    @P.R=V&
    @P.G=V&
    @P.B=V&
RETURN

FilterRO:    ' Red Only
    @P.B=0
    @P.G=0
RETURN

FilterBO:    ' Blue Only
    @P.G=0
    @P.R=0
RETURN

FilterGO:    ' Green Only
    @P.R=0
    @P.B=0
RETURN

FilterRM:    ' Mask Red
    @P.R=0
RETURN

FilterBM:    ' Mask Blue
    @P.B=0
RETURN

FilterGM:   ' Mask Green
    @P.G=0
RETURN

FilterI:    ' Invert color
    @P.R=NOT @P.R
    @P.G=NOT @P.G
    @P.B=NOT @P.B
RETURN

FilterTC:   ' Tint using Color (Natural)
    DV&=((@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\6)+Offset&
    @P.R=MAX(MIN(DV&+@CP.R,255),0)
    @P.G=MAX(MIN(DV&+@CP.G,255),0)
    @P.B=MAX(MIN(DV&+@CP.B,255),0)
RETURN

FilterTCI:  ' Invert and Tint using Color (Natural)
    @P.R=NOT @P.R   ' invert
    @P.G=NOT @P.G
    @P.B=NOT @P.B
    DV&=((@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\6)+Offset&
    @P.R=MAX(MIN(DV&+@CP.R,255),0)
    @P.G=MAX(MIN(DV&+@CP.G,255),0)
    @P.B=MAX(MIN(DV&+@CP.B,255),0)
RETURN

FilterTC2:   ' Tint using Color
    DV&=((@P.R+@P.G+@P.B)\3)+Offset&
    @P.R=MAX(MIN(DV&+@CP.R,255),0)
    @P.G=MAX(MIN(DV&+@CP.G,255),0)
    @P.B=MAX(MIN(DV&+@CP.B,255),0)
RETURN

FilterTCI2:  ' Invert and Tint using Color
    @P.R=NOT @P.R   ' invert
    @P.G=NOT @P.G
    @P.B=NOT @P.B
    DV&=((@P.R+@P.G+@P.B)\3)+Offset&
    @P.R=MAX(MIN(DV&+@CP.R,255),0)
    @P.G=MAX(MIN(DV&+@CP.G,255),0)
    @P.B=MAX(MIN(DV&+@CP.B,255),0)
RETURN

FilterMono:
    V&=(@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\6  ' DV& = 6 or greater
    IF V&>180 THEN V&=255 ELSE V&=0
    @P.R=V&
    @P.G=V&
    @P.B=V&
RETURN

FilterGSFixed:
    V&=(@P.R+@P.R+@P.G+@P.G+@P.G+@P.B)\6  ' DV& = 6 or greater
    SHIFT RIGHT V&, SL&
    IF V&=MaxV& THEN
        V&=255
    ELSE
        V&=V&*MulV&
    END IF
    @P.R=V&
    @P.G=V&
    @P.B=V&
RETURN


FilterWC256:    ' water color 256 color (8 bits)
    IF @P.R<>0 AND @P.R<>255 THEN   ' 8 total choices
        @P.R=((@P.R\43)*43)+21  ' 6 choices
    END IF
    IF @P.G<>0 AND @P.G<>255 THEN   ' 8 total choices
        @P.G=((@P.G\43)*43)+21  ' 6 choices
    END IF
    SELECT CASE AS LONG @P.B    ' 4 choices
        CASE 0 TO 92
            @P.B=0
        CASE 93 TO 164
            @P.B=128
        CASE 165 TO 224
            @P.B=225
        CASE ELSE
            @P.B=255
    END SELECT
RETURN

END SUB

' new internal system draw picture routine and does not use any Globals
' STMode&=App_StretchMode& (or set it manually)
' DRMode&=App_DrawMode& (or set it manually)

SUB zDCDrawPicture(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL STMode&, BYVAL DRMode&, BYVAL FMode&, BYVAL Param1&)
LOCAL R&, RR&, MemDC AS LONG  ', OldhBmp&
LOCAL U&, BH AS BITMAP, Buffer$, BSize&
LOCAL BI AS BITMAPINFO, OldStretchMode&, OldOrigin AS POINTAPI, OFlag&, BMode&
IF hBmp&=0 THEN EXIT SUB
IF GetObjectType(hBmp&)=%OBJ_BITMAP THEN
    RR&=%RC_STRETCHDIB
    R&=GetDeviceCaps(CurrentDC&, %RASTERCAPS) AND RR&
    IF R&=RR& THEN  ' Printer can handle stretching a Bitmap
        GetObject hBmp&, SIZEOF(BH), BH
'        BSize&=((BH.bmWidth+1)*4)*BH.bmHeight   ' (4.0 version added 1 to width, but not needed)
        BSize&=(BH.bmWidth*4)*BH.bmHeight

        ON ERROR RESUME NEXT
        Buffer$=STRING$(BSize&," ")
        ON ERROR GOTO 0
        IF ERR=0 THEN    ' succeeded in creating Buffer !
            MemDC=CreateCompatibleDC(%NULL)     ' get screen mem DC
            ' don't select bitmap into DC when using GetDIBits
            U&=%DIB_RGB_COLORS   ' for Bitmap with RGB colors
            BI.bmiHeader.biSize=SIZEOF(BI.bmiHeader)
            BI.bmiHeader.biWidth=BH.bmWidth
            BI.bmiHeader.biHeight=-BH.bmHeight  ' top down DIB
            BI.bmiHeader.biPlanes=1
            BI.bmiHeader.biBitCount=32      'BH.bmBitsPixel
            BI.bmiHeader.biCompression=%BI_RGB
            BI.bmiHeader.biSizeImage=0
            BI.bmiHeader.biXPelsPerMeter=0
            BI.bmiHeader.biYPelsPerMeter=0
            BI.bmiHeader.biClrUsed=0
            BI.bmiHeader.biClrImportant=0
            GetDIBits MemDC, hBmp&, 0, BH.bmHeight, BYVAL STRPTR(Buffer$), BI, U&
            IF FMode&<>0 THEN zDrawFilter STRPTR(Buffer$),BH.bmWidth,BH.bmHeight, FMode&, Param1&, -1
            IF STMode&<>0 THEN
                IF STMode&=%HALFTONE THEN
                    OFlag&=GetBrushOrgEx(CurrentDC&, OldOrigin)
                END IF
                OldStretchMode&=SetStretchBltMode(CurrentDC&,STMode&)
            END IF

            IF DRMode&=0 THEN
                BMode&=%SRCCOPY
            ELSE
                BMode&=DRMode&
            END IF

            StretchDIBits CurrentDC&, X&, Y&, W&, H&, _
                          0,0, BH.bmWidth, BH.bmHeight, _
                          BYVAL STRPTR(Buffer$), BI, _
                          U&, BMode&
            IF STMode&<>0 THEN
                IF OldStretchMode&<>0 THEN
                    SetStretchBltMode CurrentDC&,OldStretchMode&
                END IF
                IF STMode&=%HALFTONE THEN
                    IF OFlag&<>0 THEN
                        SetBrushOrgEx CurrentDC&, OldOrigin.x, OldOrigin.y, BYVAL %NULL
                    END IF
                END IF
            END IF
            DeleteDC MemDC
        END IF
        Buffer$=""
    END IF
END IF
END SUB

SUB EZ_DCDrawPicture(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&) EXPORT10
    zDCDrawPicture CurrentDC&, X&, Y&, W&, H&, hBmp&, App_StretchMode&, App_DrawMode&, 0, 0
END SUB

SUB EZ_DCDrawPictureEx(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL FMode&, BYVAL Param1&) EXPORT10
    zDCDrawPicture CurrentDC&, X&, Y&, W&, H&, hBmp&, App_StretchMode&, App_DrawMode&, FMode&, Param1&
END SUB

SUB PBVDrawPicture(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$, BYVAL FMode&, BYVAL Param1&)
' PProp$=UCASE$(PProp$)         no properties supported at this time
    EZ_DCDrawPictureEx CurrentDC&, X&, Y&, W&, H&, EZ_ImageHandle(Pict$), FMode&, Param1&
END SUB


'TYPE EZ_DIB_RGB32
'    B   AS BYTE
'    G   AS BYTE
'    R   AS BYTE
'    Alpha AS BYTE
'END TYPE

SUB zSetAlphaBytes(BYVAL lpBits AS DWORD, BYVAL W&, BYVAL H&, BYVAL TColor&, BYVAL AColor25&, BYVAL AColor50&, BYVAL AColor75&)
    LOCAL P AS LONG PTR, CP AS EZ_DIB_RGB32 PTR
    LOCAL C&, TC&(), MX&, TA&(), X&, Y&
    REGISTER I&, A&
    DIM TC&(1 TO 4), TA&(1 TO 4)
'    IF TColor&=-1 AND AColor25&=-1 AND AColor50&=-1 AND AColor75&=-1 THEN EXIT SUB
    MX&=0
    IF TColor&<>-1 THEN
        MX&=MX&+1
        CP=VARPTR(TColor&)
        SWAP @CP.R, @CP.B
        TC&(MX&)=TColor&
        TA&(MX&)=0
    END IF
    IF AColor25&<>-1 THEN
        MX&=MX&+1
        CP=VARPTR(AColor25&)
        SWAP @CP.R, @CP.B
        TC&(MX&)=AColor25&
        TA&(MX&)=64
    END IF
    IF AColor50&<>-1 THEN
        MX&=MX&+1
        CP=VARPTR(AColor50&)
        SWAP @CP.R, @CP.B
        TC&(MX&)=AColor50&
        TA&(MX&)=128
    END IF
    IF AColor75&<>-1 THEN
        MX&=MX&+1
        CP=VARPTR(AColor75&)
        SWAP @CP.R, @CP.B
        TC&(MX&)=AColor75&
        TA&(MX&)=192
    END IF
    W&=W&-1
    H&=H&-1
    P=lpBits

    LOCAL T$

    FOR Y&=0 TO H&
        FOR X&=0 TO W&
            C&=@P
            CP=VARPTR(C&)
            @CP.Alpha=0
            A&=255
            FOR I&=1 TO MX&
                IF C&=TC&(I&) THEN A&=TA&(I&):EXIT FOR
            NEXT I&
            @CP.Alpha=A&
            ' API docs say the RGB bytes must be premultiplied by the alpha value and divided by 255
            ' -------------------------------------------------------------------
            @CP.R=(@CP.R * A&)/255
            @CP.G=(@CP.G * A&)/255
            @CP.B=(@CP.B * A&)/255
            ' -------------------------------------------------------------------
            @P=C&
            INCR P
        NEXT X&
    NEXT Y&
END SUB

SUB zCopyBitmapByFilter(BYVAL hBmp&, BYVAL FMode&, BYVAL Param1&, BYVAL hNewBmp&, BYVAL lpDIB&, BYVAL TColor&, BYVAL AColor25&, BYVAL AColor50&, BYVAL AColor75&)
    LOCAL R&, RR&, MemDC AS LONG  ', OldhBmp&
    LOCAL BH AS BITMAP, Buffer$, BSize&, RV&
    LOCAL BI AS BITMAPINFO, OldStretchMode&, OldOrigin AS POINTAPI, OFlag&, BMode&
    IF hNewBmp&=0 THEN EXIT SUB
    IF hBmp&=0 THEN EXIT SUB
    IF GetObjectType(hBmp&)=%OBJ_BITMAP THEN
        GetObject hBmp&, SIZEOF(BH), BH
        BSize&=(BH.bmWidth*4)*BH.bmHeight
        ON ERROR RESUME NEXT
        Buffer$=STRING$(BSize&," ")
        ON ERROR GOTO 0
        IF ERR=0 THEN    ' succeeded in creating Buffer !
            MemDC=CreateCompatibleDC(%NULL)     ' get screen mem DC
            ' don't select bitmap into DC when using GetDIBits
            BI.bmiHeader.biSize=SIZEOF(BI.bmiHeader)
            BI.bmiHeader.biWidth=BH.bmWidth
            BI.bmiHeader.biHeight=-BH.bmHeight  ' top down dib
            BI.bmiHeader.biPlanes=1
            BI.bmiHeader.biBitCount=32      'BH.bmBitsPixel
            BI.bmiHeader.biCompression=%BI_RGB
            BI.bmiHeader.biSizeImage=0
            BI.bmiHeader.biXPelsPerMeter=0
            BI.bmiHeader.biYPelsPerMeter=0
            BI.bmiHeader.biClrUsed=0
            BI.bmiHeader.biClrImportant=0
            RV&=GetDIBits(MemDC, hBmp&, 0, BH.bmHeight, BYVAL STRPTR(Buffer$), BI, %DIB_RGB_COLORS)
            IF FMode&<>0 THEN
                zDrawFilter STRPTR(Buffer$),BH.bmWidth,BH.bmHeight, FMode&, Param1&, TColor&
                AColor25&=-1
                AColor50&=-1
                AColor75&=-1
            END IF

            ' --------------------------------------------
'            SetStretchBltMode MemDC,%HALFTONE
'            local OldBmp&
'            OldBmp&=SelectObject(MemDC, hNewBmp&)
'            StretchDIBits MemDC, 0, 0, BH.bmWidth, BH.bmHeight,0,0, BH.bmWidth, BH.bmHeight,BYVAL STRPTR(Buffer$), BI,%DIB_RGB_COLORS,%SRCCOPY
'            SelectObject MemDC, OldBmp&
            ' --------------------------------------------

            RV&=SetDIBits(MemDC, hNewBmp&, 0, BH.bmHeight, BYVAL STRPTR(Buffer$), BI, %DIB_RGB_COLORS)
            ' must modify the actual bits in the DIB, rather than GetDIBits buffer which only transfers 24 bits, not 32 for some reason
            IF TColor&<>-1 THEN zSetAlphaBytes lpDIB&,BH.bmWidth,BH.bmHeight, TColor&, AColor25&, AColor50&, AColor75&
            DeleteDC MemDC
        END IF
        Buffer$=""
    END IF
END SUB

FUNCTION EZ_CopyPictToDIB(BYVAL P$, PA&, BYVAL FMode&, BYVAL Param1&, BYVAL TColor&, BYVAL AColor25&, BYVAL AColor50&, BYVAL AColor75&) EXPORT10 AS STRING
    LOCAL hBmp&, RV$, W&, H&
    PA&=0
    hBmp&=EZ_ImageHandle(P$)
    IF hBmp&<>0 THEN
        EZ_GetBitmapSize hBmp&, W&, H&
        RV$=EZ_CreateDIBPicture(32, W&, H&, "", PA&)
        zCopyBitmapByFilter hBmp&, FMode&, Param1&, EZ_ImageHandle(RV$), PA&, TColor&, AColor25&, AColor50&, AColor75&
    END IF
    FUNCTION=RV$
END FUNCTION

' gradient drawing modes
'
'%GRADIENT_FILL_RECT_H   = &H00000000
'%GRADIENT_FILL_RECT_V   = &H00000001
'%GRADIENT_FILL_TRIANGLE = &H00000002
'%GRADIENT_FILL_OP_FLAG  = &H000000ff

DECLARE SUB EZ_GetBitmapInfo(BYVAL hBmp&, W&, H&, PixelBits&, DIBPtr&)

' both AlphaBlend and TransparentBlt use the same function call declare syntax (lpdata means different in each call)
DECLARE FUNCTION AlphaAndTransparentX(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hMemDC&, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL lpData AS DWORD) AS LONG

SUB zDrawSpecial(BYVAL hDC&, BYVAL DrawType&, BYVAL hBmp&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL Param1&, BYVAL STMode&, BYVAL AByteMode&)
    LOCAL hMemDC&, hOldBmp&, RV&, lpData AS DWORD, BW&, BH&, SX2&, SY2&, PixelBits&, DIBPtr&, AFlag&
    LOCAL OldStretchMode&, OldOrigin AS POINTAPI, OFlag&
    STATIC GAFlag&, MSIMGLib AS DWORD, AddAlpha AS DWORD, AddTransparent AS DWORD, AddGradient AS DWORD
    IF DrawType&=0 THEN ' free msimg32.dll if used
        IF MSIMGLib<>0 THEN FreeLibrary MSIMGLib
        EXIT SUB
    END IF
    IF GAFlag&=0 THEN
        GAFlag&=1
        AddAlpha=zGetDLLProcAddress("gdi32.dll", "GdiAlphaBlend")
        IF AddAlpha<>0 THEN
            AddTransparent=zGetDLLProcAddress("gdi32.dll", "GdiTransparentBlt")
            AddGradient=zGetDLLProcAddress("gdi32.dll", "GdiGradientFill")
        ELSE
            MSIMGLib        =LoadLibrary("msimg32.dll")
            IF MSIMGLib<>0 THEN
                AddAlpha        =zGetDLLProcAddress("MSIMG32.dll", "AlphaBlend")
                AddTransparent  =zGetDLLProcAddress("MSIMG32.dll", "TransparentBlt")
                AddGradient     =zGetDLLProcAddress("MSIMG32.dll", "GradientFill")
            ELSE
                GAFlag&=2   ' error API's not found
            END IF
        END IF

    END IF
    IF GAFlag&=1 THEN
        IF hBmp&=0 THEN EXIT SUB
        IF GetObjectType(hBmp&)<>%OBJ_BITMAP THEN EXIT SUB
        SELECT CASE AS LONG DrawType&
            CASE 1  ' alphablend    (Param1& is a value of 0 to 255 for alphablend)
                GOSUB MakeMemDC
                IF Param1&<0 THEN Param1&=0
                IF Param1&>255 THEN Param1&=255
                DIM B AS BYTE PTR
                B=VARPTR(lpData)
                @B[0]=0
                @B[1]=0
                @B[2]=Param1&

                '%AC_SRC_NO_PREMULT_ALPHA = &H01
                '%AC_SRC_NO_ALPHA         = &H02
                '%AC_DST_NO_PREMULT_ALPHA = &H10
                '%AC_DST_NO_ALPHA         = &H20



                @B[3]=AFlag& ' was using zero or one (AFlag& set below)
                CALL DWORD AddAlpha USING AlphaAndTransparentX(hDC&, X&, Y&, W&, H&, hMemDC&, SX&, SY&, SW&, SH&, lpData) TO RV&
                GOSUB FreeMemDC
            CASE 2  ' transparentBlt    (Param1& is an RGB color)
                GOSUB MakeMemDC
                lpData=Param1&
                CALL DWORD AddTransparent USING AlphaAndTransparentX(hDC&, X&, Y&, W&, H&, hMemDC&, SX&, SY&, SW&, SH&, lpData) TO RV&
                GOSUB FreeMemDC
            CASE 3  ' Gradient Fill
            CASE ELSE
        END SELECT
    END IF
    EXIT SUB

MakeMemDC:
    hMemDC&=CreateCompatibleDC(%NULL)
    hOldBmp&=SelectObject(hMemDC&, hBmp&)
    AFlag&=0
    EZ_GetBitmapInfo hBmp&, BW&, BH&, PixelBits&, DIBPtr&
    IF AByteMode& THEN
        IF PixelBits&=32 THEN AFlag&=1      ' AC_SRC_ALPHA
    END IF
    SX2&=BW&-1
    SY2&=BH&-1
    IF SW&<=0 THEN SW&=BW&
    IF SH&<=0 THEN SH&=BH&
    IF SX&<0 THEN SX&=0
    IF SX&>SX2& THEN SX&=SX2&
    IF SY&<0 THEN SY&=0
    IF SY&>SY2& THEN SY&=SY2&
    IF SX&+SW&-1>SX2& THEN SW&=BW&-SX&
    IF SY&+SH&-1>SY2& THEN SH&=BH&-SY&
    ' -------------------------------
    IF STMode&<>0 THEN
        IF STMode&=%HALFTONE THEN
            OFlag&=GetBrushOrgEx(hDC&, OldOrigin)
        END IF
        OldStretchMode&=SetStretchBltMode(hDC&,STMode&)
    END IF
    ' -------------------------------
RETURN

FreeMemDC:
    ' -------------------------------
    IF STMode&<>0 THEN
        IF OldStretchMode&<>0 THEN
            SetStretchBltMode hDC&,OldStretchMode&
        END IF
        IF STMode&=%HALFTONE THEN
            IF OFlag&<>0 THEN
                SetBrushOrgEx hDC&, OldOrigin.x, OldOrigin.y, BYVAL %NULL
            END IF
        END IF
    END IF
    ' -------------------------------
    IF hBmp&<>0 THEN
        SelectObject hMemDC&, hOldBmp&
    END IF
    DeleteDC hMemDC&
RETURN

END SUB

FUNCTION zCVBlendVal(BYVAL V&) AS LONG  ' pass 0 to 100
    FUNCTION=INT(ABS(V&)*2.551)  ' range 0 to 255
END FUNCTION

SUB EZ_DCBlendPicture(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL AFlag&) EXPORT10
    LOCAL AByteMode&
    IF AFlag&<0 THEN AByteMode&=1 ELSE AByteMode&=0
    zDrawSpecial hDC&, 1, hBmp&, X&, Y&, W&, H&, 0,0,0,0, zCVBlendVal(AFlag&), App_StretchMode&,AByteMode&   ' alphablend
END SUB

SUB EZ_DCBlendBlock(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL AFlag&) EXPORT10
    LOCAL AByteMode&
    IF AFlag&<0 THEN AByteMode&=1 ELSE AByteMode&=0
    zDrawSpecial hDC&, 1, hBmp&, X&, Y&, W&, H&, SX&, SY&, SW&, SH&, zCVBlendVal(AFlag&), App_StretchMode&,AByteMode&    ' alphablend
END SUB

SUB EZ_CBlendPicture(BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL P$, BYVAL AFlag&) EXPORT10
    LOCAL AByteMode&
    IF AFlag&<0 THEN AByteMode&=1 ELSE AByteMode&=0
    IF App_CanvasDC&<>0 THEN
        zDrawSpecial App_CanvasDC&, 1, EZ_ImageHandle(P$), X&, Y&, W&, H&, 0,0,0,0, zCVBlendVal(AFlag&), App_StretchMode&,AByteMode&    ' alphablend
    END IF
END SUB

SUB EZ_CBlendBlock(BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL P$, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL AFlag&) EXPORT10
    LOCAL AByteMode&
    IF AFlag&<0 THEN AByteMode&=1 ELSE AByteMode&=0
    IF App_CanvasDC&<>0 THEN
        zDrawSpecial App_CanvasDC&, 1, EZ_ImageHandle(P$), X&, Y&, W&, H&, SX&, SY&, SW&, SH&, zCVBlendVal(AFlag&), App_StretchMode&,AByteMode&    ' alphablend
    END IF
END SUB


SUB EZ_DCDrawTPicture(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL TColor&) EXPORT10
    zDrawSpecial hDC&, 2, hBmp&, X&, Y&, W&, H&, 0,0,0,0, TColor&, App_StretchMode&,0
END SUB

SUB EZ_DCDrawTBlock(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hBmp&, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL TColor&) EXPORT10
    zDrawSpecial hDC&, 2, hBmp&, X&, Y&, W&, H&, SX&, SY&, SW&, SH&, TColor&, App_StretchMode&,0
END SUB

SUB EZ_CDrawTPicture(BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL P$, BYVAL TColor&) EXPORT10
    IF App_CanvasDC&<>0 THEN
        zDrawSpecial App_CanvasDC&, 2, EZ_ImageHandle(P$), X&, Y&, W&, H&, 0,0,0,0, TColor&, App_StretchMode&,0
    END IF
END SUB

SUB EZ_CDrawTBlock(BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL P$, BYVAL SX&, BYVAL SY&, BYVAL SW&, BYVAL SH&, BYVAL TColor&) EXPORT10
    IF App_CanvasDC&<>0 THEN
        zDrawSpecial App_CanvasDC&, 2, EZ_ImageHandle(P$), X&, Y&, W&, H&, SX&, SY&, SW&, SH&, TColor&, App_StretchMode&,0
    END IF
END SUB


'------------------------------------------------------------------------------

SUB EZ_LDrawPicture (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        PBVDrawPicture hDC&, X&, Y&, W&, H&, Pict$, PProp$, 0,0
    END IF
END SUB

SUB EZ_LDrawPictureEx (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$, BYVAL FMode&, BYVAL Param1&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        PBVDrawPicture hDC&, X&, Y&, W&, H&, Pict$, PProp$, FMode&, Param1&
    END IF
END SUB

'SUB WorldScale(BYVAL hDC&, BYVAL XScale!, BYVAL YScale!)
'    LOCAL XF AS XFORM
'    XF.eM11 = XScale!
'    XF.eM12 = 0.0
'    XF.eM21 = 0.0
'    XF.eM22 = YScale!
'    XF.eDx  = 0.0
'    XF.eDy  = 0.0
'    SetWorldTransform hDC&, XF
'END SUB

'SUB WorldShear(BYVAL hDC&, BYVAL XScale!, BYVAL YScale!)
'    LOCAL XF AS XFORM
'    XF.eM11 = 0.0
'    XF.eM12 = XScale!
'    XF.eM21 = YScale!
'    XF.eM22 = 0.0
'    XF.eDx  = 0.0
'    XF.eDy  = 0.0
'    SetWorldTransform hDC&, XF
'END SUB

DECLARE FUNCTION SetWorldTransformX (BYVAL hdc AS LONG, lpXform AS xform) AS LONG

SUB zWorldRotate(BYVAL hDC&, BYVAL Deg!)
    LOCAL XF AS XFORM, Rad!, RV&
    STATIC SW AS DWORD, FFlag&
    IF FFlag&=0 THEN
        SW=zGetDLLProcAddress("GDI32.DLL", "SetWorldTransform")
        FFlag&=1
    END IF
    Rad!=.0174532925199433*Deg!
    XF.eM11 = COS(Rad!)
    XF.eM12 = SIN(Rad!)
    XF.eM21 = -SIN(Rad!)
    XF.eM22 = COS(Rad!)
    XF.eDx  = 0.0
    XF.eDy  = 0.0
    IF SW<>0 THEN
        CALL DWORD SW USING SetWorldTransformX(hDC&, XF) TO RV&
    END IF
END SUB

'  XScale& and YScale& are values from 0 to 100 (percent)
'  RDeg! is a value from 0 to 360 degrees
' SMode& = 1 then make buffer bigger to compensate for rotation of rectangle areas corners
' BMode& =1 or 2 forces BitBlt, instead of transparentBlt
' IF BMode& =2 and scaling used background is painted with TColor& first (causes flicker)

SUB zTransparentRotateBitmap(BYVAL hDC&, BYVAL hBmp&, BYVAL X&, BYVAL Y&, BYVAL RDeg!, BYVAL XScale&, BYVAL YScale&, BYVAL TColor&, BYVAL SMode&, BYVAL BMode&, BYVAL AFlag&)
    LOCAL BW&, BH&, TW&,TH&, XOffset&, YOffset&, hMemDC&
    LOCAL hOldBmp&, hBrush&, hOldBrush&, hMemDC2&, hOldBmp2&, hSDC&, CustFlag&, hMemDC3&, ScaleFlag&, XS!, YS!
    LOCAL hTempBmp&, OldST&, PA&
    LOCAL AByteMode&
    STATIC hBuffer1&, hBuffer2&, BufferW&, BufferH&, PA2&
    ScaleFlag&=0
    IF XScale&>0 AND XScale&<=100 THEN
        IF YScale&>0 AND YScale&<=100 THEN
            ScaleFlag&=1
            XS!=XScale&/100
            YS!=YScale&/100
        END IF
    END IF
    IF hDC&=0 AND hBmp&=0 THEN  ' free default buffer and/or define buffer size
        IF hBuffer1&<>0 THEN
            DeleteObject hBuffer1&
            hBuffer1&=0
            DeleteObject hBuffer2&  ' DIB Buffer
            hBuffer2&=0
            PA2&=0
        END IF
        IF X&>0 AND Y&>0 THEN
            BufferW&=CEIL(SQR((X&*X&)+(Y&*Y&)))
            BufferH&=BufferW&
        END IF
        EXIT SUB
    END IF
    ' --------------------------
    EZ_GetBitmapSize hBmp&, BW&, BH&
    ' --------------------------

'    EZ_DPrint "BW and BH: "+STR$(BW&)+STR$(BH&)

    IF SMode&=1 THEN
        TW&=CEIL(SQR((BW&*BW&)+(BH&*BH&)))  ' C = SQR(A^2+B^2)
        TH&=TW&
        XOffset&=(TW&-BW&)\2
        YOffset&=(TH&-BH&)\2
    ELSE
        TW&=BW&
        TH&=BH&
        XOffset&=0
        YOffset&=0
    END IF

'    EZ_DPrint "TW and TH: "+STR$(TW&)+STR$(TH&)

    hSDC&=GetDC(%NULL)
    hMemDC&=CreateCompatibleDC(hSDC&)
    hMemDC2&=CreateCompatibleDC(hSDC&)
    IF hBuffer1&=0 THEN ' create all the default buffer
        IF BufferW&<=0 THEN BufferW&=128
        IF BufferH&<=0 THEN BufferH&=128
        hBuffer1&=CreateCompatibleBitmap(hSDC&,BufferW&,BufferH&)
        hBuffer2&=CreateNewDib(hSDC&, 32,BufferW&,BufferH&, PA2&)    ' DIB default buffer
    END IF
    CustFlag&=0
    IF TW&<=BufferW& AND TH&<=BufferH& THEN
        IF BMode&<=2 THEN
            hTempBmp&=hBuffer1&
        ELSE
            hTempBmp&=hBuffer2&     ' use DIB buffer
            PA&=PA2&    ' need default buffer pointer
        END IF
    ELSE
        IF BMode&<=2 THEN
            hTempBmp&=CreateCompatibleBitmap(hSDC&,TW&,TH&)
        ELSE
            ' alphablending requires a 32 bit DIB Buffer
            hTempBmp&=CreateNewDib(hSDC&, 32, TW&, TH&, PA&)
        END IF
        CustFlag&=1
    END IF

    ReleaseDC %NULL, hSDC&
    AByteMode&=0
    IF BMode&=3 OR BMode&=4 THEN
        IF AFlag&<0 THEN AByteMode&=1   ' use pixel alpha bytes
    END IF

    hOldBmp2&=SelectObject(hMemDC2&, hBmp&)
    hOldBmp&=SelectObject(hMemDC&, hTempBmp&)
    GOSUB FillBufferColor
    SetGraphicsMode hMemDC&, %GM_ADVANCED
    SetMapMode hMemDC&, %MM_TEXT
    ' ----------------------------
    zWorldRotate hMemDC&, RDeg!
    ' ----------------------------
    SetViewPortOrgEx hMemDC&, TW&\2, TH&\2, BYVAL %NULL
    BitBlt hMemDC&, XOffset&-(TW&\2), YOffset&-(TH&\2), BW&, BH&,hMemDC2&, 0,0, %SRCCOPY    ' copy to temp bitmap
    SetViewPortOrgEx hMemDC&, 0, 0, BYVAL %NULL
    zWorldRotate hMemDC&, 0
    SetGraphicsMode hMemDC&, %GM_COMPATIBLE
    X&=X&-XOffset&
    Y&=Y&-YOffset&
    IF ScaleFlag& THEN
        IF BMode&=2 OR BMode&=4 THEN
            GOSUB FillBufferColor2
        END IF
        BW&=XS!*TW&
        BH&=YS!*TH&
        X&=X&+INT(((TW&-BW&)/2))
        Y&=Y&+INT(((TH&-BH&)/2))
    ELSE
        BW&=TW&
        BH&=TH&
    END IF
    IF BMode&=1 THEN
        IF ScaleFlag& THEN
            OldST&=SetStretchBltMode(hDC&, App_StretchMode&)
            StretchBlt hDC&, X&, Y&, BW&, BH&,hMemDC&, 0,0, TW&, TH&, %SRCCOPY
            SetStretchBltMode hDC&,OldST&
            IF App_StretchMode&=%HALFTONE THEN
                SetBrushOrgEx hDC&,0,0, BYVAL %NULL ' only needed after setting %HALFTONE
            END IF
        ELSE
            BitBlt hDC&, X&, Y&, TW&, TH&,hMemDC&, 0,0, %SRCCOPY
        END IF
        SelectObject hMemDC&, hOldBmp&
   ELSE
       SELECT CASE AS LONG BMode&
            CASE 0,2    ' transparentBlt
                SelectObject hMemDC&, hOldBmp&
                zDrawSpecial hDC&, 2, hTempBmp&, X&, Y&, BW&, BH&, 0,0,TW&,TH&, TColor&, App_StretchMode&,0
            CASE 3,4    ' Alphablend
                SelectObject hMemDC&, hOldBmp&
                zDrawSpecial hDC&, 1, hTempBmp&, X&, Y&, BW&, BH&, 0,0,TW&,TH&, zCVBlendVal(AFlag&), App_StretchMode&,AByteMode&
            CASE ELSE
        END SELECT
    END IF
    SelectObject hMemDC2&, hOldBmp2&
    IF CustFlag& THEN
        DeleteObject hTempBmp&
    END IF
    DeleteDC hMemDC&
    DeleteDC hMemDC2&
    EXIT SUB

FillBufferColor:
    hBrush&=CreateSolidBrush(TColor&)
    hOldBrush&=SelectObject(hMemDC&,hBrush&)
    PatBlt hMemDC&,0,0,TW&, TH&,%PATCOPY    ' fill with T color
    SelectObject hMemDC&, hOldBrush&
    DeleteObject hBrush&
    IF AByteMode& THEN
        IF PA&<>0 THEN
            IF CustFlag& THEN
                zSetAlphaBytes PA&, TW&, TH&, TColor&,-1,-1,-1
            ELSE
                zSetAlphaBytes PA&, BufferW&, BufferH&, TColor&,-1,-1,-1
            END IF
        END IF
    END IF
RETURN

FillBufferColor2:
    hBrush&=CreateSolidBrush(TColor&)
    hOldBrush&=SelectObject(hDC&,hBrush&)
    PatBlt hDC&,X&,Y&,TW&, TH&,%PATCOPY    ' fill with T color
    SelectObject hDC&, hOldBrush&
    DeleteObject hBrush&
RETURN
END SUB

SUB EZ_DefRotateBuffer(BYVAL W&, BYVAL H&) EXPORT10
    zTransparentRotateBitmap 0, 0,W&,H&,0,0,0,0,0,0,0
END SUB

'  XScale& and YScale& are values from 0 to 100 (percent)
'  RDeg! is a value from 0 to 360 degrees
' SMode& = 1 then make buffer bigger to compensate for rotation of rectangle areas corners
' BMode& =1 or 2 forces BitBlt, instead of transparentBlt
' IF BMode& =2 and scaling used background is painted with TColor& first (causes flicker)

' Properties are:
' T - Transparent Draw (otherwise BitBlt)
' F - Fill extra background if sized smaller
' + - make rotate buffer larger to compensate for rectangle corners

SUB zFreeRotateBuffers()
    zTransparentRotateBitmap 0,0,0,0,0,0,0,0,0,0,0
END SUB

SUB zDCRotateScalePicture(BYVAL hDC&, BYVAL hBmp&, BYVAL X&, BYVAL Y&, BYVAL RDeg!, BYVAL XScale&, BYVAL YScale&, BYVAL TColor&,BYVAL RProp$, BYVAL AFlag&)
    LOCAL SMode&, BMode&
    IF hBmp&=0 THEN EXIT SUB
    IF GetObjectType(hBmp&)=%OBJ_BITMAP THEN
        IF INSTR(RProp$,"T") THEN BMode&=0 ELSE BMode&=1
        IF BMode&=1 THEN
            IF INSTR(RProp$,"F") THEN BMode&=2
        END IF
        IF INSTR(RProp$,"+") THEN SMode&=1 ELSE SMode&=0
        IF INSTR(RProp$,"A") THEN
            BMode&=3
            IF INSTR(RProp$,"F") THEN BMode&=4
        END IF
        zTransparentRotateBitmap hDC&, hBmp&, X&, Y&, RDeg!, XScale&, YScale&, TColor&, SMode&, BMode&,AFlag&
    END IF
END SUB

SUB EZ_DCRotateScalePicture(BYVAL hDC&, BYVAL hBmp&, BYVAL X&, BYVAL Y&, BYVAL RDeg!, BYVAL XScale&, BYVAL YScale&, BYVAL TColor&,BYVAL RProp$) EXPORT10
    LOCAL AFLag&, P&
    RProp$=UCASE$(RProp$)
    P&=INSTR(RProp$,"A")
    IF P&<>0 THEN
        AFlag&=VAL(TRIM$(MID$(RProp$,P+1)))
    END IF
    zDCRotateScalePicture hDC&, hBmp&, X&, Y&, RDeg!, XScale&, YScale&, TColor&,RProp$,AFlag&
END SUB

SUB EZ_CRotateScalePicture(BYVAL P$, BYVAL X&, BYVAL Y&, BYVAL RDeg!, BYVAL XScale&, BYVAL YScale&, BYVAL TColor&,BYVAL RProp$) EXPORT10
    IF App_CanvasDC&<>0 THEN
        EZ_DCRotateScalePicture App_CanvasDC&, EZ_Imagehandle(P$), X&, Y&, RDeg!, XScale&, YScale&, TColor&, RProp$
    END IF
END SUB

'------------------------------------------------------------------------------
%EZ_MaxLineWidth    =   8

SUB EZ_SetPrintFormat(BYVAL Mode&, BYVAL Par1&, BYVAL Par2&, BYVAL Par3&, BYVAL Par4&) EXPORT10
SELECT CASE AS LONG Mode&
    CASE 0,1,2,3
        App_DrawTextFormat&=Mode&
        App_Par1&=Par1&
        App_Par2&=Par2&
        App_Par3&=Par3&
        App_Par4&=Par4&
    CASE ELSE
END SELECT
END SUB

'------------------------------------------------------------------------------

SUB EZ_DCPrintVText(BYVAL hMyDC&, BYVAL T$, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL RFlag&) EXPORT10
    LOCAL X&, Y&, AW!, AH!
    EZ_GetTextSize EZ_Font, T$, AW!, AH!,0
    IF RFlag&=1 THEN
        X&=X2&-(((X2&-X1&+1)-AH!)/2)
        Y&=Y1&+(((Y2&-Y1&+1)-AW!)/2)
    ELSE
        X&=X1&+(((X2&-X1&+1)-AH!)/2)
        Y&=Y2&-(((Y2&-Y1&+1)-AW!)/2)
    END IF
    EZ_SetPrintFormat 0,0,0,0,0
    EZ_DCPrint hMyDC&, X&,Y&, T$
END SUB

'------------------------------------------------------------------------------

SUB EZ_DCPrint(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL MyText$) EXPORT10
LOCAL OldhFont&, OldFG&, OldBG&, OldBGMode&, FG&, BG&, BG2&, OldBrush&, OldPen&
LOCAL LW&, RC AS RECT, RC2 AS RECT, TFormat&, VCFlag&, OldTFormat&
IF App_EZ_AFont&>=0 AND App_EZ_AFont&<=UBOUND(AppFont) THEN
    OldhFont&=SelectObject(CurrentDC&, AppFont(App_EZ_AFont&))
END IF
FG&=ZFGColorNum(App_EZ_AFGColor&)
IF App_DrawTextFormat&=0 THEN
    BG&=ZFGColorNum(App_EZ_ABGColor&)   ' uses FG test so no Patterns returned
ELSE
    BG&=-1
END IF
IF FG&<>-1 THEN
    OldFG&=SetTextColor(CurrentDC&,AppColor(FG&))
    IF OldFG&=%CLR_INVALID THEN FG&=-1
END IF
IF BG&<>-1 THEN
    OldBG&=SetBkColor(CurrentDC&,AppColor(BG&))
    IF OldBG&=%CLR_INVALID THEN
        BG&=-1
        OldBGMode&=SetBkMode(CurrentDC&, %TRANSPARENT)
    ELSE
        OldBGMode&=SetBkMode(CurrentDC&, %OPAQUE)
    END IF
ELSE
    OldBGMode&=SetBkMode(CurrentDC&, %TRANSPARENT)
END IF
SELECT CASE AS LONG App_DrawTextFormat&
    CASE 0
        TextOut CurrentDC&, X&, Y&, STRPTR(MyText$), LEN(MyText$)
    CASE 1
        LW&=App_Par1&
        IF LW&<1 THEN LW&=1
        IF LW&>%EZ_MaxLineWidth THEN LW&=%EZ_MaxLineWidth
        IF FG&<>-1 THEN
            OldPen&=SelectObject(CurrentDC&, CreatePen(%PS_SOLID, LW&,AppColor(FG&)))
        END IF
        BG2&=ZBGColorNum(App_EZ_ABGColor&)
        IF BG2&<>-1 THEN
            OldBrush&=SelectObject(CurrentDC&, AppBrush(BG2&))
        ELSE
            OldBrush&=SelectObject(CurrentDC&, GetStockObject(%NULL_BRUSH))
        END IF
        BeginPath CurrentDC&
        TextOut CurrentDC&, X&, Y&, STRPTR(MyText$), LEN(MyText$)
        Endpath CurrentDC&
        IF FG&=-1 THEN
            FillPath  CurrentDC&
        ELSE
            StrokeAndFillPath CurrentDC&
        END IF
        IF OldBrush&<>0 THEN SelectObject CurrentDC&, OldBrush&
        IF OldPen&<>0 THEN SelectObject CurrentDC&, OldPen&
    CASE 2,3
        TFormat&=0
        IF INSTR(MyText$, CHR$(13)+CHR$(10))=0 THEN
            IF (App_Par3& AND %EZ_Top)=%EZ_Top THEN TFormat&=TFormat& OR %DT_TOP
            IF (App_Par3& AND %EZ_Bottom)=%EZ_Bottom THEN TFormat&=TFormat& OR %DT_BOTTOM
            IF (App_Par3& AND %EZ_VCenter)=%EZ_VCenter THEN TFormat&=TFormat& OR %DT_VCENTER
            IF TFormat&<>0 THEN TFormat&=TFormat& OR %DT_SINGLELINE
        ELSE
            IF (App_Par3& AND %EZ_VCenter)=%EZ_VCenter THEN
                ' force recalculate the rectangle and position
                VCFlag&=1
            END IF
        END IF
        IF (App_Par3& AND %EZ_Left)=%EZ_Left THEN TFormat&=TFormat& OR %DT_LEFT
        IF (App_Par3& AND %EZ_Right)=%EZ_Right THEN TFormat&=TFormat& OR %DT_RIGHT
        IF (App_Par3& AND %EZ_Center)=%EZ_Center THEN TFormat&=TFormat& OR %DT_CENTER
        IF App_Par4&<>0 THEN
            TFormat&=TFormat& OR App_Par4&
        END IF
        IF TFormat&=0 THEN TFormat&=%DT_CENTER
        GOSUB DrawTextByRect
    CASE ELSE
        TextOut CurrentDC&, X&, Y&, STRPTR(MyText$), LEN(MyText$)
END SELECT
IF App_EZ_AFont&>=0 AND App_EZ_AFont&<=UBOUND(AppFont) THEN
    SelectObject CurrentDC&, OldhFont&
'    IF App_PictureWindow&<>0 THEN
'        SelectObject WDC&, OldhFontW&
'        ReleaseDC App_PictureWindow&, WDC&
'    END IF
END IF
IF FG&<>-1 THEN
    SetTextColor CurrentDC&, OldFG&
END IF
IF BG&<>-1 THEN
    SetBkColor CurrentDC&, OldBG&
END IF
SetBkMode CurrentDC&, OldBGMode&
EXIT SUB

DrawTextByRect:
RC.nLeft=X&
RC.nTop=Y&
IF App_DrawTextFormat&=3 THEN
    RC.nRight=RC.nLeft+App_Par1&
    RC.nBottom=RC.nTop+App_Par2&
ELSE
    RC.nRight=App_Par1&+1
    RC.nBottom=App_Par2&+1
END IF
IF RC.nLeft>RC.nRight THEN RC.nRight=RC.nLeft+1
IF RC.nTop>RC.nBottom THEN RC.nBottom=RC.nTop+1
IF VCFlag& THEN
    RC2=RC
    OldTFormat&=TFormat&
    TFormat&=TFormat& OR %DT_CALCRECT
    Drawtext CurrentDC&, STRPTR(MyText$), LEN(MyText$), RC, TFormat&
    TFormat&=OldTFormat&
    RC2.nTop=RC2.nTop+((RC2.nBottom-RC.nBottom)/2)
    RC=RC2
END IF
Drawtext CurrentDC&, STRPTR(MyText$), LEN(MyText$), RC, TFormat&
RETURN

END SUB

'------------------------------------------------------------------------------
GLOBAL App_hTempDC&
GLOBAL App_hTempWnd&
'GLOBAL App_IsDCCommon&

FUNCTION EZ_StartWindowDraw(BYVAL Form$, BYVAL ID&, BYVAL DProp$) EXPORT10 AS LONG
    LOCAL hWnd&, RV&, DCFlag&, hRgn&, CS&
    IF App_hTempDC&=0 THEN
        DCFlag&=%DCX_CACHE    ' override CS_OWNDC , CS_CLASSDC
        hWnd&=ezHandle(Form$, ID&,1)
        DProp$=UCASE$(DProp$)
        IF INSTR(DProp$,"W") THEN DCFlag&=DCFlag& OR %DCX_WINDOW
        IF INSTR(DProp$,"P") THEN DCFlag&=DCFlag& OR %DCX_PARENTCLIP
        IF INSTR(DProp$,"C") THEN DCFlag&=DCFlag& OR %DCX_CLIPCHILDREN
        IF INSTR(DProp$,"K") THEN DCFlag&=DCFlag& OR %DCX_CLIPSIBLINGS
        RV&=GetDCEx(hWnd&, hRgn&, DCFlag&)
        App_hTempDC&=RV&
        App_hTempWnd&=hWnd&

        ' don't need this because of %DCX_CACHE
'        App_IsDCCommon&=1
'        IF hWnd&<>0 THEN
'             CS&=GetClassLong(hWnd&, %GCL_STYLE)
'             IF (CS& AND %CS_OWNDC)=%CS_OWNDC THEN App_IsDCCommon&=0
'             IF (CS& AND %CS_CLASSDC)=%CS_CLASSDC THEN App_IsDCCommon&=0
'        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_EndWindowDraw() EXPORT10
    IF App_hTempDC&<>0 THEN
'        IF App_IsDCCommon& THEN ReleaseDC App_hTempWnd&, App_hTempDC&
        ReleaseDC App_hTempWnd&, App_hTempDC&
        App_hTempDC&=0
        App_hTempWnd&=0
    END IF
END SUB

SUB EZ_DCCopyBlock(BYVAL hDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hDCDest&, BYVAL DX&, BYVAL DY&) EXPORT10
    LOCAL RCap1&, RCap2&, BMode&
    RCap1&=GetDeviceCaps(hDC&, %RASTERCAPS) AND %RC_BITBLT
    RCap2&=GetDeviceCaps(hDCDest&, %RASTERCAPS) AND %RC_BITBLT
    IF RCap1&<>0 AND RCap2&<>0 THEN
        IF App_DrawMode&=0 THEN
            BMode&=%SRCCOPY
        ELSE
            BMode&=App_DrawMode&
        END IF
        BitBlt hDCDest&, DX&, DY&, W&, H&, hDC&, X&, Y&, BMode&
    END IF
END SUB

SUB EZ_LPrint (BYVAL X&, BYVAL Y&, BYVAL MyText$) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        EZ_DCPrint hDC&, X&, Y&, MyText$
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_LDrawTurtle(BYVAL tbuffer$, BYVAL X1&, BYVAL Y1&, BYVAL W&, BYVAL H&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        EZ_DCDrawTurtle hDC&, tbuffer$, X1&, Y1&, W&, H&
    END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_PageSetup(BYVAL FormName$, EZP AS EZPAGE) EXPORT10 AS LONG
LOCAL PSD AS tagPSD, hWnd AS LONG
LOCAL MVal&, RV&
RV&=0
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    PSD.lStructSize=SIZEOF(PSD)
    PSD.hwndOwner=hWnd
    PSD.hDevMode=0
    PSD.hDevNames=0

    IF EZP.UseDefaultMargins THEN
        PSD.Flags=%PSD_DEFAULTMINMARGINS
    ELSE
        PSD.Flags=%PSD_MARGINS
        IF EZP.UseMetric THEN MVal&=100 ELSE MVal&=1000
        PSD.rtMargin.nLeft=INT(EZP.LeftMargin*MVal&)
        PSD.rtMargin.nTop=INT(EZP.TopMargin*MVal&)
        PSD.rtMargin.nRight=INT(EZP.RightMargin*MVal&)
        PSD.rtMargin.nBottom=INT(EZP.BottomMargin*MVal&)
    END IF
    IF EZP.DisableMargins THEN
        PSD.Flags=%PSD_DEFAULTMINMARGINS OR %PSD_DISABLEMARGINS
    END IF
    IF EZP.UseMetric THEN
       PSD.Flags=PSD.Flags OR %PSD_INHUNDREDTHSOFMILLIMETERS
    ELSE
       PSD.Flags=PSD.Flags OR %PSD_INTHOUSANDTHSOFINCHES
    END IF

    PSD.hInstance=0
    PSD.lCustData=0
    PSD.Flags=PSD.Flags OR %PSD_ENABLEPAGESETUPHOOK
    PSD.lpfnPageSetupHook=CODEPTR(CustDlgProc)
    PSD.lpfnPagePaintHook=0
    PSD.lpPageSetupTemplateName=0
    PSD.hPageSetupTemplate=0
    App_CommonDlgParent$=UCASE$(FormName$)
    App_CommonDlgInitType& =  6  ' "{PAGEDLG}"
    App_SystemDlgFreeze=1
    IF PageSetupDlg(PSD) THEN
        ZInitFPU

        App_hDevMode=PSD.hDevMode
        App_hDevNames=PSD.hDevNames

        ZCleanUPPrint 1

        IF EZP.DisableMargins=0 THEN
            EZP.LeftMargin=PSD.rtMargin.nLeft
            EZP.TopMargin=PSD.rtMargin.nTop
            EZP.RightMargin=PSD.rtMargin.nRight
            EZP.BottomMargin=PSD.rtMargin.nBottom
            EZP.LeftMargin=EZP.LeftMargin/MVal&
            EZP.TopMargin=EZP.TopMargin/MVal&
            EZP.RightMargin=EZP.RightMargin/MVal&
            EZP.BottomMargin=EZP.BottomMargin/MVal&
        END IF
        RV&=1
    ELSE
        ZInitFPU
    END IF
    App_SystemDlgFreeze=0
    App_CommonDlgInitType&=0
    App_CommonDlgHandle_PG& = 0
END IF
EZ_Color -1,-1
App_WedgeComDProc=0
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------
' GLOBAL App_hSystemDialog AS LONG
' GLOBAL App_SystemFG AS LONG
' GLOBAL App_SystemBG AS LONG

FUNCTION ZSetSystemColors(BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL FG&, OKFlag&
IF (App_SystemBG>=%APP_LowBrush) AND (App_SystemBG<=UBOUND(AppBrush)) THEN
    IF App_SystemBG<>-1 THEN
        IF AppBrush(App_SystemBG)<>0 THEN
            OKFlag&=1
            ' %WM_CTLCOLORDLG, %WM_CTLCOLORSTATIC, %WM_CTLCOLORBTN
            IF OKFlag& THEN
                FG&=GetSysColor(%COLOR_BTNTEXT)
                IF (App_SystemFG>=0) AND (App_SystemFG<=UBOUND(AppColor)) THEN
                    IF AppBrush(App_SystemFG)<>0 THEN FG&=AppColor(App_SystemFG)
                END IF
                SetTextColor wParam, FG&
                SetBkColor wParam,GetSysColor(%COLOR_3DFACE)
                SetBkMode wParam, %TRANSPARENT
                FUNCTION=AppBrush(App_SystemBG)
                EXIT FUNCTION
            END IF
        END IF
    END IF
END IF
FUNCTION=0
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_HookComDialogProc(CP AS DWORD) EXPORT10
App_WedgeComDProc=CP
END SUB

'------------------------------------------------------------------------------
GLOBAL App_ChangeButtonFlag&

SUB EZ_ChangeDlgButtons(BYVAL Mode&) EXPORT10
    SELECT CASE AS LONG Mode&
        CASE 1,2, -2, 3    ' 1= ellipse, 2 = RR, -2 - RR fixed
            App_ChangeButtonFlag&=Mode&
        CASE ELSE
            App_ChangeButtonFlag&=0
    END SELECT
END SUB

SUB ZSetDialogStyles(BYVAL hDlg&)
    LOCAL WS&
    WS&=GetWindowLong(hDlg&,%GWL_STYLE)
    WS&=WS& AND NOT(%WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS)
    SetWindowLong hDlg&, %GWL_STYLE, WS&
END SUB

SUB ZDoControlList(BYVAL hDlg&)
    LOCAL Count&, N&, ID&, WClass$, hWnd&, FormName$, WS&
    FormName$=EZ_GetFormName(hDlg&)
    EZ_StartCList FormName$, "BUTTON"
    Count&=EZ_GetCListCount
    IF Count&>0 THEN
        FOR N&=1 TO Count&
            WClass$ = EZ_GetCListClass(N&,1)
            IF WClass$="BUTTON" THEN     ' true buttons only
                ID& = EZ_GetCListID(N&)
                hWnd& = EZ_GetCListHandle(N&)
                IF hWnd&<>0 THEN
                    WS&=GetWindowLong(hWnd&,%GWL_STYLE)
                    WS&=WS& AND NOT(&HFF)
                    WS&=WS& OR %BS_OWNERDRAW
                    IF App_Allow_Ctrl_Clipping& THEN
                        WS&=WS& OR %WS_CLIPSIBLINGS OR %WS_CLIPCHILDREN
                    END IF
                    SetWindowLong hWnd&, %GWL_STYLE, WS&
                    SELECT CASE AS LONG App_ChangeButtonFlag&
                        CASE 1,2,-2
                            EZ_SetRegion FormName$, ID&,App_ChangeButtonFlag&,0
                        CASE ELSE
                    END SELECT
                END IF
            END IF
        NEXT N&
        App_Allow_Ctrl_Clipping&=1
    END IF
    EZ_EndCList
    App_ChangeButtonFlag&=0
END SUB

GLOBAL CustDlgOrigAddress AS LONG

FUNCTION CustDlgProcEx(BYVAL hDlg   AS LONG, _
                       BYVAL Msg    AS LONG, _
                       BYVAL wParam AS LONG, _
                       BYVAL lParam AS LONG) AS LONG
    LOCAL RV&
    RV&=CallWindowProc(CODEPTR(CustDlgProc), hDlg, Msg, wParam, lParam)
    IF Msg=%WM_DESTROY THEN
        SetWindowLong hDlg, %DWL_DLGPROC,CustDlgOrigAddress
    END IF
    IF RV&=0 THEN
        RV&=CallWindowProc(CustDlgOrigAddress, hDlg, Msg, wParam, lParam)
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION CustDlgProc(BYVAL hDlg   AS LONG, _
                     BYVAL Msg    AS LONG, _
                     BYVAL wParam AS LONG, _
                     BYVAL lParam AS LONG) AS LONG

LOCAL Action AS LONG, FormName$, hForm&, hTrueDlg&, CV&,C&
STATIC SWFlag&, EXWFlag&
' If Message is processed then set Action=%TRUE

Action=0

IF App_WedgeComDProc<>0 THEN
   CALL DWORD App_WedgeComDProc USING EZ_DlgProcX(hDlg, Msg, wParam, lParam) TO Action
   IF Action<>0 THEN
      FUNCTION=Action
      EXIT FUNCTION
   END IF
END IF
SELECT CASE AS LONG Msg
   CASE %WM_DRAWITEM
        LOCAL DI AS DRAWITEMSTRUCT PTR
        DI=lParam
        IF @DI.CtlType=%ODT_BUTTON THEN     ' only allow ownerdrawing of buttons
            FUNCTION=ZDrawItem(hDlg, wParam, lParam)
            EXIT FUNCTION
        END IF
    CASE %WM_INITDIALOG
            SWFlag&=1
            EXWFlag&=0
            App_hSystemDialog=hDlg
            Action=1
            SELECT CASE AS LONG App_CommonDlgInitType&
                CASE 1
                    IF App_CommonDlgExType&=0 THEN
                        FormName$="{OPENDLG}"
                        hTrueDlg&=0
                    ELSE
    '                        hTrueDlg&=FindWindow("#32770",BYVAL STRPTR(App_CommonDlgTitle$))
                        hTrueDlg&=GetParent(hDlg)
                        EXWFlag&=1
                    END IF
                    App_CommonDlgHandle_OF&=hDlg
                    App_CommonDlgHandle_OFX&=hTrueDlg&
                CASE 2
                    IF App_CommonDlgExType&=0 THEN
                        FormName$="{SAVEDLG}"
                        hTrueDlg&=0
                    ELSE
    '                    hTrueDlg&=FindWindow("#32770",BYVAL STRPTR(App_CommonDlgTitle$))
                        hTrueDlg&=GetParent(hDlg)
                        EXWFlag&=1
                    END IF
                    App_CommonDlgHandle_SF&=hDlg
                    App_CommonDlgHandle_SFX&=hTrueDlg&
                CASE 3
                    FormName$="{COLORDLG}"
                    App_CommonDlgHandle_CL&=hDlg
                CASE 4
                    FormName$="{FONTDLG}"
                    App_CommonDlgHandle_FNT&=hDlg
                CASE 5
                    FormName$="{PRINTDLG}"
                    App_CommonDlgHandle_PR&=hDlg
                CASE 6
                    FormName$="{PAGEDLG}"
                    App_CommonDlgHandle_PG&=hDlg
                CASE 7
                    FormName$="{FINDDLG}"
                    App_CommonDlgHandle_FT&=hDlg
                CASE 8
                    FormName$="{BROWSEDLG}"
                    App_CommonDlgHandle_BW& = hDlg
                CASE ELSE
            END SELECT
            hTrueDlg&=0
            GOSUB DesignDlgForm
            IF App_CommonDlgInitType&=8 THEN
                FUNCTION=1
                EXIT FUNCTION
            END IF
    CASE %WM_SHOWWINDOW
        IF SWFlag& THEN
            SWFlag&=0
            IF wParam<>0 THEN       ' window being shown
                IF EXWFlag&=0 THEN
                    ProcessDMessage hDlg, %EZ_Loaded, 0
                    ZSetDialogStyles hDlg
                    IF App_ChangeButtonFlag&<>0 THEN
                        ZDoControlList hDlg&
                    END IF
                END IF
            END IF
        END IF
   CASE %WM_ACTIVATEAPP
          CV&=lParam
          C&=0
          IF wParam=0 THEN
              ProcessDMessage hDlg, %EZ_NoAppFocus, CV&
              zSendAppEvent %EZ_NoAppFocus, CV&, C&
          ELSE
              ProcessDMessage hDlg, %EZ_AppFocus, CV&
              zSendAppEvent %EZ_AppFocus, CV&, C&
          END IF
    CASE %WM_ACTIVATE
        IF LOWRD(wParam)<>0 THEN
            ZSetCurrent hDlg
            ProcessDMessage hDlg, %EZ_Focus, 0
        ELSE
            ZSetCurrent 0
            ProcessDMessage hDlg, %EZ_NoFocus,0
        END IF
    CASE %WM_NOTIFY
        IF hDlg=App_CommonDlgHandle_OF& OR hDlg=App_CommonDlgHandle_SF& THEN
            IF App_CommonDlgExType&=1 THEN
                DIM pNM AS NMHDR PTR
                pNM=lParam
                SELECT CASE AS LONG @pNM.code
                    CASE %CDN_INITDONE
                        IF hDlg=App_CommonDlgHandle_OF& THEN
                            hTrueDlg&=App_CommonDlgHandle_OFX&
                            FormName$="{OPENDLGX}"
                        ELSE
                            hTrueDlg&=App_CommonDlgHandle_SFX&
                            FormName$="{SAVEDLGX}"
                        END IF
                        GOSUB DesignDlgForm
                        ' subclass true dialogs dialog procedure
                        CustDlgOrigAddress=SetWindowLong(hTrueDlg&, %DWL_DLGPROC,CODEPTR(CustDlgProcEx))
                        ProcessDMessage hTrueDlg&, %EZ_Loaded, 0
                        ZSetDialogStyles hTrueDlg&
                        IF App_ChangeButtonFlag&<>0 THEN
                            ZDoControlList hTrueDlg&
                        END IF
                        EXWFlag&=0
                        SWFlag&=0
                        App_CommonDlgExType&=0  ' turn off notification processing
                    CASE ELSE
                END SELECT
            END IF
        END IF
    CASE %WM_CTLCOLORDLG, %WM_CTLCOLORSTATIC, %WM_CTLCOLORBTN
        FUNCTION=ZSetSystemColors(Msg, wParam, lParam)
        EXIT FUNCTION
    CASE %WM_COMMAND  ' Message from controls, menu and accelerators
        ' don't use protection routine on Common dialogs
'        IF IsNotODButtonKey(hDlg,wParam,lParam) THEN
            IF ProcessWinCommands(ZFormNameH(hDlg), hDlg, HIWRD(wParam), LOWRD(wParam), lParam) THEN
            END IF
'        ELSE
'            FUNCTION=0
'            EXIT FUNCTION
'        END IF
    CASE ELSE
END SELECT
FUNCTION=Action
EXIT FUNCTION

DesignDlgForm:
    IF LEN(FormName$)<>0 THEN
        App_EZ_CurForm$=FormName$
        hForm&=ezHandle(App_CommonDlgParent$,0,0)
        App_CommonDlgParent$=""
        IF hTrueDlg&=0 THEN
            hTrueDlg&=hDlg&
        ELSE
            IF GetWindow(hTrueDlg&,%GW_OWNER)<>hForm& THEN
                hTrueDlg&=hDlg&
            END IF
        END IF
        ZSetCurrent hTrueDlg&
        ProcessDMessage hForm&, %EZ_ShowCommonDlg, hTrueDlg&
    END IF
RETURN

END FUNCTION


GLOBAL App_BrowseOKFlag&
GLOBAL App_BrowseOrigAddress AS DWORD
GLOBAL App_BrowseDialogText$

FUNCTION ZBrowseSubClassProc(BYVAL hWnd&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&) AS LONG
    LOCAL RV&
'    SELECT CASE as long hWnd&                ' error !
    SELECT CASE AS LONG Msg&
        CASE %WM_DESTROY
            SetWindowLong hWnd&, %GWL_WNDPROC, App_BrowseOrigAddress
    END SELECT
    RV&=CustDlgProc(hWnd&, Msg&, wParam&, lParam&)
    IF RV&=0 THEN
        FUNCTION=CallWindowProc(App_BrowseOrigAddress, hWnd&, Msg&, wParam&, lParam&)
    ELSE
        FUNCTION=RV&
    END IF
END FUNCTION

FUNCTION ZBrowseProc(BYVAL hWnd&, BYVAL Msg&, BYVAL lParam&, BYVAL MyData&) AS LONG
    SELECT CASE AS LONG Msg&
        CASE %BFFM_INITIALIZED
            IF MyData&<>0 THEN
                SendMessage hWnd&,%BFFM_SETSELECTION, %TRUE, MyData&
            END IF
            IF App_BrowseDialogText$<>"" THEN
                SendMessage hWnd&, %WM_SETTEXT,0, STRPTR(App_BrowseDialogText$)
            END IF
            App_BrowseOrigAddress=GetWindowLong(hWnd&, %GWL_WNDPROC)
            SetWindowLong hWnd&, %GWL_WNDPROC, CODEPTR(ZBrowseSubClassProc)
            SendMessage hWnd&, %WM_INITDIALOG,0,0   ' sends fake message
        CASE %BFFM_SELCHANGED
            IF App_BrowseOKFlag& THEN
                SendMessage hWnd&,%BFFM_ENABLEOK, 0,1
            END IF
        CASE ELSE
    END SELECT
END FUNCTION

FUNCTION EZ_BrowseFolderDlg(BYVAL FormName$, BYVAL BText$, BYVAL FPath$, BYVAL BProp$) EXPORT10 AS STRING
    LOCAL BF AS BROWSEINFO, zDN AS ASCIIZ*%MAX_PATH
    LOCAL zTT AS ASCIIZ*256, PIDL AS DWORD, BFlags AS DWORD
    LOCAL RootPIDL AS DWORD, SPF AS LONG, RV$, FFlag&, MyData&
    LOCAL zFP AS ASCIIZ*%MAX_PATH, P1&, P2&, SFolder$, hWnd&, P&
    App_BrowseOKFlag&=0
    MyData&=0
    RV$=""
    BProp$=UCASE$(BProp$)
    P1&=INSTR(BProp$,"{")
    IF P1&<>0 THEN
        P2&=INSTR(P1&+1,BProp$,"}")
        IF P2&<>0 THEN
            SFolder$=MID$(BProp$,P1&+1,P2&-P1&-1)
            BProp$=LEFT$(BProp$,P1&-1)+MID$(BProp$,P2&+1)
        END IF
    END IF
    P&=INSTR(BText$,"|")
    IF P&<>0 THEN
        App_BrowseDialogText$=LEFT$(BText$,P&-1)+CHR$(0)
        BText$=MID$(BText$,P&+1)
    ELSE
        App_BrowseDialogText$=""
    END IF
    zTT=LEFT$(BText$,255)
    hWnd&=ezHandle(FormName$,0,1)
    IF FormName$="{ME}" THEN FormName$=EZ_GetME
    BF.hWndOwner=hWnd&
    SPF=%CSIDL_DESKTOP
    BFlags=0
    FFlag&=0
    IF FPath$<>"" THEN
        zFP=FPath$
        MyData&=VARPTR(zFP)
    END IF
    IF INSTR(BProp$,"F") THEN
        SPF=%CSIDL_DRIVES
        BFlags=%BIF_RETURNONLYFSDIRS OR %BIF_BROWSEINCLUDEFILES
        FFlag&=1
    ELSEIF INSTR(BProp$,"D") THEN
        SPF=%CSIDL_DRIVES
        BFlags=%BIF_RETURNONLYFSDIRS
        FFlag&=1
    ELSEIF INSTR(BProp$,"P") THEN
        SPF=%CSIDL_PRINTERS
        BFlags=%BIF_BROWSEINCLUDEFILES
        FFlag&=0
        MyData&=0
    ELSEIF INSTR(BProp$,"N") THEN
        SPF=%CSIDL_CONNECTIONS
        BFlags=%BIF_BROWSEINCLUDEFILES
        FFlag&=0
        MyData&=0
    END IF
    SELECT CASE AS CONST$ SFolder$
        CASE "DESK"                     ' desktop
            SPF=%CSIDL_DESKTOP
        CASE "SMENU"                    ' start menu programs
            SPF=%CSIDL_PROGRAMS
        CASE "MYDOCS"                   ' my documents
            SPF=%CSIDL_PERSONAL
        CASE "FONTS"                    ' fonts folder
            SPF=%CSIDL_FONTS
        CASE "WIN"                      ' windows folder
            SPF=%CSIDL_WINDOWS
        CASE "SYS"                      ' system folder
            SPF=%CSIDL_SYSTEM
        CASE "PROG"                     ' program files
            SPF=%CSIDL_PROGRAM_FILES
        CASE "NET"                      ' Network connections
            SPF=%CSIDL_CONNECTIONS
        CASE ""                         ' nothing defined
        CASE ELSE
            SPF=VAL(SFolder$)
            IF SPF<0 THEN SPF=0
            IF SPF>&H31 THEN SPF=0
    END SELECT
    IF INSTR(BProp$,"X") THEN BFlags=BFlags OR %BIF_NEWDIALOGSTYLE
    IF INSTR(BProp$,"E") THEN BFlags=BFlags OR %BIF_EDITBOX
    IF SPF<>0 THEN
        IF SHGetSpecialFolderLocation(hWnd&,SPF, BYVAL VARPTR(RootPIDL))<>0 THEN RootPIDL=0
    END IF
    BF.pIDLRoot=RootPIDL
    BF.pszDisplayName=VARPTR(zDN)   ' returns only last level of folder name
    BF.lpszTitle=VARPTR(zTT)
    BF.ulFlags=BFlags
    BF.lpfnCallback=CODEPTR(ZBrowseProc)
    BF.lParam=MyData&
    BF.iImage=0                     ' return value of image index in system imagelist
    App_CommonDlgParent$=UCASE$(FormName$)
    App_CommonDlgInitType& =  8  ' "{BROWSEDLG}"
    App_SystemDlgFreeze=1
    App_CommonDlgHandle_BW& = 0
    PIDL=SHBrowseForFolder(BF)
    IF PIDL<>0 THEN
        IF FFlag& THEN
            SHGetPathFromIDList BYVAL PIDL, zDN     ' gets full path if file object
        ELSE
            CoTaskMemFree PIDL
        END IF
        RV$=zDN
    END IF
    IF RootPIDL<>0 THEN CoTaskMemFree RootPIDL
    App_SystemDlgFreeze=0
    App_CommonDlgInitType&=0
    App_CommonDlgHandle_BW& = 0
    FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------
' MDI support routines
'------------------------------------------------------------------------------

SUB ZMDI_Size(BYVAL N&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Mode&)
LOCAL CR AS RECT, hWnd AS LONG, hWndMC AS LONG, TBH&, SBH&, WS&
hWndMC=AppForms(N&).FhWnd2
IF hWndMC<>0 THEN
  IF ZGetClass(hWndMC)=$MDIClientClassName THEN
    hWnd=AppForms(N&).FhWnd
    GetClientRect hWnd&, CR
    IF W&=0 AND H&=0 THEN
        ' now allows offset on left side
        W&=(CR.nRight-CR.nLeft)-X&
        H&=CR.nBottom-CR.nTop
'        X&=CR.nLeft
        Y&=CR.nTop
    END IF
    TBH&=0
    SBH&=0
    IF AppForms(N&).FhToolbar<>0 THEN
        GetClientRect AppForms(N&).FhToolbar, CR
        TBH&=(CR.nBottom-CR.nTop)
        WS&=GetWindowLong(AppForms(N&).FhToolbar, %GWL_STYLE)
        IF (WS& OR %WS_DLGFRAME) = WS& THEN
           TBH&=TBH&+GetSystemMetrics(%SM_CYDLGFRAME)
        END IF
        IF (WS& OR %WS_BORDER) = WS& THEN
           TBH&=TBH&+GetSystemMetrics(%SM_CYBORDER)
        END IF
    ELSE    ' test for top rebar

    END IF
    IF AppForms(N&).FhStatusbar<>0 THEN
        GetWindowRect AppForms(N&).FhStatusbar, CR
        SBH&=CR.nBottom-CR.nTop
    END IF
    IF Mode&<>0 THEN
        H&=H&-(TBH&+SBH&)
        Y&=Y&+TBH&
    END IF
    MoveWindow hWndMC, X&,Y&,W&,H&, %TRUE
  END IF
END IF
END SUB

SUB ZMDI_Create(BYVAL hWnd&, BYVAL FormN&)
LOCAL szTemp AS ASCIIZ*32, X&
LOCAL MDIcc AS CLIENTCREATESTRUCT
LOCAL FStyle AS DWORD, EXS AS DWORD, hWnd1 AS LONG
IF FormN&<>0 THEN
    IF AppForms(FormN&).FType=4 THEN   ' MDI Parent
        MDIcc.hWindowMenu=0
        MDIcc.idFirstChild=1
        szTemp=CHR$(0)
        FStyle=%WS_CHILD OR %WS_CLIPCHILDREN OR %WS_CLIPSIBLINGS OR %WS_HSCROLL OR %WS_VSCROLL OR %MDIS_ALLCHILDSTYLES
        EXS=%WS_EX_CLIENTEDGE   ' OR %WS_EX_CONTROLPARENT

        hWnd1 = CreateWindowEx(      EXS, _
                             $MDIClientClassName, _
                                  szTemp, _
                                  FStyle, _
                                       0, _
                                       0, _
                                       0, _
                                       0, _
                                   hWnd&, _
                                   App_MDIClientID&, _
                            AppInstance&, _
                            BYVAL VARPTR(MDIcc))
        AppForms(FormN&).FhWnd2=hWnd1   ' stores either WinLift holder handle or MDI Client handle
        ZMDI_Size FormN&, 0,0,0,0, 1
        X&=ProcessEZCommands(hWnd&, %EZ_Loaded, hWnd1, hWnd1)
        ShowWindow hWnd1, %SW_SHOW
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DefMDIDefaultID (BYVAL ID&) EXPORT10
    IF ID&>0 THEN
        App_MDIClientID&=ID&
    END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_MDIClient() EXPORT10
LOCAL hWnd AS LONG, N&
hWnd=PBVFormHandle(App_EZ_CurForm$)
IF hWnd<>0 THEN
    N&=ZFormNumH(hWnd)
    IF AppForms(N&).FhWnd2=0 THEN   ' only one instance allowed
        IF App_AllowLoading&<>0 THEN
            DIM C!, R!, W!, H!,Pict$, CText$, CProp$
            ZLoading "", App_MDIClientID&, C!, R!, W!, H!, Pict$, CText$, CProp$
        END IF
        ZMDI_Create hWnd, N&
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ResizeMDI(BYVAL FormName$, BYVAL C!, BYVAL R!, BYVAL W!,  BYVAL H!, BYVAL Mode&) EXPORT10
LOCAL X&,Y&,AW&,AH&, N&
IF App_EZ_RCMode&<>0 THEN SWAP C!, R!
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    X&=C! * App_EZ_CharW
    Y&=R! * App_EZ_CharH
    AW&=W! * App_EZ_CharW
    AH&=H! * App_EZ_CharH
    ZMDI_Size N&, X&,Y&,AW&,AH&, Mode&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_ArrangeMDI(BYVAL FormName$, BYVAL Mode$) EXPORT10
LOCAL N&, hWnd&
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    hWnd&=AppForms(N&).FhWnd2
    IF hWnd&<>0 THEN
        IF ZGetClass(hWnd&)=$MDIClientClassName THEN
            SELECT CASE AS CONST$ UCASE$(Mode$)
                CASE "C"    ' cascade
                    SendMessage hWnd&, %WM_MDICASCADE,0,0
                CASE "TV"    ' tile Horizontally
                    SendMessage hWnd&, %WM_MDITILE,%MDITILE_HORIZONTAL,0
                CASE "TH"    ' tile Vertically
                    SendMessage hWnd&, %WM_MDITILE,%MDITILE_VERTICAL,0
                CASE "A"    ' arrange icons
                    SendMessage hWnd&, %WM_MDIICONARRANGE,0,0
                CASE ELSE
            END SELECT
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_StatusBarHandle(BYVAL FormName$) EXPORT10 AS LONG
LOCAL N&,RV&
RV&=0
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    RV&=AppForms(N&).FhStatusbar
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_AccelHandle(BYVAL FormName$) EXPORT10 AS LONG
LOCAL N&,RV&
RV&=0
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    RV&=AppForms(N&).FAccel
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_ToolTipHandle(BYVAL FormName$, BYVAL IsTBarFlag&) EXPORT10 AS LONG
LOCAL N&, hWnd&, RV&
RV&=0
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    IF IsTBarFlag&<>0 THEN
        hWnd&=AppForms(N&).FhToolbar
        RV&=SendMessage(hWnd&, %TB_GETTOOLTIPS,0,0)
    ELSE
        RV&=AppForms(N&).FhToolTip
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

FUNCTION EZ_MDIClientHandle(BYVAL FormName$) EXPORT10 AS LONG
LOCAL N&, hWnd&, RV&
RV&=0
N&=ZFormNum(FormName$)
IF N&<>0 THEN
    hWnd&=AppForms(N&).FhWnd2
    IF hWnd&<>0 THEN
        IF ZGetClass(hWnd&)=$MDIClientClassName THEN
            RV&=hWnd&
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_AllowMouseMoveEvents(BYVAL KFlag&) EXPORT10
IF KFlag&>=0 AND KFlag&<=1 THEN
    App_AllowMouseEvent&=KFlag&
END IF
END SUB

'------------------------------------------------------------------------------

FUNCTION EZ_ActiveCanvasDC() EXPORT10 AS LONG
FUNCTION=App_CanvasDC&
END FUNCTION

'------------------------------------------------------------------------------


FUNCTION EZ_StartEraseBG(BYVAL CVal&, MyhDC&, X2&, Y2&) EXPORT10 AS LONG
    LOCAL EZP AS EZPAINT PTR
            'TYPE EZPAINT
            '    hDC AS LONG
            '    W AS LONG
            '    H AS LONG
            'END TYPE
    IF CVal&<>0 THEN
        IF IsBadReadPtr(CVal&, SIZEOF(@EZP))=0 THEN
            EZP=CVal&
            MyhDC&=@EZP.hDC
            X2&=@EZP.W-1
            Y2&=@EZP.H-1
            FUNCTION=%TRUE
        END IF
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_EndEraseBG(Cancel&) EXPORT10
    Cancel&=1
END SUB

'------------------------------------------------------------------------------



SUB EZ_StartDraw(BYVAL FormName$, BYVAL CanvasID&, BYVAL W&, BYVAL H&, BYVAL CProp$) EXPORT10
    LOCAL hCtrl AS LONG, RV& ', Mode&
    hCtrl=ezHandle(FormName$, CanvasID&,1)
    IF App_CanvasHandle&=0 THEN
        IF hCtrl<>0 THEN
                IF ZGetClass(hCtrl)= $CanvasClassName THEN
                    CProp$=UCASE$(CProp$)
                    App_CanvasHandle&=hCtrl
                    App_PictureWindow&=hCtrl
                    SendMessage hCtrl,%EZCV_DRAW,1,0   ' select bitmaps into DC's
                    RV&=SendMessage(hCtrl, %EZCV_SETVIEW, W&, H&)
                    EZ_CSelectBuffer 1
                    App_CanvasDC&=SendMessage(hCtrl,%EZCV_GETMEMDC,0,0)
                    App_CanvasDirtyFlag&=0
                    App_CanvasDirtyRgn&=0
                END IF
        END IF
    END IF
END SUB

GLOBAL App_UnfinishedCanvasEffect&

FUNCTION EZ_GetCanvasPict(BYVAL FormName$, BYVAL CanvasID&, BYVAL BufferNum&, BYVAL NW&, BYVAL NH&) EXPORT10 AS STRING
    LOCAL hCtrl&, RV$, hBmp&, hBmpCopy&, BFlag&
    RV$=""
    hCtrl&=ezHandle(FormName$, CanvasID&,1)
    IF App_CanvasHandle&=0 THEN     ' don't allow during draw cycle !
        IF hCtrl&<>0 THEN
            IF ZGetClass(hCtrl&)= $CanvasClassName THEN
                IF BufferNum&<>2 THEN BufferNum&=1
                IF ( GetWindowLong(hCtrl&, %GWL_STYLE) AND %EZCVS_DOUBLEBUFFER)=0 THEN BufferNum&=1
                hBmp&=SendMessage(hCtrl&, %EZCV_GETBITMAP, BufferNum&,0)
                IF NW&<1 THEN NW&=0
                IF NH&<1 THEN NH&=0
                IF ( GetWindowLong(hCtrl&, %GWL_STYLE) AND %EZCVS_DIBSECTION)=0 THEN BFlag&=0 ELSE BFlag&=%LR_CREATEDIBSECTION
                hBmpCopy&=CopyImage(hBmp&,%IMAGE_BITMAP,NW&, NH&,BFlag&)
                IF hBmpCopy&<>0 THEN
                    RV$=EZ_NamePicture(hBmpCopy&)
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV$
END FUNCTION

'------------------------------------------------------------------------------


FUNCTION EZ_ChooseCanvas(BYVAL FormName$, BYVAL CanvasID&, EZP AS EZPRINTER) EXPORT10 AS LONG
    LOCAL RV&, hCtrl&, W&, H&, PW!, PH!, UPI!, CFlag&
    RV&=0
    hCtrl&=ezHandle(FormName$, CanvasID&,1)
    IF App_CanvasHandle&<>0 THEN EXIT FUNCTION    ' don't allow during draw cycle !
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl)= $CanvasClassName THEN
            CFlag&=0
            SELECT CASE AS LONG EZP.PrnPaperSize
                CASE 1,2      ' letter size
                    PW!=8.5
                    PH!=11
                CASE %DMPAPER_TABLOID      '  Tabloid 11 x 17 in
                    PW!=11
                    PH!=17
                CASE %DMPAPER_LEDGER       '  Ledger 17 x 11 in
                    PW!=17
                    PH!=11
                CASE %DMPAPER_LEGAL        '  Legal 8 1/2 x 14 in
                    PW!=8.5
                    PH!=14
                CASE %DMPAPER_STATEMENT    '  Statement 5 1/2 x 8 1/2 in
                    PW!=5.5
                    PH!=8.5
                CASE %DMPAPER_EXECUTIVE    '  Executive 7 1/4 x 10 1/2 in
                    PW!=7.25
                    PH!=10.5
                CASE ELSE
                    CFlag&=1
                    PW!=EZP.PrnPaperWidth
                    PH!=EZP.PrnPaperLength
            END SELECT
            IF EZP.PrnOrientation=2 THEN SWAP PW!, PH!
            IF PW!>=.5 AND PH!>=.5 THEN
                EZ_GetCanvasSize FormName$, CanvasID&, W&, H&
                ' 0 = Pixels, 1 - .01 inch, 2 - .001 inch, 3 - .1 mm , 4 - .01 mm, 5 - Twipps
                SELECT CASE AS LONG EZP.PUnits
                    CASE 1      ' .01 inch
                        UPI!=100
                    CASE 2
                        UPI!=1000
                    CASE 3
                        UPI!=25.4*10
                    CASE 4
                        UPI!=25.4*100
                    CASE 5
                        UPI!=1440
                    CASE ELSE   ' pixels
                        UPI!=0
                END SELECT
                IF CFlag&=0 THEN
                    IF UPI!>0 THEN
                        W&=INT(PW!*UPI!)
                        H&=INT(PH!*UPI!)
                    END IF
                ELSE
                    W&=INT(PW!)
                    H&=INT(PH!)
                    IF UPI!=0 THEN UPI!=96
                    PW!=W&/UPI!
                    PH!=H&/UPI!
                END IF

'                msgbox str$(W&)+str$(H&)+str$(UPI!)

                EZ_StartDraw FormName$, CanvasID&, W&, H&, ""
                IF App_CanvasHandle&<>0 THEN
                    EZ_Clear FormName$, CanvasID&
                    EZP.PWidth=W&
                    EZP.PHeight=H&
                    EZP.AWidth=W&
                    EZP.AHeight=H&
                    IF PW!<=0 THEN PW!=1
                    IF PH!<=0 THEN PH!=1
                    EZP.DPIx=INT(W&/PW!)
                    EZP.DPIy=INT(H&/PH!)

                    App_ChooseCanvasDPIx&=EZP.DPIx
                    App_ChooseCanvasDPIy&=EZP.DPIy

                    EZP.hDC=EZ_ActiveCanvasDC
                    App_FakePrinterDC=EZ_ActiveCanvasDC
                    App_FakePrinterPage=EZP.FromPage
                    App_FakePrinterCount=0
                    App_FakePrinterForm$=FormName$
                    App_FakePrinterID&=CanvasID&
                    RV&=1   ' draw start succeeds
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------
'TYPE CHARRANGE
'  cpMin AS LONG
'  cpMax AS LONG
'END TYPE

'TYPE FORMATRANGE
'  hdc AS LONG
'  hdcTarget AS LONG
'  rc AS RECT
'  rcPage AS RECT
'  chrg AS CHARRANGE
'END TYPE

FUNCTION ZRichHandle(BYVAL FormName$, BYVAL RichID&) AS LONG
    LOCAL hCtrl&, RV&
    hCtrl&=ezHandle(FormName$, RichID&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)= UCASE$(App_RichEditClass$) THEN RV&=hCtrl&
    END IF
    FUNCTION=RV&
END FUNCTION


SUB EZ_GetRichSel(BYVAL FormName$, BYVAL RichID&, P1&, P2&) EXPORT10
LOCAL hCtrl&, CH AS CHARRANGE
'App_EZ_HandleFlag&=1
hCtrl&=ZRichHandle(FormName$, RichID&)
IF hCtrl&<>0 THEN
    SendMessage hCtrl&, %EM_EXGETSEL, 0, VARPTR(CH)
    P1&=CH.cpMin
    P2&=CH.cpMax
END IF
END SUB

SUB EZ_SetRichSel(BYVAL FormName$, BYVAL RichID&, BYVAL P1&, BYVAL P2&) EXPORT10
LOCAL hCtrl&, CH AS CHARRANGE
'App_EZ_HandleFlag&=1
hCtrl&=ZRichHandle(FormName$, RichID&)
IF hCtrl&<>0 THEN
    CH.cpMin=P1&
    CH.cpMax=P2&
    SendMessage hCtrl&, %EM_EXSETSEL, 0, VARPTR(CH)
END IF
END SUB

FUNCTION ZConvertPix(BYVAL hDC&, BYVAL V&) AS LONG
    LOCAL PT AS POINTAPI
    PT.x=V&
    LPtoDP hDC&, PT, 1
    FUNCTION=PT.x
END FUNCTION

SUB ZConvertTwips(BYVAL hDC&, X&, Y&)
    LOCAL PIX!, PIY!, AX!,AY!, PT AS POINTAPI
    PT.x=X&
    PT.y=Y&
    LPtoDP hDC&, PT, 1
    AX!=PT.x
    AY!=PT.y
    IF App_ChooseCanvasDPIx&<>0 AND App_ChooseCanvasDPIy&<>0 THEN
        PIX!=ZConvertPix(hDC&, App_ChooseCanvasDPIx&)
        PIY!=ZConvertPix(hDC&, App_ChooseCanvasDPIy&)
    ELSE
        PIX!=GetDeviceCaps(hDC&,%LOGPIXELSX)    ' always in printer pixels
        PIY!=GetDeviceCaps(hDC&,%LOGPIXELSY)
    END IF
    X&=INT((AX!/PIX!)*1440)
    Y&=INT((AY!/PIY!)*1440)
END SUB

FUNCTION ZTestDC(BYVAL hDC&) AS LONG
    LOCAL RV&
    RV&=0
    IF hDC&<>0 THEN
        SELECT CASE AS LONG GetDeviceCaps(hDC&, %TECHNOLOGY)
            CASE %DT_RASDISPLAY     ' video raster DC
                IF GetObjectType(hDC&)=%OBJ_MEMDC THEN
                    RV&=3
                ELSE
                    RV&=2
                END IF
            CASE %DT_RASPRINTER     ' printer
                RV&=1
            CASE ELSE
                RV&=-1              ' unknown DC type
        END SELECT
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_DefDPI(BYVAL DPIx&, BYVAL DPIy&) EXPORT10
    App_ChooseCanvasDPIx&=DPIx&
    App_ChooseCanvasDPIy&=DPIy&
END SUB

FUNCTION EZ_DCPrintRichText(BYVAL hDC&, BYVAL FormName$, BYVAL RichID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CharStart&, BYVAL CharEnd&, BYVAL LFlag&) EXPORT10 AS LONG
    LOCAL hCtrl&, RV&, FMRG AS FORMATRANGE, DFlag&
    LOCAL AW&,AH&, PIX&, PIY&, DCType&, hBmp&, PFlag&
    DCType&=ZTestDC(hDC&)
    IF DCType&=0 THEN
        FUNCTION=-1
        EXIT FUNCTION
    END IF
    RV&=-1
    hCtrl&=ezHandle(FormName$, RichID&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl)= UCASE$(App_RichEditClass$) THEN
                DFlag&=1
                IF LFlag&=-1 THEN
                    LFlag&=0    ' just measure text
                    DFlag&=0
                END IF
                IF LFlag&=0 THEN
                    FMRG.hdc=hDC&
                    FMRG.hdcTarget=hDC&
                    FMRG.rc.nLeft=X&
                    FMRG.rc.nTop=Y&
                    FMRG.rc.nRight=X&+W&-1
                    FMRG.rc.nBottom=Y&+H&-1
                    ZConvertTwips hDC&, FMRG.rc.nLeft, FMRG.rc.nTop
                    ZConvertTwips hDC&, FMRG.rc.nRight, FMRG.rc.nBottom
                    PFlag&=0
                    SELECT CASE AS LONG DCType&
                        CASE 3  ' memory DC
                            hBmp&=GetCurrentObject(hDC&, %OBJ_BITMAP)
                            IF hBmp&<>0 THEN
                                EZ_GetBitmapSize hBmp&, AW&, AH&
                                IF AW&=0 OR AH&=0 THEN PFlag&=1
                            ELSE
                                PFlag&=1
                            END IF
                            IF PFlag& THEN EXIT FUNCTION

'                             DIM PT(1 TO 2) AS LONG
'                             GetWindowExtEx hDC&, BYVAL VARPTR(PT(1))
'                             AW&=ZConvertPix(hDC&, PT(1))
'                             AH&=ZConvertPix(hDC&, PT(2))
                             IF App_ChooseCanvasDPIx&<>0 AND App_ChooseCanvasDPIy&<>0 THEN
                                PIX&=ZConvertPix(hDC&, App_ChooseCanvasDPIx&)
                                PIY&=ZConvertPix(hDC&, App_ChooseCanvasDPIy&)
                             ELSE
                                PIX&=GetDeviceCaps(hDC&, %LOGPIXELSX)
                                PIY&=GetDeviceCaps(hDC&, %LOGPIXELSY)
                             END IF


                        CASE ELSE
                            ' assume all values in pixel units
                            AW&=GetDeviceCaps(hDC&, %HORZRES)
                            AH&=GetDeviceCaps(hDC&, %VERTRES)
                            PIX&=GetDeviceCaps(hDC&, %LOGPIXELSX)
                            PIY&=GetDeviceCaps(hDC&, %LOGPIXELSY)
                    END SELECT

                    AW&=AW&-1
                    AH&=AH&-1


                    AW&=(AW&/PIX&)*1440
                    AH&=(AH&/PIY&)*1440
                    FMRG.rcPage.nLeft=0
                    FMRG.rcPage.nTop=0
                    FMRG.rcPage.nRight=AW&
                    FMRG.rcPage.nBottom=AH&
                    ' FMRG.rcPage=FMRG.rc

'                    msgbox str$(FMRG.rc.nLeft)+str$(FMRG.rc.nTop)+STR$(FMRG.rc.nRight)+STR$(FMRG.rc.nBottom)+_
'                           STR$(0)+STR$(0)+STR$(FMRG.rcPage.nRight)+STR$(FMRG.rcPage.nBottom)

                    FMRG.chrg.cpMin=CharStart&
                    FMRG.chrg.cpMax=CharEnd&
                    SaveDC hDC&
                    ' ------------------------------
                    IF DCType& <>3 THEN SetMapMode hDC&, %MM_TEXT
                    ' ------------------------------
                    RV&=SendMessage(hCtrl, %EM_FORMATRANGE, DFlag&, VARPTR(FMRG))
                    IF RV&<=CharStart& THEN RV&=-1
                    RestoreDC hDC&, -1
                ELSE
                    RV&=SendMessage(hCtrl, %EM_FORMATRANGE, 0, %NULL)
                    RV&=0
                END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_LPrintRichText(BYVAL FormName$, BYVAL RichID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL CharStart&, BYVAL CharEnd&, BYVAL LFlag&) EXPORT10 AS LONG
    LOCAL RV&
    LOCAL hDC&
    hDC&=ZGetPrnDC
    RV&=-1
    IF hDC&<>0 THEN
        RV&=EZ_DCPrintRichText(hDC&, FormName$, RichID&, X&, Y&, W&, H&, CharStart&, CharEnd&, LFlag&)
    ELSE    ' possible fake printer used to test length or to clear buffer
        IF App_FakePrinterDC<>0 THEN
            IF LFlag&<>1 THEN LFlag&=-1
            RV&=EZ_DCPrintRichText(App_FakePrinterDC, FormName$, RichID&, X&, Y&, W&, H&, CharStart&, CharEnd&, LFlag&)
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_DCDrawCanvas (BYVAL hDC&, BYVAL FormName$, BYVAL CanvasID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&) EXPORT10
    LOCAL hCtrl AS LONG, hBmp&
    IF hDC&<>0 THEN
        hCtrl=ezHandle(FormName$, CanvasID&,1)
        IF hCtrl<>0 THEN
            IF App_CanvasHandle&<>hCtrl THEN ' can't be drawing in a Canvas for the same control
                IF ZGetClass(hCtrl)= $CanvasClassName THEN
                    hBmp&=SendMessage(hCtrl,%EZCV_GETBITMAP,0,0)
                    IF hBmp&<>0 THEN
                        EZ_DCDrawPicture hDC&, X&, Y&, W&, H&, hBmp&
                    END IF
                END IF
            END IF
        END IF
    END IF
END SUB

SUB EZ_LDrawCanvas (BYVAL FormName$, BYVAL CanvasID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    EZ_DCDrawCanvas hDC&, FormName$, CanvasID&, X&, Y&, W&, H&
END SUB

FUNCTION zCopyControl(BYVAL hCtrl&, BYVAL Mode&, BYVAL VFlag&) AS LONG
    LOCAL R AS RECT, W&, H&, hBmp&, PA&, hDC AS LONG, hDC2 AS LONG, RV&, PFlag&, OldBmp&, AltFlag&, CS&, CDCFlag&
    hBmp&=0
    App_UseAltWMPrint&=0
    IF IsWindow(hCtrl&) THEN
        IF (Mode& AND 1024&)=1024 THEN AltFlag&=1 ELSE AltFlag&=0
        Mode&=Mode& AND 3
        IF IsWindowVisible(hCtrl&)=0 THEN Mode&=Mode& AND 1
        SELECT CASE Mode&
             CASE 3 ' direct screen copy and nonclient area
                 GetWindowRect hCtrl&, R  ' entire window including borders
             CASE 2 ' direct screen copy and only client area
                 GetClientRect hCtrl&, R
                 ClientToScreen hCtrl&, BYVAL VARPTR(R)
                 ClientToScreen hCtrl&, BYVAL VARPTR(R)+8
             CASE 1
                 GetWindowRect hCtrl&, R  ' entire window including borders
                 PFlag&=%PRF_CLIENT OR %PRF_CHILDREN OR %PRF_ERASEBKGND OR %PRF_NONCLIENT
                 IF AltFlag& THEN App_UseAltWMPrint&=1
             CASE ELSE
                 GetClientRect hCtrl&, R
                 PFlag&=%PRF_CLIENT OR %PRF_CHILDREN OR %PRF_ERASEBKGND
                 IF AltFlag& THEN App_UseAltWMPrint&=1
        END SELECT
        IF VFlag& THEN PFlag&=PFlag& OR %PRF_CHECKVISIBLE
        W&=R.nRight-R.nLeft
        H&=R.nBottom-R.nTop
        hDC = GetDC(%HWND_DESKTOP)
        hDC2=CreateCompatibleDC(hDC)
        ReleaseDC %HWND_DESKTOP, hDC
        hBmp&=CreateNewDib(hDC2, 32, W&, H&, PA&)
        OldBmp&=SelectObject(hDC2, hBmp&)
        SELECT CASE Mode&
             CASE 0,1
                  RV&=SendMessage(hCtrl&, &H317, hDC2, PFlag&)    ' %WM_PRINT
             CASE 2,3
'                    CDCFlag&=1
'                    CS&=GetClassLong(hCtrl&, %GCL_STYLE)
'                    IF (CS& AND %CS_OWNDC)=%CS_OWNDC THEN CDCFlag&=0
'                    IF (CS& AND %CS_CLASSDC)=%CS_CLASSDC THEN CDCFlag&=0
                    IF Mode&=2 THEN
                         hDC=GetDCEx(hCtrl&, 0, %DCX_CACHE)
                    ELSE
                         hDC=GetDCEx(hCtrl&, 0, %DCX_CACHE OR %DCX_WINDOW)
                    END IF
                    BitBlt hDC2, 0,0, W&,H&, hDC, 0,0, %SRCCOPY
'                    IF CDCFlag& THEN ReleaseDC hCtrl&, hDC
                    ReleaseDC hCtrl&, hDC
        END SELECT

        SelectObject hDC2, OldBmp&
        DeleteDC hDC2
    END IF
    App_UseAltWMPrint&=0
    FUNCTION=hBmp&
END FUNCTION

SUB EZ_DCDrawCanvasSP (BYVAL hDC&, BYVAL FormName$, BYVAL CanvasID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&) EXPORT10
    LOCAL hCtrl AS LONG, hBmp&
    IF hDC&<>0 THEN
        hCtrl=ezHandle(FormName$, CanvasID&,1)
        IF hCtrl<>0 THEN
            IF App_CanvasHandle&<>hCtrl THEN ' can't be drawing in a Canvas for the same control
                IF ZGetClass(hCtrl)= $CanvasClassName THEN
                    hBmp&=zCopyControl(hCtrl, 0, 0)
                    IF hBmp&<>0 THEN
                        EZ_DCDrawPicture hDC&, X&, Y&, W&, H&, hBmp&
                        DeleteObject hBmp&
                    END IF
                END IF
            END IF
        END IF
    END IF
END SUB

SUB EZ_LDrawCanvasSP (BYVAL FormName$, BYVAL CanvasID&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    EZ_DCDrawCanvasSP hDC&, FormName$, CanvasID&, X&, Y&, W&, H&
END SUB

FUNCTION EZ_CopyWindow(BYVAL hWnd&, BYVAL Mode&) EXPORT10 AS STRING
    LOCAL hBmp&, RV$
    IF IsWindow(hWnd&) THEN
        hBmp&=zCopyControl(hWnd&, Mode&,0)
        IF hBmp&<>0 THEN RV$=EZ_NamePicture(hBmp&)
    END IF
    FUNCTION=RV$
END FUNCTION

FUNCTION EZ_CopyForm(BYVAL FormName$, BYVAL Mode&) EXPORT10 AS STRING
    FUNCTION=EZ_CopyWindow(ezHandle(FormName$,0,1), Mode&)
END FUNCTION

FUNCTION EZ_CopyControl(BYVAL FormName$, BYVAL CID&, BYVAL Mode&) EXPORT10 AS STRING
    FUNCTION=EZ_CopyWindow(ezHandle(FormName$,CID&,1), Mode&)
END FUNCTION

'------------------------------------------------------------------------------

SUB EZ_CShowRect(BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&) EXPORT10
IF App_CanvasHandle&<>0 THEN
    IF X2&>=X1& THEN
        IF Y2&>=Y1& THEN
            DIM PT(1 TO 2) AS POINTAPI, TmpRgn&
            PT(1).x=X1&
            PT(1).y=Y1&
            PT(2).x=X2&
            PT(2).y=Y2&
            LPtoDP App_CanvasDC&, PT(1), 2
            PT(2).x=PT(2).x+1
            PT(2).y=PT(2).y+1

            ' --------------------------
            ' make rectangle slightly bigger to compensate for any close errors
            PT(1).x=PT(1).x-1
            PT(1).y=PT(1).y-1
            PT(2).x=PT(2).x+1
            PT(2).y=PT(2).y+1
            ' --------------------------

            App_CanvasDirtyFlag&=1
            IF App_CanvasDirtyRgn&=0 THEN
                App_CanvasDirtyRgn&=CreateRectRgn(PT(1).x, PT(1).y, PT(2).x, PT(2).y)
            ELSE
                TmpRgn&=CreateRectRgn(PT(1).x, PT(1).y, PT(2).x, PT(2).y)
                CombineRgn App_CanvasDirtyRgn&, App_CanvasDirtyRgn&, TmpRgn&, %RGN_OR
                DeleteObject TmpRgn&
            END IF
        END IF
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

DECLARE SUB EZ_CEndEffects(BYVAL HorzFlip&, BYVAL VertFlip&, BYVAL EFlag&, BYVAL AFlag&)

SUB EZ_EndDraw() EXPORT10
LOCAL RV&
IF App_CanvasHandle&<>0 THEN

    IF App_UnfinishedCanvasEffect&<>0 THEN
        EZ_CEndEffects 0,0,0,0
        App_UnfinishedCanvasEffect&=0
    END IF
    EZ_CEndEffects 2,0,0,0  ' frees canvas effects sprite if one exists
    EZ_CSelectBuffer 1
    RV&=SendMessage(App_CanvasHandle&, %EZCV_SETVIEW, 0,0)  ' reset DC mapmode
    SendMessage App_CanvasHandle&,%EZCV_DRAW,0,0   ' select old bitmaps into DC's
    IF App_CanvasDirtyFlag& THEN
        IF App_CanvasDirtyRgn& THEN
            InvalidateRgn App_CanvasHandle&, App_CanvasDirtyRgn&, %TRUE
            DeleteObject App_CanvasDirtyRgn&
        ELSE
            InvalidateRect App_CanvasHandle&, BYVAL %NULL, %TRUE
        END IF
    ELSE
        InvalidateRect App_CanvasHandle&, BYVAL %NULL, %TRUE
    END IF
    App_CanvasDC&=0
    App_CanvasHandle&=0
    App_PictureWindow&=0
    App_CanvasDirtyFlag&=0
    App_CanvasDirtyRgn&=0

    App_ChooseCanvasDPIx&=0
    App_ChooseCanvasDPIy&=0

END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CDraw (BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCDraw App_CanvasDC&, DObj&, X1&, Y1&, X2&, Y2&, PenWidth&, FillFlag&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CDrawPicture (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$) EXPORT10
IF App_CanvasDC&<>0 THEN
    PBVDrawPicture App_CanvasDC&, X&, Y&, W&, H&, Pict$, PProp$,0,0
END IF
END SUB

SUB EZ_CDrawPictureEx (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL Pict$, BYVAL PProp$, BYVAL FMode&, BYVAL Param1&) EXPORT10
IF App_CanvasDC&<>0 THEN
    PBVDrawPicture App_CanvasDC&, X&, Y&, W&, H&, Pict$, PProp$,FMode&,Param1&
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_DCDrawIcon(BYVAL CurrentDC&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hIcon&, BYVAL DProp$) EXPORT10
LOCAL DFlag&
DFlag&=%DI_NORMAL
DProp$=UCASE$(DProp$)
IF INSTR(DProp$,"I") THEN
    DFlag&=%DI_IMAGE
ELSEIF INSTR(DProp$,"M") THEN
    DFlag&=%DI_MASK
END IF

DrawIconEx CurrentDC&, X&, Y&, hIcon&, W&, H&, 0, %NULL, DFlag&
END SUB

'------------------------------------------------------------------------------

SUB EZ_CDrawIcon (BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL IName$, BYVAL DProp$) EXPORT10
LOCAL hIcon&
IF App_CanvasDC&<>0 THEN
    hIcon&=EZ_IconHandle(IName$)
    IF hIcon&<>0 THEN
        EZ_DCDrawIcon App_CanvasDC&, X&, Y&, W&, H&, hIcon&, DProp$
    END IF
END IF
END SUB

'------------------------------------------------------------------------------

SUB EZ_CPrint (BYVAL X&, BYVAL Y&, BYVAL MyText$) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCPrint App_CanvasDC&, X&, Y&, MyText$
END IF
END SUB

'------------------------------------------------------------------------------

SUB PBVRegisterCanvasClass()
    ' removed the %CS_PARENTDC class style
    zRegisterClass $CanvasClassName, %CS_HREDRAW OR %CS_VREDRAW OR %CS_DBLCLKS, CODEPTR(CanvasClassWndProc), 0, %CanvasClassExtraData*4, 0, 0
    App_CanvasCursor1=LoadCursor(%NULL, BYVAL %IDC_ARROW)
    App_CanvasCursor2=LoadCursor(%NULL, BYVAL %IDC_CROSS)
END SUB

SUB PBVClearCanvasAndShapeClass()
    DeleteObject App_CanvasCursor1
    DeleteObject App_CanvasCursor2
    zUnRegisterClass $CanvasClassName
    zUnRegisterClass $ShapeClassName
    IF App_DragHandleClass&<>0 THEN
        zUnRegisterClass $DragHandleControl
    END IF
    IF App_hTurtle1&<>0 THEN
        zUnRegisterClass $TurtleClassName
    END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION GetViewPos(BYVAL hWnd AS LONG, BYVAL ViewWidth&, BYVAL ViewMode&, BYVAL DFlag&) AS LONG
LOCAL PU!, AV!, RV&, AW!, W!, V&
V&=ZGetWindowLong(hWnd, 5)
IF DFlag& THEN
    V&=LOWRD(V&)
ELSE
    V&=HIWRD(V&)
END IF

'IF DFlag& THEN   ' X Pos
'   V&=ZGetWindowLong(hWnd, 5)   ' Last X Pos of click
'ELSE             ' Y Pos
'   V&=ZGetWindowLong(hWnd, 6)   ' Last Y Pos of click
'END IF
IF ViewMode& THEN
   IF DFlag& THEN   ' X Pos
       AW!=ZGetWindowLong(hWnd, 3)-1  ' Actual Width in Pixels
       IF AW!<0 THEN AW!=0
   ELSE             ' Y Pos
       AW!=ZGetWindowLong(hWnd, 4)-1  ' Actual Height in Pixels
       IF AW!<0 THEN AW!=0
   END IF
   W!=ViewWidth&
   IF W!>0 THEN
       PU!=W!/AW!
       AV!=V&
       AV!=AV!*PU!
       RV&=INT(AV!+.988)
       IF RV&=>ViewWidth& THEN RV&=ViewWidth&-1
   ELSE
       RV&=V&
   END IF
ELSE
   RV&=V&
END IF
IF RV&<0 THEN RV&=0
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZGetClassHandle(BYVAL FormName$, BYVAL IDNum&, BYVAL CName$) AS LONG
    LOCAL hCtrl AS LONG, RV&
    RV&=0
    hCtrl=ezHandle(FormName$,IDNum&,1)
        IF hCtrl<>0 THEN
            IF ZGetClass(hCtrl)= CName$ THEN
                RV&=hCtrl
            END IF
        END IF
    FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_GetCanvasSize(BYVAL FormName$, BYVAL CanvasID&, W&, H&) EXPORT10
LOCAL hCtrl AS LONG, RC AS RECT
hCtrl=ZGetClassHandle(FormName$, CanvasID&, $CanvasClassName)
IF hCtrl<>0 THEN
    GetClientRect hCtrl, RC
    W&=RC.nRight-RC.nLeft
    H&=RC.nBottom-RC.nTop
END IF
END SUB

' -------------------------------------------------------------------------------------------

GLOBAL App_DrawByPtr&
GLOBAL App_DrawByWidth&
GLOBAL App_DrawByHeight&
GLOBAL App_DrawByExtra&
GLOBAL App_DrawByBits&
GLOBAL App_DrawByBytes&
GLOBAL App_DrawByRowBytes&

SUB EZ_EndDrawByPtr() EXPORT10
App_DrawByPtr&=0
App_DrawByWidth&=0
App_DrawByHeight&=0
App_DrawByExtra&=0
App_DrawByBits&=0
App_DrawByBytes&=0
App_DrawByRowBytes&=0
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_DIBOffsetY(BYVAL Y&) EXPORT10 AS LONG
FUNCTION=App_DrawByRowBytes&*Y&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_DIBPtrY(BYVAL Y&) EXPORT10 AS LONG
FUNCTION=(App_DrawByRowBytes&*Y&)+App_DrawByPtr&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_DIBPut16(BYVAL X&, BYVAL Y&, BYVAL ColorV%) EXPORT10
LOCAL P AS INTEGER PTR
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    @P=ColorV%
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_DIBGet16(BYVAL X&, BYVAL Y&) EXPORT10 AS INTEGER
LOCAL P AS INTEGER PTR
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    FUNCTION=@P
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

TYPE EZ_RGB24
    Red AS BYTE
    Green AS BYTE
    Blue AS BYTE
END TYPE

TYPE EZ_RGB32
    RGB24 AS EZ_RGB24
    HighByte AS BYTE
END TYPE

UNION EZ_LColor
    ColorRGB AS EZ_RGB32
    ColorLONG AS LONG
END UNION

' -------------------------------------------------------------------------------------------

SUB EZ_DIBPut24(BYVAL X&, BYVAL Y&, BYVAL ColorV&) EXPORT10
LOCAL P AS EZ_RGB24 PTR
LOCAL Temp AS EZ_LColor
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    Temp.ColorLONG=ColorV&
    @P=Temp.ColorRGB.RGB24
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_DIBGet24(BYVAL X&, BYVAL Y&) EXPORT10 AS LONG
LOCAL P AS EZ_RGB24 PTR
LOCAL Temp AS EZ_LColor
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    Temp.ColorRGB.RGB24=@P
    FUNCTION=Temp.ColorLONG
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_DIBPut32(BYVAL X&, BYVAL Y&, BYVAL ColorV&) EXPORT10
LOCAL P AS LONG PTR
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    @P=ColorV&
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_DIBGet32(BYVAL X&, BYVAL Y&) EXPORT10 AS LONG
LOCAL P AS LONG PTR
IF App_DrawByPtr&<>0 THEN
    P=App_DrawByPtr&+(App_DrawByRowBytes&*Y&)+(X&*App_DrawByBytes&)
    FUNCTION=@P
END IF
END FUNCTION

FUNCTION EZ_DIBCol(BYVAL DV&) EXPORT10 AS LONG
    LOCAL V AS CVRGBBGR
    V.L=DV&
    SWAP V.C.R, V.C.B
    FUNCTION=V.L
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_StartDrawByPtr(BYVAL FormName$, BYVAL CanvasID&, BYVAL Buffer2Flag&) EXPORT10 AS LONG
LOCAL hCtrl AS LONG, RV&, EX&, BW&, WS&, FM&, PW&, RC AS RECT, RW&, RH&
hCtrl=ZGetClassHandle(FormName$, CanvasID&, $CanvasClassName)
RV&=0
IF hCtrl<>0 THEN
    IF Buffer2Flag&=0 THEN
        RV&=SendMessage(hCtrl, %EZCV_GETDIBPOINTER,0,0)
    ELSE
        ' error wrong parameter passed
        ' RV&=SendMessage(hCtrl, %EZCV_GETDIBPOINTER,1,0)
        RV&=SendMessage(hCtrl, %EZCV_GETDIBPOINTER,0,1)
    END IF
    IF RV&<>0 THEN

        GetClientRect hCtrl, RC
        RW&=(RC.nRight-RC.nLeft)
        RH&=(RC.nBottom-RC.nTop)

        App_DrawByPtr&=RV&
        App_DrawByWidth&=RW&        ' ZGetWindowLong(hCtrl, 3)
        App_DrawByHeight&=RH&       ' ZGetWindowLong(hCtrl, 4)
        WS&=(GetWindowLong(hCtrl, %GWL_STYLE) AND %EZCVS_32BIT)
        SELECT CASE AS LONG WS&
            CASE 2
                FM&=16
                PW&=2
            CASE 4
                FM&=24
                PW&=3
            CASE ELSE
                FM&=32
                PW&=4
        END SELECT
        App_DrawByBits&=FM&
        App_DrawByBytes&=PW&
        BW&=PW&*App_DrawByWidth&
        EX&=BW& MOD 4
        IF EX&<>0 THEN EX&=4 - EX&
        App_DrawByExtra&=EX&
        App_DrawByRowBytes&=(App_DrawByWidth&*App_DrawByBytes&)+App_DrawByExtra&
        ' ---------
          GdiFlush
        ' ---------
    END IF
END IF
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION PBVSetCanvasView(BYVAL hWnd AS LONG, BYVAL W&, BYVAL H&) AS LONG
LOCAL RW&, RH&, RC AS RECT, hDC AS LONG
IF W&=0 AND H&=0 THEN
    hDC=ZGetWindowLong(hWnd, 1)
    SetMapMode hDC, %MM_TEXT
    IF ZGetWindowLong(hWnd, 7)<>0 THEN
        ' second buffer
        hDC=ZGetWindowLong(hWnd, 6)
        SetMapMode hDC, %MM_TEXT
    END IF
ELSE
    GetClientRect hWnd, RC
    RW&=RC.nRight-RC.nLeft
    RH&=RC.nBottom-RC.nTop
    ZSetWindowLong hWnd, 3, W&
    ZSetWindowLong hWnd, 4, H&
    hDC=ZGetWindowLong(hWnd, 1)
    GOSUB SetDCView
    IF ZGetWindowLong(hWnd, 7)<>0 THEN
        hDC=ZGetWindowLong(hWnd, 6)
        GOSUB SetDCView
    END IF
END IF
FUNCTION=1
EXIT FUNCTION

SetDCView:
IF (W&=RW&) AND (H&=RH&) THEN
    SetMapMode hDC, %MM_TEXT
ELSE
    SetMapMode hDC, %MM_ANISOTROPIC
    ' SetWindowExtEx must be called before SetViewportExtEx !
    SetWindowExtEx hDC, W&-1, H&-1, BYVAL %NULL   ' use logical size
    SetWindowOrgEx hDC, 0, 0, BYVAL %NULL
    SetViewportExtEx hDC, RW&, RH&, BYVAL %NULL   ' use Real size
    SetViewportOrgEx hDC, 0, 0, BYVAL %NULL
END IF
RETURN

END FUNCTION

' -------------------------------------------------------------------------------------------

SUB PBVClearCanvas(BYVAL hWnd AS LONG)
LOCAL hParent AS LONG, BR&, OldBR&, hDC AS LONG
LOCAL W&, H&, OldhBmp&, hBmp&

hDC=ZGetWindowLong(hWnd, 1)
W&=ZGetWindowLong(hWnd, 3)
H&=ZGetWindowLong(hWnd, 4)
BR&=0
hParent=GetParent(hWnd)
IF hParent<>0 THEN BR&=SendMessage(hParent, %WM_CTLCOLORSTATIC, hDC, hWnd)
IF BR&=0 THEN BR&=GetSysColorBrush(%COLOR_WINDOW)
hBmp&=ZGetWindowLong(hWnd, 2)
GOSUB ClrCanvas
IF ZGetWindowLong(hWnd, 7)<>0 THEN
    hDC=ZGetWindowLong(hWnd, 6)
    hBmp&=ZGetWindowLong(hWnd, 9)
    GOSUB ClrCanvas
END IF
EXIT SUB

ClrCanvas:
IF App_CanvasHandle&=0 THEN
    ' this is outside draw sequence
    OldhBmp&=SelectObject(hDC, hBmp&)
END IF
OldBR&=SelectObject(hDC, BR&)
PatBlt hDC, 0,0, W&, H&, %PATCOPY
SelectObject hDC, OldBR&
IF App_CanvasHandle&=0 THEN
    SelectObject hDC, OldhBmp&
END IF
RETURN
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_CSelectBuffer(BYVAL BufferN&) EXPORT10
IF App_CanvasHandle&<>0 THEN
    IF BufferN&=1 OR BufferN&=2 THEN
        SendMessage App_CanvasHandle&, %EZCV_SELECTBUFFER, BufferN&,0
        App_CanvasDC&=SendMessage(App_CanvasHandle&,%EZCV_GETMEMDC,0,0)
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION PBVSelectBuffer(BYVAL hWnd AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL BufferN&
LOCAL CFlag&
CFlag&=0
BufferN&=ZGetWindowLong(hWnd, 7)

' msgbox "Item 7="+str$(BufferN&)+" wParam="+str$(wParam)

IF BufferN&<>0 THEN    ' there are 2 buffers
    CFlag&=1
    IF wParam=2 THEN
        ZSetWindowLong hWnd, 7, 2
    ELSE
        ZSetWindowLong hWnd, 7, 1
    END IF
END IF
FUNCTION=CFlag&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_CCopyBuffer(BYVAL SrcBuf&, BYVAL DestBuf&, BYVAL RasterMode&) EXPORT10
IF App_CanvasHandle&<>0 THEN
    IF SrcBuf&=1 AND DestBuf&=2 THEN
        SendMessage App_CanvasHandle&, %EZCV_COPYBUFFER, 0, RasterMode&
    ELSEIF SrcBuf&=2 AND DestBuf&=1 THEN
        SendMessage App_CanvasHandle&, %EZCV_COPYBUFFER, 1, RasterMode&
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetPostThreadStr(BYVAL CVal&) EXPORT10 AS STRING
    LOCAL D$, lpAddress&, L&
    D$=""
    IF CVal&<>0 THEN
        lpAddress&=GlobalLock(CVal&)
        L&=GlobalSize(CVal&)
        D$=PEEK$(lpAddress&, L&)
        GlobalUnlock CVal&
    END IF
    FUNCTION=D$
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetPostThreadCount() EXPORT10 AS LONG
LOCAL N&
EnterCriticalSection App_CriticalSectP
N&=App_ThreadPCount&
LeaveCriticalSection App_CriticalSectP
FUNCTION=N&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_PostThreadEvent(BYVAL hDlg&, BYVAL IDNum&, BYVAL D$) EXPORT10 AS LONG
    LOCAL RV&, hData&, lpAddress&
    RV&=0
    EnterCriticalSection App_CriticalSectP
    IF IsWindow(hDlg&) THEN
        IF LEFT$(ZGetClass(hDlg&),10)="EZGUI_TYPE" THEN
            '  GlobalFree hData
            IF D$<>"" THEN
                hData&=GlobalAlloc(%GMEM_MOVEABLE, LEN(D$))
                lpAddress&=GlobalLock(hData&)
                POKE$ lpAddress&, D$
                GlobalUnlock hData&
            ELSE
                hData&=0
            END IF
            RV&=PostMessage(hDlg&, %WM_USER_EVENTP, IDNum&, hData&)
            App_ThreadPCount&=App_ThreadPCount&+1
            RV&=App_ThreadPCount&
        END IF
    END IF
    LeaveCriticalSection App_CriticalSectP
    FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_SendThreadEvent(BYVAL hDlg&, BYVAL IDNum&, BYVAL CVal&) EXPORT10 AS LONG
    LOCAL RV&
    RV&=0
    EnterCriticalSection App_CriticalSect
    IF IsWindow(hDlg&) THEN
        IF LEFT$(ZGetClass(hDlg&),10)="EZGUI_TYPE" THEN
            RV&=SendMessage(hDlg&, %WM_USER_EVENT, IDNum&, CVal&)
        END IF
    END IF
    LeaveCriticalSection App_CriticalSect
    FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_StartCSect(BYVAL N&) EXPORT10
    ' Index 0 is for threads so don't use
    IF N&<1 OR N&>UBOUND(App_CriticalSectU) THEN N&=1
    EnterCriticalSection App_CriticalSectU(N&)
END SUB

DECLARE FUNCTION TryEnterCriticalSectionX(lpCriticalSection AS CRITICAL_SECTION) AS LONG

FUNCTION EZ_StartCSectEx(BYVAL N&) EXPORT10 AS LONG
    LOCAL RV&
    STATIC TEC AS DWORD, FFlag&
    IF FFlag&=0 THEN
        TEC=zGetDLLProcAddress("KERNEL32.DLL", "TryEnterCriticalSection")
        FFlag&=1
    END IF
    ' Index 0 is for threads so don't use
    IF N&<1 OR N&>UBOUND(App_CriticalSectU) THEN N&=1
    RV&=1
    IF TEC<>0 THEN      ' requires window NT or later
        CALL DWORD TEC USING TryEnterCriticalSectionX(App_CriticalSectU(N&)) TO RV&
    ELSE
        EnterCriticalSection App_CriticalSectU(N&)
        RV&=1
    END IF
    FUNCTION=RV&
END FUNCTION


' -------------------------------------------------------------------------------------------

SUB EZ_EndCSect(BYVAL N&) EXPORT10
    ' index 0 is for threads so don't use
    IF N&<1 OR N&>UBOUND(App_CriticalSectU) THEN N&=1
    LeaveCriticalSection App_CriticalSectU(N&)
END SUB



TYPE THREADTRACK
    hDlg AS LONG
    TNum AS LONG
    THREADID AS LONG
    SleepTM AS LONG
    CodeAddress AS DWORD
END TYPE

GLOBAL App_ThreadTrack() AS THREADTRACK
GLOBAL App_ThreadTrackFlag() AS LONG
GLOBAL App_ThreadTrackForm$()

SUB ZInitThreadTrack()
    REDIM App_ThreadTrack(1 TO 250) AS THREADTRACK
    REDIM App_ThreadTrackFlag(1 TO 250) AS LONG
    REDIM App_ThreadTrackForm$(1 TO 250)
END SUB

SUB ZEraseThreadTrack()
    ERASE App_ThreadTrack
    ERASE App_ThreadTrackFlag
    ERASE App_ThreadTrackForm$
END SUB

DECLARE FUNCTION MyThreadFuncX(BYVAL IFlag&) AS LONG

FUNCTION ZInternalThread(BYVAL N&) AS LONG
    LOCAL hWnd&, TN&, STM&, FormName$, RunFlag&, CVal&, CMsg&, Cancel&, RV& ' , MyThreadID&
    LOCAL MyCode AS DWORD, IFlag&
    EnterCriticalSection App_CriticalSectU(0)
        hWnd&=App_ThreadTrack(N&).hDlg
        TN&=App_ThreadTrack(N&).TNum
        STM&=App_ThreadTrack(N&).SleepTM
        MyCode=App_ThreadTrack(N&).CodeAddress
        FormName$=App_ThreadTrackForm$(N&)
    LeaveCriticalSection App_CriticalSectU(0)
    IFlag&=1
    DO
        EnterCriticalSection App_CriticalSectU(0)
            RunFlag&=App_ThreadTrackFlag(N&)
        LeaveCriticalSection App_CriticalSectU(0)
        IF RunFlag&<>0 THEN
            IF STM&>0 THEN zSleep STM&
            IF MyCode<>0 THEN
                CALL DWORD MyCode USING MyThreadFuncX(IFlag&) TO CVal&
                IFlag&=0
                IF CVal&<>0 THEN
                    RV& = EZ_SendThreadEvent(hWnd&, TN&, CVal&)
                END IF
            ELSE
                Cancel&=0
                CMsg&=%EZ_ThreadCode
                CVal&=0
                CALL DWORD PBVAddress(2) USING EZ_EventsX(FormName$, TN&, CMsg&, CVal&, Cancel&)
                IF Cancel&=0 THEN
                    RV& = EZ_SendThreadEvent(hWnd&, TN&, CVal&)
                END IF
            END IF
        ELSE
            EXIT DO
        END IF
    LOOP
    FUNCTION=1
END FUNCTION

FUNCTION ZGetThreadN(BYVAL FormName$, BYVAL TN&) AS LONG
    LOCAL N&, P&
    FormName$=UCASE$(TRIM$(FormName$))
    EnterCriticalSection App_CriticalSectU(0)
    P&=1
    DO
        ARRAY SCAN App_ThreadTrackForm$(P&), = Formname$, TO N&
        IF N&<>0 THEN
            N&=(P&-1)+N&
            IF App_ThreadTrack(N&).TNum=TN& THEN EXIT DO
            P&=N&+1
            N&=0
            IF P&>UBOUND(App_ThreadTrack) THEN EXIT DO
        ELSE
            EXIT DO
        END IF
    LOOP
    LeaveCriticalSection App_CriticalSectU(0)
    FUNCTION=N&
END FUNCTION

SUB ZThreadActionByNum(BYVAL N&, BYVAL Mode&, BYVAL ModeVal&)
    LOCAL RV&, MyThreadID&, CFlag&, THRV&
    LOCAL EFlag&, CT&
    CFlag&=0
    IF N&<>0 THEN
        EnterCriticalSection App_CriticalSectU(0)
            MyThreadID&=App_ThreadTrack(N&).THREADID
            IF App_ThreadTrackFlag(N&)=0 THEN CFlag&=1  ' already closed
            IF Mode&=3 THEN App_ThreadTrackFlag(N&)=0   ' terminate thread
        LeaveCriticalSection App_CriticalSectU(0)
        IF CFlag& THEN EXIT SUB
        SELECT CASE AS LONG Mode&
            CASE 1
                RV&=SuspendThread(MyThreadID&)
            CASE 2
                RV&=ResumeThread(MyThreadID&)
            CASE 3
                CT&=0
                DO
                    zSleep 10
                    EZ_DoEvents 50
                    EFlag&=0
                    THRV&=GetExitCodeThread(MyThreadID&,EFlag&)
                    INCR CT&
                    IF CT&>5000 THEN EXIT DO
                    IF EFlag&<>&H103 THEN EXIT DO
                    LOOP
                    CloseHandle MyThreadID&
            CASE 10
                SetThreadPriority  MyThreadID&, ModeVal&
            CASE ELSE
        END SELECT
    END IF
END SUB

SUB ZThreadAction(BYVAL FormName$, BYVAL TN&, BYVAL Mode&, BYVAL ModeVal&)
    LOCAL N&
    N&=ZGetThreadN(FormName$, TN&)
    ZThreadActionByNum N&, Mode&,ModeVal&
END SUB

SUB ZTerminateAllThreads()
    LOCAL MaxN&, N&
    EnterCriticalSection App_CriticalSectU(0)
    MaxN&=UBOUND(App_ThreadTrackFlag)
    LeaveCriticalSection App_CriticalSectU(0)
    FOR N&=1 TO MaxN&
        ZThreadActionByNum N&, 2,0    ' resume first before terminating
        ZThreadActionByNum N&, 3,0
    NEXT N&
END SUB

' -------------------------------------------------------------------------------------------

%EZ_DefaultStackSize    = 1048576


FUNCTION ZStartThread(BYVAL FormName$, BYVAL TN&, BYVAL STM&, BYVAL MyCode AS DWORD) AS LONG
    LOCAL hWnd&, MyThreadID&, N&, ThreadIDNum&, MyStack&
    hWnd&=ezHandle(FormName$,0,1)
    IF hWnd&<>0 THEN
        EnterCriticalSection App_CriticalSectU(0)
        ARRAY SCAN App_ThreadTrackFlag(1), =0 , TO N&
        IF N&<>0 THEN
            App_ThreadTrackFlag(N&)=1       ' use to terminate thread
            MyStack&=%EZ_DefaultStackSize
            MyThreadID&=CreateThread(BYVAL %NULL, MyStack&, CODEPTR(ZInternalThread), N&, 0, ThreadIDNum&)
            IF MyThreadID&<>0 THEN
                App_ThreadTrack(N&).hDlg=hWnd&
                App_ThreadTrack(N&).TNum=TN&
                App_ThreadTrack(N&).THREADID=MyThreadID&
                App_ThreadTrack(N&).SleepTM=STM&
                App_ThreadTrack(N&).CodeAddress=MyCode
                IF FormName$="{ME}" THEN FormName$=EZ_GetME
                App_ThreadTrackForm$(N&)=UCASE$(TRIM$(FormName$))
            END IF
        END IF
        LeaveCriticalSection App_CriticalSectU(0)
    END IF
    FUNCTION=MyThreadID&
END FUNCTION


SUB EZ_StartThread(BYVAL FormName$, BYVAL TN&, BYVAL STM&) EXPORT10
    LOCAL RV&
    RV&=ZStartThread(FormName$, TN&, STM&, 0)
END SUB


FUNCTION EZ_StartThreadEx(BYVAL FormName$, BYVAL TN&, BYVAL STM&, BYVAL CodeAddress AS DWORD) EXPORT10 AS LONG
    FUNCTION=ZStartThread(FormName$, TN&, STM&, CodeAddress)
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_PauseThread(BYVAL FormName$, BYVAL TN&) EXPORT10
    ZThreadAction FormName$, TN&,1,0
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_ResumeThread(BYVAL FormName$, BYVAL TN&) EXPORT10
    ZThreadAction FormName$, TN&,2,0
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_CloseThread(BYVAL FormName$, BYVAL TN&) EXPORT10
    ZThreadAction FormName$, TN&,2,0  ' resume to make sure can be closed
    ZThreadAction FormName$, TN&,3,0
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_SetThread(BYVAL FormName$, BYVAL TN&, BYVAL TPriority&) EXPORT10
    LOCAL ModeVal&
    IF TPriority&<-2 THEN TPriority&=-2
    IF TPriority&>2 THEN TPriority&=2
    ModeVal&=TPriority&
    ZThreadAction FormName$, TN&,10,ModeVal&
END SUB

FUNCTION PBVCopyBuffer(BYVAL hWnd AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL BufferN&, hBmp1 AS LONG, hBmp2 AS LONG
LOCAL CFlag&, hDC1 AS LONG, hDC2 AS LONG, W&, H&, RM&
CFlag&=0
IF App_CanvasHandle&=hWnd THEN
    BufferN&=ZGetWindowLong(hWnd, 7)
    IF BufferN&<>0 THEN    ' there are 2 buffers
        hDC1=ZGetWindowLong(hWnd, 1)
        hDC2=ZGetWindowLong(hWnd, 6)
        IF (hDC1<>0) AND (hDC2<>0) THEN
            hBmp1=ZGetWindowLong(hWnd, 2)
            hBmp2=ZGetWindowLong(hWnd, 9)
            IF (hBmp1<>0) AND (hBmp2<>0) THEN
                GdiFlush
                ' copy from buffer 1 to 2
                IF wParam=1 THEN
                    ' copy from buffer 2 to 1
                    SWAP hDC1, hDC2
                    SWAP hBmp1, hBmp2
                END IF
                W&=ZGetWindowLong(hWnd, 3)
                H&=ZGetWindowLong(hWnd, 4)
                SaveDC hDC1
                SaveDC hDC2
                SetMapMode hDC1, %MM_TEXT
                SetMapMode hDC2, %MM_TEXT
                SELECT CASE AS LONG lParam
                    CASE 0
                        RM&=%SRCCOPY
                    CASE 1
                        RM&=%SRCINVERT
                    CASE ELSE
                        RM&=lParam
                END SELECT

                BitBlt hDC2, 0,0, W&, H&, hDC1, 0, 0, RM&
                RestoreDC hDC2, -1
                RestoreDC hDC1, -1
                CFlag&=1
            END IF
        END IF
    END IF
END IF
FUNCTION=CFlag&
END FUNCTION

SUB PBVStartDraw(BYVAL hWnd AS LONG)
LOCAL hDC AS LONG, hBmp AS LONG
hDC=ZGetWindowLong(hWnd, 1)
hBmp=ZGetWindowLong(hWnd, 2)
App_CanvasOldhBmp1&=SelectObject(hDC, hBmp)
IF ZGetWindowLong(hWnd, 7)<>0 THEN
    hDC=ZGetWindowLong(hWnd, 6)
    hBmp=ZGetWindowLong(hWnd, 9)
    App_CanvasOldhBmp2&=SelectObject(hDC, hBmp)
END IF
END SUB

SUB PBVEndDraw(BYVAL hWnd AS LONG)
LOCAL hDC AS LONG
hDC=ZGetWindowLong(hWnd, 1)
SelectObject hDC, App_CanvasOldhBmp1&
IF ZGetWindowLong(hWnd, 7)<>0 THEN
    hDC=ZGetWindowLong(hWnd, 6)
    SelectObject hDC, App_CanvasOldhBmp2&
END IF
END SUB

' -------------------------------------------------------------------------------------------


FUNCTION CanvasClassWndProc(BYVAL hWnd   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) EXPORT10 AS LONG

LOCAL hParent AS LONG

'  If message is processed then set FUNCTION=0 and then EXIT FUNCTION

SELECT CASE AS LONG Msg
    CASE %WM_SETCURSOR
         IF LOWRD(lParam)=%HTCLIENT THEN
             IF SendMessage(GetParent(hWnd),%WM_SETCURSOR, wParam,lParam)=0 THEN
                 IF ( GetWindowLong(hWnd, %GWL_STYLE) AND 1)=0 THEN
                    SetCursor App_CanvasCursor1
                 ELSE
                    SetCursor App_CanvasCursor2
                 END IF
                 FUNCTION=1
                 EXIT FUNCTION
             END IF
         END IF
    CASE %WM_SETTEXT
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_PAINT
        PBVCanvasClassPaint hWnd, wParam, lParam, 1
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_PRINTCLIENT
        LOCAL OKFlag&
        IF (lParam AND %PRF_CLIENT)=%PRF_CLIENT THEN
            OKFlag&=1
            IF (lParam AND %PRF_CHECKVISIBLE)=%PRF_CHECKVISIBLE THEN
                IF IsWindowVisible(hWnd)=0 THEN OKFlag&=0
            END IF
            IF OKFlag& THEN PBVCanvasClassPaint hWnd, wParam, lParam, 0
            FUNCTION=0
            EXIT FUNCTION
        END IF
    CASE %WM_ERASEBKGND
        FUNCTION=1
        EXIT FUNCTION
    CASE %EZCV_GETLASTXPOS      ' wParam is the X View
        FUNCTION=GetViewPos(hWnd, wParam, lParam, 1)
        EXIT FUNCTION
    CASE %EZCV_GETLASTYPOS      ' wParam is the Y view
        FUNCTION=GetViewPos(hWnd, wParam, lParam, 0)
        EXIT FUNCTION
    CASE %EZCV_GETMEMDC
        IF ZGetWindowLong(hWnd, 7)=2 THEN
            FUNCTION=ZGetWindowLong(hWnd, 6)
            EXIT FUNCTION
        ELSE
            FUNCTION=ZGetWindowLong(hWnd, 1)
            EXIT FUNCTION
        END IF
    CASE %EZCV_SETVIEW
        FUNCTION=PBVSetCanvasView(hWnd, wParam, lParam)
        EXIT FUNCTION
    CASE %EZCV_SELECTBUFFER
        FUNCTION=PBVSelectBuffer(hWnd, wParam, lParam)
        EXIT FUNCTION
    CASE %EZCV_COPYBUFFER
        FUNCTION=PBVCopyBuffer(hWnd, wParam, lParam)
        EXIT FUNCTION
    CASE %EZCV_DRAW
        IF wParam=1 THEN
            PBVStartDraw hWnd
        ELSE
            PBVEndDraw hWnd
        END IF
        FUNCTION=1
        EXIT FUNCTION
    CASE %EZCV_GETDIBPOINTER
        GdiFlush
        IF lParam=0 THEN
            FUNCTION=ZGetWindowLong(hWnd, 8)
        ELSE
            FUNCTION=ZGetWindowLong(hWnd, 10)
        END IF
        EXIT FUNCTION
    CASE %EZCV_CLEAR
        PBVClearCanvas hWnd
        IF wParam<>0 THEN
            InvalidateRect hWnd, BYVAL %NULL, %TRUE
        END IF
        FUNCTION=1
        EXIT FUNCTION
    CASE %EZCV_GETBITMAP
        IF wParam=2 THEN
            FUNCTION=ZGetWindowLong(hWnd, 9)  ' buffer 2
        ELSE
            FUNCTION=ZGetWindowLong(hWnd, 2)  ' buffer 1
        END IF
        EXIT FUNCTION
    CASE %WM_LBUTTONDBLCLK
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_DBLCLK), hWnd
        END IF
    CASE %WM_LBUTTONDOWN
        ZSetWindowLong hWnd, 5, lParam   ' Last X,Y Position of Mouse click
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND,MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_CLICKED), hWnd
        END IF

    CASE %WM_CREATE
        IF ( GetWindowLong(hWnd, %GWL_STYLE) AND %EZCVS_DOUBLEBUFFER)=0 THEN
            ZSetWindowLong hWnd, 7, 0   ' no second buffer
        ELSE
            ZSetWindowLong hWnd, 7, 1   ' is double buffered ... buffer 1 selected
        END IF
        PBVBuildCanvasBitmap hWnd, 1, 0, 0
        ZSetWindowLong hWnd, 5, 0   ' Last X/Y Position of Mouse click
    CASE %WM_DESTROY
        PBVBuildCanvasBitmap hWnd, -1, 0, 0

    CASE %WM_SIZE
        PBVBuildCanvasBitmap hWnd, 0, 0, 0
        InvalidateRect hWnd, BYVAL %NULL, %TRUE
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND,MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_CUSTOM), hWnd
        END IF

    CASE %WM_SETFOCUS, %WM_KILLFOCUS
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),Msg), hWnd
        END IF
    CASE ELSE
END SELECT

FUNCTION = DefWindowProc(hWnd,Msg,wParam,lParam)

END FUNCTION

' -------------------------------------------------------------------------------------------

%RGB3Bytes      =   &HFFFFFF

%MaxRgnRects    =   800

SUB MakeRgnBitmap(BYVAL hWnd&, BYVAL W&, BYVAL H&, BYVAL hBmpImage&, BYVAL TColor&, hRgn&, hBmp&, BYVAL Mode&)
LOCAL hDCW&, hDC&, RC AS RECT, OldhBmp&, hDIB&, PA&
LOCAL hDC2&, OldhBmp2&, PIX AS LONG PTR
LOCAL BW&, BH&, BFlag&, LY&, LX&, Y2&
LOCAL FirstX&, hRgn2&, Y& , AW&, OldStretchMode&, TC AS CVRGBBGR
REGISTER X&,LastX&

' ---------------
'LOCAL CT!
'CT!=TIMER
' ---------------
BFlag&=0
hRgn&=0
hBmp&=0
IF IsWindow(hWnd&) THEN
    IF (W&<=0) OR (H&<=0) THEN
        GetClientRect hWnd&, RC
        W&=RC.nRight-RC.nLeft
        H&=RC.nBottom-RC.nTop
    END IF
    IF GetObjectType(hBmpImage&)=%OBJ_BITMAP THEN
        EZ_GetBitmapSize hBmpImage&, BW&, BH&
        IF BW&=W& THEN
            IF BH&=H& THEN
                BFlag&=1
            END IF
        END IF
        hDCW&=GetDC(hWnd&)
        hDC&=CreateCompatibleDC(hDCW&)
        hDC2&=CreateCompatibleDC(hDCW&)
        IF Mode&=1 THEN
            hBmp&=CreateCompatibleBitmap(hDCW&, W&, H&)
        END IF
        hDIB&=CreateNewDib(hDCW&, 32, W&, H&, PA&)
        ReleaseDC hWnd&, hDCW&
        OldhBmp&=SelectObject(hDC&, hDIB&)
        ' ------------
        ' second slowest block
        IF BFlag&=1 THEN
            OldhBmp2&=SelectObject(hDC2&, hBmpImage&)
            BitBlt hDC&,0,0,W&,H&,hDC2&,0,0, %SRCCOPY
            IF Mode&=1 THEN
                SelectObject hDC2&, hBmp&
            END IF
        ELSE
            OldStretchMode&=App_StretchMode&
            IF App_StretchMode&<>4 THEN App_StretchMode&=3
            EZ_DCDrawPicture hDC&, 0, 0,  W&,  H&, hBmpImage&
            App_StretchMode&=OldStretchMode&
            IF Mode&=1 THEN
                OldhBmp2&=SelectObject(hDC2&, hBmp&)
            END IF
        END IF
        ' ------------
        IF Mode&=1 THEN
            BitBlt hDC2&,0,0,W&,H&,hDC&,0,0, %SRCCOPY
        END IF


        IF OldhBmp2&<>0 THEN SelectObject hDC2&, OldhBmp2&
        DeleteDC hDC2&


        ' note: regions exclude the bottom and right sides so add 1 extra pixel

        PIX=PA&
        IF TColor&=-1 THEN
            TColor&=(@PIX AND %RGB3Bytes)
        ELSE
           TC.L=TColor&
           SWAP TC.C.R, TC.C.B  ' convert to BGR
           TColor&=TC.L
        END IF
        AW&=W&*4
        LY&=H&-1
        LX&=W&-1
        ' ------------------------------------
        STATIC ER$, ERFlag&
        LOCAL CT&, CR AS RECT PTR, HR AS LONG PTR, HRP AS DWORD
        ' header gas 8 longs first and then region coordinates buffer of 4 longs each record
        IF ERFlag&=0 THEN
             ERFlag&=1
             ER$=STRING$(%MaxRgnRects*16+32,CHR$(0))  ' 8 longs, plus 800 sets of 4 longs
        END IF
        CT&=0
        HR=STRPTR(ER$)
        HRP=HR
        CR=HR+32
        ' ------------------------------------
        FOR Y&=0 TO LY&
            PIX=PA
            FirstX&=-1
            Y2&=Y&+1
            FOR X&=0 TO LX&
                IF (@PIX AND %RGB3Bytes) = TColor& THEN
                    IF FirstX&>=0 THEN
                        LastX&=X&
                    ELSE
                        FirstX&=X&
                        LastX&=X&
                    END IF
                ELSE
                    IF FirstX&<>-1 THEN
                        GOSUB AddRectRgn2
'                        hRgn2&=CreateRectRgn(FirstX&,Y&, LastX&+1, Y2&)
'                        CombineRgn hRgn&, hRgn&, hRgn2&, %RGN_XOR
'                        DeleteObject hRgn2&
                        FirstX&=-1
                    END IF
                END IF
                INCR PIX
            NEXT X&
            IF FirstX&<>-1 THEN
                GOSUB AddRectRgn2
'                hRgn2&=CreateRectRgn(FirstX&,Y&, LastX&+1, Y2&)
'                CombineRgn hRgn&, hRgn&, hRgn2&, %RGN_XOR
'                DeleteObject hRgn2&
            END IF

            GOSUB BuildRgn

            PA&=PA&+AW&
        NEXT Y&
        SelectObject hDC&, OldhBmp&
        DeleteDC hDC&
        DeleteObject hDIB&
    END IF
END IF
EXIT SUB

AddRectRgn1:
     IF hRgn&=0 THEN hRgn&=CreateRectRgn(0,0,W&,H&)
     hRgn2&=CreateRectRgn(FirstX&,Y&, LastX&+1, Y2&)
     CombineRgn hRgn&, hRgn&, hRgn2&, %RGN_XOR
     DeleteObject hRgn2&
RETURN

AddRectRgn2:
     CT&=CT&+1
     @CR.nLeft=FirstX&
     @CR.nTop=Y&
     @CR.nRight=LastX&+1
     @CR.nBottom=Y2&
     IF CT&=%MaxRgnRects THEN GOSUB BuildRgn
     INCR CR
RETURN

BuildRgn:
     IF CT&>0 THEN
          @HR[0]=32
          @HR[1]=%RDH_RECTANGLES
          @HR[2]=CT&
          @HR[3]=0
          @HR[4]=0
          @HR[5]=0
          @HR[6]=W&
          @HR[7]=H&
          hRgn2&=ExtCreateRegion(BYVAL %NULL, (CT&*16)+32, BYVAL HRP)
          IF hRgn&=0 THEN hRgn&=CreateRectRgn(0,0,W&,H&)
          IF hRgn&=0 THEN
               hRgn&=hRgn2&
               hRgn2&=0
          ELSE
               CombineRgn hRgn&, hRgn&, hRgn2&, %RGN_XOR
               DeleteObject hRgn2&
          END IF
          CT&=0
          CR=HR+32
     END IF
RETURN

END SUB

' -------------------------------------------------------------------------------------------

' FUNCTION EZ_NamePicture(BYVAL hBmp&) EXPORT10 AS STRING
' FUNCTION EZ_CreatePicture(BYVAL W&, BYVAL H&) EXPORT10 AS STRING
' FUNCTION EZ_CreateDIBPicture(BYVAL BPP&, BYVAL W&, BYVAL H&, BYVAL DProp$, PA&) EXPORT10 AS STRING
' FUNCTION EZ_StartPictureDraw(BYVAL PName$) EXPORT10 AS LONG
' SUB EZ_EndPictureDraw() EXPORT10

FUNCTION EZ_NamePicture(BYVAL hBmp&) EXPORT10 AS STRING
LOCAL RV$, I&
RV$=""
ARRAY SCAN APPImage(1), =0, TO I&
IF I&>0 THEN
    IF GetObjectType(hBmp&)=%OBJ_BITMAP THEN
        App_EZ_PCount=App_EZ_PCount+1
'        RV$="$BMP_"+RIGHT$("00000"+LTRIM$(STR$(App_EZ_PCount)),5)
        RV$="$BMP_"+HEX$(App_EZ_PCount)
        APPImageName$(I&)=RV$
        APPImage(I&)=hBmp&
        APPImageType(I&)=%OBJ_BITMAP
    END IF
END IF
FUNCTION=RV$
END FUNCTION

FUNCTION EZ_NameIcon(BYVAL hIcon&) EXPORT10 AS STRING
LOCAL RV$, I&
RV$=""
ARRAY SCAN APPImage(1), =0, TO I&
IF I&>0 THEN
        App_EZ_PCount=App_EZ_PCount+1
'        RV$="$ICO_"+RIGHT$("00000"+LTRIM$(STR$(App_EZ_PCount)),5)
        RV$="$ICO_"+HEX$(App_EZ_PCount)
        APPImageName$(I&)=RV$
        APPImage(I&)=hIcon&
        APPImageType(I&)=0
END IF
FUNCTION=RV$
END FUNCTION


' -------------------------------------------------------------------------------------------

FUNCTION ZMakeNewDC() AS LONG
    LOCAL RV&, hDC&
    hDC&=GetDC(%HWND_DESKTOP)
    RV&=CreateCompatibleDC(hDC&)
    ReleaseDC %HWND_DESKTOP, hDC&
    FUNCTION=RV&
END FUNCTION


GLOBAL App_PDrawDC AS LONG
GLOBAL App_PDrawDCOldBmp AS LONG

FUNCTION EZ_StartPictureDraw(BYVAL PName$) EXPORT10 AS LONG
LOCAL hBmp& ', hDC AS LONG
hBmp&=EZ_ImageHandle(PName$)
IF hBmp&<>0 THEN
    App_PDrawDC=ZMakeNewDC
    App_PDrawDCOldBmp=SelectObject(App_PDrawDC, hBmp&)
    FUNCTION=App_PDrawDC
ELSE
    FUNCTION=0
END IF
END FUNCTION

'TYPE BITMAPFILEHEADER
'  bfType AS INTEGER
'  bfSize AS LONG
'  bfReserved1 AS INTEGER
'  bfReserved2 AS INTEGER
'  bfOffBits AS LONG
'END TYPE

SUB EZ_SavePicture(BYVAL Pict$, BYVAL F$) EXPORT10
    LOCAL hBmp&, AW&, AH&, PA&, PixelLen&, FileSize&, BitOffset&
    LOCAL BF$, AFN%, DIBP$, hDC&, ScanLine&
    LOCAL BM AS BITMAPINFOHEADER, WL&, BP$, AP&
    hBmp&=EZ_Imagehandle(Pict$)
    IF hBmp&<>0 THEN
        EZ_GetBitmapSize hBmp&, AW&, AH&
        DIBP$ = EZ_CreateDIBPicture (32,  AW&,  AH&, "BU", PA& )  ' use "BU" for bottom up bitmap
        IF DIBP$<>"" THEN
            hDC&=EZ_StartPictureDraw(DIBP$)
            EZ_DCDrawPicture hDC&,0,0, AW&, AH&, hBmp&
            EZ_EndPictureDraw
            PixelLen&=AW&*4*AH&

            FileSize&=14+SIZEOF(BM)+PixelLen&
            BitOffset&=14+SIZEOF(BM)
            BF$="BM"+MKL$(FileSize&)+MKI$(0)+MKI$(0)+MKL$(BitOffset&)

            BM.biSize=SIZEOF(BM)
            BM.biWidth=AW&
            BM.biHeight=AH&    ' pass a negative value for a topdown Bitmap
            BM.biPlanes=1
            BM.biBitCount=32
            BM.biCompression=%BI_RGB
            BM.biSizeImage=PixelLen&
            BM.biXPelsPerMeter=0
            BM.biYPelsPerMeter=0
            BM.biClrUsed=0
            BM.biClrImportant=0
            WL&=4*AW&
            BF$=BF$+PEEK$(VARPTR(BM), SIZEOF(BM))
            BP$=STRING$(AH&*WL&, CHR$(0))
            ScanLine&=PA&+((AH&-1)*WL&)
            AP&=1
            DO
                ' BF$=BF$+PEEK$(ScanLine&, WL&)
                MID$(BP$, AP&, WL&)=PEEK$(ScanLine&, WL&)
                ScanLine&=ScanLine&-WL&
                AP&=AP&+WL&
                IF ScanLine&<PA& THEN EXIT DO
            LOOP

            IF DIR$(F$,39)<>"" THEN KILL F$
            AFN%=FREEFILE
            ON ERROR GOTO ForceClose
            OPEN F$ FOR BINARY AS AFN%
            PUT$ #AFN%, BF$
            PUT$ #AFN%, BP$
            ForceClose:
            CLOSE AFN%
            ON ERROR GOTO 0
            EZ_FreeImage DIBP$
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_BCopyBlock(BYVAL hSBmp&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL hDBmp&, BYVAL DX&, BYVAL DY&) EXPORT10
    LOCAL hDC&, hDCDest&, OldBmp1&, OldBmp2&
    IF hSBmp&<>0 AND hDBmp&<>0 THEN
        IF (GetObjectType(hSBmp&)=%OBJ_BITMAP) AND (GetObjectType(hDBmp&)=%OBJ_BITMAP) THEN
            hDC&=ZMakeNewDC
            hDCDest&=ZMakeNewDC
            OldBmp1&=SelectObject(hDC&,hSBmp&)
            OldBmp2&=SelectObject(hDCDest&,hDBmp&)
            EZ_DCCopyBlock hDC&, X&, Y&, W&, H&, hDCDest&, DX&, DY&
            SelectObject hDC&,OldBmp1&
            SelectObject hDCDest&,OldBmp2&
            DeleteDC hDC&
            DeleteDC hDCDest&
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_PCopyBlock(BYVAL SrcP$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL DestP$, BYVAL DX&, BYVAL DY&) EXPORT10
    EZ_BCopyBlock EZ_ImageHandle(SrcP$), X&, Y&, W&, H&, EZ_ImageHandle(DestP$), DX&, DY&
END SUB

' -------------------------------------------------------------------------------------------


SUB EZ_CCopyBlockC(BYVAL SrcFormName$, BYVAL SrcIDNum&, BYVAL SrcBufN&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL DestFormName$, BYVAL DestIDNum&, BYVAL DestBufN&, BYVAL DX&, BYVAL DY&) EXPORT10
    LOCAL hSBmp&, hDBmp&, hCtrl1&, hCtrl2&
    IF App_CanvasHandle&=0 THEN     ' don't allow during draw cycle !
        hCtrl1&=ezHandle(SrcFormName$, SrcIDNum&,1)
        hCtrl2&=ezHandle(DestFormName$, DestIDNum&,1)
        IF (ZGetClass(hCtrl1&)=$CanvasClassName) AND (ZGetClass(hCtrl2&)=$CanvasClassName) THEN
            hSBmp&=SendMessage(hCtrl1&,%EZCV_GETBITMAP,SrcBufN&, 0)
            hDBmp&=SendMessage(hCtrl2&,%EZCV_GETBITMAP,DestBufN&, 0)
            EZ_BCopyBlock hSBmp&, X&, Y&, W&, H&, hDBmp&, DX&, DY&
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB ZPCopyBlockC(BYVAL FormName$, BYVAL IDNum&, BYVAL BufN&, BYVAL P$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL DX&, BYVAL DY&, BYVAL Mode&)
    LOCAL hSBmp&, hDBmp&, hCtrl&
    IF App_CanvasHandle&=0 THEN     ' don't allow during draw cycle !
        hCtrl&=ezHandle(FormName$, IDNum&,1)
        IF ZGetClass(hCtrl&)=$CanvasClassName THEN
            hSBmp&=SendMessage(hCtrl&,%EZCV_GETBITMAP,BufN&, 0)
            hDBmp&=EZ_ImageHandle(P$)
            IF Mode&<>0 THEN SWAP hSBmp&, hDBmp&
            EZ_BCopyBlock hSBmp&, X&, Y&, W&, H&, hDBmp&, DX&, DY&
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_CCopyBlockP(BYVAL SrcFormName$, BYVAL SrcIDNum&, BYVAL SrcBufN&, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL P$, BYVAL DX&, BYVAL DY&) EXPORT10
    ZPCopyBlockC SrcFormName$, SrcIDNum&, SrcBufN&, P$, X&, Y&, W&, H&, DX&, DY&,0
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_PCopyBlockC(BYVAL P$, BYVAL X&, BYVAL Y&, BYVAL W&, BYVAL H&, BYVAL DestFormName$, BYVAL DestIDNum&, BYVAL DestBufN&, BYVAL DX&, BYVAL DY&) EXPORT10
    ZPCopyBlockC DestFormName$, DestIDNum&, DestBufN&, P$, X&, Y&, W&, H&, DX&, DY&,1
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_EndPictureDraw() EXPORT10
IF App_PDrawDC<>0 THEN
    SelectObject App_PDrawDC, App_PDrawDCOldBmp
    DeleteDC App_PDrawDC
    App_PDrawDC=0
END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_CreatePicture(BYVAL W&, BYVAL H&) EXPORT10 AS STRING
LOCAL hDC AS LONG, hBmp&, RV$
hDC = GetDC(%HWND_DESKTOP)
hBmp&=CreateCompatibleBitmap(hDC, W&, H&)
ReleaseDC %HWND_DESKTOP, hDC
RV$=""
IF hBmp&<>0 THEN
    RV$=EZ_NamePicture(hBmp&)
END IF
FUNCTION=RV$
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_CreateDIBPicture(BYVAL BPP&, BYVAL W&, BYVAL H&, BYVAL DProp$, PA&) EXPORT10 AS STRING
LOCAL RV$, hDC AS LONG, hBmp&
hDC = GetDC(%HWND_DESKTOP)
DProp$=UCASE$(DProp$)
IF INSTR(DProp$,"{BU}") THEN H&=-H&
hBmp&=CreateNewDib(hDC, BPP&, W&, H&, PA&)
ReleaseDC %HWND_DESKTOP, hDC
RV$=""
IF hBmp&<>0 THEN
    RV$=EZ_NamePicture(hBmp&)
END IF
FUNCTION=RV$
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION CreateNewDib(BYVAL hDC AS LONG, BYVAL BPP&, BYVAL W&, BYVAL H&, PA&) AS LONG
LOCAL BM AS BITMAPINFO, RV&
' create a dibsection here
SELECT CASE AS LONG BPP&
    CASE 16,24,32
    CASE ELSE
        BPP&=32
END SELECT
BM.bmiHeader.biSize=SIZEOF(BM.bmiHeader)
BM.bmiHeader.biWidth=W&
BM.bmiHeader.biHeight=-H&    ' pass a negative value for a topdown Bitmap
BM.bmiHeader.biPlanes=1
BM.bmiHeader.biBitCount=BPP&
BM.bmiHeader.biCompression=%BI_RGB
BM.bmiHeader.biSizeImage=0
BM.bmiHeader.biXPelsPerMeter=0
BM.bmiHeader.biYPelsPerMeter=0
BM.bmiHeader.biClrUsed=0
BM.bmiHeader.biClrImportant=0
RV&=CreateDIBSection(hDC, BM, %DIB_RGB_COLORS, VARPTR(PA&), %NULL, %NULL)
' msgbox "Handle ="+str$(GlobalHandle(PA&))+" DIB ="+str$(RV&)
' msgbox "GlobalLock ="+str$(GlobalLock(RV&))+" for handle:"+str$(RV&)
' GlobalUnlock RV&
FUNCTION=RV&
END FUNCTION

GLOBAL App_SuperClassAtoms() AS LONG

%MaxSuperAtoms  =   50

SUB zDefSuperClassAtoms(BYVAL mode&)
    LOCAL CN AS ASCIIZ*32, N&
    IF mode&=1 THEN
        REDIM App_SuperClassAtoms(1 TO %MaxSuperAtoms) AS LONG
        FOR N&=1 TO %MaxSuperAtoms
            CN="EZGUI_SPC"+TRIM$(STR$(N&))+CHR$(0)
            App_SuperClassAtoms(N&)=GlobalAddAtom(CN)
        NEXT N&
    END IF
    IF mode&=0 THEN
        FOR N&=1 TO %MaxSuperAtoms
            GlobalDeleteAtom App_SuperClassAtoms(N&)
        NEXT N&
        ERASE App_SuperClassAtoms
    END IF
END SUB

SUB EZ_SetSuperClassProp(BYVAL hWnd&, BYVAL N&, BYVAL V&) EXPORT10
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd&) THEN
            SetProp hWnd&, BYVAL MAKLNG(App_SuperClassAtoms(N&),0), V&
        END IF
    END IF
END SUB

FUNCTION EZ_GetSuperClassProp(BYVAL hWnd&, BYVAL N&) EXPORT10 AS LONG
    LOCAL RV&
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd&) THEN
            RV&=GetProp(hWnd&, BYVAL MAKLNG(App_SuperClassAtoms(N&),0))
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_InitSuperClassProps(BYVAL hWnd&) EXPORT10
    LOCAL N&
    IF IsWindow(hWnd&) THEN
        FOR N&=1 TO %MaxSuperAtoms
            SetProp hWnd&, BYVAL MAKLNG(App_SuperClassAtoms(N&),0), 0
        NEXT N&
    END IF
END SUB

SUB EZ_FreeSuperClassProps(BYVAL hWnd&) EXPORT10
    LOCAL N&
    IF IsWindow(hWnd&) THEN
        FOR N&=1 TO %MaxSuperAtoms
            RemoveProp hWnd&, BYVAL MAKLNG(App_SuperClassAtoms(N&),0)
        NEXT N&
    END IF
END SUB

GLOBAL App_SuperTestList$

%MaxSPClasses       =   100

SUB ZSuperClassList(BYVAL Mode&, BYVAL MyClass$)
    LOCAL N&
    STATIC AList$(), Count&
    SELECT CASE AS LONG Mode&
        CASE 1  ' dim arrays
            REDIM AList$(1 TO %MaxSPClasses)
            Count&=0
        CASE 2  ' add item
            IF Count&<UBOUND(AList$) THEN
                Count&=Count&+1
                AList$(Count&)=MyClass$
            END IF
        CASE -1 ' clear array
            FOR N&=1 TO Count&
                IF AList$(N&)<>"" THEN zUnRegisterClass AList$(N&)
            NEXT N&
            ERASE AList$
        CASE ELSE
    END SELECT
END SUB

SUB EZ_UseSuperClass (BYVAL SClass$) EXPORT10
    IF INSTR(App_SuperTestList$, CHR$(1)+SClass$+CHR$(1)) THEN
        App_UseAlternateClass$=SClass$
    END IF
END SUB

GLOBAL App_CurrentProcAddress AS DWORD

SUB EZ_SuperClass(BYVAL NewClass$, BYVAL UseClass$, BYVAL CP AS DWORD) EXPORT10
    LOCAL windowclass    AS WndClassEx, RV&
    LOCAL szClassName AS ASCIIZ * 80, MyAtom&, OldCP AS DWORD, SpecialStyle&
    STATIC Count&
    SpecialStyle&=0
    IF LEFT$(UseClass$,1)="@" THEN
        SELECT CASE AS CONST$ UseClass$
            CASE "@BT"
                UseClass$="BUTTON"
            CASE "@CB"
                UseClass$="COMBOBOX"
            CASE "@LB"
                UseClass$="LISTBOX"
            CASE "@ED"
                UseClass$="EDIT"
            CASE "@ST"
                UseClass$="STATIC"
            CASE "@SB"
                UseClass$="SCROLLBAR"
            CASE "@TB"
                UseClass$="SysTabControl32"
            CASE "@PB"
                UseClass$="msctls_progress32"
            CASE "@UP"
                UseClass$="msctls_updown32"
            CASE "@LV"
                UseClass$="SysListView32"
            CASE "@TV"
                UseClass$="SysTreeView32"
            CASE "@TK"
                UseClass$="msctls_trackbar32"
            CASE "@AN"
                UseClass$="SysAnimate32"
            CASE "@DT"
                UseClass$="SysDateTimePick32"
            CASE "@CL"
                UseClass$="SysMonthCal32"
            CASE "@RB"
                UseClass$="ReBarWindow32"
            CASE "@PG"
                UseClass$="SysPager"
            CASE "@SH"
                UseClass$=$ShapeClassName
            CASE "@CV"
                UseClass$=$CanvasClassName
            CASE "@CVS"
                UseClass$=$CanvasClassName
                SpecialStyle&=%CS_OWNDC
            CASE "@PL"
                UseClass$=$PLISTCLASS
            CASE "@FL"
                UseClass$=$FLISTCLASS
            CASE "@MC"
                IF ZLoadMMDLL=0 THEN EXIT SUB
                UseClass$=$MCIClassName
            CASE "@DH"
                IF ZLoadDragH=0 THEN EXIT SUB
                UseClass$=$DragHandleControl
            CASE "@TU"
                IF ZLoadTurtle=0 THEN EXIT SUB
                UseClass$=$TurtleClassName
            CASE "@R1"
                IF zLoadRich(1)=0 THEN EXIT SUB
                UseClass$=App_RichEditClass$
            CASE "@R2"
                IF zLoadRich(2)=0 THEN EXIT SUB
                UseClass$=App_RichEditClass$
            CASE ELSE
                EXIT SUB
        END SELECT
    END IF
    szClassName=UseClass$+CHR$(0)
    windowclass.cbSize        = SIZEOF(windowclass)
    IF GetClassInfoEx(AppInstance&, szClassName, windowclass) THEN
        IF Count&<%MaxSPClasses THEN
            Count&=Count&+1
            OldCP=windowclass.lpfnWndProc
            windowclass.lpfnWndProc=CP
            szClassName=NewClass$+CHR$(0)
            windowclass.lpszClassName = VARPTR( szClassName )
            IF SpecialStyle&<>0 THEN
                windowclass.style=windowclass.style OR SpecialStyle&
            END IF
            windowclass.hInstance     = AppInstance&
            MyAtom&=RegisterClassEx(windowclass)
            ZSuperClassList 2, NewClass$
            EZ_MatchClass NewClass$, UseClass$
            App_SuperTestList$=App_SuperTestList$+CHR$(1)+NewClass$+CHR$(1)
            App_CurrentProcAddress=OldCP
            RV&=CallWindowProc(CP,0, %WM_CREATE,0,0)
            App_CurrentProcAddress=0
        END IF
    END IF
END SUB

FUNCTION EZ_GetSuperAddress() EXPORT10 AS DWORD
    ' only good during %WM_CREATE and hWnd&=0
    FUNCTION=App_CurrentProcAddress
END FUNCTION

FUNCTION EZ_CallSuperProc(BYVAL CP AS DWORD, BYVAL hWnd AS LONG, BYVAL Msg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) EXPORT10 AS LONG
    IF CP=0 THEN
        FUNCTION=DefWindowProc(hWnd, Msg, wParam, lParam)
    ELSE
        FUNCTION=CallWindowProc(CP,hWnd, Msg, wParam, lParam)
    END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_SetSuperClassString(BYVAL hWnd AS LONG, BYVAL N&, BYVAL D$) EXPORT10
    LOCAL hData AS LONG, lpAddress AS LONG, DLen AS LONG PTR
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd) THEN
            hData=EZ_GetSuperClassProp(hWnd, N&)
            IF hData<>0 THEN
                GlobalFree hData
            END IF
            IF LEN(D$)<>0 THEN
                ' those routine stores a long first to track actual length of data
                hData=GlobalAlloc(%GMEM_MOVEABLE, LEN(D$)+4)
                lpAddress=GlobalLock(hData)
                DLen=lpAddress
                @DLen=LEN(D$)
                POKE$ lpAddress+4, D$
                GlobalUnlock hData
                EZ_SetSuperClassProp hWnd, N&, hData
            ELSE
                EZ_SetSuperClassProp hWnd, N&, 0    ' string empty so no handle used
            END IF
        END IF
     END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_LockSuperClassString(BYVAL hWnd AS LONG, BYVAL N&, lpAddress AS DWORD, SLen&) EXPORT10
    LOCAL hData AS LONG, L&, DLen AS LONG PTR
    lpAddress=0
    SLen&=0
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd) THEN
            hData=EZ_GetSuperClassProp(hWnd, N&)
            IF hData<>0 THEN
                lpAddress=GlobalLock(hData)
                L&=GlobalSize(hData)
                IF L&<4 THEN ' no data so nothing worth doing here so return zero's and unlock
                    GlobalUnlock hData
                    lpAddress=0
                ELSE    ' get pointer to actu lstring length
                    DLen=lpAddress
                    SLen&=@DLen
                    IF SLen&>L&-4 THEN SLen&=L&-4
                    lpAddress=lpAddress+4
                END IF
            END IF
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_UnlockSuperClassString(BYVAL hWnd AS LONG, BYVAL N&) EXPORT10
    LOCAL hData AS LONG
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd) THEN
            hData=EZ_GetSuperClassProp(hWnd, N&)
            IF hData<>0 THEN
                GlobalUnlock hData
            END IF
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetSuperClassString(BYVAL hWnd AS LONG, BYVAL N&) EXPORT10 AS STRING
    LOCAL hData AS LONG, lpAddress AS LONG, DLen AS LONG PTR, AL&
    LOCAL D$, L&, P&
    D$=""
    ' Warning !!!!!!
    ' Global Memory stores data in blocks so extra bytes may
    ' be added by Memory manager. Memory will be padded,
    ' but only first byte after string passed will be
    ' guaranteed to be a zero byte. Test for the first
    ' zero byte and if found remove padding
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd) THEN
            hData=EZ_GetSuperClassProp(hWnd, N&)
            IF hData<>0 THEN
                lpAddress=GlobalLock(hData)
                L&=GlobalSize(hData)
                IF L&>=4 THEN
                    DLen=lpAddress
                    AL&=@DLen   ' get pointer to string length tracking long
                    IF AL&>L&-4 THEN AL&=L&-4
                    D$=PEEK$(lpAddress+4, AL&)
                END IF
                GlobalUnlock hData
            END IF
        END IF
    END IF
'    P&=INSTR(D$,CHR$(0))
'    IF P&>0 THEN
'        D$=LEFT$(D$,P&-1)
'    END IF
    FUNCTION=D$
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_FreeSuperClassString(BYVAL hWnd AS LONG, BYVAL N&) EXPORT10
    LOCAL hData AS LONG, lpAddress AS LONG
    IF N&>=1 AND N&<=%MaxSuperAtoms THEN
        IF IsWindow(hWnd) THEN
            hData=EZ_GetSuperClassProp(hWnd, N&)
            IF hData<>0 THEN
                GlobalFree hData
                EZ_SetSuperClassProp hWnd, N&, 0
            END IF
        END IF
    END IF
END SUB



'------------------------------------------------------------------------------

'TYPE BITMAP                             '14 bytes
'  bmType AS LONG
'  bmWidth AS LONG
'  bmHeight AS LONG
'  bmWidthBytes AS LONG
'  bmPlanes AS INTEGER
'  bmBitsPixel AS INTEGER
'  bmBits AS LONG
' END TYPE

' -------------------------------------------------------------------------------------------
'                Sprite Engine
' -------------------------------------------------------------------------------------------

TYPE EZSPRITE
    SPName AS QUAD      ' 8 bytes convert using CVQ and MKQ$ to string and back
    SPwidth AS LONG     ' width
    SPheight AS LONG    ' height
    SPFrames AS LONG    ' number of frames
    SPDIB AS LONG       ' DIB to store sprite
    SPDIBPtr AS LONG    ' DIB Pointer
    SPTColor AS LONG    ' transparent color
    SPhWnd AS LONG      ' Canvas window which holds this sprite
    SPx AS LONG         ' X position
    SPy AS LONG         ' Y position
    SPCurFrame AS LONG  ' current Frame
    SPShow AS LONG      ' Show Status (1-show, 0-hide)
    SPEffects AS LONG   ' Effects (Blends)
    SPDrawRL AS LONG    ' Draw Direction Right to Left
    SPDrawBT AS LONG    ' Draw Direction Bottom to Top
    SPAAVal AS SINGLE   ' AA softening value
    SPClone AS LONG     ' Pointer to original cloned sprite
END TYPE


GLOBAL App_SpritesExist&
GLOBAL App_EZSprite() AS EZSPRITE
GLOBAL App_SpritesBufferDIB&
GLOBAL App_SpritesBufferDIBPtr AS LONG
GLOBAL App_SpritesBufferDC AS LONG

SUB ZInitSprites()
    REDIM App_EZSprite(0 TO 2) AS EZSPRITE
    App_SpritesBufferDIB&=0
END SUB

SUB ZDeleteSprites()
    LOCAL N&
    IF App_SpritesExist& THEN
        IF App_SpritesBufferDIB&<>0 THEN
            DeleteObject App_SpritesBufferDIB&
            App_SpritesBufferDIB&=0
        END IF
        IF App_SpritesBufferDC<>0 THEN
            DeleteDC App_SpritesBufferDC
            App_SpritesBufferDC=0
        END IF
    END IF
    FOR N&=1 TO UBOUND(App_EZSprite)
        IF App_EZSprite(N&).SPDib<>0 THEN
            DeleteObject App_EZSprite(N&).SPDib     ' delete DIB
            App_EZSprite(N&).SPDib=0
        END IF
    NEXT N&
    ERASE App_EZSprite
END SUB

FUNCTION ZIsThereSprites(BYVAL hCtrl&, BYVAL Mode&) AS LONG
    REGISTER RV&, N&
    IF App_SpritesExist&<>0 THEN
        FOR N&=1 TO UBOUND(App_EZSprite)
            IF App_EZSprite(N&).SPDIB<>0 THEN
                IF App_EZSprite(N&).SPhWnd=hCtrl& THEN
                    RV&=1
                    IF Mode&=0 THEN EXIT FOR
                    IF Mode&=1 THEN App_EZSprite(N&).SPShow=0   'hide sprite since drawn
                END IF
            END IF
        NEXT N&
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_InitSpriteBuffers(BYVAL MaxSP&, BYVAL W!, BYVAL H!) EXPORT10
    LOCAL AW&, AH&, hDC&
    IF App_SpritesExist&=0 THEN
        IF MaxSP&<=10 THEN MaxSP&=10
        IF MaxSP&>5000 THEN MaxSP&=5000
        REDIM App_EZSprite(0 TO MaxSP&) AS EZSPRITE
        EZ_GetScreenSize AW&, AH&
        IF W!>1 THEN
            IF EZ_X(W!)>AW& THEN AW&=INT(W! * App_EZ_CharW)
        END IF
        IF H!>1 THEN
            IF EZ_Y(H!)>AH& THEN AH&=INT(H! * App_EZ_CharH)
        END IF
        IF AW&<256 THEN AW&=256
        IF AH&<257 THEN AH&=257
        hDC&=GetDC(%NULL)
'        AH&=AH&+1   ' add one extra row for a buffer in case a pointer goes too far
        App_SpritesBufferDIB&=CreateNewDib(hDC&, 32, AW&, AH&, App_SpritesBufferDIBPtr)
        IF App_SpritesBufferDIB&<>0 THEN
            App_SpritesExist&=1
            App_SpritesBufferDC=CreateCompatibleDC(hDC&)
            ZCreateBDIV 1   ' define calculation tables
        END IF
        ReleaseDC %NULL, hDC&
    END IF
END SUB

TYPE EZSP_RGB
    B AS BYTE
    G AS BYTE
    R AS BYTE
    RS AS BYTE
END TYPE

UNION EZSPIXEL
    BT AS EZSP_RGB
    L AS LONG
END UNION

'FUNCTION ZMakeBlend(BYVAL B1&, BYVAL B2&, BYVAL SEF&, BYVAL SEF2&) AS BYTE
'    FUNCTION=((B2&*SEF&)+(B1&*SEF2&))\100&
'END FUNCTION

GLOBAL App_BDIV() AS BYTE
GLOBAL App_BMUL() AS LONG

SUB ZCreateBDIV(BYVAL Mode&)
    LOCAL N&, MX&, B&, E&, AP&
    IF Mode&=0 THEN
        REDIM App_BDIV(0 TO 1) AS BYTE
        REDIM App_BMUL(0 TO 1) AS LONG
    ELSE
        REDIM App_BDIV(0 TO 25500) AS BYTE
        FOR N&=0 TO 25500
            App_BDIV(N&)=N&\100
        NEXT N&
        ' multiply table (New)
        MX&=256*101
        REDIM App_BMUL(0 TO MX&) AS LONG
        FOR E&=0 TO 100
            AP&=E&*256
            FOR B&=0 TO 255
                App_BMUL(AP&+B&)=B&*E&
            NEXT B&
        NEXT E&
    END IF
END SUB

SUB ZFreeBDIV()
    ERASE App_BDIV
    ERASE App_BMUL
END SUB

FUNCTION ZGetAPITime(BYVAL Mode&) AS QUAD
    LOCAL ATime AS QUAD
    STATIC TFlag&, TestFreq AS QUAD
    IF TFlag&=0 THEN
        ' calculate time interval
        IF QueryPerformanceFrequency(TestFreq) THEN     ' use performance timer
            TFlag&=1
        ELSE                                            ' use standard timer
            TFlag&=2
        END IF
    END IF
    IF Mode&=0 THEN     ' get time
        IF TFlag&=1 THEN
            QueryPerformanceCounter ATime
        ELSE
            ATime=GetTickCount()
        END IF
    ELSE
        IF TFlag&=1 THEN
            ATime=TestFreq
        ELSE
            ATime=1000
        END IF
    END IF
    FUNCTION=ATime
END FUNCTION

FUNCTION EZ_GetPTime() EXPORT10 AS EXTENDED
    LOCAL ATime AS QUAD, TPerSec AS QUAD, TM AS EXTENDED
    ATime=ZGetAPITime(0)
    TPerSec=ZGetAPITime(1)
    TM=ATime/TPerSec
    FUNCTION=TM
END FUNCTION

GLOBAL App_MinFrameTime AS EXTENDED
GLOBAL App_WaitFrameTime AS EXTENDED
GLOBAL App_MinFramePerSec AS EXTENDED
GLOBAL App_CurrentFrameRate AS EXTENDED

SUB ZFrameCounter(BYVAL Mode&, BYVAL FPS AS QUAD)
    LOCAL CurrentTick AS QUAD, FirstFlag&, MinFrameTick AS QUAD
    LOCAL TicksPerSec AS QUAD, X AS QUAD
    STATIC LastTick AS QUAD
    App_MinFrameTime=0
    App_WaitFrameTime=0
    App_MinFramePerSec=0
    IF FPS<=0 THEN FPS=1
    App_CurrentFrameRate=FPS
    IF Mode&=0 THEN
        LastTick=ZGetAPITime(0)
    ELSE
        TicksPerSec=ZGetAPITime(1)
        IF TicksPerSec<=0 THEN TicksPerSec=1
        FPS=TicksPerSec\FPS  ' calculate # of ticks per frame
        FPS=LastTick+FPS
        FirstFlag&=1
        DO
            CurrentTick=ZGetAPITime(0)
            IF FirstFlag& THEN
                MinFrameTick=CurrentTick
                FirstFlag&=0
            END IF
            IF CurrentTick<LastTick THEN    ' counter reset
                FPS=FPS-LastTick
                LastTick=0
            END IF
            IF CurrentTick>=FPS THEN
                App_MinFrameTime=(MinFrameTick-LastTick)/TicksPerSec
                App_WaitFrameTime=(CurrentTick-MinFrameTick)/TicksPerSec
                X=(MinFrameTick-LastTick)
                IF X<=0 THEN X=1
                App_MinFramePerSec=TicksPerSec/X
                IF App_MinFramePerSec<1 THEN App_MinFramePerSec=1
                EXIT DO
            END IF
            IF Mode&=1 THEN
                EZ_DoEvents 1
            END IF
        LOOP
    END IF
END SUB

FUNCTION EZ_EstimateCPUSpeed() EXPORT10 AS LONG
    LOCAL X&, Y&, Z&, LP&
    LOCAL T1 AS EXTENDED, T2 AS EXTENDED
    T1=EZ_GetPTime
    FOR LP&=1 TO 100
        FOR Y&=1 TO 480
            FOR X&=1 TO 640
                Z&=X&+Y&
            NEXT X&
        NEXT Y&
    NEXT LP&
    T2=(EZ_GetPTime-T1)*1000
    IF T2<=0 THEN T2=1
    FUNCTION=CEIL(190000/T2)
END FUNCTION

SUB EZ_StartFrame() EXPORT10
    ZFrameCounter 0,0
END SUB

SUB EZ_EndFrame(BYVAL FPS&, BYVAL Mode&) EXPORT10
    IF Mode&=0 THEN
        ZFrameCounter -1,FPS&
    ELSE
        ZFrameCounter  1,FPS&
    END IF
END SUB

FUNCTION EZ_GetFrameInfo(BYVAL Mode&) EXPORT10 AS LONG
    LOCAL RV&, V!
    SELECT CASE AS LONG Mode&
        CASE 0  ' test if maximum frame rate is below current frame rate
            IF App_MinFramePerSec<App_CurrentFrameRate THEN RV&=1
        CASE 1  ' suggested skip frame amount
            IF App_MinFramePerSec<App_CurrentFrameRate THEN
                V!=App_CurrentFrameRate/App_MinFramePerSec
                RV&=CEIL(V!)-1
            END IF
        CASE 2  ' Maximum Frames per second
            RV&=App_MinFramePerSec
        CASE 3  ' time from EZ_StartFrame to EZ_EndFrame
            RV&=App_MinFrameTime*1000  ' return in ms
        CASE 4  ' time of wait from beginning of EZ_EndFrame
            RV&=App_WaitFrameTime*1000 ' return in ms
        CASE ELSE
    END SELECT
    FUNCTION=RV&
END FUNCTION

%App_MaxAA  =   15

%UsePixelCode     =   1

'                              FAST ROUTINE
FUNCTION ZUseSpriteBufferFast(BYVAL hWnd&, BYVAL hBmp&, BYVAL MemDC&, BYVAL PX&, BYVAL PY&, BYVAL PW&, BYVAL PH&, BYVAL hWinDC&, BYVAL hWinRgn&) AS LONG
    LOCAL W&, H&, OldBmp1&, OldBmp2&, N&, BW&, BH&, SW&, SH&, SWF&
    LOCAL SF&, SX&, SY&, SCL&
    LOCAL AR&, X1&, X2&, AY&, SMaxF&
    LOCAL DIB1 AS EZSPIXEL PTR, DIB2 AS EZSPIXEL PTR
    LOCAL DIBY1 AS LONG, DIBY2 AS LONG
    LOCAL SPTR AS LONG
    LOCAL  BW4&, SW4&
    LOCAL PX2&, PY2&, RLFlag&, BTFlag&, AADiv&, CT&, AAVal!, ClipR AS RECT  ', hRgn&
    LOCAL AC&, AX&
    LOCAL  ASEF&, ASEF2&
    LOCAL SEF2&, SEF&
    LOCAL XPlusD&, XPlus&
    ' ------------------------------------
    LOCAL pSEF AS LONG PTR, pSEF2 AS LONG PTR, ArrayStart&
    LOCAL pASEF AS LONG PTR, pASEF2 AS LONG PTR
    LOCAL S1&, S2&
    IF App_SpritesExist&=0 THEN
        FUNCTION=0
        EXIT FUNCTION
    END IF
    ArrayStart&=VARPTR(App_BMUL(0))
    ' ------------------------------------
    EZ_GetBitmapSize hBmp&, W&, H&
    EZ_GetBitmapSize App_SpritesBufferDIB&, BW&, BH&
    IF W&>BW& THEN W&=BW&
    IF H&>BH& THEN H&=BH&
    IF hWnd&<>0 THEN
        OldBmp1&=SelectObject(MemDC&, hBmp&)
    END IF
    OldBmp2&=SelectObject(App_SpritesBufferDC,App_SpritesBufferDIB&)

    IF hWinDC&<>0 THEN
        IF hWinRgn&<>0 THEN
            SelectClipRgn App_SpritesBufferDC, hWinRgn&
            DeleteObject hWinRgn&
        END IF
    END IF
    ' select clip region here

    BitBlt App_SpritesBufferDC, PX&,PY&, PW&,PH&, MemDC&, PX&,PY&, %SRCCOPY
    IF hWinDC&<>0 THEN
        IF hWinRgn&<>0 THEN
            SelectClipRgn App_SpritesBufferDC, %NULL
        END IF
    END IF
    IF hWnd&<>0 THEN
        SelectObject MemDC&, OldBmp1&
    END IF
    SelectObject App_SpritesBufferDC,OldBmp2&
    ' ----------------------------
    ' now draw sprites using DIB pointers
    BW4&=BW&*4   ' 4 bytes per pixel
    PX2&=PX&+PW&-1
    PY2&=PY&+PH&-1

    GDIFlush        ' see if this helps problem with reading DIB.
    IF hWnd&<>0 THEN
        S1&=1
        S2&=UBOUND(App_EZSprite)
    ELSE
        S1&=0
        S2&=0
    END IF
    FOR N&=S1& TO S2&
        IF App_EZSprite(N&).SPhWnd=hWnd& THEN
            IF App_EZSprite(N&).SPDIB<>0 THEN
                IF App_EZSprite(N&).SPShow THEN
                    SW&=App_EZSprite(N&).SPwidth
                    SH&=App_EZSprite(N&).SPheight
                    SX&=App_EZSprite(N&).SPx
                    SY&=App_EZSprite(N&).SPy
                    IF hWinDC&<>0 THEN
                        ClipR.nLeft     = SX&
                        ClipR.nTop      = SY&
                        ClipR.nRight    = ClipR.nLeft+SW&
                        ClipR.nBottom   = ClipR.nTop+SH&
                        IF RectVisible(hWinDC&, ClipR)=0 THEN ITERATE FOR
                    END IF
                    AAVal!=App_EZSprite(N&).SPAAVal
                    SW4&=SW&*4
                    SF&=App_EZSprite(N&).SPCurFrame
                    SMaxF&=App_EZSprite(N&).SPFrames
                    IF SF&<1 THEN SF&=1
                    IF SF&>SMaxF& THEN SF&=SMaxF&
                    RLFlag&=App_EZSprite(N&).SPDrawRL
                    BTFlag&=App_EZSprite(N&).SPDrawBT
                    SCL&=App_EZSprite(N&).SPTColor
                    SEF&=App_EZSprite(N&).SPEffects
                    ' test here to prevent bad array pointer later
                    IF SEF&>100 THEN SEF&=100
                    IF SEF&<0 THEN SEF&=0
                    SEF2&=100-SEF&
                    ' ------------------------------------
                    pSEF=ArrayStart&+(SEF&*1024)    ' 256*4 = 1024
                    pSEF2=ArrayStart&+(SEF2&*1024)  ' 256*4 = 1024
                    ' ------------------------------------
                    SPTR=App_EZSprite(N&).SPDIBPtr
                    X1&=(SF&-1)*SW&
                    X2&=X1&+SW&-1
                    IF BTFlag&= 0 THEN
                        AY&=SY&
                    ELSE
                        AY&=SY&+SH&-1
                    END IF
                    IF RLFlag&<>0 THEN
                        SX&=SX&+SW&-1

                        XPlusD& =-4
                        XPlus&  =-1
                    ELSE
                        XPlusD& = 4
                        XPlus&  = 1
                    END IF
                    DIBY1=SPTR  ' beginning of row (offset if calculated below)
                    DIBY2=(AY&*BW4&)+App_SpritesBufferDIBPtr
                    SWF&=SW4&*SMaxF&
#IF %UsePixelCode
                    FOR AR&=0 TO (SH&-1)
                        IF AY&>=PY& AND AY&<=PY2& THEN
                            AX&=SX&
                            DIB1=DIBY1+(X1&*4)
                            DIB2=DIBY2+(AX&*4)
                            FOR AC&=X1& TO X2&
                                IF AX&>=PX& AND AX&<=PX2& THEN
                                    IF @DIB1.L <> SCL& THEN ' not transparent color
                                        IF @DIB1.BT.RS=0 THEN
                                            IF SEF&=0 THEN
'                                                @DIB2.L=@DIB1.L ' set the color
                                                @DIB2.BT.R=@DIB1.BT.R
                                                @DIB2.BT.G=@DIB1.BT.G
                                                @DIB2.BT.B=@DIB1.BT.B
                                            ELSE
                                                ' -------------------------------------------
                                                @DIB2.BT.R=App_BDIV((@pSEF[@DIB2.BT.R])+(@pSEF2[@DIB1.BT.R]))
                                                @DIB2.BT.G=App_BDIV((@pSEF[@DIB2.BT.G])+(@pSEF2[@DIB1.BT.G]))
                                                @DIB2.BT.B=App_BDIV((@pSEF[@DIB2.BT.B])+(@pSEF2[@DIB1.BT.B]))
                                                ' -------------------------------------------
                                            END IF
                                        ELSE    ' anti-alias pixel
                                            CT&=@DIB1.BT.RS
                                            AADiv&=CT& AND 15
                                            SHIFT RIGHT CT&, 4
                                            CT&=CT&+1
                                            ASEF2&=INT(((@pSEF2[AADiv&])/CT&)*AAVal!)
                                            ASEF&=100-ASEF2&
                                            pASEF=ArrayStart&+(ASEF&*1024)    ' 256*4 = 1024
                                            pASEF2=ArrayStart&+(ASEF2&*1024)  ' 256*4 = 1024
                                            @DIB2.BT.R=App_BDIV((@pASEF[@DIB2.BT.R])+(@pASEF2[@DIB1.BT.R]))
                                            @DIB2.BT.G=App_BDIV((@pASEF[@DIB2.BT.G])+(@pASEF2[@DIB1.BT.G]))
                                            @DIB2.BT.B=App_BDIV((@pASEF[@DIB2.BT.B])+(@pASEF2[@DIB1.BT.B]))

                                          '  CT&=@DIB1.BT.RS
                                          '  SHIFT RIGHT CT&, 4
                                          '  CT&=CT&+1
                                          '  AADiv&=@DIB1.BT.RS AND 15
                                          '  ASEF2&=INT(((SEF2&*AADiv&)/CT&)*AAVal!)
                                          '  ASEF&=100-ASEF2&
                                          '  @DIB2.BT.R=App_BDIV((@DIB2.BT.R*ASEF&)+(@DIB1.BT.R*ASEF2&))
                                          '  @DIB2.BT.G=App_BDIV((@DIB2.BT.G*ASEF&)+(@DIB1.BT.G*ASEF2&))
                                          '  @DIB2.BT.B=App_BDIV((@DIB2.BT.B*ASEF&)+(@DIB1.BT.B*ASEF2&))
                                        END IF
                                    END IF
                                END IF
                                INCR DIB1   ' increments by 4 since a PTR to a long
                                DIB2=DIB2 + XPlusD&
                                AX&=AX&   + XPlus&
                            NEXT AC&
                        END IF
                        DIBY1=DIBY1+SWF&
                        IF BTFlag&=0 THEN
                            INCR AY&
                            DIBY2=DIBY2+BW4&
                        ELSE
                            DECR AY&
                            DIBY2=DIBY2-BW4&
                        END IF
                    NEXT AR&
#ENDIF
                END IF
            END IF
        END IF
    NEXT N&
        ' ----------------------------
    FUNCTION=App_SpritesBufferDIB&

END FUNCTION




FUNCTION ZGetSPNameNum(SName$) AS QUAD
    FUNCTION=CVQ(LEFT$(UCASE$(SName$)+STRING$(8, CHR$(0)),8))
END FUNCTION

FUNCTION ZGetSpriteNum(BYVAL SName$) AS LONG
    LOCAL RV&, SQ AS QUAD, N&
    SQ=ZGetSPNameNum(SName$)
    RV&=0
    FOR N&=1 TO UBOUND(App_EZSprite)
        IF App_EZSprite(N&).SPName=SQ THEN
            RV&=N&
            EXIT FOR
        END IF
    NEXT N&
    FUNCTION=RV&
END FUNCTION


SUB ZSetSpriteByte4(BYVAL N&, BYVAL Mode&)
    LOCAL DibPtr AS DWORD, X2&, Y2&, TColor&
    LOCAL Pix AS EZSPIXEL PTR, TFlag&, BColor&, AFlag&, I&, XStep&, X1&, XX&
    LOCAL TPix AS EZSPIXEL, CX&, CT&, YY&, CY&, YStep&, Y1&, CT2&   ', OKFlag&
    LOCAL X&, Y&
    IF N&>=0 AND N&<=UBOUND(App_EZSprite) THEN
        IF App_EZSprite(N&).SPDIB<>0 THEN
            DibPtr=App_EZSprite(N&).SPDIBPtr
            X2&=(App_EZSprite(N&).SPwidth * App_EZSprite(N&).SPFrames)-1
            Y2&=App_EZSprite(N&).SPheight-1
            TColor& = App_EZSprite(N&).SPTColor
            Pix=DibPtr
            IF Mode&=0 THEN
                ' clear 4th byte
                FOR Y&=0 TO Y2&
                    FOR X&=0 TO X2&
                        @Pix.BT.RS=0
                        INCR Pix
                    NEXT X&
                NEXT Y&
            ELSE
                DIM APix(0 TO Y2&, 0 TO X2&, 1 TO 3) AS LONG
                FOR Y&=0 TO Y2&
                    FOR X&=0 TO X2&
                        APix(Y&,X&,1)=@Pix.L    ' save color
                        APix(Y&,X&,2)=Pix       ' save address
                        INCR Pix
                    NEXT X&
                NEXT Y&
                ' anti-alias pixels
                XX&=X2&
                FOR Y&=0 TO Y2&
                    FOR I&=1 TO 2
                        IF I&=1 THEN
                            XStep&=1
                            X1&=0
                            X2&=XX& ' -1
                        ELSE
                            XStep&=-1
                            X1&=XX&
                            X2&=0
                        END IF
                        TFlag&=0
                        FOR X&=X1& TO X2& STEP XStep&
                            IF APix(Y&,X&,1)<>TColor& THEN
                                TFlag&=%App_MaxAA
                            ELSEIF TFlag&>0 THEN
                                AFlag&=0
                                IF Y&>0 THEN
                                    IF APix(Y&-1,X&,1)<>TColor& THEN AFlag&=1
                                END IF
                                IF Y&<Y2& THEN
                                    IF APix(Y&+1,X&,1)<>TColor& THEN AFlag&=1
                                END IF
                                IF AFlag&=0 THEN
                                    TFlag&=0
                                ELSE
                                    IF TFlag&=%App_MaxAA THEN
                                        BColor&=APix(Y&,X&-XStep&,1)
                                        CT&=1
                                        FOR CX&=X&+XStep& TO X2& STEP XStep&
                                            IF APix(Y&,CX&,1)=TColor& THEN
                                                AFlag&=0
                                                IF Y&>0 THEN
                                                    IF APix(Y&-1,CX&,1)<>TColor& THEN AFlag&=1
                                                END IF
                                                IF Y&<Y2& THEN
                                                    IF APix(Y&+1,CX&,1)<>TColor& THEN AFlag&=1
                                                END IF
                                                IF AFlag&<>0 THEN
                                                    CT&=CT&+1
                                                    IF CT&>=%App_MaxAA THEN EXIT FOR
                                                ELSE
                                                    EXIT FOR
                                                END IF
                                            ELSE
                                                EXIT FOR
                                            END IF
                                        NEXT CX&
                                        IF CT&>%App_MaxAA THEN CT&=%App_MaxAA
                                        TFlag&=CT&
                                        SHIFT LEFT CT&, 4
                                    END IF
                                    TPix.L=BColor&
                                    TPix.BT.RS=TFlag& OR CT&
                                    APix(Y&,X&,3)=TPix.L
                                    TFlag&=TFlag&-1
                                END IF
                            END IF
                        NEXT X&
                    NEXT I&
                NEXT Y&



                X2&=XX&
                YY&=Y2&
                FOR X&=0 TO X2&
                    FOR I&=1 TO 2
                        IF I&=1 THEN
                            YStep&=1
                            Y1&=0
                            Y2&=YY&
                        ELSE
                            YStep&=-1
                            Y1&=YY&
                            Y2&=0
                        END IF
                        TFlag&=0
                        FOR Y&=Y1& TO Y2& STEP YStep&
                            IF APix(Y&,X&,1)<>TColor& THEN
                                TFlag&=%App_MaxAA
                            ELSEIF TFlag&>0 THEN
                                AFlag&=0
                                IF X&>0 THEN
                                    IF APix(Y&,X&-1,1)<>TColor& THEN AFlag&=1
                                END IF
                                IF X&<X2& THEN
                                    IF APix(Y&,X&+1,1)<>TColor& THEN AFlag&=1
                                END IF
                                IF AFlag&=0 THEN
                                    TFlag&=0
                                ELSE
                                    IF TFlag&=%App_MaxAA THEN
                                        BColor&=APix(Y&-YStep&,X&,1)
                                        CT&=1
                                        FOR CY&=Y&+YStep& TO Y2& STEP YStep&
                                            IF APix(CY&,X&,1)=TColor& THEN
                                                AFlag&=0
                                                IF X&>0 THEN
                                                    IF APix(CY&,X&-1,1)<>TColor& THEN AFlag&=1
                                                END IF
                                                IF X&<X2& THEN
                                                    IF APix(CY&,X&+1,1)<>TColor& THEN AFlag&=1
                                                END IF
                                                IF AFlag&<>0 THEN
                                                    CT&=CT&+1
                                                    IF CT&>=%App_MaxAA THEN EXIT FOR
                                                ELSE
                                                    EXIT FOR
                                                END IF
                                            ELSE
                                                EXIT FOR
                                            END IF
                                        NEXT CY&
                                        IF CT&>%App_MaxAA THEN CT&=%App_MaxAA
                                        TFlag&=CT&
                                        CT2&=CT&
                                        SHIFT LEFT CT&, 4
                                    END IF
                                    ' test to see if X scan has anti-aliased it already
                                    TPix.L=APix(Y&,X&,3)
                                    IF TPix.BT.RS=0 OR CT2&>1 THEN    ' not AA yet !
                                        TPix.L=BColor&
                                        TPix.BT.RS=TFlag& OR CT&
                                        APix(Y&,X&,3)=TPix.L
                                    END IF
                                    TFlag&=TFlag&-1
                                END IF
                            END IF
                        NEXT Y&
                    NEXT I&
                NEXT X&


'                FOR Y&=0 TO Y2&
                FOR Y&=0 TO YY&
                    FOR X&=0 TO XX&
                        TPix.L=APix(Y&,X&,3)
                        IF TPix.BT.RS<>0 THEN
                            Pix=APix(Y&,X&,2)
                            @Pix.L=TPix.L
                        END IF
                    NEXT X&
                NEXT Y&
            END IF
        END IF
    END IF
END SUB
GLOBAL App_LastSpriteIndex&
GLOBAL App_SpriteDefColor&

SUB EZ_SetSpriteDefTColor(BYVAL C&) EXPORT10
    App_SpriteDefColor&=C&
END SUB

SUB zDefSprite(SName$, BYVAL W&, BYVAL H&, BYVAL SFrames&, BYVAL TColor&, CloneOrigName$)
    LOCAL SNamNum AS QUAD, N&, Match&, hDC&, EZC AS EZSPIXEL, CloneNameNum AS QUAD, CloneI&
    LOCAL AASpriteFlag&
    ' if SName$="" then this is the AA Canvas sprite (index =0)

    ' ---------------------------
    App_LastSpriteIndex&=0
    ' ---------------------------
    IF SName$<>"" THEN
        SNamNum=ZGetSPNameNum(SName$)
        AASpriteFlag&=0
    ELSE
        SNamNum=0
        AASpriteFlag&=1
    END IF
    IF LEN(CloneOrigName$)<>0 THEN
        CloneNameNum=ZGetSPNameNum(CloneOrigName$)
    ELSE
        CloneNameNum=0
        IF W&<1 OR H&<1 THEN EXIT SUB
    END IF
    IF TColor&>=0 THEN
        EZ_SaveState
        EZ_Color TColor&, TColor&
        TColor&=EZ_ColorVal(TColor&,0)
        EZ_RestoreState
    ELSE
        TColor&=App_SpriteDefColor&
    END IF

    EZC.L=TColor&
    EZC.BT.RS=0                 ' clear reserved byte
    SWAP EZC.BT.R, EZC.BT.B     ' convert from RGB to BGR
    TColor&=EZC.L
    Match&=0
    CloneI&=0
    IF AASpriteFlag&=0 THEN
        FOR N&=1 TO UBOUND(App_EZSprite)
            IF App_EZSprite(N&).SPName=SNamNum THEN
                Match&=-1
                EXIT FOR
            END IF
            IF CloneNameNum<>0 THEN
                IF App_EZSprite(N&).SPName=CloneNameNum THEN
                    IF App_EZSprite(N&).SPClone<=0 THEN ' is cloneable meaning not a clone itself
                        CloneI&=N&
                    END IF
                END IF
            END IF
        NEXT N&
        IF Match&=-1 THEN EXIT SUB
        IF CloneNameNum<>0 AND CloneI&=0 THEN EXIT SUB
        FOR N&=1 TO UBOUND(App_EZSprite)
            IF App_EZSprite(N&).SPName=0 THEN
                Match&=N&
                EXIT FOR
            END IF
        NEXT N&
    END IF
    IF Match&<>0 OR AASpriteFlag&<>0 THEN
        IF CloneNameNum=0 THEN
            IF W&<2 THEN W&=2
            IF H&<2 THEN H&=2
            IF SFrames&<1 THEN SFrames&=1
            App_EZSprite(Match&).SPName     =   SNamNum
            App_EZSprite(Match&).SPwidth    =   W&
            App_EZSprite(Match&).SPheight   =   H&
            App_EZSprite(Match&).SPFrames   =   SFrames&
            ' ------------------------------
            hDC&=GetDC(%NULL)
            App_EZSprite(Match&).SPDIB=CreateNewDib(hDC&, 32, W&*SFrames&, H&, App_EZSprite(Match&).SPDIBPtr)
            ReleaseDC %NULL, hDC&
            ' ------------------------------
            App_EZSprite(Match&).SPTColor   =   TColor&
            App_EZSprite(Match&).SPhWnd     =   0
            App_EZSprite(Match&).SPx        =   0
            App_EZSprite(Match&).SPy        =   0
            App_EZSprite(Match&).SPCurFrame =   1
            App_EZSprite(Match&).SPShow     =   0
            App_EZSprite(Match&).SPEffects  =   0
            App_EZSprite(Match&).SPDrawRL   =   0
            App_EZSprite(Match&).SPDrawBT   =   0
            App_EZSprite(Match&).SPAAVal    =   0
            App_EZSprite(Match&).SPClone    =   0
        ELSE
            App_EZSprite(Match&)            =   App_EZSprite(CloneI&)  ' clone the sprite
            App_EZSprite(Match&).SPName     =   SNamNum
            App_EZSprite(Match&).SPClone    =   1  ' flags clone so it can't be cloned
            App_EZSprite(CloneI&).SPClone   =   -1 ' flag original
            '                    .SPClone   =   0 - Nevered cloned, -1 - original for clones, 1 - is a clone
        END IF
        ' ---------------------------
        App_LastSpriteIndex&=Match&
        ' ---------------------------
    END IF
END SUB

SUB zCanvasAA(BYVAL Mode&, BYVAL TColor&, BYVAL HorzFlip&, BYVAL VertFlip&, BYVAL EFlag&, BYVAL AFlag&)
    LOCAL hCtrl&, RC AS RECT, hDC&, WEX&(), W&, H&, N&, OldSPBmp&, SPBmp&
    STATIC AADrawFlag&, OldBmp&, IsSprite&
    DIM WEX&(1 TO 2)
    IF Mode&=2 THEN
        IF IsSprite& THEN
            DeleteObject App_EZSprite(N&).SPDib     ' delete DIB
            App_EZSprite(N&).SPDib=0
            App_EZSprite(N&).SPName=0
        END IF
        EXIT SUB
    END IF
    IF App_CanvasDC&<>0 THEN
        IF App_SpritesExist& THEN
            hCtrl&=App_CanvasHandle&
            hDC&=App_CanvasDC&
            GetClientRect hCtrl&, RC
            W&=RC.nRight-RC.nLeft
            H&=RC.nBottom-RC.nTop
            IF Mode&=1 THEN
                IF AADrawFlag&=0 THEN
                    AADrawFlag&=1
                    ' create sprite zero
                    IF IsSprite&=0 THEN
                        zDefSprite "", W&, H&, 1, TColor&, ""
                        IsSprite&=1
                    ELSE
                        IF TColor&>=0 THEN
                            EZ_SaveState
                            EZ_Color TColor&, TColor&
                            App_EZSprite(0).SPTColor    =   EZ_ColorVal(TColor&,0)
                            EZ_RestoreState
                        ELSE
                            App_EZSprite(0).SPTColor    =   App_SpriteDefColor&
                        END IF
                    END IF
                    ' swap in special sprite for AA into DC to draw on
                    OldBmp&=SelectObject(hDC&, App_EZSprite(0).SPDIB)
                    IF GetMapMode(hDC&)=%MM_TEXT THEN
                        W&=W&-1
                        H&=H&-1
                    ELSE
                        ' get define viewport size not actual pixels
                        GetWindowExtEx hDC&, BYVAL VARPTR(WEX&(1))
                        W&=WEX&(1)
                        H&=WEX&(2)
                    END IF
                    IF TColor&=-1 THEN
                        EZ_ColorRGB App_SpriteDefColor&, App_SpriteDefColor&
                    ELSE
                        EZ_Color TColor&, TColor&   ' fill sprite with transparent color
                    END IF
                    EZ_DCDraw hDC&, %EZ_RECT, 0,0, W&, H&, 1,1
                    App_UnfinishedCanvasEffect&=1
                END IF
            END IF
            IF Mode&=0 THEN
                IF AADrawFlag&<>0 THEN
                    SelectObject hDC&, OldBmp&
                    ' ------------------------------------------
                    ' set sprite attributes
                    ' ------------------------------------------
                    N&=0    ' sprite number

                    ' the slow down is caused by ZSetSpriteByte4

                    ZSetSpriteByte4 N&,0  ' clear AA byte
                    IF AFlag&>0 THEN
                        ZSetSpriteByte4 N&,1
                        IF AFlag&>100 THEN AFlag&=100
                        App_EZSprite(N&).SPAAVal=AFlag&/100!
                    ELSE
                        App_EZSprite(N&).SPAAVal=0
                    END IF
                    App_EZSprite(N&).SPEffects=EFlag&
                    IF HorzFlip&<>0 THEN HorzFlip&=1
                    IF VertFlip&<>0 THEN VertFlip&=1
                    App_EZSprite(N&).SPDrawRL   =   HorzFlip&
                    App_EZSprite(N&).SPDrawBT   =   VertFlip&
                    App_EZSprite(N&).SPShow     =   1
                    App_EZSprite(N&).SPhWnd     =   0   ' must be set to zero to work
                    ' ------------------------------------------
                    ' now draw the sprite
                    SaveDC hDC&
                    SetMapMode hDC&, %MM_TEXT
                    SPBmp&=ZUseSpriteBufferFast(0, OldBmp&, hDC&, 0, 0,W&,H&,0,0)
                    OldSPBmp&=SelectObject(App_SpritesBufferDC, SPBmp&)
                    BitBlt hDC&, 0,0, W&,H&,App_SpritesBufferDC, 0,0,%SRCCOPY
                    SelectObject App_SpritesBufferDC,OldSPBmp&
                    RestoreDC hDC&, -1
                    ' free sprite when done
                    AADrawFlag&=0
                    App_UnfinishedCanvasEffect&=0
                END IF
            END IF
        END IF
    END IF
END SUB

SUB EZ_CStartEffects(BYVAL TColor&) EXPORT10
    zCanvasAA 1, TColor&,0,0,0,0
END SUB

SUB EZ_CEndEffects(BYVAL HorzFlip&, BYVAL VertFlip&, BYVAL EFlag&, BYVAL AFlag&) EXPORT10
    IF EFlag&<0 THEN EFlag&=0
    IF EFlag&>100 THEN EFlag&=100
    IF EFlag&<>0 THEN
        EFlag&=100-EFlag&
    END IF
    zCanvasAA 0,0, HorzFlip&, VertFlip&, EFlag&, AFlag&
END SUB


' =================================================================================
'     Fast Sprite Routines
' =================================================================================

FUNCTION EZ_GetFastSPIndex() EXPORT10 AS LONG
    FUNCTION=App_LastSpriteIndex&
END FUNCTION

SUB EZ_MoveSP(BYVAL I&, BYVAL X&, BYVAL Y&, BYVAL Mode&) EXPORT10
    LOCAL AX&, AY&
    IF I&>=1 AND I&<=UBOUND(App_EZSprite) THEN
        IF App_EZSprite(I&).SPName<>0 THEN
            IF Mode&=0 THEN
                AX&  =   X&
                AY&  =   Y&
            ELSE
                AX&   =   App_EZSprite(I&).SPx + X&
                AY&   =   App_EZSprite(I&).SPy + Y&
            END IF
            IF App_EZSprite(I&).SPx<>AX& OR App_EZSprite(I&).SPy<>AY& THEN
                ZFlagSpriteRect I&
                App_EZSprite(I&).SPx = AX&
                App_EZSprite(I&).SPy = AY&
            END IF
            ZFlagSpriteRect I&
        END IF
    END IF
END SUB

FUNCTION EZGL_GetSpriteBitmap(BYVAL I&) EXPORT10 AS LONG
     LOCAL RV&, F&, hBmp&
     RV&=0
     IF I&>=1 AND I&<=UBOUND(App_EZSprite) THEN
          hBmp&= App_EZSprite(I&).SPDIB
          IF hBmp&<>0 THEN
               IF App_EZSprite(I&).SPClone=0 THEN ' cannot be a clone
                    RV&=hBmp&
               END IF
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION

SUB EZ_SetSPAttr(BYVAL I&, BYVAL SFlag&, BYVAL Frm&, BYVAL Mode&, BYVAL HorzFlip&, BYVAL VertFlip&, BYVAL EFlag&, BYVAL UFlag&) EXPORT10
    LOCAL F&, MXF&, IsUFlag&
    IF I&>=1 AND I&<=UBOUND(App_EZSprite) THEN
        IF App_EZSprite(I&).SPName<>0 THEN
            IsUFlag&=0
            IF Mode&<>-1 THEN
                F&=App_EZSprite(I&).SPCurFrame
                MXF&=App_EZSprite(I&).SPFrames
                IF Mode&=0 THEN
                    F&=Frm&
                ELSE
                    F&=F&+Frm&
                END IF
                IF F&<1 THEN F&=MXF&
                IF F&>MXF& THEN F&=1
                IF App_EZSprite(I&).SPCurFrame<>F& THEN
                    App_EZSprite(I&).SPCurFrame=F&
                    IsUFlag&=1
                END IF
            END IF
            IF HorzFlip&<>-1 THEN
                IF HorzFlip&<>0 THEN HorzFlip&=1
                IF App_EZSprite(I&).SPDrawRL <> HorzFlip& THEN
                    App_EZSprite(I&).SPDrawRL   =   HorzFlip&
                    IsUFlag&=1
                END IF
            END IF
            IF VertFlip&<>-1 THEN
                IF VertFlip&<>0 THEN VertFlip&=1
                IF App_EZSprite(I&).SPDrawBT <> VertFlip& THEN
                    App_EZSprite(I&).SPDrawBT   =   VertFlip&
                    IsUFlag&=1
                END IF
            END IF
            IF EFlag&<>-1 THEN
                IF EFlag&<0 THEN EFlag&=0
                IF EFlag&>100 THEN EFlag&=100
                IF EFlag&<>0 THEN
                    EFlag&=100-EFlag&
                END IF
                IF App_EZSprite(I&).SPEffects <> EFlag& THEN
                    App_EZSprite(I&).SPEffects=EFlag&
                    IsUFlag&=1
                END IF
            END IF
            IF SFlag&<>-1 THEN
                IF SFlag&<>0 THEN SFlag&=1
                IF App_EZSprite(I&).SPShow<>SFlag& THEN
                    App_EZSprite(I&).SPShow=SFlag&
                    IsUFlag&=1
                END IF
            END IF
            IF UFlag&=0 THEN IsUFlag&=0
            IF IsUFlag& THEN ZFlagSpriteRect I&
        END IF
    END IF
END SUB



SUB EZ_CloneSprite(BYVAL SName$, BYVAL CName$) EXPORT10
    IF SName$="" THEN EXIT SUB
    zDefSprite SName$, 0,0,0,0 , CName$
END SUB

SUB EZ_DefSprite(BYVAL SName$, BYVAL W&, BYVAL H&, BYVAL SFrames&, BYVAL TColor&) EXPORT10
    IF SName$="" THEN EXIT SUB
    zDefSprite SName$, W&, H&, SFrames&, TColor&, ""
END SUB

FUNCTION zGetSpriteCount() AS LONG
    LOCAL N&, RV&
    RV&=0
    FOR N&=1 TO UBOUND(App_EZSprite)
        IF App_EZSprite(N&).SPName<>0 THEN RV&=RV&+1
    NEXT N&
    FUNCTION=RV&
END FUNCTION

FUNCTION zGetSpriteLimit() AS LONG
    FUNCTION=UBOUND(App_EZSprite)
END FUNCTION

SUB EZ_FreeSprite(BYVAL SName$) EXPORT10
    LOCAL N&, I&
    N&=ZGetSpriteNum(SName$)
    IF N&<>0 THEN
        SELECT CASE AS LONG App_EZSprite(N&).SPClone
            CASE -1     ' this is an original for clones
                FOR I&=1 TO UBOUND(App_EZSprite)    ' delete all copies
                    IF I&<>N& THEN
                        IF App_EZSprite(I&).SPClone=1 THEN  ' is a clone
                            IF App_EZSprite(I&).SPDib=App_EZSprite(N&).SPDib THEN   ' same DIB so is a clone
                                IF App_EZSprite(I&).SPShow<>0 THEN ZFlagSpriteRect I&
                                App_EZSprite(I&).SPName=0   ' no need to free DIB since original will be deleted
                                App_EZSprite(I&).SPDib=0
                                App_EZSprite(I&).SPhWnd=0
                            END IF
                        END IF
                    END IF
                NEXT I&
            CASE 1         ' is a clone so just remove the name
                IF App_EZSprite(N&).SPShow<>0 THEN ZFlagSpriteRect N&
                App_EZSprite(N&).SPName=0
                App_EZSprite(N&).SPDib=0
                App_EZSprite(N&).SPhWnd=0
                EXIT SUB
            CASE ELSE
        END SELECT
        IF App_EZSprite(N&).SPShow<>0 THEN ZFlagSpriteRect N&
        IF App_EZSprite(N&).SPDib<>0 THEN
            DeleteObject App_EZSprite(N&).SPDib     ' delete DIB
            App_EZSprite(N&).SPDib=0
        END IF
        App_EZSprite(N&).SPName=0
        App_EZSprite(N&).SPhWnd=0
    END IF
END SUB

'SUB EZ_SwapSpriteOrder(BYVAL SName1$, BYVAL SName2$) EXPORT10
'    LOCAL N1&, N2&
'    N1&=ZGetSpriteNum(SName1$)
'    N2&=ZGetSpriteNum(SName2$)
'    IF N1&<>0 AND N2&<>0 THEN
'        SWAP App_EZSprite(N1&), App_EZSprite(N2&)
'    END IF
'END SUB

SUB EZ_SwapSpriteOrder(BYVAL SName1$, BYVAL SName2$) EXPORT10
    LOCAL N1&, N2&, N&
    N1&=ZGetSpriteNum(SName1$)
    N2&=ZGetSpriteNum(SName2$)
    IF N1&<>0 AND N2&<>0 THEN
        SWAP App_EZSprite(N1&), App_EZSprite(N2&)
    END IF
END SUB


GLOBAL App_SPDrawDC AS LONG
GLOBAL App_SPDrawDCOldBmp AS LONG
GLOBAL App_SPDrawN&

FUNCTION EZ_StartSpriteDraw(BYVAL SName$, BYVAL IFrame&, MyhDC&, X1&, Y1&, X2&, Y2&) EXPORT10 AS LONG
    LOCAL N&, hDC AS LONG, hBmp&, RV&, W&, H&   ', CF&
    RV&=0
    IF App_SPDrawDC=0 THEN
        N&=ZGetSpriteNum(SName$)
        IF N&<>0 THEN
            ZSetSpriteByte4 N&,0    ' clear AA byte
            App_SPDrawN&=N&
            hBmp&=App_EZSprite(N&).SPDIB
            IF hBmp&<>0 THEN
                W&=App_EZSprite(N&).SPwidth
                H&=App_EZSprite(N&).SPheight
                IF IFrame&=0 THEN
                    X1&=0
                    X2&=(W&*App_EZSprite(N&).SPFrames)-1
                ELSE
                    IF IFrame&<1 OR IFrame&>App_EZSprite(N&).SPFrames THEN IFrame&=1
                    X1&=(IFrame&-1)*W&
                    X2&=X1&+W&-1
                END IF
                Y1&=0
                Y2&=H&-1
                hDC = GetDC(%HWND_DESKTOP)
                App_SPDrawDC=CreateCompatibleDC(hDC)
                ReleaseDC %HWND_DESKTOP, hDC
                App_SPDrawDCOldBmp=SelectObject(App_SPDrawDC, hBmp&)
                MyhDC&=App_SPDrawDC
                EZ_SaveState
                EZ_Color 5,5
                EZ_DCDraw MyhDC&, %EZ_FILL, X1&, Y1&, X2&, Y2&,0,1
                EZ_RestoreState
                RV&=1
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_EndSpriteDraw(BYVAL AFlag&) EXPORT10
    IF App_SPDrawDC<>0 THEN
        SelectObject App_SPDrawDC, App_SPDrawDCOldBmp
        DeleteDC App_SPDrawDC
        App_SPDrawDC=0
        IF App_SPDrawN&>=1 AND App_SPDrawN&<=UBOUND(App_EZSprite) THEN
            ZSetSpriteByte4 App_SPDrawN&,0  ' clear AA byte
            IF AFlag&>0 THEN
                ZSetSpriteByte4 App_SPDrawN&,1
                IF AFlag&>100 THEN AFlag&=100
                App_EZSprite(App_SPDrawN&).SPAAVal=AFlag&/100!
            ELSE
                App_EZSprite(App_SPDrawN&).SPAAVal=0
            END IF
        END IF
        App_SPDrawN&=0
    END IF
END SUB

FUNCTION ZParseSpriteNum(SName$, BYVAL I&) AS LONG
    LOCAL SPN$, RV&
    SPN$=TRIM$(PARSE$(SName$,App_EZ_DChar$, I&))
    IF LEN(SPN$)<>0 THEN RV&=ZGetSpriteNum(SPN$)
    FUNCTION=RV&
END FUNCTION

SUB EZ_AssignSprites(BYVAL FormName$, BYVAL CanvasID&, BYVAL SName$) EXPORT10
    LOCAL N&, hCtrl&, CT&, I&, OKFlag&
    OKFlag&=0
    IF LEN(FormName$)=0 THEN
        hCtrl&=0
        OKFlag&=1
    ELSE
        hCtrl&=ezHandle(FormName$, CanvasID&,1)
        IF hCtrl&<>0 THEN
            IF ZGetClass(hCtrl)= $CanvasClassName THEN OKFlag&=1
        END IF
    END IF
    IF OKFlag& THEN
        CT&=PARSECOUNT(SName$, App_EZ_DChar$)
        FOR I&=1 TO CT&
            N&=ZParseSpriteNum(SName$,I&)
            IF N&<>0 THEN
                IF App_EZSprite(N&).SPhWnd<>hCtrl& THEN
                    IF App_EZSprite(N&).SPShow THEN
                        IF App_EZSprite(N&).SPhWnd<>0 THEN
                            ZFlagSpriteRect N&
                        END IF
                    END IF
                END IF
                App_EZSprite(N&).SPhWnd = hCtrl&
                App_EZSprite(N&).SPShow = 0
            END IF
        NEXT I&
    END IF
END SUB

SUB ZFlagSpriteRect(BYVAL N&)
    LOCAL CR AS RECT, SR AS RECT, hCtrl& , IR AS RECT
    IF N&>=1 AND N&<=UBOUND(App_EZSprite) THEN
        hCtrl&=App_EZSprite(N&).SPhWnd
        IF hCtrl&<>0 THEN
            IF IsWindow(hCtrl&) THEN
                IF IsWindowVisible(hCtrl&) THEN
                    GetClientRect hCtrl&, CR
                    SR.nLeft= App_EZSprite(N&).SPx
                    SR.nTop = App_EZSprite(N&).SPy
                    SR.nRight=SR.nLeft+App_EZSprite(N&).SPwidth
                    SR.nBottom=SR.nTop+App_EZSprite(N&).SPheight
                    IF IntersectRect(IR, CR, SR) THEN
                        InvalidateRect hCtrl&, IR, 1
                    END IF
                END IF
            END IF
        END IF
    END IF
END SUB

SUB EZ_MoveSprites(BYVAL SName$, BYVAL X&, BYVAL Y&, BYVAL Mode&) EXPORT10
    LOCAL N&, CT&, I&, AX&, AY& ', SPN$
    CT&=PARSECOUNT(SName$, App_EZ_DChar$)
    FOR I&=1 TO CT&
        N&=ZParseSpriteNum(SName$,I&)
        IF N&<>0 THEN
            IF Mode&=0 THEN
                AX&=X&
                AY&=Y&
            ELSE
                AX& = App_EZSprite(N&).SPx + X&
                AY& = App_EZSprite(N&).SPy + Y&
            END IF
            IF App_EZSprite(N&).SPx<>AX& OR App_EZSprite(N&).SPy<>AY& THEN
                ZFlagSpriteRect N&
                App_EZSprite(N&).SPx = AX&
                App_EZSprite(N&).SPy = AY&
            END IF
            ZFlagSpriteRect N&
        END IF
    NEXT I&
END SUB

SUB EZ_ShowSprites(BYVAL SName$, BYVAL SFlag&) EXPORT10
    LOCAL N&, CT&, I&   ', SPN$, F&
    CT&=PARSECOUNT(SName$, App_EZ_DChar$)
    FOR I&=1 TO CT&
        N&=ZParseSpriteNum(SName$,I&)
        IF N&<>0 THEN
            IF SFlag&<>0 THEN SFlag&=1
            IF App_EZSprite(N&).SPShow<>SFlag& THEN
                App_EZSprite(N&).SPShow=SFlag&
                ZFlagSpriteRect N&
            END IF
        END IF
    NEXT I&
END SUB

SUB EZ_SetSpritesEffect(BYVAL SName$, BYVAL EFlag&, BYVAL UFlag&) EXPORT10
    LOCAL N&, CT&, I&   ', SPN$, F&
    CT&=PARSECOUNT(SName$, App_EZ_DChar$)
    IF EFlag&<0 THEN EFlag&=0
    IF EFlag&>100 THEN EFlag&=100
    IF EFlag&<>0 THEN
        EFlag&=100-EFlag&
    END IF
    FOR I&=1 TO CT&
        N&=ZParseSpriteNum(SName$,I&)
        IF N&<>0 THEN
            IF App_EZSprite(N&).SPEffects<>EFlag& THEN
                App_EZSprite(N&).SPEffects=EFlag&
                IF UFlag& THEN ZFlagSpriteRect N&
            END IF
        END IF
    NEXT I&
END SUB

SUB EZ_SetSpritesFrame(BYVAL SName$, BYVAL Frm&, BYVAL Mode&, BYVAL UFlag&) EXPORT10
    LOCAL N&, CT&, I&, F&, MXF& ', SPN$
    CT&=PARSECOUNT(SName$, App_EZ_DChar$)
    FOR I&=1 TO CT&
        N&=ZParseSpriteNum(SName$,I&)
        IF N&<>0 THEN
            F&=App_EZSprite(N&).SPCurFrame
            MXF&=App_EZSprite(N&).SPFrames
            IF Mode&=0 THEN
                F&=Frm&
            ELSE
                F&=F&+Frm&
            END IF
            IF F&<1 THEN F&=MXF&
            IF F&>MXF& THEN F&=1
            IF App_EZSprite(N&).SPCurFrame<>F& THEN
                App_EZSprite(N&).SPCurFrame=F&
                IF UFlag& THEN ZFlagSpriteRect N&
            END IF
        END IF
    NEXT I&
END SUB

SUB EZ_SetSpritesFlip(BYVAL SName$, BYVAL HorzFlip&, BYVAL VertFlip&, BYVAL UFlag&) EXPORT10
    LOCAL N&, CT&, I&   ', SPN$, F&, MXF&, RLFlag&, BTFlag&
    CT&=PARSECOUNT(SName$, App_EZ_DChar$)
    FOR I&=1 TO CT&
        N&=ZParseSpriteNum(SName$,I&)
        IF N&<>0 THEN
            IF HorzFlip&<>0 THEN HorzFlip&=1
            IF VertFlip&<>0 THEN VertFlip&=1
            App_EZSprite(N&).SPDrawRL   =   HorzFlip&
            App_EZSprite(N&).SPDrawBT   =   VertFlip&
            IF UFlag& THEN ZFlagSpriteRect N&
        END IF
    NEXT I&
END SUB

SUB EZ_DefSpriteByPict(BYVAL SName$, BYVAL Pict$, BYVAL NFrames&, BYVAL TColor&, BYVAL AFlag&) EXPORT10
    LOCAL hBmp&, PW&, PH&, MyhDC&, X1&, Y1&, X2&, Y2&
    IF SName$="" THEN EXIT SUB
    hBmp&=EZ_ImageHandle(Pict$)
    IF hBmp&<>0 THEN
        EZ_GetBitmapSize hBmp&, PW&, PH&
        IF NFrames&<1 THEN NFrames&=1
        IF NFrames&>100 THEN NFrames&=100
        IF NFrames&>1 THEN
            PW&=PW&\NFrames&
        END IF
        zDefSprite  SName$, PW&, PH&, NFrames&, TColor&, ""
        IF EZ_StartSpriteDraw(SName$, 0, MyhDC&, X1&, Y1&, X2&, Y2&) THEN
            EZ_DCDrawPicture MyhDC&, X1&, Y1&, X2&-X1&+1, Y2&-Y1&+1, hBmp&
            EZ_EndSpriteDraw AFlag&
        END IF
    END IF
END SUB

SUB EZ_UpdateClient(BYVAL FormName$, BYVAL ID&) EXPORT10
    LOCAL hWnd&
    hWnd&=ezHandle(FormName$, ID&,1)
    IF hWnd&<>0 THEN
        IF IsWindowVisible(hWnd&) THEN
            UpdateWindow hWnd&
        END IF
    END IF
END SUB

FUNCTION ZGetSpriteData(SName$, X&, Y&, BYVAL Mode&) AS LONG
    LOCAL N&, RV&
    N&=ZGetSpriteNum(SName$)
    IF N&<>0 THEN
        RV&=1
        SELECT CASE AS LONG Mode&
            CASE 0
                X& = App_EZSprite(N&).SPx
                Y& = App_EZSprite(N&).SPy
            CASE 1
                X&=App_EZSprite(N&).SPwidth
                Y&=App_EZSprite(N&).SPheight
            CASE 2
                X&=App_EZSprite(N&).SPFrames
                Y&=App_EZSprite(N&).SPCurFrame
            CASE 3
                RV&=App_EZSprite(N&).SPShow
            CASE 4
                RV&=App_EZSprite(N&).SPEffects
            CASE 5
                RV&=App_EZSprite(N&).SPDrawRL
            CASE 6
                RV&=App_EZSprite(N&).SPDrawBT
            CASE ELSE
                RV&=0
        END SELECT
    ELSE
        X&=0
        Y&=0
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetSpriteXY(BYVAL SName$, X&, Y&) EXPORT10 AS LONG
    FUNCTION=ZGetSpriteData(SName$, X&, Y&, 0)
END FUNCTION

FUNCTION EZ_GetSpriteWH(BYVAL SName$, W&, H&) EXPORT10 AS LONG
    FUNCTION=ZGetSpriteData(SName$, W&, H&, 1)
END FUNCTION

FUNCTION EZ_GetSpriteFR(BYVAL SName$, MaxF&, CurF&) EXPORT10 AS LONG
    FUNCTION=ZGetSpriteData(SName$, MaxF&, CurF&, 2)
END FUNCTION

FUNCTION EZ_GetSpriteST(BYVAL SName$, BYVAL Mode$) EXPORT10 AS LONG
    LOCAL XDummy&, YDummy&, M&
    SELECT CASE AS CONST$ TRIM$(UCASE$(Mode$))
        CASE "V"    ' visible
            M&=3
        CASE "E"    ' effect
            M&=4
        CASE ">"    ' flip right/left
            M&=5
        CASE "^"    ' flip Bottom/Up
            M&=6
        CASE ELSE   ' do nothing and return zero
            M&=99
    END SELECT
    FUNCTION=ZGetSpriteData(SName$, XDummy&, YDummy&, M&)
END FUNCTION

SUB ZSetSPRect(BYVAL N&, R AS RECT)
    R.nLeft=App_EZSprite(N&).SPx
    R.nTop=App_EZSprite(N&).SPy
    R.nRight=R.nLeft+App_EZSprite(N&).SPwidth
    R.nBottom=R.nTop+App_EZSprite(N&).SPheight
END SUB

FUNCTION EZ_TestSpriteColl(BYVAL SName$) EXPORT10 AS STRING
    LOCAL SNamNum AS QUAD, Match&, RV$, AR AS RECT, R1 AS RECT, R2 AS RECT, R3 AS RECT, SPN$
    LOCAL AW&, AH&, X1&, Y1&, X2&, Y2&, DW1&, DW2&
    LOCAL pDIB1 AS LONG PTR, pDIB2 AS LONG PTR, PixHit&
    LOCAL X&, Y&
    LOCAL N&,AP&
    REGISTER TC1&, TC2&
    SNamNum=ZGetSPNameNum(SName$)
    IF SNamNum<>0 THEN
        Match&=0
        AP&=ZGetSpriteNum(SName$)
        IF App_EZSprite(AP&).SPShow THEN    ' must be visible
            ZSetSPRect AP&, AR
            FOR N&=1 TO UBOUND(App_EZSprite)
                IF N&<>AP& THEN
                    IF App_EZSprite(N&).SPName<>SNamNum THEN    ' not same name
                        IF App_EZSprite(N&).SPDIB<>0 THEN   ' sprite exists
                            IF App_EZSprite(N&).SPShow THEN    ' must be visible
                                IF App_EZSprite(N&).SPhWnd=App_EZSprite(AP&).SPhWnd THEN ' assigned to same window
                                    R1=AR
                                    ZSetSPRect N&, R2
                                    IF IntersectRect(R3, R1, R2) THEN
                                        ' test actual pixels within R3 rect for both sprites
                                        ' not sure if original RECTs changed by this call
                                        R1=AR
                                        ZSetSPRect N&, R2
                                        ' ----------------------
                                        AW&=(R3.nRight-R3.nLeft)-1
                                        AH&=(R3.nBottom-R3.nTop)-1
                                        Y1&=R3.nTop-R1.nTop
                                        Y2&=R3.nTop-R2.nTop
                                        X1&=((R3.nLeft-R1.nLeft)+((App_EZSprite(AP&).SPCurFrame-1)*App_EZSprite(AP&).SPwidth))*4
                                        X2&=((R3.nLeft-R2.nLeft)+((App_EZSprite(N&).SPCurFrame-1)*App_EZSprite(N&).SPwidth))*4
                                        DW1&=App_EZSprite(AP&).SPFrames*App_EZSprite(AP&).SPwidth*4
                                        DW2&=App_EZSprite(N&).SPFrames*App_EZSprite(N&).SPwidth*4
                                        TC1&=App_EZSprite(AP&).SPTColor
                                        TC2&=App_EZSprite(N&).SPTColor
                                        PixHit&=0

                                        '   App_EZSprite(N&).SPDrawRL   =   HorzFlip&
                                        '   App_EZSprite(N&).SPDrawBT   =   VertFlip&
                                        '   must test for flip state to be accurate


                                        FOR Y&=0 TO AH&
                                            pDIB1=App_EZSprite(AP&).SPDIBPtr + ((Y&+Y1&)*DW1&)+X1&
                                            pDIB2=App_EZSprite(N&).SPDIBPtr + ((Y&+Y2&)*DW2&)+X2&
                                            FOR X&=0 TO AW&
                                                IF @pDIB1<>TC1& AND @pDIB2<>TC2& THEN
                                                    PixHit&=1
                                                    EXIT FOR
                                                END IF
                                                INCR pDIB1
                                                INCR pDIB2
                                            NEXT X&
                                            IF PixHit& THEN EXIT FOR
                                        NEXT Y&
                                        IF PixHit& THEN
                                            SPN$=PARSE$(MKQ$(App_EZSprite(N&).SPName), CHR$(0),1)
                                            IF LEN(RV$)=0 THEN
                                                RV$=SPN$
                                            ELSE
                                                RV$=RV$+"|"+SPN$
                                            END IF
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            NEXT N&
        END IF
    END IF
    FUNCTION=RV$
END FUNCTION

FUNCTION EZ_TestSpriteClick(BYVAL FormName$, BYVAL IDNum&, BYVAL CX&, BYVAL CY&) EXPORT10 AS STRING
    LOCAL hWnd&, N&, R AS RECT, RV$, X&, Y&
    LOCAL  X2&, DW2&, TC2&, AW&, AH&
    LOCAL pDIB2 AS LONG PTR
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN
        IF ZGetClass(hWnd&)= $CanvasClassName THEN
            FOR N&=UBOUND(App_EZSprite) TO 1 STEP -1
                IF App_EZSprite(N&).SPhWnd=hWnd& THEN
                    IF App_EZSprite(N&).SPDIB<>0 THEN   ' sprite exists
                        IF App_EZSprite(N&).SPShow THEN    ' must be visible
                            ZSetSPRect N&, R
                            AW&=(R.nRight-R.nLeft)-1
                            AH&=(R.nBottom-R.nTop)-1

                            '   App_EZSprite(N&).SPDrawRL   =   HorzFlip&
                            '   App_EZSprite(N&).SPDrawBT   =   VertFlip&
                            '   must test for flip state to be accurate


                            IF CX&>=App_EZSprite(N&).SPx AND CX&<App_EZSprite(N&).SPx+AW& THEN
                                IF CY&>=App_EZSprite(N&).SPy AND CY&<App_EZSprite(N&).SPy+AH& THEN
                                    X2&=((App_EZSprite(N&).SPCurFrame-1) * App_EZSprite(N&).SPwidth)*4
                                    DW2&=App_EZSprite(N&).SPFrames*App_EZSprite(N&).SPwidth*4
                                    TC2&=App_EZSprite(N&).SPTColor
                                    Y&=CY&-App_EZSprite(N&).SPy
                                    X&=CX&-App_EZSprite(N&).SPx
                                    pDIB2=App_EZSprite(N&).SPDIBPtr + (Y&*DW2&)+X2&+(X&*4)
                                    IF @pDIB2<>TC2& THEN
                                        RV$=PARSE$(MKQ$(App_EZSprite(N&).SPName), CHR$(0),1)
                                        EXIT FOR
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            NEXT N&
        END IF
    END IF
    FUNCTION=RV$
END FUNCTION


' -------------------------------------------------------------------------------------------
'             Official EZGUI 5.0 Drag Handle control !
' -------------------------------------------------------------------------------------------
' $DragHandleControl stores class name
' -------------------------------------------------------------------------------------------
'                           XX-XXXX-XXXX-XXX    Bits with - never used
'                  Styles - Hi Word = WM_ styles
'                           Lo Word = Custom Styles
'                           |  Hi Word     ||  Lo Word     |
%DragControlClassOKStyles =   &B01011110000000110000000000000000
'      WS_CHILD (01) -------XX-||||-||||-|||
'      WS_VISIBLE -------------X|||-||||-|||
'      WS_DISABLED -------------X||-||||-|||
'      WS_CLIPSIBLINGS ----------X|-||||-|||
'      WS_CLIPCHILDREN -----------X-||||-|||
'      WS_BORDER -------------------X|||-|||
'      WS_DLGFRAME ------------------X||-|||
'      WS_VSCROLL --------------------X|-|||
'      WS_HSCROLL ---------------------X-|||
'      WS_THICKFRAME --------------------X||
'      WS_GROUP --------------------------X|
'      WS_TABSTOP -------------------------X


' -------------------------------------------------------------------------------------------
'                           Custom Control Control Class Declares
' -------------------------------------------------------------------------------------------
DECLARE SUB DragHClassPaint(BYVAL hWnd AS LONG,  BYVAL PFlag&)
DECLARE SUB DragHAutoSize(BYVAL hWnd AS LONG, BYVAL Mode&)
DECLARE SUB DragHMoveBuddy(BYVAL hWnd AS LONG)

' -------------------------------------------------------------------------------------------
' -------------------------------------------------------------------------------------------

'%EZDC_SETCOLOR              =   %WM_USER+100    ' wParam = RGB Color, lParam = 0,1,2 (Inside Color 1, Border Color, Inside Color 2)
'%EZDC_SETBUDDY              =   %WM_USER+101    ' wParam = Buddy Window Handle
'%EZDC_SETSIZE               =   %WM_USER+102    ' wParam = Size of handles in Pixels
'%EZDC_GETCOLOR              =   %WM_USER+120    ' wParam = Not Used, lParam = 0,1,2 (Inside Color 1, Border Color, Inside Color 2)
'%EZDC_GETBUDDY              =   %WM_USER+121    ' No Parameters
'%EZDC_GETSIZE               =   %WM_USER+122    ' No Parameters
'%EZDC_GETOFFSET             =   %WM_USER+123    ' No Parameters
'%EZDC_FAKE_NCLBD            =   %WM_USER+124    ' pass %WM_NCLBUTTONDOWN parameters

' -------------------------------------------------------------------------------------------
'                          Custom Control ControlClass Functions / Subs
' -------------------------------------------------------------------------------------------
FUNCTION RegisterDragHClass() AS LONG
    zRegisterClass $DragHandleControl, %CS_HREDRAW OR %CS_VREDRAW OR %CS_PARENTDC, CODEPTR(DragHClassWndProc),0, 9*4, LoadCursor( %NULL, BYVAL %IDC_ARROW ), %NULL
    FUNCTION=App_RegisterClassAtom&
END FUNCTION

' -------------------------------------------------------------------------------------------


FUNCTION DragHClassWndProc(BYVAL hWnd   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) AS LONG

LOCAL RV&, hParent AS LONG, X&, Y&, OldRgn AS LONG, hBuddy AS LONG
LOCAL OKFlag&, NewMsg&
'  If message is processed then set FUNCTION=0 and then EXIT FUNCTION
IF Msg=%EZDC_FAKE_NCLBD THEN
    SELECT CASE AS LONG ZGetWindowLong(hWnd, 8)
        CASE 1  ' buddy set so skip first button up
            ZSetWindowLong hWnd,8, 2
        CASE 2  ' second button up
            OKFlag&=0
            X&=GetTickCount-ZGetWindowLong(hWnd,9)
            IF X&>0 THEN
                IF X&<= GetDoubleClickTime THEN OKFlag&=1
            END IF
            ZSetWindowLong hWnd,8,0
            ZSetWindowLong hWnd,9,0
            IF OKFlag& THEN
                SendMessage hWnd, %WM_NCLBUTTONDBLCLK, wParam, lParam
            END IF
        CASE ELSE
    END SELECT
    FUNCTION=0
    EXIT FUNCTION
END IF
SELECT CASE AS LONG Msg
    CASE %EZDC_SETCOLOR
        ' New Control Color passed in wParam
        ' lParam determines which color is set
        OKFlag&=1
        SELECT CASE AS LONG lParam
            CASE 0
                ZSetWindowLong hWnd, 1, wParam      ' DragHandle color  - OutSide Handles
            CASE 1
                ZSetWindowLong hWnd, 2, wParam      ' Border Color
            CASE 2
                ZSetWindowLong hWnd, 7, wParam      ' DragHandle color  - Inside Handles
            CASE ELSE
                OKFlag&=0
        END SELECT
        IF OKFlag& THEN
            InvalidateRect hWnd, BYVAL %NULL, %TRUE
        END IF
        FUNCTION=OKFlag&
        EXIT FUNCTION
    CASE %EZDC_SETBUDDY
        ' Window to Autosize to is passed in wParam (Buddy)
        OKFlag&=1
        RV&=1
        IF wParam<>0 THEN
            RV&=0
            IF IsWindow(wParam) THEN
                IF GetParent(wParam)=GetParent(hWnd) THEN
                    hBuddy=ZGetWindowLong(hWnd,5)
                    IF wParam<>hBuddy THEN
                        RV&=1
                        ZSetWindowLong hWnd, 5, wParam               ' Set Buddy Window for AutoMove
                        DragHAutoSize hWnd, lParam
                        IF IsWindowVisible(hWnd)=0 THEN ShowWindow hWnd, %SW_SHOW
                        ZSetWindowLong hWnd,8, 1
                        ZSetWindowLong hWnd,9, GetTickCount
                    END IF
                    OKFlag&=0
                END IF
            END IF
        END IF
        IF OKFlag& THEN
            ZSetWindowLong hWnd, 5, 0       ' No Buddy window, so Hide me
            ShowWindow hWnd, %SW_HIDE
            ZSetWindowLong hWnd,8, 0
            ZSetWindowLong hWnd,9, 0
        END IF
        FUNCTION=RV&
        EXIT FUNCTION
    CASE %EZDC_GETCOLOR
        SELECT CASE AS LONG lParam
            CASE 0
                RV&=ZGetWindowLong(hWnd, 1)
            CASE 1
                RV&=ZGetWindowLong(hWnd, 2)
            CASE 2
                RV&=ZGetWindowLong(hWnd, 7)
            CASE ELSE
                RV&=0
        END SELECT
        FUNCTION=RV&
        EXIT FUNCTION
    CASE %EZDC_GETBUDDY
        FUNCTION=ZGetWindowLong(hWnd, 5)
        EXIT FUNCTION
    CASE %EZDC_GETSIZE
        FUNCTION=ZGetWindowLong(hWnd, 3)
        EXIT FUNCTION
    CASE %EZDC_GETOFFSET
        IF ZGetWindowLong(hWnd,6)<>0 THEN
            ' Drag Handles Inside Buddy Control
            FUNCTION=0
            EXIT FUNCTION
        ELSE
            ' Drag Handles Outside Buddy Control - Offset is Handle size
            FUNCTION=ZGetWindowLong(hWnd, 3)
            EXIT FUNCTION
        END IF
    CASE %EZDC_SETSIZE
        IF wParam>=4 AND wParam<=32 THEN
            IF lParam=0 THEN
                ZSetWindowLong hWnd, 6, 0
            ELSE
                ZSetWindowLong hWnd, 6, 1
            END IF
            ZSetWindowLong hWnd, 3, wParam
            DragHAutoSize hWnd, 0
            UpdateWindow hWnd   ' update immediately
            FUNCTION=1
            EXIT FUNCTION
        ELSE
            FUNCTION=0
            EXIT FUNCTION
        END IF
    CASE %WM_PAINT
        DragHClassPaint hWnd, 0
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_NCLBUTTONDOWN, %WM_NCLBUTTONUP
         wParam=%HTBORDER
    CASE %WM_LBUTTONDOWN, %WM_LBUTTONUP, %WM_LBUTTONDBLCLK, _
         %WM_NCLBUTTONDBLCLK, _
         %WM_RBUTTONDOWN, %WM_RBUTTONUP, %WM_RBUTTONDBLCLK, _
         %WM_NCRBUTTONDOWN, %WM_NCRBUTTONUP, %WM_NCRBUTTONDBLCLK, _
         %WM_MBUTTONDOWN, %WM_MBUTTONUP, %WM_MBUTTONDBLCLK, _
         %WM_NCMBUTTONDOWN, %WM_NCMBUTTONUP, %WM_NCMBUTTONDBLCLK

        hBuddy=ZGetWindowLong(hWnd,5)
        IF hBuddy=0 THEN
            hParent=GetParent(hWnd)
            IF hParent<>0 THEN
                NewMsg&=-1
                IF Msg=%WM_LBUTTONDBLCLK THEN NewMsg&=%STN_DBLCLK
                IF Msg=%WM_NCLBUTTONDBLCLK THEN NewMsg&=%STN_DBLCLK
                IF Msg=%WM_LBUTTONUP THEN NewMsg&=%STN_CLICKED
                IF Msg=%WM_NCLBUTTONUP THEN NewMsg&=%STN_CLICKED
                ' Uses the Standard Static control messages
                IF NewMsg&<>-1 THEN
                    SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),NewMsg&), hWnd
                END IF
            END IF
        ELSE
            IF IsWindow(hBuddy) THEN
                SendMessage hBuddy, Msg, wParam, lParam
            END IF
        END IF
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_CREATE
        SetWindowLong hWnd, %GWL_STYLE, ( GetWindowLong(hWnd, %GWL_STYLE) AND %DragControlClassOKStyles)
        SetWindowLong hWnd, %GWL_EXSTYLE, ( GetWindowLong(hWnd, %GWL_EXSTYLE) OR %WS_EX_TRANSPARENT)
        ' --------------------------------------
        ' Set Default Color
        ZSetWindowLong hWnd, 1, RGB(255,0,0)    ' Brush Color Outside
        ZSetWindowLong hWnd, 2, RGB(0,0,0)      ' Pen Color
        ZSetWindowLong hWnd, 3, 8               ' Box Size for Corners
        ZSetWindowLong hWnd, 4, 0               ' Region for Control
        ZSetWindowLong hWnd, 5, 0               ' Buddy Window for AutoMove
        ZSetWindowLong hWnd, 6, 0               ' Buddy Size mode 0=smaller, 1=same size
        ZSetWindowLong hWnd, 7, RGB(255,0,0)    ' Brush Color Inside
        ZSetWindowLong hWnd, 8, 0               ' test for double click
        ZSetWindowLong hWnd, 9, 0               ' time for double click
        ' Set any Default values for control here
        ' --------------------------------------
        DragHClassPaint hWnd, 1   ' Creates Region for Window using a Path
    CASE %WM_DESTROY
         OldRgn=ZGetWindowLong(hWnd, 4)
         IF OldRgn<>0 THEN DeleteObject OldRgn
    CASE %WM_SIZING, %WM_MOVING
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_MOVE
        ZSetWindowLong hWnd,8,0
        ZSetWindowLong hWnd,9,0
        DragHMoveBuddy hWnd
    CASE %WM_SIZE
        ZSetWindowLong hWnd,8,0
        ZSetWindowLong hWnd,9,0
        DragHClassPaint hWnd, 1   ' Creates Region for Window using a Path
        DragHMoveBuddy hWnd
    CASE ELSE
END SELECT

FUNCTION = DefWindowProc(hWnd,Msg,wParam,lParam)
EXIT FUNCTION
END FUNCTION



' -------------------------------------------------------------------------------------------

SUB DragHMoveBuddy(BYVAL hWnd AS LONG)
LOCAL R AS RECT, BW&, hParent AS LONG, H&, W&, X&, Y&
LOCAL LP AS POINTAPI, DIF&, hBuddy AS LONG
GetWindowRect hWnd, R
BW&=ZGetWindowLong(hWnd, 3)
hBuddy=ZGetWindowLong(hWnd, 5)
IF ZGetWindowLong(hWnd, 6) THEN BW&=0   ' Is Same Size as Drag Handle
W&=(R.nRight-R.nLeft)-(2*BW&)
H&=(R.nBottom-R.nTop)-(2*BW&)
IF W&<1 THEN W&=1
IF H&<1 THEN H&=1
IF hBuddy<>0 THEN
    IF IsWindow(hBuddy) THEN
        hParent=GetParent(hBuddy)
        IF hParent<>0 THEN
            IF hParent=GetParent(hWnd) THEN
                LP.x=R.nLeft+BW&
                LP.y=R.nTop+BW&
                ScreenToClient hParent, LP
                MoveWindow hBuddy, LP.x, LP.y, W&, H&, %TRUE
            END IF
        END IF
    END IF
END IF

END SUB

' -------------------------------------------------------------------------------------------

SUB DragHClassPaint(BYVAL hWnd AS LONG, BYVAL PFlag&)
LOCAL PS AS PAINTSTRUCT
LOCAL hDC AS LONG, R AS RECT
LOCAL H&, W&, C1&, C2&
LOCAL hBrush AS LONG, hPen AS LONG
LOCAL OldhBrush AS LONG, OldhPen AS LONG
LOCAL X1&, Y1&, X2&, Y2&, BW&, RV&, OffSetX&, OffSetY&
LOCAL X3&, Y3&, X4&, Y4&, OY1&, OX1&, OY2&, OX2&, ExW&, ExH&
LOCAL LP() AS POINTAPI, hRgn AS LONG, rc AS RECT, hRgn2 AS LONG, OldhRgn AS LONG
LOCAL OldRgn AS LONG
' TYPE PAINTSTRUCT
'   hdc AS LONG
'   fErase AS LONG
'   rcPaint AS Rect
'   fRestore AS LONG
'   fIncUpdate AS LONG
'   rgbReserved(1 TO 32) AS BYTE
' END TYPE
IF IsWindow(hWnd) THEN
        DIM LP(1 TO 4) AS POINTAPI
        IF PFlag& THEN
            hDC=GetDC(hWnd)
            BeginPath hDC
        ELSE
            hDC=BeginPaint(hWnd, PS)
            ' SaveDC hDC
            ' hRgn=ZGetWindowLong(hWnd, 4)
            ' SelectClipRgn hDC, hRgn
        END IF
        IF ZGetWindowLong(hWnd, 6)=0 THEN
            C1&=ZGetWindowLong(hWnd, 1)
        ELSE
            C1&=ZGetWindowLong(hWnd, 7)     ' alternate color
        END IF
        C2&=ZGetWindowLong(hWnd, 2)
        BW&=ZGetWindowLong(hWnd, 3)
        GetClientRect hWnd, R
        W&=R.nRight-R.nLeft
        H&=R.nBottom-R.nTop

        R.nBottom=R.nBottom-1
        R.nRight=R.nRight-1
        OffSetX&=(W&-BW&)/2
        OffSetY&=(H&-BW&)/2
        hBrush=CreateSolidBrush(C1&)
        hPen=CreatePen(%PS_SOLID, 1, C2&)
        OldhBrush=SelectObject(hDC, hBrush)
        OldhPen=SelectObject(hDC, hPen)
        X1&=R.nLeft
        Y1&=R.nTop
        X2&=X1&+BW&-1
        Y2&=Y1&+BW&-1
        OX1&=X1&
        OX2&=X2&
        GOSUB DRAWCBOX
            Y1&=Y1&+OffSetY&
            Y2&=Y2&+OffSetY&
            GOSUB DRAWCBOX
        Y2&=R.nBottom
        Y1&=Y2&-BW&+1
        GOSUB DRAWCBOX
            X1&=X1&+OffSetX&
            X2&=X2&+OffSetX&
            GOSUB DRAWCBOX
        X2&=R.nRight
        X1&=X2&-BW&+1
        GOSUB DRAWCBOX
        Y1&=R.nTop
        Y2&=Y1&+BW&-1
        GOSUB DRAWCBOX
            OY1&=Y1&
            OY2&=Y2&
            Y1&=Y1&+OffSetY&
            Y2&=Y2&+OffSetY&
            GOSUB DRAWCBOX
            Y1&=OY1&
            Y2&=OY2&
            X1&=OX1&+OffSetX&
            X2&=OX2&+OffSetX&
            GOSUB DRAWCBOX

            ' ---------------------
            IF PFlag& THEN
                ' Center Mark is Transparent. This only sets the Region
'                X1&=R.nLeft+OffSetX&
'                Y1&=R.nTop+OffSetY&
'                X2&=X1&+BW&-1
'                Y2&=Y1&+BW&-1
'                ExW&=(R.nRight-R.nLeft)-(3*BW&)
'                ExH&=(R.nBottom-R.nTop)-(3*BW&)
'                IF ExW&<8 THEN
'                    ExW&=0
'                ELSE
'                    ExW&=ExW&/4
'                END IF
'                IF ExH&<8 THEN
'                    ExH&=0
'                ELSE
'                    ExH&=ExH&/4
'                END IF
'                X1&=X1&-ExW&
'                Y1&=Y1&-ExH&
'                X2&=X2&+ExW&
'                Y2&=Y2&+ExH&
                X1&=R.nLeft+BW&
                Y1&=R.nTop+BW&
                X2&=R.nRight-BW&
                Y2&=R.nBottom-BW&

                GOSUB DRAWCBOX
            END IF
            ' ---------------------

        SelectObject hDC, OldhBrush
        SelectObject hDC, OldhPen
        DeleteObject hBrush
        DeleteObject hPen
        IF PFlag& THEN
            EndPath hDC
            hRgn = PathToRegion(hDC)
            ReleaseDC hWnd,hDC
            SetWindowRgn hWnd, hRgn, 1
            OldRgn=ZGetWindowLong(hWnd, 4)
            IF OldRgn<>0 THEN
                IF GetObjectType(OldRgn)=%OBJ_REGION THEN
                    DeleteObject OldRgn
                END IF
            END IF
            ZSetWindowLong hWnd, 4, hRgn
        ELSE
            ' RestoreDC hDC, -1
            EndPaint hWnd, PS
        END IF
END IF
EXIT SUB

DRAWCBOX:
IF PFlag& THEN
    LP(1).x=X1&
    LP(1).y=Y1&
    LP(2).x=X2&+1
    LP(2).y=Y1&
    LP(3).x=X2&+1
    LP(3).y=Y2&+1
    LP(4).x=X1&
    LP(4).y=Y2&+1
ELSE
    LP(1).x=X1&
    LP(1).y=Y1&
    LP(2).x=X2&
    LP(2).y=Y1&
    LP(3).x=X2&
    LP(3).y=Y2&
    LP(4).x=X1&
    LP(4).y=Y2&
END IF
RV&=POLYGON(hDC, LP(1), 4)
' Can't use Rectangle with Paths. Must use Polygon function.
RETURN

END SUB

' -------------------------------------------------------------------------------------------

SUB DragHAutoSize(BYVAL hWnd AS LONG, BYVAL Mode&)
LOCAL R AS RECT, BW&, hParent AS LONG, H&, W&, X&, Y&
LOCAL LP AS POINTAPI, hBuddy AS LONG , R2 AS RECT
hBuddy=ZGetWindowLong(hWnd, 5)
IF hBuddy=0 THEN EXIT SUB
IF IsWindow(hBuddy) THEN
    ' Get Screen Coordinates of Buddy Window
    GetWindowRect hBuddy, R
    IF Mode&=1 THEN
        IF ZGetClass(hBuddy)="COMBOBOX" THEN
            IF IsNotSimpleCombobox(hBuddy) THEN
                SendMessage hBuddy, %CB_GETDROPPEDCONTROLRECT, 0, VARPTR(R2)
                R=R2
            END IF
        END IF
    END IF
    IF ZGetWindowLong(hWnd, 6)=0 THEN
        BW&=ZGetWindowLong(hWnd, 3)
    ELSE
        BW&=0
    END IF
    W&=(R.nRight-R.nLeft)+(2*BW&)
    H&=(R.nBottom-R.nTop)+(2*BW&)
    hParent=GetParent(hWnd)
    IF hParent<>0 THEN
        LP.x=R.nLeft-BW&
        LP.y=R.nTop-BW&
        ScreenToClient hParent, LP
        MoveWindow hWnd, LP.x, LP.y, W&, H&, %TRUE
    END IF
END IF
END SUB


' -------------------------------------------------------------------------------------------
'             Official EZGUI 5.0 Turtle control !
' -------------------------------------------------------------------------------------------
' $TurtleClassName stores class name
' -------------------------------------------------------------------------------------------
TYPE anim
   x AS LONG
   y AS LONG
   w AS LONG
   h AS LONG
   ln AS LONG
   dg AS LONG
END TYPE

TYPE turtledata
    tcolor(0 TO 32) AS LONG
    tpen AS INTEGER
    tpos AS INTEGER
    tx AS LONG
    ty AS LONG
    tpar(1 TO 10) AS LONG
    tw AS LONG
    ts AS LONG
    thatch AS LONG
    tbkmode AS LONG
    tview AS LONG
    tviewx AS SINGLE
    tviewy AS SINGLE
    tvieww AS SINGLE
    tviewh AS SINGLE
    tci AS LONG
    tparse AS LONG
    tzone(1 TO 8) AS anim
    tframe AS LONG
    tzonenum AS LONG
END TYPE

'TYPE ColorLong
'   red AS BYTE
'   green AS BYTE
'   blue AS BYTE
'   hb AS BYTE
'END TYPE

'UNION ColorCode
'   n AS LONG
'   b AS ColorLong
'END UNION


' -------------------------------------------------------------------------------------------
'                           XX-XXXX-XXXX-XXX    Bits with - never used
'%ControlClassOKStyles =   &B0101111011000111    ' Styles Hi Word WM_ styles acceptable
'                           XX-||||-||||-|||    WS_CHILD (01)
'                           ---X|||-||||-|||       WS_VISIBLE
'                           ----X||-||||-|||       WS_DISABLED
'                           -----X|-||||-|||       WS_CLIPSIBLINGS
'                           ------X-||||-|||       WS_CLIPCHILDREN
'                           --------X|||-|||    WS_BORDER
'                           ---------X||-|||    WS_DLGFRAME
'                           ----------X|-|||    WS_VSCROLL
'                           -----------X-|||    WS_HSCROLL
'                           -------------X||       WS_THICKFRAME
'                           --------------X|       WS_GROUP
'                           ---------------X       WS_TABSTOP
' -------------------------------------------------------------------------------------------
' Turtle Equates are in main file
'%EZTG_GETLASTXPOS               =   %WM_USER+100
'%EZTG_GETLASTYPOS               =   %WM_USER+101
'%EZTG_GETBITMAP                 =   %WM_USER+102
'%EZTG_CLEAR                     =   %WM_USER+103


' -------------------------------------------------------------------------------------------
'                           Custom Control Control Class Declares
' -------------------------------------------------------------------------------------------

DECLARE FUNCTION VIEWx&(turtle AS turtledata, BYVAL V&)
DECLARE FUNCTION VIEWy&(turtle AS turtledata, BYVAL V&)
DECLARE FUNCTION VIEWw&(turtle AS turtledata, BYVAL V&)
DECLARE SUB RenderTurtle ( BYVAL tbuffer$, BYVAL hDC AS LONG, BYVAL RLEFT AS LONG, BYVAL RTOP AS LONG, BYVAL RRIGHT AS LONG, BYVAL RBOTTOM AS LONG, CFlag&)
DECLARE FUNCTION MakeTurtleFont (BYVAL TFace$, BYVAL PSize&, BYVAL FProp$) AS LONG
DECLARE SUB GetTurtleTextSize(BYVAL hDC AS LONG, BYVAL hFont AS LONG, BYVAL Text$, W&, H&)
DECLARE SUB TurtleClassPaint(BYVAL hWnd AS LONG, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)
DECLARE SUB TurtleClassDraw(BYVAL hWnd AS LONG)
DECLARE SUB TurtleBuildBitmap(BYVAL hWnd AS LONG, BYVAL CFlag&)
DECLARE SUB TMakePenPalette(turtle AS turtledata, BYVAL N&,BYVAL P1&,BYVAL P2&)
DECLARE SUB TSpreadColors(turtle AS turtledata, BYVAL P1&,BYVAL P2&)
DECLARE SUB TDoFrame(turtle AS turtledata, BYVAL n&, BYVAL I&)
DECLARE SUB TCalcNewLine(BYVAL AX&,BYVAL AY&,BYVAL AL&,BYVAL ADG&,RX&,RY&)

' -------------------------------------------------------------------------------------------
'                          Custom Control ControlClass Functions / Subs
' -------------------------------------------------------------------------------------------
GLOBAL hTurtleCursor1 AS LONG
GLOBAL hTurtleCursor2 AS LONG

FUNCTION RegisterTurtleClass() AS LONG
    zRegisterClass $TurtleClassName,%CS_HREDRAW OR %CS_VREDRAW OR %CS_PARENTDC OR %CS_DBLCLKS, CODEPTR(TurtleClassWndProc),0, 8*4,%NULL,%NULL
    hTurtleCursor1=LoadCursor(%NULL, BYVAL %IDC_ARROW)
    hTurtleCursor2=LoadCursor(%NULL, BYVAL %IDC_CROSS)
    FUNCTION=App_RegisterClassAtom&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION MakeTurtleFont (BYVAL TFace$, BYVAL PSize&, BYVAL FProp$) AS LONG
LOCAL W&, E&, O&, FW&, I&, U&, ST&, CS&, PR&, CL&, Q&, PF&, FF&
LOCAL zTemp AS ASCIIZ*80
FProp$=UCASE$(FProp$)
PSize&=-PSize&
W&=0
E&=0
O&=0
FW&=%FW_NORMAL
I&=0
U&=0
ST&=0
CS&=%ANSI_CHARSET
PR&=%OUT_DEFAULT_PRECIS
CL&=%CLIP_DEFAULT_PRECIS
Q&=%DRAFT_QUALITY
PF&=%DEFAULT_PITCH
IF INSTR(FProp$,"B") THEN FW&=%FW_BOLD
IF INSTR(FProp$,"X") THEN FW&=%FW_HEAVY
IF INSTR(FProp$,"I") THEN I&=1
IF INSTR(FProp$,"U") THEN U&=1
IF INSTR(FProp$,"-") THEN ST&=1
IF INSTR(FProp$,"D") THEN CS&=%DEFAULT_CHARSET
IF INSTR(FProp$,"S") THEN CS&=%SYMBOL_CHARSET
IF INSTR(FProp$,"O") THEN CS&=%OEM_CHARSET
IF INSTR(FProp$,"Q") THEN Q&=%PROOF_QUALITY     ' letter quality
IF INSTR(FProp$,"F") THEN PF&=%FIXED_PITCH
IF INSTR(FProp$,"V") THEN PF&=%VARIABLE_PITCH
FF&=%FF_DONTCARE
PF&=PF& OR FF&
IF LEN(TFace$)>31 THEN TFace$=LEFT$(TFace$,31)
zTemp=TFace$+CHR$(0)
FUNCTION=CreateFont(PSize&,W&, E&, O&, FW&, I&, U&, ST&, CS&, PR&, CL&, Q&, PF&, zTemp)
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB GetTurtleTextSize(BYVAL hDC AS LONG, BYVAL hFont AS LONG, BYVAL Text$, W&, H&)
LOCAL hOldFont AS LONG
LOCAL TM AS NEWTEXTMETRICEX_SAFE
' LOCAL TM AS TEXTMETRIC
LOCAL SZ AS SIZEL
W&=0
H&=0
hOldFont=SelectObject(hDC, hFont)
GetTextMetrics hDC, TM
GetTextExtentPoint32 hDC, BYVAL STRPTR(Text$), LEN(Text$), SZ
W&=SZ.cx
H&=TM.tmHeight
SelectObject hDC, hOldFont
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION TurtGetViewPos(BYVAL hWnd AS LONG, BYVAL ViewWidth&, BYVAL ViewMode&, BYVAL DFlag&) AS LONG
LOCAL PU!, AV!, RV&, AW!, W!, V&
IF DFlag& THEN   ' X Pos
   V&=ZGetWindowLong(hWnd, 5)   ' Last X Pos of click
ELSE             ' Y Pos
   V&=ZGetWindowLong(hWnd, 6)   ' Last Y Pos of click
END IF
IF ViewMode& THEN
   IF DFlag& THEN   ' X Pos
       AW!=ZGetWindowLong(hWnd, 3)-1  ' Actual Width in Pixels
       IF AW!<0 THEN AW!=0
   ELSE             ' Y Pos
       AW!=ZGetWindowLong(hWnd, 4)-1  ' Actual Height in Pixels
       IF AW!<0 THEN AW!=0
   END IF
   W!=ViewWidth&
   IF W!>0 THEN
       PU!=W!/AW!
       AV!=V&
       AV!=AV!*PU!
       RV&=INT(AV!+.988)
       IF RV&=>ViewWidth& THEN RV&=ViewWidth&-1
   ELSE
       RV&=V&
   END IF
ELSE
   RV&=V&
END IF
IF RV&<0 THEN RV&=0
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION TurtleClassWndProc(BYVAL hWnd   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) EXPORT10 AS LONG

LOCAL RV&, hParent AS LONG

'  If message is processed then set FUNCTION=0 and then EXIT FUNCTION

SELECT CASE AS LONG Msg
    CASE %WM_SETCURSOR
         IF LOWRD(lParam)=%HTCLIENT THEN
             IF ZGetWindowLong(hWnd, 7)=1 THEN
                SetCursor hTurtleCursor1
             ELSE
                SetCursor hTurtleCursor2
             END IF
             FUNCTION=0
             EXIT FUNCTION
         END IF
    CASE %WM_SETTEXT
        RV& = DefWindowProc(hWnd,Msg,wParam,lParam)
        TurtleClassDraw hWnd
        InvalidateRect hWnd, BYVAL %NULL, %TRUE
        FUNCTION=RV&
        EXIT FUNCTION
    CASE %EZTG_CLEAR
        DIM zT AS ASCIIZ*32
        TurtleBuildBitmap hWnd, 0
        zT=" "
        SendMessage hWnd, %WM_SETTEXT, 0, VARPTR(zT)
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_PAINT
        TurtleClassPaint hWnd,wParam,lParam,1
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_PRINTCLIENT
        LOCAL OKFlag&
        IF (lParam AND %PRF_CLIENT)=%PRF_CLIENT THEN
            OKFlag&=1
            IF (lParam AND %PRF_CHECKVISIBLE)=%PRF_CHECKVISIBLE THEN
                IF IsWindowVisible(hWnd)=0 THEN OKFlag&=0
            END IF
            IF OKFlag& THEN TurtleClassPaint hWnd,wParam,lParam,0
            FUNCTION=0
            EXIT FUNCTION
        END IF

    CASE %WM_ERASEBKGND
        FUNCTION=1
        EXIT FUNCTION
    CASE %EZTG_GETLASTXPOS      ' wParam is the X View
        FUNCTION=TurtGetViewPos(hWnd, wParam, lParam, 1)
        EXIT FUNCTION
    CASE %EZTG_GETLASTYPOS      ' wParam is the Y view
        FUNCTION=TurtGetViewPos(hWnd, wParam, lParam, 0)
        EXIT FUNCTION
    CASE %EZTG_GETBITMAP
        FUNCTION=ZGetWindowLong(hWnd, 2)
        EXIT FUNCTION
    CASE %WM_LBUTTONDBLCLK
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_DBLCLK), hWnd
        END IF
    CASE %WM_LBUTTONDOWN
        ZSetWindowLong hWnd, 5, LOWRD(lParam)   ' Last X Position of Mouse click
        ZSetWindowLong hWnd, 6, HIWRD(lParam)   ' Last Y Position of Mouse click
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND,MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_CLICKED), hWnd
        END IF
    CASE %WM_ENABLE

    CASE %WM_GETDLGCODE
    CASE %WM_CREATE
'        ZSetWindowLong hWnd, 8, 0   ' Store original Bitmap handle for DC
        TurtleBuildBitmap hWnd, 1
        ZSetWindowLong hWnd, 5, 0   ' Last X Position of Mouse click
        ZSetWindowLong hWnd, 6, 0   ' Last Y Position of Mouse click
        IF ( GetWindowLong(hWnd, %GWL_STYLE) AND 1)=0 THEN
           ZSetWindowLong hWnd, 7, 1        ' cursor style is arrow
        ELSE
           ZSetWindowLong hWnd, 7, 2        ' cursor style is crossbar
        END IF
    CASE %WM_DESTROY
        TurtleBuildBitmap hWnd, -1

    CASE %WM_SIZE
        TurtleBuildBitmap hWnd, 0
        TurtleClassDraw hWnd
        InvalidateRect hWnd, BYVAL %NULL, %TRUE
    CASE %WM_SETFOCUS, %WM_KILLFOCUS
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),Msg), hWnd
        END IF

    CASE ELSE
END SELECT

FUNCTION = DefWindowProc(hWnd,Msg,wParam,lParam)

END FUNCTION

' -------------------------------------------------------------------------------------------

SUB TurtleBuildBitmap(BYVAL hWnd AS LONG, BYVAL CFlag&)
LOCAL R AS RECT, hDC AS LONG, hBmp AS LONG, hDC2 AS LONG
LOCAL hOldBmp AS LONG, W&, H&, hParent AS LONG, BR&, OldBR&
' CFlag&=1 for Creation, =0 for Resize, -1 for destroy
IF CFlag&<=0 THEN
    ' Delete Previous DC and Bitmap
    hDC=ZGetWindowLong(hWnd, 1)
    hBmp=ZGetWindowLong(hWnd, 2)

    ' hOldBmp=ZGetWindowLong(hWnd, 8)

'    IF hOldBmp<>0 THEN
'        SelectObject hDC, hOldBmp
'    END IF
    DeleteDC hDC
    DeleteObject hBmp
    ZSetWindowLong hWnd, 1, 0
    ZSetWindowLong hWnd, 2, 0
    ZSetWindowLong hWnd, 3, 0
    ZSetWindowLong hWnd, 4, 0

END IF
IF CFlag&>=0 THEN
    hDC2=GetDC(hWnd)
    hDC=CreateCompatibleDC(hDC2)
    GetClientRect hWnd, R
    W&=(R.nRight-R.nLeft)' +1
    H&=(R.nBottom-R.nTop)' +1
    hBmp=CreateCompatibleBitmap(hDC2, W&, H&)
    hOldBmp=SelectObject(hDC, hBmp)
'    ZSetWindowLong hWnd, 8, hOldBmp
    BR&=0
    hParent=GetParent(hWnd)
    IF hParent<>0 THEN BR&=SendMessage(hParent, %WM_CTLCOLORSTATIC, hDC, hWnd)

'    msgbox hex$(hParent)+" "+hex$(BR&)

    IF BR&=0 THEN BR&=GetSysColorBrush(%COLOR_WINDOW)
    OldBR&=SelectObject(hDC, BR&)
    PatBlt hDC, 0,0, W&, H&, %PATCOPY
    SelectObject hDC, OldBR&
    SelectObject hDC, hOldBmp&
    ReleaseDC hWnd, hDC2
    ZSetWindowLong hWnd, 1, hDC
    ZSetWindowLong hWnd, 2, hBmp
    ZSetWindowLong hWnd, 3, W&
    ZSetWindowLong hWnd, 4, H&
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB TurtleClassDraw(BYVAL hWnd AS LONG)
LOCAL hDC AS LONG, W&, H&, L&, ATL&, tbuffer$, CFlag&, hBmp&, hOldBmp&
LOCAL hParent AS LONG
IF IsWindow(hWnd) THEN
    hDC=ZGetWindowLong(hWnd, 1)
    hBmp&=ZGetWindowLong(hWnd, 2)
    W&=ZGetWindowLong(hWnd, 3)
    H&=ZGetWindowLong(hWnd, 4)
    L&=GetWindowTextLength(hWnd)+1
    tbuffer$=STRING$(L&, " ")
    ATL&=GetWindowtext(hWnd, BYVAL STRPTR(tbuffer$), L&)
    tbuffer$=LEFT$(tbuffer$, ATL&)
    hOldBmp&=SelectObject(hDC, hBmp&)
    RenderTurtle tbuffer$, hDC, 0, 0, W&-1, H&-1, CFlag&
    SelectObject hDC, hOldBmp&
    IF CFlag& THEN
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            ' Send Error Message
            SendMessage hParent, %WM_COMMAND,MAKLNG(GetWindowLong(hWnd,%GWL_ID),9999), hWnd
        END IF
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB TurtleClassPaint(BYVAL hWnd AS LONG, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)
LOCAL PS AS PAINTSTRUCT
LOCAL hDC AS LONG, R AS RECT, tbuffer$, L&, ATL&, hBmp&, hOldBmp&
LOCAL memDC AS LONG
' TYPE PAINTSTRUCT
'   hdc AS LONG
'   fErase AS LONG
'   rcPaint AS Rect
'   fRestore AS LONG
'   fIncUpdate AS LONG
'   rgbReserved(1 TO 32) AS BYTE
' END TYPE
    IF IsWindow(hWnd) THEN
        IF Mode&=1 THEN
            hDC=BeginPaint(hWnd, PS)
        ELSE
            hDC=wParam&
            GetClientRect hWnd&, R
            PS.rcPaint=R
        END IF
        memDC=ZGetWindowLong(hWnd, 1)
        hBmp&=ZGetWindowLong(hWnd, 2)
        hOldBmp&=SelectObject(memDC,hBmp&)
        ' ------------------------------------------------
        BitBlt hDC, PS.rcPaint.nLeft, PS.rcPaint.nTop, _
                    PS.rcPaint.nRight-PS.rcPaint.nLeft, PS.rcPaint.nBottom-PS.rcPaint.nTop, _
                    memDC, PS.rcPaint.nLeft, PS.rcPaint.nTop, %SRCCOPY
        SelectObject memDC, hOldBmp&
        IF Mode&=1 THEN EndPaint hWnd, PS
    END IF
END SUB

' -------------------------------------------------------------------------------------------






' -------------------------------------------------------------------------------------------
'                             EZGUI Custom Control Library
' -------------------------------------------------------------------------------------------



' -------------------------------------------------------------------------------------------

SUB RenderTurtle ( BYVAL tbuffer$, BYVAL hDC AS LONG, BYVAL RLEFT AS LONG, BYVAL RTOP AS LONG, BYVAL RRIGHT AS LONG, BYVAL RBOTTOM AS LONG, CFlag&) EXPORT10
LOCAL lastpoint AS POINTAPI
LOCAL turtle AS turtledata
LOCAL WinColor AS ColorCode
LOCAL result&, tcmd$, terror$, I&, N&
LOCAL X&, Y&, DX&, DY&, X1&, X2&, X3&, X4&, Y1&, Y2&, Y3&, Y4&
LOCAL EMODE&, tmp&, newpen&, oldpen&, newbrush&, oldbrush&, atw&
LOCAL ROP&, OX1&, OY1&, EL&, tx2&, ty2&, N1&, AX1&, AX2&, AY1&, AY2&
LOCAL N2&, CX&, E&, C&, C1&, C2&, R1!, R2!, R3!,  G1!, G2!, G3!, B1!, B2!, B3!
LOCAL DFX!, DFY!, R&, G&, B&
LOCAL W&, BX&, BY&, RP&, LMODE&, AL&, ADG&, DGI&, OX&, OY&, NX&, NY&, Z&, A&
LOCAL RW&, RH&, MW&, MH&, P1&, P2&, TXT$, TurtleFont$, TurtleText$, TurtleFProp$
LOCAL hFont AS LONG , OldFG&, OldBGMode&, OldhFont&


' subtract one from right and bottom to get correct values
'RRIGHT=RRIGHT -1
'RBOTTOM=RBOTTOM -1

REM SET values FOR view command.
turtle.tvieww=RRIGHT-RLEFT+1
turtle.tviewh=RBOTTOM-RTOP+1

TurtleFont$="Arial"
TurtleFProp$=""

result& = MovetoEX(hDC, RLEFT, RTOP,lastpoint)
CFlag&=0
CALL StartTurtle(turtle)
DO
    CALL NextTurtle(tbuffer$, turtle, tcmd$, terror$, TXT$)
    IF tcmd$="" THEN EXIT DO
    IF tcmd$="?" THEN
        CFlag&=1
        EXIT DO   ' Indicates an error
    END IF
    I&=INSTR("ABCDEFGHIJKLMNOPQRSTUVWXYZ", tcmd$)
    ON I& GOSUB trA,trB,trC,trD,trE,trF,trG,trH,trI,tr0,tr0,trL,trM,tr0,trO,trP,tr0,trR,trS,trT,trU,trV,trW,trX,tr0,trZ
LOOP
EXIT SUB

tr0:
RETURN

trA:
N&=turtle.tpar(1)
IF N&>=0 AND N&<=100 THEN
   turtle.tframe=N&
END IF
RETURN

trB:
N&=turtle.tpar(1)
turtle.tcolor(0)=turtle.tcolor(N&)
RETURN

trC:
turtle.tcolor(turtle.tpen)=RGB(turtle.tpar(1),turtle.tpar(2),turtle.tpar(3))
RETURN

trD:
CALL TDoFrame(turtle, 1,1)
CALL TDoFrame(turtle, 2,2)
X&=RLEFT+VIEWx&(turtle, turtle.tpar(1))
Y&=RTOP+VIEWy&(turtle, turtle.tpar(2))
IF X&>RRIGHT THEN X&=RRIGHT
IF Y&>RBOTTOM THEN Y&=RBOTTOM
SetPixelV hDC, X&, Y&, turtle.tcolor(turtle.tpen)
RETURN

trE:
GOSUB calcxy
EMODE&=turtle.tpar(3)
IF EMODE&<>0 THEN
   DX&=X2&-X1&
   DY&=Y2&-Y1&
   SELECT CASE AS LONG EMODE&
      CASE 1,9
               X3&=X1&+(DX&/2)
               Y3&=Y1&
               X4&=X3&
               Y4&=Y2&
      CASE 2,10
               X3&=X1&+(DX&/2)
               Y3&=Y2&
               X4&=X3&
               Y4&=Y1&
      CASE 3,11
               X3&=X2&
               Y3&=Y1&+(DY&/2)
               X4&=X1&
               Y4&=Y3&
      CASE 4,12
               X3&=X1&
               Y3&=Y1&+(DY&/2)
               X4&=X2&
               Y4&=Y3&
      CASE 5,13
               X3&=X1&+(DX&/2)
               Y3&=Y1&
               X4&=X1&
               Y4&=Y3&+(DY&/2)
      CASE 6,14
               X3&=X2&
               Y3&=Y1&+(DY&/2)
               X4&=X1&+(DX&/2)
               Y4&=Y1&
      CASE 7,15
               X3&=X1&+(DX&/2)
               Y3&=Y2&
               X4&=X2&
               Y4&=Y1&+(DY&/2)
      CASE 8,16
               X3&=X1&
               Y3&=Y1&+(DY&/2)
               X4&=X1&+(DX&/2)
               Y4&=Y2&
      CASE 17
               X3&=X1&+(DX&/2)
               Y3&=Y1&
               X4&=X3&
               Y4&=Y3&
      CASE ELSE
         EMODE&=0
   END SELECT
END IF
newpen&=CreatePen(turtle.ts,atw&,turtle.tcolor(turtle.tpen))
oldpen&=SelectObject(hDC,newpen&)
result&=SetBkMode(hDC,turtle.tbkmode)
IF turtle.thatch=0 THEN
   newbrush&=CreateSolidBrush(turtle.tcolor(0))
ELSE
   result&=SetBkColor(hDC, turtle.tcolor(0))
   newbrush&=CreateHatchBrush(turtle.thatch-1,turtle.tcolor(turtle.tpen))
END IF
oldbrush&=SelectObject(hDC,newbrush&)
X2&=X2&+1
Y2&=Y2&+1
IF EMODE&=0 THEN
   result&=ELLIPSE(hDC, X1&, Y1&, X2&, Y2&)
ELSE
   SELECT CASE AS LONG EMODE&
      CASE 1 TO 4
         result&=Chord(hDC, X1&, Y1&, X2&, Y2&, X3&, Y3&, X4&, Y4&)
      CASE 5 TO 8
         result&=PIE(hDC, X1&, Y1&, X2&, Y2&, X3&, Y3&, X4&, Y4&)
      CASE 9 TO 17
         result&=ARC(hDC, X1&, Y1&, X2&, Y2&, X3&, Y3&, X4&, Y4&)
      CASE ELSE
   END SELECT
END IF
result&=SelectObject(hDC,oldpen&)
tmp&=DeleteObject(newpen&)
result&=SelectObject(hDC,oldbrush&)
tmp&=DeleteObject(newbrush&)
result&=SetBkMode(hDC,2)
RETURN

trF:
N&=turtle.tpar(1)
X1&=RLEFT
X2&=RRIGHT
Y1&=RTOP
Y2&=RBOTTOM
SELECT CASE AS LONG N&
   CASE 0
      ROP&=13
   CASE 1
      ROP&=6
   CASE 2 TO 5,7 TO 15
      ROP&=N&
   CASE ELSE
      ROP&=13
END SELECT
result&=SetROP2(hDC,ROP&)
' newpen&=CreatePen(0,1,turtle.tcolor(turtle.tpen))
newpen&=CreatePen(0,1,turtle.tcolor(0))
oldpen&=SelectObject(hDC,newpen&)
result&=SetBkMode(hDC,turtle.tbkmode)
IF turtle.thatch=0 THEN
   newbrush&=CreateSolidBrush(turtle.tcolor(0))
ELSE
   result&=SetBkColor(hDC, turtle.tcolor(0))
   newbrush&=CreateHatchBrush(turtle.thatch-1,turtle.tcolor(turtle.tpen))
END IF
oldbrush&=SelectObject(hDC,newbrush&)
X2&=X2&+1
Y2&=Y2&+1
result&=Rectangle(hDC, X1&, Y1&, X2&, Y2&)
result&=SelectObject(hDC,oldpen&)
tmp&=DeleteObject(newpen&)
result&=SelectObject(hDC,oldbrush&)
tmp&=DeleteObject(newbrush&)
result&=SetROP2(hDC, 13)
result&=SetBkMode(hDC,2)
RETURN

trG:
result&=GetCurrentPositionEx(hDC,lastpoint)
OX1&=lastpoint.x
OY1&=lastpoint.y
N1&=turtle.tpar(3)
IF turtle.tpar(4)=0 THEN
   AX1&=RLEFT
   AX2&=RRIGHT
   AY1&=RTOP
   AY2&=RBOTTOM
ELSE
   CALL TDoFrame(turtle, 4,3)
   CALL TDoFrame(turtle, 5,4)
   IF turtle.tci=0 THEN
      AX1&=RLEFT+turtle.tx
      AY1&=RTOP+turtle.ty
   ELSE
      tx2&=VIEWx&(turtle, turtle.tpar(4))
      ty2&=VIEWy&(turtle, turtle.tpar(5))
      AX1&=RLEFT+turtle.tx-(tx2&/2)
      AY1&=RTOP+turtle.ty-(ty2&/2)
   END IF
   IF AX1&>RRIGHT THEN AX1&=RRIGHT
   IF AY1&>RBOTTOM THEN AY1&=RBOTTOM
   AX2&=AX1&+VIEWx&(turtle, turtle.tpar(4))-1
   IF AX2&>RRIGHT THEN AX2&=RRIGHT
   AY2&=AY1&+VIEWy&(turtle, turtle.tpar(5))-1
   IF AY2&>RBOTTOM THEN AY2&=RBOTTOM
END IF
EL&=1
X1&=AX1&
X2&=AX2&
Y1&=AY1&
Y2&=AY2&
SELECT CASE AS LONG N1&
   CASE 4,5
      N&=N1&-4
      EL&=2
      DX&=(AX2&-AX1&)/2
      X2&=AX1&+DX&
      X3&=X2&+1
      IF X3&>AX2& THEN X3&=AX2&
      X4&=AX2&
      N2&=1
      IF N&=1 THEN N2&=0
      CX&=1
   CASE 6,7
      N&=N1&-4
      EL&=2
      DY&=(AY2&-AY1&)/2
      Y2&=AY1&+DY&
      Y3&=Y2&+1
      IF Y3&>AY2& THEN Y3&=AY2&
      Y4&=AY2&
      N2&=3
      IF N&=3 THEN N2&=2
      CX&=0
   CASE 0 TO 3
      N&=N1&
   CASE ELSE
      N&=1
END SELECT
FOR E&=1 TO EL&
   IF E&=2 THEN
      N&=N2&
      IF CX&=1 THEN
         X1&=X3&
         X2&=X4&
      ELSE
         Y1&=Y3&
         Y2&=Y4&
      END IF
   END IF
   C1&=turtle.tcolor(turtle.tpar(1))
   WinColor.n=C1&
   R1!=WinColor.b.red
   G1!=WinColor.b.green
   B1!=WinColor.b.blue
   C2&=turtle.tcolor(turtle.tpar(2))
   WinColor.n=C2&
   R2!=WinColor.b.red
   G2!=WinColor.b.green
   B2!=WinColor.b.blue
   R3!=R2!-R1!
   G3!=G2!-G1!
   B3!=B2!-B1!
   DFX!=X2&-X1&
   DFY!=Y2&-Y1&
   SELECT CASE AS LONG N&
      CASE 0,1
         IF DFX!<>0 THEN R3!=R3!/DFX!
         IF DFX!<>0 THEN G3!=G3!/DFX!
         IF DFX!<>0 THEN B3!=B3!/DFX!
      CASE 2,3
         IF DFY!<>0 THEN R3!=R3!/DFY!
         IF DFY!<>0 THEN G3!=G3!/DFY!
         IF DFY!<>0 THEN B3!=B3!/DFY!
      CASE ELSE
   END SELECT
   SELECT CASE AS LONG N&
      CASE 0
         REM LEFT TO RIGHT
         FOR X&=X1& TO X2&
            C&=RGB(INT(R1!),INT(G1!),INT(B1!))
            newpen&=CreatePen(0,1,C&)
            oldpen&=SelectObject(hDC,newpen&)
            result& = MovetoEX(hDC, X&, Y1&,lastpoint)
            result& = Lineto(hDC, X&, Y2&+1)
            result&=SelectObject(hDC,oldpen&)
            tmp&=DeleteObject(newpen&)
            R1!=R1!+R3!
            G1!=G1!+G3!
            B1!=B1!+B3!
         NEXT X&
      CASE 1
         REM RIGHT TO LEFT
         FOR X&=X2& TO X1& STEP -1
            C&=RGB(INT(R1!),INT(G1!),INT(B1!))
            newpen&=CreatePen(0,1,C&)
            oldpen&=SelectObject(hDC,newpen&)
            result& = MovetoEX(hDC, X&, Y1&,lastpoint)
            result& = Lineto(hDC, X&, Y2&+1)
            result&=SelectObject(hDC,oldpen&)
            tmp&=DeleteObject(newpen&)
            R1!=R1!+R3!
            G1!=G1!+G3!
            B1!=B1!+B3!
         NEXT X&
      CASE 2
         REM top TO bottom
         FOR Y&=Y1& TO Y2&
            C&=RGB(INT(R1!),INT(G1!),INT(B1!))
            newpen&=CreatePen(0,1,C&)
            oldpen&=SelectObject(hDC,newpen&)
            result& = MovetoEX(hDC, X1&, Y&,lastpoint)
            result& = Lineto(hDC, X2&+1, Y&)
            result&=SelectObject(hDC,oldpen&)
            tmp&=DeleteObject(newpen&)
            R1!=R1!+R3!
            G1!=G1!+G3!
            B1!=B1!+B3!
         NEXT Y&
      CASE 3
         REM bottom TO top
         FOR Y&=Y2& TO Y1& STEP -1
            C&=RGB(INT(R1!),INT(G1!),INT(B1!))
            newpen&=CreatePen(0,1,C&)
            oldpen&=SelectObject(hDC,newpen&)
            result& = MovetoEX(hDC, X1&, Y&,lastpoint)
            result& = Lineto(hDC, X2&+1, Y&)
            result&=SelectObject(hDC,oldpen&)
            tmp&=DeleteObject(newpen&)
            R1!=R1!+R3!
            G1!=G1!+G3!
            B1!=B1!+B3!
         NEXT Y&
      CASE ELSE
   END SELECT
NEXT E&
result& = MovetoEX(hDC, OX1&, OY1&,lastpoint)
RETURN

trH:
IF turtle.tpar(1)>=0 AND turtle.tpar(1)<=6 THEN
   turtle.thatch=turtle.tpar(1)
   turtle.tbkmode=2
END IF
IF turtle.tpar(1)>=7 AND turtle.tpar(1)<=13 THEN
   turtle.thatch=turtle.tpar(1)-7
   turtle.tbkmode=1
END IF
RETURN

trI:
R&=turtle.tpar(1)
G&=turtle.tpar(2)
B&=turtle.tpar(3)
X1&=RLEFT
X2&=RRIGHT
Y1&=RTOP
Y2&=RBOTTOM
FOR Y&=RTOP TO RBOTTOM
   FOR X&=RLEFT TO RRIGHT
      WinColor.n=GetPixel(hDC,X&,Y&)
      C&=WinColor.b.blue
      C&=C&+B&
      IF C&<0 THEN C&=0
      IF C&>255 THEN C&=255
      WinColor.b.blue=C&
      C&=WinColor.b.green
      C&=C&+G&
      IF C&<0 THEN C&=0
      IF C&>255 THEN C&=255
      WinColor.b.green=C&
      C&=WinColor.b.red
      C&=C&+R&
      IF C&<0 THEN C&=0
      IF C&>255 THEN C&=255
      WinColor.b.red=C&
      SetPixelV hDC, X&, Y&, WinColor.n
   NEXT X&
NEXT Y&
RETURN

trL:
atw&=VIEWw&(turtle, turtle.tw)
W&=(VIEWw&(turtle, turtle.tw)-1)/2
BX&=RLEFT+turtle.tx
BY&=RTOP+turtle.ty
IF BX&+W&>RRIGHT THEN BX&=RRIGHT-W&
IF BX&-W&<RLEFT THEN BX&=RLEFT+W&
IF BY&+W&>RBOTTOM THEN BY&=RBOTTOM-W&
IF BY&-W&<RTOP THEN BY&=RTOP+W&
RP&=turtle.tpar(4)
IF RP&>100 THEN RP&=100
IF RP&=0 THEN
   CALL TDoFrame(turtle, 1,1)
   CALL TDoFrame(turtle, 2,2)
   X&=RLEFT+VIEWx&(turtle, turtle.tpar(1))
   Y&=RTOP+VIEWy&(turtle, turtle.tpar(2))
   LMODE&=0
ELSE
   CALL TDoFrame(turtle, 1,5)
   CALL TDoFrame(turtle, 2,6)
   AL&=VIEWw&(turtle, turtle.tpar(1))
   IF AL&<1 THEN AL&=1
   IF AL&>1200 THEN AL&=1200
   ADG&=turtle.tpar(2)
   IF ADG&<1 THEN ADG&=1
   IF ADG&>360 THEN ADG&=360
   DGI&=turtle.tpar(3)
   IF DGI&>270 THEN DGI&=270
   X&=BX&
   Y&=BY&
   CALL TCalcNewLine(BX&,BY&,AL&,ADG&,X&,Y&)
   LMODE&=turtle.tpar(5)
   IF LMODE&=2 THEN
      result&=GetCurrentPositionEx(hDC,lastpoint)
      OX&=lastpoint.x
      OY&=lastpoint.y
   END IF
END IF
E&=1
newpen&=CreatePen(turtle.ts,atw&,turtle.tcolor(turtle.tpen))
oldpen&=SelectObject(hDC,newpen&)
DO
   IF X&+W&>RRIGHT THEN X&=RRIGHT-W&
   IF X&-W&<RLEFT THEN X&=RLEFT+W&
   IF Y&+W&>RBOTTOM THEN Y&=RBOTTOM-W&
   IF Y&-W&<RTOP THEN Y&=RTOP+W&
   result& = Lineto(hDC, X&, Y&)
   SetPixelV hDC, X&, Y&, turtle.tcolor(turtle.tpen)
   IF LMODE&=2 THEN
      turtle.tx=OX&
      turtle.ty=OY&
      result& = MovetoEX(hDC, OX&, OY&,lastpoint)
   END IF
   IF E&>=RP& THEN EXIT DO
   E&=E&+1
   ADG&=ADG&+DGI&
   IF LMODE&=1 THEN DGI&=-DGI&
   IF ADG&>360 THEN ADG&=ADG&-360
   IF ADG&<1 THEN ADG&=360+ADG&
   IF LMODE&<2 THEN
      result&=GetCurrentPositionEx(hDC,lastpoint)
      OX&=lastpoint.x
      OY&=lastpoint.y
   END IF
   CALL TCalcNewLine(OX&,OY&,AL&,ADG&,X&,Y&)
LOOP
result&=SelectObject(hDC,oldpen&)
tmp&=DeleteObject(newpen&)
RETURN

trM:
CALL TDoFrame(turtle, 1,1)
CALL TDoFrame(turtle, 2,2)
IF turtle.tpar(3)<=0 THEN
   X&=RLEFT+VIEWx&(turtle, turtle.tpar(1))
   Y&=RTOP+VIEWy&(turtle, turtle.tpar(2))
ELSE
   CALL TDoFrame(turtle, 3,5)
   CALL TDoFrame(turtle, 4,6)
   AL&=VIEWw&(turtle, turtle.tpar(3))
   ADG&=turtle.tpar(4)
   OX&=turtle.tpar(1)
   OY&=turtle.tpar(2)
   CALL TCalcNewLine(OX&,OY&,AL&,ADG&,NX&,NY&)
   X&=RLEFT+VIEWx&(turtle, NX&)
   Y&=RTOP+VIEWy&(turtle, NY&)
END IF
W&=(VIEWw&(turtle, turtle.tw)-1)/2
IF X&+W&>RRIGHT THEN X&=RRIGHT-W&
IF X&-W&<RLEFT THEN X&=RLEFT+W&
IF Y&+W&>RBOTTOM THEN Y&=RBOTTOM-W&
IF Y&+W&<RTOP THEN Y&=RTOP+W&
turtle.tx=X&-RLEFT
turtle.ty=Y&-RTOP
result& = MovetoEX(hDC, X&, Y&,lastpoint)
RETURN

trO:
Z&=turtle.tzonenum
IF Z&>0 AND Z&<9 THEN
   A&=turtle.tpar(1)
   SELECT CASE AS LONG A&
      CASE 1
         turtle.tzone(Z&).x=turtle.tpar(2)
      CASE 2
         turtle.tzone(Z&).y=turtle.tpar(2)
      CASE 3
         turtle.tzone(Z&).w=turtle.tpar(2)
      CASE 4
         turtle.tzone(Z&).h=turtle.tpar(2)
      CASE 5
         turtle.tzone(Z&).ln=turtle.tpar(2)
      CASE 6
         turtle.tzone(Z&).dg=turtle.tpar(2)
      CASE ELSE
   END SELECT
END IF
RETURN

trP:
IF turtle.tpar(1)>=0 AND turtle.tpar(1)<=32 THEN
   turtle.tpen=turtle.tpar(1)
END IF
RETURN

trR:
GOSUB calcxy
RW&=VIEWx&(turtle, turtle.tpar(3))*2
RH&=VIEWy&(turtle, turtle.tpar(4))*2
MW&=(X2&-X1&)/2
IF RW&>MW& THEN RW&=MW&
MH&=(Y2&-Y1&)/2
IF RH&>MH& THEN RH&=MH&
newpen&=CreatePen(turtle.ts,atw&,turtle.tcolor(turtle.tpen))
oldpen&=SelectObject(hDC,newpen&)
IF TurtleText$="" THEN
    result&=SetBkMode(hDC,turtle.tbkmode)
    IF turtle.thatch=0 THEN
       newbrush&=CreateSolidBrush(turtle.tcolor(0))
    ELSE
       result&=SetBkColor(hDC, turtle.tcolor(0))
       newbrush&=CreateHatchBrush(turtle.thatch-1,turtle.tcolor(turtle.tpen))
    END IF
    oldbrush&=SelectObject(hDC,newbrush&)
    X2&=X2&+1
    Y2&=Y2&+1
    IF RW&=0 THEN
       result&=Rectangle(hDC, X1&, Y1&, X2&, Y2&)
    ELSE
       result&=RoundRect(hDC, X1&, Y1&, X2&, Y2&, RW&, RH&)
    END IF
    result&=SelectObject(hDC,oldbrush&)
    tmp&=DeleteObject(newbrush&)
ELSE
    ' draw text within rectangle
    RW&=X2&-X1& +1
    RH&=Y2&-Y1& +1
    P1&=1
    P2&=128
    N&=1
    DO
        N&=P1&+((P2&-P1&)/2)
        IF N&>P2& THEN N&=P2&
        hFont=MakeTurtleFont(TurtleFont$, N&, TurtleFProp$)
        GetTurtleTextSize hDC, hFont, TurtleText$, MW&, MH&
        IF (MW&>RW&) OR (MH&>RH&) THEN
            IF N&=P2& THEN
                EXIT DO
            ELSE
                P2&=N&
                IF P2&=P1& THEN EXIT DO
            END IF
        ELSE
            IF N&=P1& THEN
                EXIT DO
            ELSE
                P1&=N&
                IF P2&=P1& THEN EXIT DO
            END IF
        END IF
        DeleteObject hFont
    LOOP
    OldFG&=SetTextColor(hDC,turtle.tcolor(turtle.tpen))
    OldBGMode&=SetBkMode(hDC, %TRANSPARENT)
    OldhFont&=SelectObject(hDC, hFont)
    DX&=(RW&-MW&)/2
    IF DX&<0 THEN DX&=0
    DY&=(RH&-MH&)/2
    IF DY&<0 THEN DY&=0
    X1&=X1&+DX&
    Y1&=Y1&+DY&
    TextOut hDC, X1&, Y1&, STRPTR(TurtleText$), LEN(TurtleText$)
    SelectObject hDC, OldhFont&
    DeleteObject hFont
    SetTextColor hDC, OldFG&
    SetBkMode hDC, OldBGMode&
    TurtleText$=""
END IF
result&=SelectObject(hDC,oldpen&)
tmp&=DeleteObject(newpen&)
result&=SetBkMode(hDC,2)
RETURN

trS:
turtle.ts=turtle.tpar(1)
IF turtle.ts<0 THEN turtle.ts=0
IF turtle.ts>6 THEN turtle.ts=6
RETURN

trT:
I&=INSTR(TXT$,"|")
IF I&>0 THEN
    TurtleText$=LTRIM$(RTRIM$(MID$(TXT$,I&+1)))
    TXT$=MID$(TXT$,1, I&-1)
    I&=INSTR(TXT$,",")
    IF I&>0 THEN
        TurtleFProp$=LTRIM$(RTRIM$(UCASE$(MID$(TXT$,I&+1))))
        TXT$=LEFT$(TXT$,I&-1)
    ELSE
        TurtleFProp$=""
    END IF
    TXT$=LTRIM$(RTRIM$(TXT$))
    SELECT CASE AS CONST$ UCASE$(TXT$)
        CASE "ARIAL", ""
            TurtleFont$="Arial"
        CASE "COURIER NEW"
            TurtleFont$="Courier New"
        CASE "TIMES NEW ROMAN"
            TurtleFont$="Times New Roman"
        CASE "SYMBOL"
            TurtleFont$="Symbol"
        CASE "WINGDINGS"
            TurtleFont$="Wingdings"
        CASE ELSE
            TurtleFont$=TXT$
    END SELECT
ELSE
    TurtleText$=TXT$
END IF

RETURN

trU:
N&=turtle.tpar(1)
P1&=turtle.tpar(2)
P2&=turtle.tpar(3)
CALL TMakePenPalette(turtle, N&,P1&,P2&)
RETURN

trV:
N&=turtle.tpar(1)
IF N&=0 THEN
   turtle.tview=0
END IF
IF N&=1 THEN
   IF turtle.tpar(2)>=16 THEN
      IF turtle.tpar(3)>=16 THEN
         turtle.tview=-1
         turtle.tviewx=turtle.tpar(2)
         turtle.tviewy=turtle.tpar(3)
      END IF
   END IF
END IF
RETURN

trW:
turtle.tw=turtle.tpar(1)
RETURN

trX:
turtle.tci=turtle.tpar(1)
RETURN

trZ:
N&=turtle.tpar(1)
IF N&>=0 AND N&<=8 THEN
   turtle.tzonenum=N&
END IF
RETURN

calcxy:
atw&=VIEWw&(turtle, turtle.tw)
CALL TDoFrame(turtle, 1,3)
CALL TDoFrame(turtle, 2,4)
IF turtle.tci=0 THEN
   X1&=RLEFT+turtle.tx
   Y1&=RTOP+turtle.ty
ELSE
   tx2&=VIEWx&(turtle, turtle.tpar(1))
   ty2&=VIEWy&(turtle, turtle.tpar(2))
   X1&=RLEFT+turtle.tx-(tx2&/2)
   Y1&=RTOP+turtle.ty-(ty2&/2)
END IF
W&=(VIEWw&(turtle, turtle.tw)-1)/2
IF X1&+W&>RRIGHT THEN X1&=RRIGHT-W&
IF X1&-W&<RLEFT THEN X1&=RLEFT+W&
IF Y1&+W&>RBOTTOM THEN Y1&=RBOTTOM-W&
IF Y1&-W&<RTOP THEN Y1&=RTOP+W&
X2&=X1&+VIEWx&(turtle, turtle.tpar(1))-1
Y2&=Y1&+VIEWy&(turtle, turtle.tpar(2))-1
IF X2&+W&>RRIGHT THEN X2&=RRIGHT-W&
IF X2&-W&<RLEFT THEN X2&=RLEFT+W&
IF Y2&+W&>RBOTTOM THEN Y2&=RBOTTOM-W&
IF Y2&-W&<RTOP THEN Y2&=RTOP+W&
RETURN

END SUB

' -------------------------------------------------------------------------------------------

SUB StartTurtle(turtle AS turtledata)
LOCAL t&
REM this sets UP the maximum parameters available
CALL TMakePenPalette(turtle, 0,0,0)
turtle.tcolor(0)=RGB(255,255,255)
turtle.thatch=0
turtle.tpen=1
turtle.tpos=1
turtle.tx=0
turtle.ty=0
turtle.tw=1
turtle.ts=0
turtle.tbkmode=2
turtle.tview=0
turtle.tci=0
FOR t&=1 TO 8
   turtle.tzone(t&).x=0
   turtle.tzone(t&).y=0
   turtle.tzone(t&).w=0
   turtle.tzone(t&).h=0
   turtle.tzone(t&).ln=0
   turtle.tzone(t&).dg=0
NEXT t&
turtle.tframe=0
turtle.tzonenum=0
END SUB


' -------------------------------------------------------------------------------------------

' -------------------------------------------------------------------------------------------

SUB NextTurtle(tbuffer$, turtle AS turtledata, tcmd$, terror$, TXT$)
LOCAL L&, t&, P&, PL&, PC&, N&, NP&, LNP&, LV&, LV2&, HV&, HV2&
LOCAL A$, B$, OB$, B2$, NN$

tcmd$=""
terror$=""
L&=LEN(tbuffer$)
FOR t&=1 TO 10
   turtle.tpar(t&)=0
NEXT t&
IF turtle.tpos<=L& THEN
   A$=UCASE$(MID$(tbuffer$,turtle.tpos,1))
   IF INSTR(1,"MLCPFREDWSHIGUBVXAZO",A$)<>0 THEN
      tcmd$=A$
      turtle.tpos=turtle.tpos+1
      P&=INSTR(turtle.tpos,tbuffer$,";")
      IF P&<>0 THEN
         PL&=P&-turtle.tpos+1
         B$=MID$(tbuffer$,turtle.tpos,PL&)
         OB$=B$
         turtle.tpos=P&+1
         N&=0
         DO
            PC&=INSTR(B$,",")
            IF PC&=0 THEN
               B$=LTRIM$(RTRIM$(B$))
               IF B$<>"" THEN
                  N&=N&+1
                  IF N&<=10 THEN
                     turtle.tpar(N&)=INT(VAL(B$))
                  END IF
               END IF
               EXIT DO
            ELSE
               B2$=LEFT$(B$,PC&-1)
               B$=MID$(B$,PC&+1)
               IF LTRIM$(RTRIM$(B2$))<>"" THEN
                  N&=N&+1
                  IF N&<=10 THEN
                     turtle.tpar(N&)=INT(VAL(B2$))
                  END IF
               END IF
            END IF

         LOOP
         NN$=""
         SELECT CASE AS CONST$ tcmd$
            CASE "D","O"
               REM 2
               NN$=".2"
            CASE "E"
               NN$=".23"
            CASE "R","M"
               REM 2,4
               NN$=".2.4"
            CASE "L"
               REM 2,4,5
               NN$=".2.45"
            CASE "P","W","S","H","F","B","X","A","Z"
               REM 1
               NN$="1"
            CASE "C","I"
               REM 3
               NN$="..3"
            CASE "G"
               REM 3,5
               NN$="..3.5"
            CASE "U","V"
               REM 1,3
               NN$="1.3"
            CASE ELSE
         END SELECT
         NP&=INSTR(NN$,CHR$(48+N&))
         IF NP&=0 THEN
            REM commands must have AT least one parameter
            ' Error too many parameters
            tcmd$="?"
         END IF
         REM DO parameter checking here
         LNP&=NP&
         LV2&=0
         HV2&=9999
         SELECT CASE AS CONST$ tcmd$
            CASE "B"
               LV&=1
               HV&=32
            CASE "U"
               LV&=0
               HV&=32
            CASE "F"
               LV&=0
               HV&=15
            CASE "I"
               LV&=-255
               HV&=255
            CASE "C"
               LV&=0
               HV&=255
            CASE "P"
               LV&=0
               HV&=32
            CASE "G"
               LV&=0
               HV&=32
               LNP&=3
            CASE "H"
               LV&=0
               HV&=13
            CASE "S"
               LV&=0
               HV&=6
            CASE "W"
               LV&=1
               HV&=50
            CASE "X"
               LV&=0
               HV&=1
            CASE "A"
               LV&=0
               HV&=100
            CASE "Z"
               LV&=0
               HV&=8
            CASE "M"
               LV&=0
               HV&=9999
               LNP&=2
               LV2&=1
               HV2&=360
             CASE "O"
               LV&=1
               HV&=6
               LNP&=1
               LV2&=-100
               HV2&=100
             CASE ELSE
               LV&=0
               HV&=9999
          END SELECT
          FOR t&=1 TO NP&
             IF t&>LNP& THEN
                LV&=LV2&
                HV&=HV2&
             END IF
             IF turtle.tpar(t&)<LV& THEN
                turtle.tpar(t&)=LV&
             END IF
             IF turtle.tpar(t&)>HV& THEN
                turtle.tpar(t&)=HV&
             END IF
          NEXT t&

      ELSE
         tcmd$="?"
         ' Command lacks ; character
      END IF
   ELSEIF A$="T" THEN
      tcmd$=A$
      turtle.tpos=turtle.tpos+1
      P&=INSTR(turtle.tpos,tbuffer$,";")
      IF P&<>0 THEN
         TXT$=MID$(tbuffer$, turtle.tpos, P&-turtle.tpos)
         turtle.tpos=P&+1
      ELSE
         tcmd$="?"
         ' Command lacks ; character
         TXT$=""
      END IF
   ELSE
      tcmd$="?"
      ' Unknown turtle command
   END IF
ELSE
   tcmd$=""     ' exit Turtle Rendering
END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB TMakePenPalette(turtle AS turtledata, BYVAL N&,BYVAL P1&,BYVAL P2&)
IF P1&<0 THEN P1&=0
IF P1&>32 THEN P1&=32
IF P2&<0 THEN P2&=0
IF P2&>32 THEN P2&=32
SELECT CASE AS LONG N&
   CASE 1
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(255,255,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 2
      turtle.tcolor(1)=RGB(128,0,0)
      turtle.tcolor(32)=RGB(255,196,196)
      CALL TSpreadColors(turtle, 1,32)
   CASE 3
      turtle.tcolor(1)=RGB(0,128,0)
      turtle.tcolor(32)=RGB(196,255,196)
      CALL TSpreadColors(turtle, 1,32)
   CASE 4
      turtle.tcolor(1)=RGB(0,0,128)
      turtle.tcolor(32)=RGB(196,196,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 5
      turtle.tcolor(1)=RGB(128,128,0)
      turtle.tcolor(32)=RGB(255,255,196)
      CALL TSpreadColors(turtle, 1,32)
   CASE 6
      turtle.tcolor(1)=RGB(0,128,128)
      turtle.tcolor(32)=RGB(196,255,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 7
      turtle.tcolor(1)=RGB(128,0,128)
      turtle.tcolor(32)=RGB(255,196,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 8
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(255,0,0)
      CALL TSpreadColors(turtle, 1,32)
   CASE 9
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(0,255,0)
      CALL TSpreadColors(turtle, 1,32)
   CASE 10
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(0,0,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 11
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(255,255,0)
      CALL TSpreadColors(turtle, 1,32)
   CASE 12
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(0,255,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 13
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(32)=RGB(255,0,255)
      CALL TSpreadColors(turtle, 1,32)
   CASE 14
      turtle.tcolor(1)=RGB(64,0,0)
      turtle.tcolor(32)=RGB(255,255,0)
      CALL TSpreadColors(turtle, 1,32)
   CASE 15
      IF P1&<>P2& THEN
         CALL TSpreadColors(turtle, P1&,P2&)
      END IF
   CASE ELSE
      turtle.tcolor(1)=RGB(0,0,0)
      turtle.tcolor(2)=RGB(0,0,255)
      turtle.tcolor(3)=RGB(0,255,0)
      turtle.tcolor(4)=RGB(0,255,255)
      turtle.tcolor(5)=RGB(255,0,0)
      turtle.tcolor(6)=RGB(255,0,255)
      turtle.tcolor(7)=RGB(255,255,0)
      turtle.tcolor(8)=RGB(196,196,196)
      turtle.tcolor(9)=RGB(128,128,128)
      turtle.tcolor(10)=RGB(128,128,255)
      turtle.tcolor(11)=RGB(128,255,128)
      turtle.tcolor(12)=RGB(128,255,255)
      turtle.tcolor(13)=RGB(255,128,128)
      turtle.tcolor(14)=RGB(128,255,255)
      turtle.tcolor(15)=RGB(255,255,128)
      turtle.tcolor(16)=RGB(255,255,255)
      turtle.tcolor(17)=RGB(30,30,30)
      turtle.tcolor(32)=RGB(220,220,220)
      CALL TSpreadColors(turtle, 17,32)
END SELECT
END SUB

' -------------------------------------------------------------------------------------------

SUB TSpreadColors(turtle AS turtledata, BYVAL P1&,BYVAL P2&)
LOCAL WinColor AS ColorCode
LOCAL R1!, R2!, R3!, G1!, G2!, G3!, B1!, B2!, B3!
LOCAL DFX!, P&

IF P1&>P2& THEN SWAP P1&,P2&
WinColor.n=turtle.tcolor(P1&)
R1!=WinColor.b.red
G1!=WinColor.b.green
B1!=WinColor.b.blue
WinColor.n=turtle.tcolor(P2&)
R2!=WinColor.b.red
G2!=WinColor.b.green
B2!=WinColor.b.blue
R3!=R2!-R1!
G3!=G2!-G1!
B3!=B2!-B1!
DFX!=P2&-P1&
IF DFX!<>0 THEN R3!=R3!/DFX!
IF DFX!<>0 THEN G3!=G3!/DFX!
IF DFX!<>0 THEN B3!=B3!/DFX!
FOR P&=P1& TO P2&
   turtle.tcolor(P&)=RGB(INT(R1!),INT(G1!),INT(B1!))
   R1!=R1!+R3!
   G1!=G1!+G3!
   B1!=B1!+B3!
NEXT P&
END SUB

' -------------------------------------------------------------------------------------------

SUB TDoFrame(turtle AS turtledata, BYVAL n&, BYVAL I&)
LOCAL V&

IF turtle.tframe>0 THEN
   IF turtle.tzonenum>0 THEN
      ON I& GOSUB tpar1, tpar2, tpar3, tpar4, tpar5, tpar6
   END IF
END IF
EXIT SUB

tpar1:
turtle.tpar(n&)=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).x)
IF turtle.tpar(n&)<0 THEN turtle.tpar(n&)=0
RETURN

tpar2:
turtle.tpar(n&)=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).y)
IF turtle.tpar(n&)<0 THEN turtle.tpar(n&)=0
RETURN

tpar3:
turtle.tpar(n&)=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).w)
IF turtle.tpar(n&)<2 THEN turtle.tpar(n&)=2
RETURN

tpar4:
turtle.tpar(n&)=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).h)
IF turtle.tpar(n&)<2 THEN turtle.tpar(n&)=2
RETURN

tpar5:
turtle.tpar(n&)=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).ln)
IF turtle.tpar(n&)<1 THEN turtle.tpar(n&)=1
RETURN

tpar6:
V&=turtle.tpar(n&)+((turtle.tframe-1)*turtle.tzone(turtle.tzonenum).dg)
DO
   IF V&>0 THEN
      IF V&<=360 THEN
         EXIT DO
      ELSE
         V&=V&-360
      END IF
   ELSE
      V&=V&+360
   END IF
LOOP
turtle.tpar(n&)=V&
RETURN

END SUB

' -------------------------------------------------------------------------------------------

'FUNCTION RGBval&(BYVAL R&,BYVAL G&,BYVAL B&)
'LOCAL R1&, G1&, B1&
'R1&=R&
'G1&=G&
'B1&=B&
'IF R1&<0 THEN R1&=0
'IF R1&>255 THEN R1&=255
'IF G1&<0 THEN G1&=0
'IF G1&>255 THEN G1&=255
'IF B1&<0 THEN B1&=0
'IF B1&>255 THEN B1&=255
'RGBval&=(B1&*65536)+(G1&*256)+R1&
'END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION VIEWx&(turtle AS turtledata, BYVAL V&)
LOCAL PU!, AV!
IF turtle.tview THEN
   PU!=turtle.tvieww/turtle.tviewx
   AV!=V&
   AV!=AV!*PU!
   VIEWx&=INT(AV!)
ELSE
   VIEWx&=V&
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION VIEWy&(turtle AS turtledata, BYVAL V&)
LOCAL PU!, AV!
IF turtle.tview THEN
   PU!=turtle.tviewh/turtle.tviewy
   AV!=V&
   AV!=AV!*PU!
   VIEWy&=INT(AV!)
ELSE
   VIEWy&=V&
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION VIEWw&(turtle AS turtledata, BYVAL V&)
LOCAL PU!, AV!, PU2!
IF turtle.tview THEN
   PU!=turtle.tvieww/turtle.tviewx
   PU2!=turtle.tviewh/turtle.tviewy
   IF PU!>PU2! THEN PU!=PU2!
   AV!=V&
   AV!=AV!*PU!
   VIEWw&=INT(AV!)
ELSE
   VIEWw&=V&
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB TCalcNewLine(BYVAL AX&,BYVAL AY&,BYVAL AL&,BYVAL ADG&,RX&,RY&)
LOCAL X#, Y#, R#, MFV&, DG&, X1#, Y1#, DG1#
' X#=Center Horizontal Position
' Y#=Center Vertical Position
' R#=Radius of Circle in Pixels
' DM&=Number of degrees to move for next position
X#=AX&
Y#=AY&
R#=AL& ' radius equals line length
MFV&=ADG&
IF MFV&<0 THEN MFV&=0
IF MFV&>360 THEN MFV&=MFV&-360
IF MFV&=0 THEN MFV&=360
SELECT CASE AS LONG MFV&
   CASE 1 TO 89
      X1#=1
      Y1#=-1
      DG&=90-MFV&
   CASE 90
      X1#=R#
      Y1#=0
      DG&=0
   CASE 91 TO 179
      X1#=1
      Y1#=1
      DG&=MFV&-90
   CASE 180
      X1#=0
      Y1#=R#
      DG&=0
   CASE 181 TO 269
      X1#=-1
      Y1#=1
      DG&=270-MFV&
   CASE 270
      X1#=-R#
      Y1#=0
      DG&=0
   CASE 271 TO 359
      X1#=-1
      Y1#=-1
      DG&=MFV&-270
   CASE ELSE
      X1#=0
      Y1#=-R#
      DG&=0
END SELECT
IF DG&<>0 THEN
   DG1#=DG&
   DG1#=DG1#*.01745333
   X1#=X1#*INT(COS(DG1#)*R#)
   Y1#=Y1#*INT(SIN(DG1#)*R#)
END IF
X1#=X#+X1#
Y1#=Y#+Y1#
RX&=INT(X1#)
RY&=INT(Y1#)
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetRealClass(BYVAL hWnd&) EXPORT10 AS STRING
    LOCAL X&, zCN AS ASCIIZ*32, D$
    D$=""
    IF hWnd&<>0 THEN
        IF IsWindow(hWnd&) THEN
           X&=GetClassName(hWnd&, zCN, 30)
           D$=UCASE$(LEFT$(zCN, X&))
        END IF
    END IF
    FUNCTION=D$
END FUNCTION

' -------------------------------------------------------------------------------------------

GLOBAL App_CurrentOpenGLhWnd&
GLOBAL App_CurrentOpenGLData$

FUNCTION zGLHandle(FormName$, BYVAL IDNum&) AS LONG
    LOCAL hWnd&, RV&
    RV&=0
    hWnd&=ezHandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN
        IF IsWindow(hWnd&)<>0 THEN
            IF EZ_GetRealClass(hWnd&)=$OPENGLCLASS THEN RV&=hWnd&
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_DoGL(BYVAL FormName$, BYVAL IDNum&, BYVAL Cmd$) EXPORT10
    LOCAL hWnd&, RV&
    RV&=0
    hWnd&=zGLHandle(FormName$, IDNum&)
    IF hWnd&<>0 THEN
        SendMessage hWnd&, %WM_SETTEXT, 0, STRPTR(Cmd$)
    END IF
END SUB

FUNCTION EZ_StartGL(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS LONG
    LOCAL hWnd&, RV&
    RV&=0
    hWnd&=zGLHandle(FormName$, IDNum&)
    IF hWnd&<>0 THEN
        App_CurrentOpenGLhWnd&=hWnd&
        App_CurrentOpenGLData$=""
        RV&=1
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_GL(BYVAL Cmd$) EXPORT10
    IF App_CurrentOpenGLhWnd&<>0 THEN
        IF LEN(App_CurrentOpenGLData$)=0 THEN
            App_CurrentOpenGLData$=Cmd$
        ELSE
            App_CurrentOpenGLData$=App_CurrentOpenGLData$+CHR$(13)+Cmd$
        END IF
    END IF
END SUB

SUB EZ_ExecGL() EXPORT10
    IF App_CurrentOpenGLhWnd&<>0 THEN
        IF IsWindow(App_CurrentOpenGLhWnd&) THEN
            IF LEN(App_CurrentOpenGLData$)<>0 THEN
                SendMessage App_CurrentOpenGLhWnd&, %WM_SETTEXT, 0, STRPTR(App_CurrentOpenGLData$)
            END IF
        END IF
    END IF
    App_CurrentOpenGLData$=""
END SUB

FUNCTION EZ_GetGL() EXPORT10 AS STRING
    LOCAL RV&
    EZ_ExecGL   ' force all commands to be executed
    RV&=0
    IF App_CurrentOpenGLhWnd&<>0 THEN
        IF IsWindow(App_CurrentOpenGLhWnd&) THEN
            FUNCTION=zGetWindowText(App_CurrentOpenGLhWnd&, 0)
            RV&=1
        END IF
    END IF
    IF RV&=0 THEN FUNCTION=""
END FUNCTION


SUB EZ_EndGL() EXPORT10
    EZ_ExecGL
    App_CurrentOpenGLhWnd&=0
END SUB
' <END SUB FILE>

' --------------------------------------------

' -------------------------------------------------------------------------------------------


SUB EZ_GetPictureSize(BYVAL PName$, W&, H&) EXPORT10
    EZ_GetBitmapSize EZ_ImageHandle(PName$), W&, H&
END SUB

' -------------------------------------------------------------------------------------------

SUB zGetBitmapInfo(BYVAL hBmp&, W&, H&, PixelBits&, DIBPtr&)
    LOCAL BM AS BITMAP, OKFlag&
    IF hBmp&<>0 THEN
        IF GetObjectType(hBmp&)=%OBJ_BITMAP THEN OKFlag&=1
    END IF
    IF OKFlag& THEN
        GetObject hBmp&, SIZEOF(BM), BM
        W&=BM.bmWidth
        H&=BM.bmHeight
        PixelBits&=BM.bmPlanes*BM.bmBitsPixel
        DIBPtr&=BM.bmBits
    ELSE
        W&=0
        H&=0
        PixelBits&=0
        DIBPtr&=0
    END IF
END SUB


SUB EZ_GetBitmapSize(BYVAL hBmp&, W&, H&) EXPORT10
    LOCAL PixelBits&, DIBPtr&
    zGetBitmapInfo hBmp&, W&, H&, PixelBits&, DIBPtr&
END SUB

SUB EZ_GetBitmapInfo(BYVAL hBmp&, W&, H&, PixelBits&, DIBPtr&) EXPORT10
    zGetBitmapInfo hBmp&, W&, H&, PixelBits&, DIBPtr&
END SUB

SUB EZ_GetPictureInfo(BYVAL PName$, W&, H&, PixelBits&, DIBPtr&) EXPORT10
    zGetBitmapInfo EZ_ImageHandle(PName$), W&, H&, PixelBits&, DIBPtr&
END SUB


' -------------------------------------------------------------------------------------------

FUNCTION CreateNewBitmap(BYVAL hWnd AS LONG, BYVAL hDC AS LONG, BYVAL W&, BYVAL H&) AS LONG
LOCAL hBmp2&, PA&, RV&, FM&, WS&, hDC2&
IF ( GetWindowLong(hWnd, %GWL_STYLE) AND %EZCVS_DIBSECTION)=0 THEN
    RV&=CreateCompatibleBitmap(hDC, W&, H&)
    ZSetWindowLong hWnd, 8, 0
    ' ---------------------------------------
    ' secondary Bitmap
    IF ZGetWindowLong(hWnd, 7)<>0 THEN
        hDC2&=CreateCompatibleDC(hDC)
        hBmp2&=CreateCompatibleBitmap(hDC, W&, H&)
' /**/        SelectObject hDC2&, hBmp2&
        ZSetWindowLong hWnd, 6, hDC2&
        ZSetWindowLong hWnd, 9, hBmp2&
        ZSetWindowLong hWnd, 10, 0        ' no pointer
    END IF
    ' ---------------------------------------
ELSE
    WS&=(GetWindowLong(hWnd, %GWL_STYLE) AND %EZCVS_32BIT)
    SELECT CASE AS LONG WS&
        CASE 2
            FM&=16
        CASE 4
            FM&=24
        CASE ELSE
            FM&=32
    END SELECT
    RV&=CreateNewDib(hDC, FM&, W&, H&, PA&)
    ZSetWindowLong hWnd, 8, PA&
    ' ---------------------------------------
    ' secondary Bitmap
    IF ZGetWindowLong(hWnd, 7)<>0 THEN
        hDC2&=CreateCompatibleDC(hDC)
        hBmp2&=CreateNewDib(hDC, FM&, W&, H&, PA&)
' /**/        SelectObject hDC2&, hBmp2&
        ZSetWindowLong hWnd, 6, hDC2
        ZSetWindowLong hWnd, 9, hBmp2&
        ZSetWindowLong hWnd, 10, PA&
    END IF
    ' ---------------------------------------
END IF
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------


SUB PBVBuildCanvasBitmap(BYVAL hWnd AS LONG, BYVAL CFlag&, BYVAL NW&, BYVAL NH&)
LOCAL R AS RECT, hDC AS LONG, hBmp AS LONG, hDC2 AS LONG
LOCAL W&, H&
GetClientRect hWnd, R
W&=R.nRight-R.nLeft
H&=R.nBottom-R.nTop

IF CFlag&=0 THEN
    IF W&=ZGetWindowLong(hWnd, 3) AND H&=ZGetWindowLong(hWnd, 4) THEN
        ' size is the same
        EXIT SUB
    END IF
END IF

' CFlag&=1 for Creation, =0 for Resize, -1 for destroy
IF CFlag&<=0 THEN
    ' Delete Previous DC and Bitmap
    hDC=ZGetWindowLong(hWnd, 1)
    hBmp=ZGetWindowLong(hWnd, 2)
    DeleteDC hDC
    DeleteObject hBmp
    ZSetWindowLong hWnd, 1, 0
    ZSetWindowLong hWnd, 2, 0
    ZSetWindowLong hWnd, 3, 0
    ZSetWindowLong hWnd, 4, 0
    ' ------------------------------
    ' secondary Bitmap
    hDC=ZGetWindowLong(hWnd, 6)
    IF hDC<>0 THEN DeleteDC hDC
    hBmp=ZGetWindowLong(hWnd, 9)
    IF hBMP<>0 THEN DeleteObject hBmp
    ZSetWindowLong hWnd, 6, 0
    ZSetWindowLong hWnd, 9, 0
    ZSetWindowLong hWnd, 10, 0
    ' ------------------------------
END IF
IF CFlag&>=0 THEN
    hDC2=GetDC(hWnd)
    hDC=CreateCompatibleDC(hDC2)
    ' second Bitmap and DC for DIBs is created in CreateNewBitmap
    hBmp=CreateNewBitmap(hWnd, hDC2, W&, H&)    ' custom code
' /**/    SelectObject hDC, hBmp
    ReleaseDC hWnd, hDC2
    ZSetWindowLong hWnd, 1, hDC
    ZSetWindowLong hWnd, 2, hBmp
    ZSetWindowLong hWnd, 3, W&
    ZSetWindowLong hWnd, 4, H&
    PBVClearCanvas hWnd
END IF
END SUB

' -------------------------------------------------------------------------------------------

GLOBAL App_CanvasHook AS DWORD
DECLARE FUNCTION CanvasHookX(BYVAL hWnd&, BYVAL hDC&, BYVAL MemDC&, BYVAL hBmp&, BYVAL SFlag&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL CW&, BYVAL CH&) AS LONG

SUB EZ_HookCanvasPaint(BYVAL MyHook AS DWORD) EXPORT10
    App_CanvasHook=MyHook
END SUB

SUB PBVCanvasClassPaint(BYVAL hWnd AS LONG, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)
LOCAL PS AS PAINTSTRUCT, RV&, W&, H&
LOCAL hDC AS LONG, SBufferFlag&, R AS RECT
LOCAL memDC AS LONG, OldhBmp&, hBmp&, hWinRgn&

IF IsWindow(hWnd) THEN
    memDC=ZGetWindowLong(hWnd, 1)
    hBmp&=ZGetWindowLong(hWnd, 2)
    IF ZIsThereSprites(hWnd, 0) THEN
        IF Mode&=1 THEN ' WM_PAINT
            hWinRgn&=CreateRectRgn(0,0,0,0)
            GetUpdateRgn hWnd, hWinRgn&,0
            hDC=BeginPaint(hWnd, PS)
        ELSE        ' WM_PRINTCLIENT
            GOSUB PreparePrintClient
        END IF
        hBmp&=ZUseSpriteBufferFast(hWnd, hBmp&, MemDC, PS.rcPaint.nLeft, PS.rcPaint.nTop,PS.rcPaint.nRight-PS.rcPaint.nLeft, PS.rcPaint.nBottom-PS.rcPaint.nTop, hDC, hWinRgn&)
        SBufferFlag&=1
    ELSE
        IF Mode&=1 THEN ' WM_PAINT
            hDC=BeginPaint(hWnd, PS)
        ELSE        ' WM_PRINTCLIENT
            GOSUB PreparePrintClient
        END IF
        SBufferFlag&=0
    END IF
    OldhBmp&=SelectObject(memDC, hBmp&)
    IF App_CanvasHook=0 THEN
        GOSUB DefaultBitBlt
    ELSE
        W&=ZGetWindowLong(hWnd, 3)
        H&=ZGetWindowLong(hWnd, 4)
        CALL DWORD App_CanvasHook USING CanvasHookX(hWnd, hDC, memDC, hBmp&, SBufferFlag&, PS.rcPaint.nLeft, PS.rcPaint.nTop, PS.rcPaint.nRight-1, PS.rcPaint.nBottom-1, W&, H&) TO RV&
        IF RV&=0 THEN GOSUB DefaultBitBlt
    END IF
    IF Mode&=1 THEN
        EndPaint hWnd, PS
    END IF
    SelectObject memDC, OldhBmp&
END IF
EXIT SUB

PreparePrintClient:
    hDC=wParam&
    GetClientRect hWnd&, R
    PS.rcPaint=R
    hWinRgn&=0
RETURN


DefaultBitBlt:
    BitBlt hDC, PS.rcPaint.nLeft, PS.rcPaint.nTop, _
                PS.rcPaint.nRight-PS.rcPaint.nLeft, PS.rcPaint.nBottom-PS.rcPaint.nTop, _
                memDC, PS.rcPaint.nLeft, PS.rcPaint.nTop, %SRCCOPY
RETURN

END SUB

SUB EZ_DrawSprites(BYVAL FormName$, BYVAL IDNum&, BYVAL BufNum&, BYVAL HFlag&) EXPORT10
    LOCAL hWnd&, hBmp&, hDC&, W&,H&, hSBmp&, OldBmp1&,OldBmp2&
    IF App_CanvasDC&=0 THEN     ' don't allow during draw cycle
        hWnd&=ezHandle(FormName$, IDNum&,1)
        IF hWnd&<>0 THEN
            IF ZGetClass(hWnd&)= $CanvasClassName THEN
                IF ZIsThereSprites(hWnd&,0) THEN
                    IF BufNum&=2 THEN
                        IF ZGetWindowLong(hWnd&, 7)=0 THEN BufNum&=1
                    ELSE
                        BufNum&=1
                    END IF
                    IF BufNum&=1 THEN
                        hDC&=ZGetWindowLong(hWnd&, 1)
                        hBmp&=ZGetWindowLong(hWnd&, 2)
                    ELSE
                        hDC&=ZGetWindowLong(hWnd&, 6)
                        hBmp&=ZGetWindowLong(hWnd&, 9)
                    END IF
                    EZ_GetBitmapSize hBmp&, W&, H&
                    hSBmp&=ZUseSpriteBufferFast(hWnd&, hBmp&, hDC&, 0, 0,W&,H&,0,0)
                    OldBmp1&=SelectObject(hDC&, hBmp&)
                    OldBmp2&=SelectObject(App_SpritesBufferDC,hSBmp&)
                    BitBlt hDC&, 0,0, W&,H&,App_SpritesBufferDC, 0,0,%SRCCOPY
                    SelectObject hDC&, OldBmp1&
                    SelectObject App_SpritesBufferDC,OldBmp2&
                    IF HFlag& THEN
                        ZIsThereSprites hWnd&,1     ' hide all sprites which have just been drawn
                    END IF
                    IF BufNum&=1 THEN
                        IF IsWindowVisible(hWnd&) THEN
                            InvalidateRect hWnd&, BYVAL %NULL, 1
                            UpdateWindow hWnd&
                        END IF
                    END IF
                END IF
            END IF
        END IF
    END IF
END SUB


' -------------------------------------------------------------------------------------------

FUNCTION ZGetWindowLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG
LOCAL I&, RV&, MaxN&
RV&=0
MaxN&=GetClassLong(hWnd,%GCL_CBWNDEXTRA)\4
IF N&>=1 AND N&<=MaxN& THEN     ' %CanvasClassExtraData
    I&=(N&-1)*4
    IF IsWindow(hWnd) THEN
        RV&=GetWindowLong(hWnd, I&)
    END IF
END IF
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB ZSetWindowLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
LOCAL I&, MaxN&
MaxN&=GetClassLong(hWnd,%GCL_CBWNDEXTRA)\4
IF N&>=1 AND N&<=MaxN& THEN     ' %CanvasClassExtraData
    I&=(N&-1)*4
    IF IsWindow(hWnd) THEN
        SetWindowLong hWnd, I&, V&
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------

GLOBAL App_DoGradientAngle&

SUB EZ_UseGradientAngle(BYVAL Mode&) EXPORT10
    SELECT CASE AS LONG Mode&
        CASE 0
        CASE ELSE
            Mode&=1
    END SELECT
    App_DoGradientAngle&=Mode&
END SUB

SUB EZ_DCDrawGradient(BYVAL hDC AS LONG, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL N1&) EXPORT10
LOCAL WinColor AS ColorCode
LOCAL EL&,X3&,Y3&,X4&,Y4&
LOCAL AX1&, AY1&, AX2&, AY2&, DX&,CX&, N&, DY&
LOCAL E&, N2&
LOCAL C1&,C2&, oldpen&
LOCAL R1 AS SINGLE,G1 AS SINGLE,B1 AS SINGLE
LOCAL R2 AS SINGLE,G2 AS SINGLE,B2 AS SINGLE
LOCAL R3 AS SINGLE,G3 AS SINGLE,B3 AS SINGLE
LOCAL DFX AS SINGLE, DFY AS SINGLE, OX1&, OX2&, OY1&, OY2&
REGISTER X&, Y&

IF X1&>X2& THEN SWAP X1&, X2&
IF Y1&>Y2& THEN SWAP Y1&,Y2&

EL&=1
AX1&=X1&
AX2&=X2&
AY1&=Y1&
AY2&=Y2&

SELECT CASE AS LONG N1&
   CASE 4,5
      N&=N1&-4
      EL&=2
      DX&=(AX2&-AX1&)/2
      X2&=AX1&+DX&
      X3&=X2&+1
      IF X3&>AX2& THEN X3&=AX2&
      X4&=AX2&
      N2&=1
      IF N&=1 THEN N2&=0
      CX&=1
   CASE 6,7
      N&=N1&-4
      EL&=2
      DY&=(AY2&-AY1&)/2
      Y2&=AY1&+DY&
      Y3&=Y2&+1
      IF Y3&>AY2& THEN Y3&=AY2&
      Y4&=AY2&
      N2&=3
      IF N&=3 THEN N2&=2
      CX&=0
   CASE 0 TO 3
      N&=N1&
   CASE ELSE
      N&=1
END SELECT
FOR E&=1 TO EL&
   IF E&=2 THEN
      N&=N2&
      IF CX&=1 THEN
         X1&=X3&
         X2&=X4&
      ELSE
         Y1&=Y3&
         Y2&=Y4&
      END IF
   END IF
   IF App_RGBColorFlag&=0 THEN
       C1&=ZFGColorNum(App_EZ_AFGColor&)
       IF C1&<>-1 THEN
           C1&=AppColor(C1&)
       ELSE
           C1&=0
       END IF
   ELSE
       C1&=App_RGBColorFG&
   END IF
   WinColor.n=C1&
   R1=WinColor.b.red
   G1=WinColor.b.green
   B1=WinColor.b.blue
   IF App_RGBColorFlag&=0 THEN
       C2&=ZFGColorNum(App_EZ_ABGColor&)
       IF C2&<>-1 THEN
           C2&=AppColor(C2&)
       ELSE
           C2&=RGB(255,255,255)
       END IF
   ELSE
       C2&=App_RGBColorBG&
   END IF
   WinColor.n=C2&
   R2=WinColor.b.red
   G2=WinColor.b.green
   B2=WinColor.b.blue
   R3=R2-R1
   G3=G2-G1
   B3=B2-B1
   DFX=X2&-X1&
   DFY=Y2&-Y1&
   SELECT CASE AS LONG N&
      CASE 0,1
         IF DFX<>0 THEN R3=R3/DFX
         IF DFX<>0 THEN G3=G3/DFX
         IF DFX<>0 THEN B3=B3/DFX
      CASE 2,3
         IF DFY<>0 THEN R3=R3/DFY
         IF DFY<>0 THEN G3=G3/DFY
         IF DFY<>0 THEN B3=B3/DFY
      CASE ELSE
   END SELECT
   SELECT CASE AS LONG N&
      CASE 0
         REM LEFT TO RIGHT
         OY1&=Y1&
         OY2&=Y2&
         FOR X&=X1& TO X2&
            oldpen&=SelectObject(hDC,CreatePen(0,1,RGB(R1,G1,B1)))
            MovetoEX hDC, X&, Y1&,BYVAL %NULL
            Lineto hDC, X&, Y2&+1
            DeleteObject SelectObject(hDC,oldpen&)
            R1=R1+R3
            G1=G1+G3
            B1=B1+B3
            IF App_DoGradientAngle& THEN
                IF Y1&+2 <= Y2& THEN
                    Y1&=Y1&+1
                    Y2&=Y2&-1
                END IF
            END IF
         NEXT X&
         Y1&=OY1&
         Y2&=OY2&
      CASE 1
         REM RIGHT TO LEFT
         OY1&=Y1&
         OY2&=Y2&
         FOR X&=X2& TO X1& STEP -1
            oldpen&=SelectObject(hDC,CreatePen(0,1,RGB(R1,G1,B1)))
            MovetoEX hDC, X&, Y1&,BYVAL %NULL
            Lineto hDC, X&, Y2&+1
            DeleteObject SelectObject(hDC,oldpen&)
            R1=R1+R3
            G1=G1+G3
            B1=B1+B3
            IF App_DoGradientAngle& THEN
                IF Y1&+2 <= Y2& THEN
                    Y1&=Y1&+1
                    Y2&=Y2&-1
                END IF
            END IF
         NEXT X&
         Y1&=OY1&
         Y2&=OY2&
      CASE 2
         REM top TO bottom
         OX1&=X1&
         OX2&=X2&
         FOR Y&=Y1& TO Y2&
            oldpen&=SelectObject(hDC,CreatePen(0,1,RGB(R1,G1,B1)))
            MovetoEX hDC, X1&, Y&,BYVAL %NULL
            Lineto hDC, X2&+1, Y&
            DeleteObject SelectObject(hDC,oldpen&)
            R1=R1+R3
            G1=G1+G3
            B1=B1+B3
            IF App_DoGradientAngle& THEN
                IF X1&+2 <= X2& THEN
                    X1&=X1&+1
                    X2&=X2&-1
                END IF
            END IF
         NEXT Y&
         X1&=OX1&
         X2&=OX2&
      CASE 3
         REM bottom TO top
         OX1&=X1&
         OX2&=X2&
         FOR Y&=Y2& TO Y1& STEP -1
            oldpen&=SelectObject(hDC,CreatePen(0,1,RGB(R1,G1,B1)))
            MovetoEX hDC, X1&, Y&,BYVAL %NULL
            Lineto hDC, X2&+1, Y&
            DeleteObject SelectObject(hDC,oldpen&)
            R1=R1+R3
            G1=G1+G3
            B1=B1+B3
            IF App_DoGradientAngle& THEN
                IF X1&+2 <= X2& THEN
                    X1&=X1&+1
                    X2&=X2&-1
                END IF
            END IF
         NEXT Y&
         X1&=OX1&
         X2&=OX2&
      CASE ELSE
   END SELECT
NEXT E&
App_DoGradientAngle&=0  ' reset angle
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_LDrawGradient (BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Mode&) EXPORT10
    LOCAL hDC&
    hDC&=ZGetPrnDC
    IF hDC&<>0 THEN
        EZ_DCDrawGradient hDC&, X1&, Y1&, X2&, Y2&, Mode&
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB EZ_CDrawGradient (BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL Mode&) EXPORT10
IF App_CanvasDC&<>0 THEN
    EZ_DCDrawGradient App_CanvasDC&, X1&, Y1&, X2&, Y2&, Mode&
END IF
END SUB

' -------------------------------------------------------------------------------------------
GLOBAL App_ResourceList$

FUNCTION EZ_GetResourceNames(BYVAL Src&, BYVAL RType&, BYVAL hMod&) EXPORT10 AS STRING

LOCAL hLib&
SELECT CASE AS LONG Src&
    CASE 0  ' EXE
        hLib&=GetModuleHandle(BYVAL %NULL)
    CASE 1  ' Image Library
        hLib&=AppStubInstance&
    CASE 2  ' ezgui runtime
        hLib&=AppDLLInstance&
    CASE 3  ' pattern Library
        hLib&=App_hPatterns&
    CASE 4  ' alternate library
        hLib&=hMod&
END SELECT
App_ResourceList$=""
IF hLib&<>0 THEN
    IF RType&>=1 AND RType&<= 20 THEN
        EnumResourceNames hLib&, BYVAL RType&, CODEPTR(ZResourceProc), 0
    END IF
END IF
FUNCTION=App_ResourceList$
END FUNCTION

'%RT_CURSOR                                   = 1&  hardware dependent
'%RT_BITMAP                                   = 2&
'%RT_ICON                                     = 3&  hardware dependent
'%RT_GROUP_CURSOR                             = 12  Device Independent
'%RT_GROUP_ICON                               = 14  Device Independent


FUNCTION ZResourceProc(BYVAL hLib&, BYVAL ResTypeA AS DWORD, BYVAL ResNameA AS DWORD, BYVAL lParam&) AS LONG
LOCAL ResType AS ASCIIZ PTR, ResName AS ASCIIZ PTR
ResType=ResTypeA
ResName=ResNameA
IF App_ResourceList$="" THEN
    App_ResourceList$=@ResName
ELSE
    App_ResourceList$=App_ResourceList$+App_EZ_DChar$+@ResName
END IF
FUNCTION=%TRUE
END FUNCTION

FUNCTION EZ_GetResourceData(BYVAL RName$, BYVAL RType&, BYVAL FFlag&) EXPORT10 AS STRING
    LOCAL hRes&, LP&, zRN AS ASCIIZ*256, hResL&, lData AS DWORD, DL&, RV$
    IF LEFT$(RName$,1)="#" THEN
        LP&=MAKLNG(VAL(MID$(RName$,2)),0)
    ELSE
        zRN=RName$
        LP&=VARPTR(zRN)
    END IF
    hRes&=FindResource(BYVAL %NULL, BYVAL LP&, BYVAL MAKLNG(RType&,0))
    IF hRes&<>0 THEN
        IF FFlag& THEN
            RV$="YES"
        ELSE
            DL&=SizeOfResource(BYVAL %NULL, hRes&)
            IF DL&>0 THEN
                hResL&=LoadResource(BYVAL %NULL, hRes&)
                IF hResL&<>0 THEN
                    lData=LockResource(hResL&)
                    IF lData<>0 THEN
                        RV$=STRING$(DL&,CHR$(0))
                        MoveMemory STRPTR(RV$), lData, DL&
                    END IF
                END IF
            END IF
        END IF
    ELSE
        IF FFlag& THEN RV$="NO"
    END IF
    FUNCTION=RV$
END FUNCTION

SUB EZ_MoveMem(BYVAL SrcMemPTR AS DWORD, BYVAL DestMemPTR AS DWORD, BYVAL MemLen&) EXPORT10
    MoveMemory DestMemPTR, SrcMemPTR, MemLen&
END SUB

DECLARE FUNCTION IsAppThemedX () AS LONG        ' #1
DECLARE FUNCTION IsThemeActiveX () AS LONG      ' #2
DECLARE FUNCTION SetWindowThemeX (BYVAL hWnd AS LONG, BYVAL lpSubAppName AS LONG, BYVAL lpSibIDList AS LONG) AS LONG    ' #3
'T$=""+chr$(0)
'SetWindowTheme hWnd&, byval %NULL, byval strptr(T$)    ' clears window theme from a window

GLOBAL App_ThemeAddr() AS DWORD

GLOBAL App_ThemeHandle AS DWORD

SUB zUnInitThemes()
    IF App_ThemeHandle<>0 THEN FreeLibrary App_ThemeHandle
    ERASE App_ThemeAddr
END SUB

SUB zInitThemes()
    LOCAL A AS DWORD, B AS DWORD, RV&
    LOCAL CMsg&, CVal&, Cancel&
    REDIM App_ThemeAddr(0 TO 10) AS DWORD
    App_ThemeHandle=0
    A=zGetDLLProcAddress("UXTHEME.dll","IsAppThemed")
    App_ThemeAddr(0)=0
    IF A=0 THEN
        CMsg&=%EZ_NoTheme
        CVal&=0
        Cancel&=0
        zSendAppEvent CMsg&, CVal&, Cancel&
        IF Cancel&<>0 THEN
            App_ThemeHandle=LoadLibrary("uxtheme.dll")
            IF App_ThemeHandle<>0 THEN
                A=zGetDLLProcAddress("UXTHEME.dll","IsAppThemed")
            END IF
        END IF
    END IF
    IF A<>0 THEN
'        msgbox "Theme Loaded"
        IF EZ_GetResourceData("#1",24, 1)="YES" THEN
            App_ThemeAddr(0)=1
        END IF
        App_ThemeAddr(1)=A
        App_ThemeAddr(2)=zGetDLLProcAddress("UXTHEME.dll","IsThemeActive")
        App_ThemeAddr(3)=zGetDLLProcAddress("UXTHEME.dll","SetWindowTheme")
        App_ThemeAddr(4)=zGetDLLProcAddress("UXTHEME.dll","OpenThemeData")
        App_ThemeAddr(5)=zGetDLLProcAddress("UXTHEME.dll","CloseThemeData")
        App_ThemeAddr(6)=zGetDLLProcAddress("UXTHEME.dll","DrawThemeBackground")
        App_ThemeAddr(7)=zGetDLLProcAddress("UXTHEME.dll","DrawThemeEdge")
'        App_ThemeAddr(8)=zGetDLLProcAddress("UXTHEME.dll","DrawThemeParentBackGround")
'        App_ThemeAddr(9)=zGetDLLProcAddress("UXTHEME.dll","DrawThemeText")
    END IF
END SUB


FUNCTION zIsAppThemed() AS LONG
    LOCAL RV&
    IF App_ThemeAddr(1)<>0 THEN
        CALL DWORD App_ThemeAddr(1) USING IsAppThemedX() TO RV&
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION zIsThemeActive() AS LONG
    LOCAL RV&
    IF App_ThemeAddr(2)<>0 THEN
        CALL DWORD App_ThemeAddr(2) USING IsThemeActiveX() TO RV&
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION zIsEXEThemed() AS LONG
    IF App_ThemeAddr(0)=1 THEN
        FUNCTION=1
    ELSE
        FUNCTION=0
    END IF
END FUNCTION

FUNCTION EZ_GetThemeStatus(BYVAL TMode&) EXPORT10 AS LONG
    LOCAL RV&, F$
    RV&=0
    SELECT CASE AS LONG TMode&
        CASE 1
            RV&=zIsEXEThemed
        CASE 2
            F$=EZ_GetAppPathName
            F$=F$+".manifest"
            IF DIR$(F$)<>"" THEN RV&=1
        CASE 3
            RV&=zIsAppThemed
        CASE 4
            RV&=zIsThemeActive
        CASE 0
            IF EZ_GetThemeStatus(1)<>0 AND EZ_GetThemeStatus(2)<>0 AND EZ_GetThemeStatus(3) AND EZ_GetThemeStatus(4) THEN RV&=1
        CASE -1
            IF EZ_GetThemeStatus(1)<>0 AND EZ_GetThemeStatus(3) AND EZ_GetThemeStatus(4) THEN RV&=1
        CASE -2
            IF EZ_GetThemeStatus(2)<>0 AND EZ_GetThemeStatus(3) AND EZ_GetThemeStatus(4) THEN RV&=1
        CASE ELSE
    END SELECT
    FUNCTION=RV&
END FUNCTION


FUNCTION zSetWindowTheme (BYVAL hWnd AS LONG, BYVAL lpSubAppName AS LONG, BYVAL lpSibIDList AS LONG) AS LONG
    LOCAL RV&
    IF App_ThemeAddr(3)<>0 THEN
        CALL DWORD App_ThemeAddr(3) USING SetWindowThemeX (hWnd, lpSubAppName, lpSibIDList) TO RV&
    END IF
    FUNCTION=RV&
END FUNCTION

GLOBAL App_UseNoThemeNext&

SUB EZ_UseNoTheme() EXPORT10
    App_UseNoThemeNext&=1
END SUB

SUB ezSetNoTheme(BYVAL hWnd&)
    LOCAL C AS STRING
    IF hWnd&<>0 THEN
        IF IsWindow(hWnd&) THEN
            IF zIsAppThemed THEN
                IF zIsThemeActive THEN
                    C=EZ_AnsiToUnicode("",1)
                    zSetWindowTheme hWnd&, BYVAL %NULL, BYVAL STRPTR(C)
                END IF
            END IF
        END IF
    END IF
END SUB

SUB CheckTheme(BYVAL hWnd&)
    IF App_UseNoThemeNext&=1 THEN ezSetNoTheme hWnd&
    App_UseNoThemeNext&=0
END SUB

SUB EZ_SetThemeOff(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    ezSetNoTheme ezhandle(FormName$, IDNum&,1)
END SUB

' C$= EZ_AnsiToUnicode(ClassName$,1)
' Valid Class Names tested:  (not case sensitive it appears) use all caps though
' Button
' Combobox
' Edit
' Header
' Listbox
' Listview
' Progress
' Rebar
' Scrollbar
' Spin (updown control)
' Status
' Tab   (Tab control)
' Toolbar
' Tooltip
' Trackbar
' Treeview
' -----------------
' Window
' Explorerbar
'========================




SUB ezGetTClass(BYVAL hWnd&, TC$, CType&)
    LOCAL C$, FC&
    C$=ZGetCListClass(hWnd&,1)
    FC&=ASC(C$) ' get asc code of first letter
    TC$=""
    CType&=0    ' default Window type
    SELECT CASE AS LONG FC&
        CASE 65 ' A
            SELECT CASE AS CONST$ C$
                CASE "ANIMATE"
                    TC$="WINDOW"
            END SELECT
        CASE 66 ' B
            SELECT CASE AS CONST$ C$
                CASE "BUTTON"
                    TC$="BUTTON"
                    CType&=%CTRL_BUTTON
            END SELECT
        CASE 67 ' C
            SELECT CASE AS CONST$ C$
                CASE "CALENDAR"
                    TC$="WINDOW"
                CASE "CANVAS"
                    TC$="WINDOW"
                CASE "CHECKBOX"
                    TC$="BUTTON"
                    CType&=%CTRL_CHECKBOX
            END SELECT
        CASE 68 ' D
            SELECT CASE AS CONST$ C$
                CASE "DATETIME"
                    TC$="WINDOW"
                CASE "DIALOG"
                    TC$="WINDOW"
                CASE "DRAGHANDLE"
                    TC$="WINDOW"
            END SELECT
        CASE 70 ' F
            SELECT CASE AS CONST$ C$
                CASE "FLISTBOX"
                    TC$="LISTBOX"
                    CType&=%CTRL_LISTBOX
                CASE "FORM"
                    TC$="WINDOW"
                CASE "FRAME"
                    TC$="BUTTON"
                    CType&=%CTRL_FRAME
            END SELECT
        CASE 72 ' H
            SELECT CASE AS CONST$ C$
                CASE "HEADER"
                    TC$="HEADER"
                    CType&=%CTRL_HEADER
            END SELECT
        CASE 73 ' I
            SELECT CASE AS CONST$ C$
                CASE "ICON"
                    TC$="WINDOW"
            END SELECT
        CASE 76 ' L
            SELECT CASE AS CONST$ C$
                CASE "LABEL"
                    TC$="WINDOW"
                CASE "LISTBOX"
                    TC$="LISTBOX"
                    CType&=%CTRL_LISTBOX
                CASE "LISTVIEW"
                    TC$="LISTVIEW"
                    CType&=%CTRL_LISTVIEW
            END SELECT
        CASE 77 ' M
            SELECT CASE AS CONST$ C$
                CASE "MASKEDIT"
                    TC$="EDIT"
                    CType&=%CTRL_TEXT
                CASE "MCI"
                    TC$="WINDOW"
                CASE "MDIFORM"
                    TC$="WINDOW"
            END SELECT
        CASE 80 ' P
            SELECT CASE AS CONST$ C$
                CASE "PAGER"
                    TC$="WINDOW"
                CASE "PICTURE"
                    TC$="WINDOW"
                CASE "PLISTBOX"
                    TC$="LISTBOX"
                    CType&=%CTRL_LISTBOX
                CASE "PROGRESSBAR"
                    TC$="PROGRESS"
                    CType&=%CTRL_PROGRESS
            END SELECT
        CASE 82 'R
            SELECT CASE AS CONST$ C$
                CASE "RADIO"
                    TC$="BUTTON"
                    CType&=%CTRL_RADIO
                CASE "RICHTEXT1"
                    TC$="EDIT"
                    CType&=%CTRL_TEXT
                CASE "RICHTEXT2"
                    TC$="EDIT"
                    CType&=%CTRL_TEXT
                CASE "REBAR"
                    TC$="REBAR"
                    CType&=%CTRL_REBAR
            END SELECT
        CASE 83 'S
            SELECT CASE AS CONST$ C$
                CASE "SHAPE"
                    TC$="WINDOW"
                CASE "STATUSBAR"
                    TC$="STATUS"
                    CType&=0
            END SELECT
        CASE 84 'T
            SELECT CASE AS CONST$ C$
                CASE "TABCONTROL"
                    TC$="TAB"
                    CType&=%CTRL_TAB
                CASE "TEXT"
                    TC$="EDIT"
                    CType&=%CTRL_TEXT
                CASE "TOOLBAR"
                    TC$="TOOLBAR"
                    CType&=%CTRL_TOOLBAR
                CASE "TRACKBAR"
                    TC$="TRACKBAR"
                    CType&=%CTRL_HTRACKBAR  ' either one V or H
                CASE "TREEVIEW"
                    TC$="TREEVIEW"
                    CType&=%CTRL_TREEVIEW
                CASE "TURTLE"
                    TC$="WINDOW"
            END SELECT
        CASE 85 'U
            SELECT CASE AS CONST$ C$
                CASE "UPDOWN"
                    TC$="SPIN"
                    CType&=%CTRL_UPDOWN
            END SELECT
        CASE ELSE
    END SELECT
    IF LEN(TC$)=0 THEN TC$="WINDOW"
END SUB

DECLARE FUNCTION CloseThemeDataX(BYVAL hTheme&) AS LONG

SUB ezEndTheme(BYVAL hTheme&)
    LOCAL RV&
    IF App_ThemeAddr(5)<>0 THEN
        CALL DWORD App_ThemeAddr(5) USING CloseThemeDataX(hTheme&) TO RV&
    END IF
END SUB


DECLARE FUNCTION OpenThemeDataX(BYVAL hWnd&, BYVAL lpClass&) AS LONG

' Syntax for TC$
' If first character is ; then get actual class and append TC$ to end
' If last character is ; then get actual class and prefix TC$ before it
' If TC$ ="" then use actual class
' If TC$ is valid class and no ; at beginning or end then just use that class
FUNCTION ezStartTheme(BYVAL hWnd&, BYVAL TC$) AS LONG
    LOCAL RV&, CType&, TCT$
    IF App_ThemeAddr(4)<>0 THEN
        IF LEFT$(TC$,1)=";" THEN
            ezGetTClass hWnd&, TCT$, CType&
            TC$=TCT$+TC$
        END IF
        IF RIGHT$(TC$,1)=";" THEN
            ezGetTClass hWnd&, TCT$, CType&
            TC$=TC$+TCT$
        END IF
        IF LEN(TC$)=0 THEN ezGetTClass hWnd&, TC$, CType&
        TC$=EZ_AnsiToUnicode(TC$,1)
        CALL DWORD App_ThemeAddr(4) USING OpenThemeDataX(hWnd&, STRPTR(TC$)) TO RV&
    END IF
    FUNCTION=RV&
END FUNCTION


' Themed versions of GDI calls!
DECLARE FUNCTION DrawThemeEdgeX(BYVAL hTheme&, BYVAL hDC&, BYVAL PartID&, BYVAL StateID&, R AS RECT, BYVAL Edge&, BYVAL EFlag&, CR AS RECT) AS LONG

SUB ezDrawEdge(BYVAL hDC&, R AS RECT, BYVAL Edge&, BYVAL EFlag&)
    LOCAL GDIFlag&
    GDIFlag&=1
    IF App_UseTheme&<>0 AND App_ThemeAddr(7)<>0 THEN
        LOCAL PartID&, StateID&, RV&, hTheme&
        hTheme&=ezStartTheme(App_UseThemehWnd&, "WINDOW")
        PartID&=38  ' WP_FRAME
        StateID&=1  ' active  2 is inactive
        IF hTheme&<>0 THEN
            CALL DWORD App_ThemeAddr(7) USING DrawThemeEdgeX(hTheme&, hDC&, PartID&, StateID&, R, Edge&, EFlag&, BYVAL %NULL) TO RV&
            GDIFlag&=0
            ezEndTheme hTheme&
        END IF
    END IF
    IF GDIFlag& THEN DrawEdge hDC&, R, Edge&, EFlag&
END SUB


'         App_ThemeAddr(6)=zGetDLLProcAddress("UXTHEME.dll","DrawThemeBackground")
DECLARE FUNCTION DrawThemeBackgroundX(BYVAL hTheme&, BYVAL hDC&, BYVAL PartID&, BYVAL StateID&, R AS RECT, CR AS RECT) AS LONG

SUB ezDrawFrameControl(BYVAL hDC&, R AS RECT, BYVAL UType&, BYVAL UState&, BYVAL PartID&, BYVAL StateID&, BYVAL TC$)
    LOCAL GDIFlag&
    GDIFlag&=1
    IF App_UseTheme&<>0 AND App_ThemeAddr(6)<>0 AND PartID&<>0 THEN
        LOCAL RV&, hTheme&
        hTheme&=ezStartTheme(App_UseThemehWnd&, TC$)
        IF hTheme&<>0 THEN
            CALL DWORD App_ThemeAddr(6) USING DrawThemeBackgroundX(hTheme&, hDC&, PartID&, StateID&, R, BYVAL %NULL) TO RV&
            GDIFlag&=0
            ezEndTheme hTheme&
        END IF
    END IF
    IF GDIFlag& THEN
        IF UType&=-1 THEN
             IF UState&=-1 THEN
                  Rectangle hDC&, R.nLeft, R.nTop, R.nRight, R.nBottom
             ELSE
                  RoundRect  hDC&, R.nLeft, R.nTop, R.nRight, R.nBottom, 8,8
             END IF
        ELSE
            DrawFrameControl hDC&, R, UType&, UState&
        END IF
    END IF
END SUB

' ------------------------------------------
'     New Theme Aware commands
' ------------------------------------------

' =======================================================================
' =======================================================================

FUNCTION EZ_GetThemeClass(BYVAL FormName$, BYVAL IDNum&) EXPORT10 AS STRING
    LOCAL TC$, CType&, hWnd&
    hWnd&=ezhandle(FormName$, IDnum&,1)
    IF hWnd&<>0 THEN
        ezGetTClass hWnd&, TC$, CType&
    END IF
    FUNCTION=TC$
END FUNCTION


SUB EZ_EndTheme() EXPORT10
    App_UseTheme&=0
    App_UseThemehWnd&=0
END SUB


SUB EZ_StartThemeI(BYVAL hWnd&) ' for internal use only
    EZ_EndTheme     ' force end of any them being used
    IF zIsAppThemed THEN
        IF zIsThemeActive THEN
            App_UseTheme&=1
            App_UseThemehWnd&=hWnd&
        END IF
    END IF
END SUB

SUB EZ_StartTheme(BYVAL FormName$, BYVAL IDNum&) EXPORT10
    LOCAL hWnd&
    IF FormName$="" THEN EXIT SUB
    hWnd&=ezhandle(FormName$, IDNum&,1)
    IF hWnd&<>0 THEN
        EZ_StartThemeI hWnd&
    END IF
END SUB

' Syntax for TC$
' If first character is ; then get actual class and append TC$ to end
' If last character is ; then get actual class and prefix TC$ before it
' If TC$ ="" then use actual class
' If TC$ is valid class and no ; at beginning or end then just use that class

FUNCTION EZ_StartThemeEx(BYVAL hWnd&, BYVAL TC$) EXPORT10 AS LONG
    LOCAL RV&
    RV&=0
    IF IsWindow(hWnd&) THEN
        RV&=ezStartTheme(hWnd&, TC$)
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_EndThemeEx(BYVAL hTheme&) EXPORT10
    ezEndTheme hTheme&
END SUB

GLOBAL App_CustomObjTClass$

SUB EZ_DefCustObjDraw(BYVAL CB AS DWORD) EXPORT10
     App_CustomDCDraw=CB
END SUB

SUB EZ_DefTClass(BYVAL C$) EXPORT10
     App_CustomObjTClass$=C$
END SUB

SUB EZ_ThemeDrawEdge(BYVAL hTheme&, BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PartID&, BYVAL StateID&, BYVAL Edge&, BYVAL Flags&) EXPORT10
     LOCAL R AS RECT, RV&
     IF X1&>X2& THEN SWAP X1&, X2&
     IF Y1&>Y2& THEN SWAP Y1&, Y2&
     R.nLeft=X1&
     R.nTop=Y1&
     R.nRight=X2&+1
     R.nBottom=Y2&+1
     IF hTheme&<>0 THEN
          IF App_ThemeAddr(7)<>0 THEN
               CALL DWORD App_ThemeAddr(7) USING DrawThemeEdgeX(hTheme&, hDC&, PartID&, StateID&, R, Edge&, Flags&, BYVAL %NULL) TO RV&
          END IF
     END IF
END SUB

SUB EZ_ThemeDrawBG(BYVAL hTheme&, BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PartID&, BYVAL StateID&) EXPORT10
     LOCAL R AS RECT, RV&
     IF X1&>X2& THEN SWAP X1&, X2&
     IF Y1&>Y2& THEN SWAP Y1&, Y2&
     R.nLeft=X1&
     R.nTop=Y1&
     R.nRight=X2&+1
     R.nBottom=Y2&+1
     IF hTheme&<>0 THEN
          IF App_ThemeAddr(6)<>0 THEN
               CALL DWORD App_ThemeAddr(6) USING DrawThemeBackgroundX(hTheme&, hDC&, PartID&, StateID&, R, BYVAL %NULL) TO RV&
          END IF
     END IF
END SUB


DECLARE SUB ezCustomObjDrawX(BYVAL hDC&, BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&, BYVAL RGB_FG&, BYVAL RGB_BG&, BYVAL hTheme&)

SUB ezCustomObjDraw(BYVAL CurrentDC&, BYVAL DObj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL PenWidth&, BYVAL FillFlag&, BYVAL RGB_FG&, BYVAL RGB_BG&)
     LOCAL TFlag&
     LOCAL hTheme&, TC$, CType&
     TFlag&=0
     hTheme&=0
     IF (App_UseTheme&<>0) AND (App_ThemeAddr(1)<>0) AND (App_UseThemehWnd&<>0) THEN TFlag&=1
     IF App_CustomDCDraw<>0 THEN
          IF TFlag& THEN
               TC$=""
               IF LEN(App_CustomObjTClass$)<>0 THEN TC$=App_CustomObjTClass$
               IF LEN(TC$)=0 THEN ezGetTClass App_UseThemehWnd&, TC$, CType&
               IF LEN(TC$)=0 THEN TC$="WINDOW"
          END IF
          SaveDC CurrentDC&
          IF TFlag& THEN hTheme&=ezStartTheme(App_UseThemehWnd&, TC$)
          CALL DWORD App_CustomDCDraw USING ezCustomObjDrawX (CurrentDC&, DObj&, X1&, Y1&, X2&, Y2&, PenWidth&, FillFlag&, RGB_FG&, RGB_BG&, hTheme&)
          IF TFlag& THEN ezEndTheme hTheme&
          RestoreDC CurrentDC&, -1
     END IF
END SUB



' =======================================================================
' =======================================================================

SUB EZ_StartCList(BYVAL FormName$, BYVAL ClassName$) EXPORT10
LOCAL hWnd AS LONG, N&
ClassName$=UCASE$(ClassName$)
App_CListCount&=0
IF FormName$<>"" THEN
    IF LEFT$(FormName$,1)="#" THEN
        hWnd=VAL(MID$(FormName$,2))
        IF IsWindow(hWnd)=0 THEN EXIT SUB
        IF ClassName$="MDIFORM" THEN ClassName$="EZGUI_TYPE5_32"
    ELSE
        hWnd=PBVFormHandle(FormName$)
    END IF
    IF hWnd<>0 THEN
        IF ClassName$="MDIFORM" THEN
            App_CListCount&=0
            N&=ZFormNumH(hWnd)
            IF N&=0 THEN EXIT SUB
            hWnd&=AppForms(N&).FhWnd2
            IF hWnd&=0 THEN EXIT SUB
            App_CListhWnd&=hWnd
            App_CListClass$="EZGUI_TYPE5_32"
        ELSE
            App_CListhWnd&=hWnd
            App_CListCount&=0
            App_CListClass$=ClassName$
        END IF
        EnumChildWindows hWnd&, CODEPTR(ZEnumListProc),1
        IF App_CListCount&>0 THEN
            REDIM App_CListControl&(1 TO App_CListCount&)
            ' get handles
            App_CListCount&=0
            EnumChildWindows hWnd&, CODEPTR(ZEnumListProc),2
            App_CListFlag&=1
        END IF
    END IF
END IF

END SUB

' -------------------------------------------------------------------------------------------

FUNCTION PBVGetCListVal(BYVAL N&, BYVAL Mode&) AS LONG
LOCAL RV&, hWnd&, C$
RV&=0
IF App_CListFlag&<>0 THEN
    IF N&>=LBOUND(App_CListControl&) AND N&<=UBOUND(App_CListControl&) THEN
        hWnd&=App_CListControl&(N&)
        IF hWnd&<>0 THEN
            IF Mode&=1 THEN
                C$=ZGetClass(hWnd&)
                IF LEFT$(C$,10)="EZGUI_TYPE" THEN
                    RV&=0
                ELSEIF C$="#32770" THEN
                    RV&=0
                ELSE
                    RV&=GetDlgCtrlID(hWnd&)
                END IF
            ELSE
                RV&=hWnd&
            END IF
        END IF
    END IF
END IF
FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetCListID(BYVAL N&) EXPORT10 AS LONG
FUNCTION=PBVGetCListVal(N&,1)
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetCListHandle(BYVAL N&) EXPORT10 AS LONG
FUNCTION=PBVGetCListVal(N&,0)
END FUNCTION

' -------------------------------------------------------------------------------------------


SUB EZ_ChangeParent(BYVAL FormName$, BYVAL IDNum&, BYVAL NewParentName$) EXPORT10
LOCAL I&, hCtrl&, AFNum&, OldFNum&
NewParentName$=UCASE$(TRIM$(NewParentName$))
IF FormName$<>NewParentName$ THEN
    hCtrl&=ezHandle(FormName$, IDNum&,1)
    IF hCtrl&<>0 THEN
        I&=ZGetControlIndex(hCtrl&)
        IF I&>0 THEN
            OldFNum&=ZFormNum(FormName$)
            AFNum&=ZFormNum(NewParentName$)
            IF AFNum&<>0 AND OldFNum&<>0 THEN
                SELECT CASE AS CONST$ ZGetClass(hCtrl&)
                    CASE "TOOLBARWINDOW32"
                        IF hCtrl&=AppForms(OldFNum&).FhToolbar THEN
                            IF AppForms(AFNum&).FhToolbar=0 THEN
                                GOSUB SetNPForm
                                AppForms(OldFNum&).FhToolbar=0
                                AppForms(AFNum&).FhToolbar=hCtrl&
                            END IF
                        ELSE
                            GOSUB SetNPForm
                        END IF
                    CASE "MSCTLS_STATUSBAR32"
                        IF AppForms(AFNum&).FhStatusbar=0 THEN
                            GOSUB SetNPForm
                            AppForms(OldFNum&).FhStatusbar=0
                            AppForms(AFNum&).FhStatusbar=hCtrl&
                        END IF
                    CASE ELSE
                        GOSUB SetNPForm
                END SELECT
            END IF
        END IF
    END IF
END IF
EXIT SUB

SetNPForm:
AppControlTNum(I&)=(IDNum&*1000)+AFNum&
IF NewParentName$="{ME}" THEN NewParentName$=EZ_GetME
AppControlForm$(I&)=UCASE$(NewParentName$)
SetParent hCtrl&, ezHandle(NewParentName$,0,1)
RETURN

END SUB

' -------------------------------------------------------------------------------------------

FUNCTION ZGetCListClass(BYVAL hCtrl&, BYVAL Mode&) AS STRING
LOCAL D$, WS&, FC&, P&
IF hCtrl&<>0 THEN
    D$=ZGetClass(hCtrl&)
    IF Mode&=1 THEN
        ' listbox, ComboBox and scrollbar no change in name
        FC&=ASC(D$)
        SELECT CASE AS LONG FC&
            CASE 66 'B
                SELECT CASE AS CONST$ D$
                    CASE "BUTTON"
                        WS&=GetWindowLong(hCtrl&, %GWL_STYLE) AND 15
                        SELECT CASE AS LONG WS&
                            CASE %BS_CHECKBOX, %BS_AUTOCHECKBOX,%BS_3STATE, %BS_AUTO3STATE
                                D$="CHECKBOX"
                            CASE %BS_RADIOBUTTON, %BS_AUTORADIOBUTTON
                                D$="RADIO"
                            CASE %BS_GROUPBOX
                                D$="FRAME"
                            CASE ELSE
                        END SELECT
                END SELECT
            CASE 69 'E
                ' all EZGUI custom controls start with E
                SELECT CASE AS CONST$ D$
                    CASE "EDIT"
                        D$="TEXT"
                    CASE $PLISTCLASS
                        D$="PLISTBOX"
                    CASE $FLISTCLASS
                        D$="FLISTBOX"
                    CASE $TurtleClassName
                        D$="TURTLE"
                    CASE $CanvasClassName
                        D$="CANVAS"
                    CASE $MCIClassName
                        D$="MCI"
                    CASE $ShapeClassName
                        D$="SHAPE"
                    CASE $DragHandleControl
                        D$="DRAGHANDLE"
                    CASE $EZComponent
                        D$=ZFormNameH(hCtrl&)   ' get form name
                        P&=INSTR(D$, "|")
                        IF P&<>0 THEN
                            D$=MID$(D$,2, P&-2)
                        ELSE
                            D$="COMPONENT"
                        END IF
                    CASE ELSE
                         IF D$=UCASE$(App_MaskEditClass$) THEN
                              D$="MASKEDIT"
                         END IF
                        ' Type 1 - Normal EZGUI Form
                        ' Type 2 - Normal EZGUI Form (NO Close X)
                        ' Type 3 - Component
                        ' Type 4 - MDI Parent
                        ' Type 5 - MDI Child
                        IF LEFT$(D$,10)="EZGUI_TYPE" THEN
                            SELECT CASE AS CONST$ MID$(D$,11,1)
                                CASE "4"
                                    D$="MDIPARENTFORM"
                                CASE "5"
                                    D$="MDICHILDFORM"
                                CASE ELSE
                                    D$="FORM"
                            END SELECT
                        END IF

                END SELECT
            CASE 77 'M
                SELECT CASE AS CONST$ D$
                    CASE "MSCTLS_PROGRESS32"
                        D$="PROGRESSBAR"
                    CASE "MSCTLS_TRACKBAR32"
                        D$="TRACKBAR"
                    CASE "MSCTLS_STATUSBAR32"
                        D$="STATUSBAR"
                    CASE "MSCTLS_UPDOWN32"
                        D$="UPDOWN"
                END SELECT
            CASE 82 'R
                SELECT CASE AS CONST$ D$
                    CASE "REBARWINDOW32"
                        D$="REBAR"
                    CASE "RICHEDIT"
                        D$="RICHTEXT1"
                    CASE "RICHEDIT20A"
                        D$="RICHTEXT2"
                    CASE "RICHEDIT50W"
                        D$="RICHTEXT4"
                END SELECT
            CASE 83 'S
                SELECT CASE AS CONST$ D$
                    CASE "STATIC"
                        WS&=GetWindowLong(hCtrl&, %GWL_STYLE) AND 15
                        SELECT CASE AS LONG WS&
                            CASE %SS_ICON
                                D$="ICON"
                            CASE %SS_BITMAP
                                D$="PICTURE"
                            CASE ELSE
                                D$="LABEL"
                        END SELECT
                    CASE "SYSTABCONTROL32"
                        D$="TABCONTROL"
                    CASE "SYSLISTVIEW32"
                        D$="LISTVIEW"
                    CASE "SYSTREEVIEW32"
                        D$="TREEVIEW"
                    CASE "SYSPAGER"
                        D$="PAGER"
                    CASE "SYSDATETIMEPICK32"
                        D$="DATETIME"
                    CASE "SYSMONTHCAL32"
                        D$="CALENDAR"
                    CASE "SYSANIMATE32"
                        D$="ANIMATE"
                    CASE "SYSHEADER32"
                        D$="HEADER"
                END SELECT
            CASE 84 'T
                SELECT CASE AS CONST$ D$
                    CASE "TOOLBARWINDOW32"
                        D$="TOOLBAR"
                    CASE "TOOLTIPS_CLASS32"
                        D$="TOOLTIP
                END SELECT
            CASE 35 '#
              SELECT CASE AS CONST$ D$
                CASE "#32770"
                    D$="DIALOG"
              END SELECT
        END SELECT
    END IF
    FUNCTION=D$
ELSE
    FUNCTION=""
END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetCListClass(BYVAL N&, BYVAL Mode&) EXPORT10 AS STRING
FUNCTION=ZGetCListClass(PBVGetCListVal(N&,0), Mode&)
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetClass(BYVAL Form$, BYVAL IDNum&, BYVAL Mode&) EXPORT10 AS STRING
FUNCTION=ZGetCListClass(ezHandle(Form$,IDNum&,1), Mode&)
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetCListCount() EXPORT10 AS LONG
FUNCTION=App_CListCount&
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZGetParentForm(BYVAL hWnd AS LONG) AS LONG
' LOCAL WS&
DO
    IF hWnd=0 THEN EXIT DO
    IF App_CommonDlgInitType&=0 THEN
        IF LEFT$(ZGetClass(hWnd),10)="EZGUI_TYPE" THEN
            EXIT DO
        ELSE
            hWnd=GetParent(hWnd)
        END IF
    ELSE                ' for common dialogs
        IF LEFT$(ZGetClass(hWnd),6)="#32770" THEN
            EXIT DO
        ELSE
            hWnd=GetParent(hWnd)
        END IF
    END IF
LOOP
FUNCTION=hWnd
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZEnumListProc(BYVAL hCtrl AS LONG, BYVAL lParam AS LONG) AS LONG
LOCAL OKFlag&, PFlag&
PFlag&=0
IF GetParent(hCtrl)=App_CListhWnd& THEN
    PFlag&=1
ELSE
    IF ZGetParentForm(hCtrl)=App_CListhWnd& THEN PFlag&=1
END IF

IF PFlag& THEN
    OKFlag&=0
    IF App_CListClass$="" THEN
        OKFlag&=1
    ELSE
        IF App_CListClass$=ZGetClass(hCtrl) THEN OKFlag&=1
    END IF
    IF OKFlag&<>0 THEN
        App_CListCount&=App_CListCount&+1
        IF lParam=2 THEN
            App_CListControl&(App_CListCount&)=hCtrl
        END IF
    END IF
END IF
FUNCTION=%TRUE
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB EZ_EndCList() EXPORT10
REDIM App_CListControl&(1 TO 2) 'save memory
App_CListFlag&=0
END SUB

' -------------------------------------------------------------------------------------------

'TYPE NOTIFYICONDATA5
'  cbSize AS LONG
'  hwnd AS LONG
'  uID AS LONG
'  uFlags AS LONG
'  uCallbackMessage AS LONG
'  hIcon AS LONG
'  szTip AS ASCIIZ * 128     ' 64 extra bytes than standard structure
'  dwState AS DWORD             4
'  dwStateMask AS DWORD         4
'  szInfo AS ASCIIZ *256      256
'  uTimeout AS DWORD            4   ' also .uVersion member
'  szInfoTitle AS ASCIIZ*64    64
'  dwInfoFlags AS DWORD         4
'END TYPE                     -----
'                              400 extra bytes

SUB EZ_SetTrayIcon (BYVAL FormName$, BYVAL IName$, BYVAL TText$) EXPORT10
LOCAL hWnd AS LONG, N&, hIcon AS LONG, TM AS LONG, Flags&, ExFlag&, ExtraBytes&, MaxL&
LOCAL IState&, IStateMask&, P&, BText$, BTitle$, BIcon&
IF App_CurrentOS&>=490 THEN
    ExFlag&=1   ' 5.0 Shell
    ExtraBytes&=0
    MaxL&=128
    App_FTray5Ver.cbSize=SIZEOF(App_FTray5Ver)
    App_FTray5Ver.uTimeout=0        ' same as .uVersion
    Shell_NotifyIcon %NIM_SETVERSION, BYVAL VARPTR(App_FTray5Ver)
ELSE
    ExFlag&=0
    ExtraBytes&=400
    MaxL&=64
END IF
hWnd=PBVFormHandle(FormName$)
IF hWnd<>0 THEN
    N&=ZFormNum(FormName$)
    IF N&<>0 THEN
        IF IName$<>"" THEN
            IF AppForms(N&).FTRAY.cbSize=0 THEN
                TM=%NIM_ADD
            ELSE
                TM=%NIM_MODIFY
            END IF
            IState&=0
            IStateMask&=0
            IF INSTR(TText$,"{H+}") THEN
                IState&=IState& OR %NIS_HIDDEN
                IStateMask&=IStateMask& OR %NIS_HIDDEN
            ELSEIF INSTR(TText$,"{H-}") THEN
                IStateMask&=IStateMask& OR %NIS_HIDDEN
            END IF
            IF INSTR(TText$,"{S+}") THEN
                IState&=IState& OR %NIS_SHAREDICON
                IStateMask&=IStateMask& OR %NIS_SHAREDICON
            ELSEIF INSTR(TText$,"{S-}") THEN
                IStateMask&=IStateMask& OR %NIS_SHAREDICON
            END IF
            IF IStateMask&<>0 THEN
                TText$=REMOVE$(TText$, "{H+}")
                TText$=REMOVE$(TText$, "{H-}")
                TText$=REMOVE$(TText$, "{S+}")
                TText$=REMOVE$(TText$, "{S-}")
            END IF
            BIcon&=0
            P&=INSTR(TText$,"/B/")
            IF P&<>0 THEN
                BText$=MID$(TText$, P&+3)
                TText$=LEFT$(TText$,P&-1)
                IF ExFlag& THEN
                    IF INSTR(BText$,"{i}") THEN
                        BIcon&=%NIIF_INFO
                        BText$=REMOVE$(BText$, "{i}")
                    END IF
                    IF INSTR(BText$,"{!}") THEN
                        BIcon&=%NIIF_WARNING
                        BText$=REMOVE$(BText$, "{!}")
                    END IF
                    IF INSTR(BText$,"{X}") THEN
                        BIcon&=%NIIF_ERROR
                        BText$=REMOVE$(BText$, "{X}")
                    END IF
                    P&=INSTR(BText$,"//")
                    IF P&<>0 THEN
                        BTitle$=MID$(BText$, P&+2)
                        BText$=LEFT$(BText$,P&-1)
                    END IF
                    REPLACE "|" WITH CHR$(13)+CHR$(10) IN BText$
                    BText$=LEFT$(BText$,255)
                    BTitle$=LEFT$(BTitle$,63)
                ELSE
                    BText$=""
                END IF
            END IF
            REPLACE "|" WITH CHR$(13)+CHR$(10) IN TText$
            TText$=LEFT$(TText$,MaxL&-1)
            hIcon=EZ_IconHandle(IName$)
            IF hIcon<>0 THEN
                Flags&=0
                IF TM=%NIM_ADD THEN Flags&=Flags& OR %NIF_MESSAGE
                IF hIcon<>AppForms(N&).FTRAY.hIcon THEN Flags&=Flags& OR %NIF_ICON
                IF TText$<>"" THEN Flags&=Flags& OR %NIF_TIP
                IF BText$<>"" THEN Flags&=Flags& OR %NIF_INFO
                IF ExFlag& THEN
                    IF IStateMask&<>0 THEN Flags&=Flags& OR %NIF_STATE
                END IF
                AppForms(N&).FTRAY.cbSize=SIZEOF(AppForms(N&).FTRAY)-ExtraBytes&
                AppForms(N&).FTRAY.hWnd=hWnd
                AppForms(N&).FTRAY.uID=100  ' Icon ID
                AppForms(N&).FTRAY.uFlags=Flags&
                AppForms(N&).FTRAY.uCallbackMessage=%WM_EZGUI_TRAYICON
                AppForms(N&).FTRAY.hIcon=hIcon
                AppForms(N&).FTRAY.szTip=TText$
                ' 5.0 items (only on Win ME, 2000, XP)
                IF ExFlag& THEN
                    AppForms(N&).FTRAY.dwState=IState&
                    AppForms(N&).FTRAY.dwStateMask=IStateMask&
                    AppForms(N&).FTRAY.szInfo=BText$
                    AppForms(N&).FTRAY.uTimeout=0   ' uses defaults
                    AppForms(N&).FTRAY.szInfoTitle=BTitle$
                    AppForms(N&).FTRAY.dwInfoFlags=BIcon&
                END IF
                Shell_NotifyIcon TM, BYVAL VARPTR(AppForms(N&).FTRAY)
            END IF
        ELSE
            IF AppForms(N&).FTRAY.cbSize<>0 THEN
                Shell_NotifyIcon %NIM_DELETE, BYVAL VARPTR(AppForms(N&).FTRAY)
                AppForms(N&).FTRAY=App_FTray
            END IF
        END IF
    END IF
END IF
END SUB

' -------------------------------------------------------------------------------------------
'             Official EZGUI 3.0 Shape control !
' -------------------------------------------------------------------------------------------
%ShapeClassExtraData       = 4

'                           |  Hi Word     ||  Lo Word     |
%ControlClassOKStyles =   &B01010110000000010000000011011111
'      WS_CHILD (01) -------XX-||||-||||-|||
'      WS_VISIBLE -------------X|||-||||-|||
'      WS_DISABLED -------------X||-||||-|||
'      WS_CLIPSIBLINGS ----------X|-||||-|||
'      WS_CLIPCHILDREN -----------X-||||-|||
'      WS_BORDER -------------------X|||-|||
'      WS_DLGFRAME ------------------X||-|||
'      WS_VSCROLL --------------------X|-|||
'      WS_HSCROLL ---------------------X-|||
'      WS_THICKFRAME --------------------X||
'      WS_GROUP --------------------------X|
'      WS_TABSTOP -------------------------X


'
' -------------------------------------------------------------------------------------------

SUB RegisterShapeClass()
    zRegisterClass $ShapeClassName, %CS_HREDRAW OR %CS_VREDRAW OR %CS_DBLCLKS, CODEPTR(ShapeClassWndProc), 0, %ShapeClassExtraData*4, LoadCursor( %NULL, BYVAL %IDC_ARROW ), 0
END SUB

' -------------------------------------------------------------------------------------------

SUB zSetSplitterMode(BYVAL hCtrl&, BYVAL hBuddy1&, BYVAL hBuddy2&, BYVAL SMode&)
    LOCAL hParent&, X&, EXWS&
    IF IsWindow(hCtrl&) THEN
        SELECT CASE AS LONG SMode&
            CASE 1,2
                IF IsWindow(hBuddy1&) THEN
                    IF IsWindow(hBuddy2&) THEN
                        hParent&=GetParent(hCtrl&)
                        IF GetParent(hBuddy1&)=hParent& THEN
                            IF GetParent(hBuddy2&)=hParent& THEN
                                ZSetWindowLong hCtrl&, 2, SMode&               ' Splitter Bar Flag
                                ZSetWindowLong hCtrl&, 3, hBuddy1&             ' Splitter Bar left or Top Buddy
                                ZSetWindowLong hCtrl&, 4, hBuddy2&             ' Splitter Bar right or bottom Buddy
                                EXWS&=GetWindowLong(hCtrl&,%GWL_EXSTYLE)
                                EXWS&=EXWS& AND NOT(%WS_EX_TRANSPARENT)
                                SetWindowLong hCtrl&,%GWL_EXSTYLE, EXWS&
                                SetWindowPos hBuddy1&, hCtrl&, 0,0,0,0, %SWP_NOMOVE OR %SWP_NOSIZE OR %SWP_NOACTIVATE
                                SetWindowPos hBuddy2&, hBuddy1&, 0,0,0,0, %SWP_NOMOVE OR %SWP_NOSIZE OR %SWP_NOACTIVATE
                                IF IsWindowVisible(hCtrl&) THEN
                                    X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
                                    RedrawWindow hCtrl&, BYVAL %NULL, BYVAL %NULL, X&
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            CASE 3,4
                ZSetWindowLong hCtrl&, 2, SMode&               ' Splitter Bar Flag
                ZSetWindowLong hCtrl&, 3, 0             ' Splitter Bar left or Top Buddy
                ZSetWindowLong hCtrl&, 4, 0             ' Splitter Bar right or bottom Buddy
                EXWS&=GetWindowLong(hCtrl&,%GWL_EXSTYLE)
                EXWS&=EXWS& AND NOT(%WS_EX_TRANSPARENT)
                SetWindowLong hCtrl&,%GWL_EXSTYLE, EXWS&
                IF IsWindowVisible(hCtrl&) THEN
                    X&=%RDW_ERASE OR %RDW_FRAME OR %RDW_INTERNALPAINT OR %RDW_INVALIDATE OR %RDW_UPDATENOW OR %RDW_ALLCHILDREN
                    RedrawWindow hCtrl&, BYVAL %NULL, BYVAL %NULL, X&
                END IF
            CASE ELSE
        END SELECT
    END IF
END SUB

'        IF ZGetClass(hCtrl&)=$ShapeClassName THEN
%WM_SETHORZSPLITTER  =   %WM_USER+100
%WM_SETVERTSPLITTER  =   %WM_USER+101
%WM_SETHORZSPLITTERN =   %WM_USER+102
%WM_SETVERTSPLITTERN =   %WM_USER+103

SUB EZ_SetSplitterMode(BYVAL FormName$, BYVAL ShapeID&, BYVAL BuddyID1&, BYVAL BuddyID2&, BYVAL SProp$) EXPORT10
    LOCAL SP&, hBuddy1&, hBuddy2&
    SProp$=UCASE$(SProp$)
    IF BuddyID1&<>0 THEN hBuddy1&=ezHandle(FormName$,BuddyID1&,1)
    IF BuddyID2&<>0 THEN hBuddy2&=ezHandle(FormName$,BuddyID2&,1)
    IF INSTR(SProp$,"H") THEN
        SP&=%WM_SETHORZSPLITTER
        IF INSTR(SProp$,"D") THEN SP&=%WM_SETHORZSPLITTERN
    END IF
    IF INSTR(SProp$,"V") THEN
        SP&=%WM_SETVERTSPLITTER
        IF INSTR(SProp$,"D") THEN SP&=%WM_SETVERTSPLITTERN
    END IF
    IF INSTR(SProp$,"D") THEN
        hBuddy1&=0
        hBuddy2&=0
    END IF
    IF SP&<>0 THEN
        IF ShapeID&<>0 THEN
            PBVSendMessageR FormName$,ShapeID&,SP&,hBuddy1&,hBuddy2&,$ShapeClassName
        END IF
    END IF
END SUB

GLOBAL App_SplitterMinSize1&
GLOBAL App_SplitterMinSize2&
GLOBAL App_SplitterSMode&

SUB EZ_SetSplitterFormat(BYVAL BSize1&, BYVAL BSize2&, BYVAL SMode&) EXPORT10
    IF BSize1&<16 THEN BSize1&=16
    IF BSize2&<16 THEN BSize2&=16
    App_SplitterMinSize1&=BSize1&-1
    App_SplitterMinSize2&=BSize2&-1
    IF SMode&<>0 THEN App_SplitterSMode&=1 ELSE App_SplitterSMode&=0
END SUB

SUB zDoSplitter(BYVAL hCtrl&, BYVAL MouseXY&, BYVAL DMode&)
    LOCAL X&, Y&, PT AS POINTAPI PTR, hParent&, DifX&, DifY&, NR AS RECT, hWnd&, CP&
    STATIC DFlag&
    STATIC LastX&, LastY&, hBuddy1&, hBuddy2&, OrigX&, OrigY&
    STATIC R AS RECT, R1 AS RECT, R2 AS RECT  , SP&, MinXY&, MaxXY&
    IF DMode&=1 THEN
        hBuddy1&=ZGetWindowLong(hCtrl&, 3)
        hBuddy2&=ZGetWindowLong(hCtrl&, 4)
        IF IsWindow(hBuddy1&)<>0 AND IsWindow(hBuddy2&)<>0 THEN
            DFlag&=1
        END IF
    END IF
    IF DFlag&<>1 THEN EXIT SUB

    IF DMode&>2 THEN DFlag&=0
    IF DMode&<>3 THEN
        ' convert to parent client coordinates
        MouseXY&=EZ_ConvertMousePos(GetParent(hCtrl&), hCtrl&, MouseXY&)
        EZ_GetMouseXY MouseXY&, X&, Y&
    ELSE
        X&=LastX&
        Y&=LastY&
    END IF
    IF App_SplitterMinSize1&=0 THEN App_SplitterMinSize1&=16
    IF App_SplitterMinSize2&=0 THEN App_SplitterMinSize2&=16
    SELECT CASE AS LONG DMode&
        CASE 1  ' start drag
            SP&=ZGetWindowLong(hCtrl&, 2)   ' get direction
            OrigX&=X&
            OrigY&=Y&
            GetWindowRect hCtrl&, R
            GetWindowRect hBuddy1&, R1
            GetWindowRect hBuddy2&, R2
            hParent&=GetParent(hCtrl&)
            PT=VARPTR(R)
            GOSUB MakePXY    ' convert to parent client coordinates
            PT=VARPTR(R1)
            GOSUB MakePXY    ' convert to parent client coordinates
            PT=VARPTR(R2)
            GOSUB MakePXY    ' convert to parent client coordinates
            IF SP&=1 THEN   ' Horz
                IF R1.nLeft>R2.nLeft THEN   ' on wrong side
                    SWAP hBuddy1&, hBuddy2&
                    SWAP R1, R2
                END IF
                MinXY&=R1.nLeft+App_SplitterMinSize1&
                MaxXY&=R2.nRight-App_SplitterMinSize2&
            ELSE            ' Vert
                IF R1.nTop>R2.nTop THEN   ' on wrong side
                    SWAP hBuddy1&, hBuddy2&
                    SWAP R1, R2
                END IF
                MinXY&=R1.nTop+App_SplitterMinSize1&
                MaxXY&=R2.nBottom-App_SplitterMinSize2&
            END IF
            SetCapture hCtrl&
        CASE 2  ' move drag
            GOSUB CalcXY
        CASE 3  ' premature exit (capture changed)
            GOSUB CalcXY
        CASE 4  ' end drag
            GOSUB CalcXY
            ReleaseCapture
    END SELECT
    LastX&=X&
    LastY&=Y&
    EXIT SUB

CalcXY:
    IF SP&=1 THEN
        IF X&<MinXY& THEN X&=MinXY&
        IF X&>MaxXY& THEN X&=MaxXY&
        IF X&<>LastX& OR DMode&=3 OR DMode&=4 THEN
            DifX&=X&-OrigX&
            DifY&=0
            GOSUB ReposControls
        END IF
    ELSE
        IF Y&<MinXY& THEN Y&=MinXY&
        IF Y&>MaxXY& THEN Y&=MaxXY&
        IF Y&<>LastY& OR DMode&=3 OR DMode&=4 THEN
           DifX&=0
           DifY&=Y&-OrigY&
           GOSUB ReposControls
        END IF
    END IF
RETURN

ReposControls:
    NR=R
    CP&=0
    hWnd&=hCtrl&
    GOSUB Move1Control
    IF App_SplitterSMode&=1 OR DMode&=3 OR DMode&=4 THEN
        NR=R1
        CP&=1
        hWnd&=hBuddy1&
        GOSUB Move1Control
        NR=R2
        CP&=2
        hWnd&=hBuddy2&
        GOSUB Move1Control
    END IF
RETURN

Move1Control:
    SELECT CASE AS LONG CP&
        CASE 0  ' splitter move
            IF SP&=1 THEN
                NR.nLeft=NR.nLeft+DifX&
                NR.nRight=NR.nRight+DifX&
            ELSE
                NR.nTop=NR.nTop+DifY&
                NR.nBottom=NR.nBottom+DifY&
            END IF
        CASE 1  ' buddy1
            IF SP&=1 THEN
                NR.nRight=NR.nRight+DifX&
            ELSE
                NR.nBottom=NR.nBottom+DifY&
            END IF
        CASE 2  ' buddy2
            IF SP&=1 THEN
                NR.nLeft=NR.nLeft+DifX&
            ELSE
                NR.nTop=NR.nTop+DifY&
            END IF
    END SELECT
    MoveWindow hWnd&, NR.nLeft, NR.nTop, NR.nRight-NR.nLeft, NR.nBottom-NR.nTop, 1
RETURN

MakePXY:
    ScreenToClient hParent&, @PT
    PT=PT+8
    ScreenToClient hParent&, @PT
RETURN

END SUB

FUNCTION ShapeClassWndProc(BYVAL hWnd   AS LONG, _
                 BYVAL Msg    AS LONG, _
                 BYVAL wParam AS LONG, _
                 BYVAL lParam AS LONG) AS LONG
LOCAL hParent AS LONG, SP&, SPCNum&, X&, EXWS&
SELECT CASE AS LONG Msg
    CASE %WM_NCHITTEST
        IF (GetWindowLong(hWnd, %GWL_STYLE) AND 128)=0 THEN
            FUNCTION=%HTTRANSPARENT
        ELSE
            FUNCTION=%HTCLIENT
        END IF
        EXIT FUNCTION
    CASE %WM_SETCURSOR
        SP&=ZGetWindowLong(hWnd, 2)
        IF SP&<>0 THEN
            SELECT CASE AS LONG SP&
                CASE 1  ' Horizontal Splitter
                    SPCNum&=App_SplitterCursor1&
                CASE 2  ' Vertical Splitter
                    SPCNum&=App_SplitterCursor2&
                CASE ELSE
                    SPCNum&=0
            END SELECT
            IF SPCNum&<>0 THEN
'                IF SendMessage(GetParent(hWnd),%WM_SETCURSOR, wParam,lParam)=0 THEN
                    SetCursor& SPCNum&
'                END IF
                FUNCTION=1
                EXIT FUNCTION
            END IF
        END IF
    CASE %WM_SETHORZSPLITTER, %WM_SETVERTSPLITTER,%WM_SETHORZSPLITTERN,%WM_SETVERTSPLITTERN
        ' sets mode to values from 1 to 4
        zSetSplitterMode hWnd, wParam, lParam, (Msg-%WM_SETHORZSPLITTER)+1
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_LBUTTONDBLCLK
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_DBLCLK), hWnd
        END IF
    CASE %WM_LBUTTONDOWN
        SELECT CASE AS LONG ZGetWindowLong(hWnd, 2)
            CASE 1,2
                X&=ProcessEZCommands(GetParent(hWnd) , %EZ_Drag, hWnd, 0)
                zDoSplitter hWnd, lParam, 1
            CASE 3,4    ' disabled splitter
            CASE ELSE
                hParent=GetParent(hWnd)
                IF hParent<>0 THEN
                    SendMessage hParent, %WM_COMMAND,MAKLNG(GetWindowLong(hWnd,%GWL_ID),%STN_CLICKED), hWnd
                END IF
        END SELECT
    CASE %WM_CAPTURECHANGED
        SELECT CASE AS LONG ZGetWindowLong(hWnd, 2)
            CASE 1,2
                zDoSplitter hWnd, 0, 3
            CASE ELSE
        END SELECT
    CASE %WM_LBUTTONUP
        SELECT CASE AS LONG ZGetWindowLong(hWnd, 2)
            CASE 1,2
                zDoSplitter hWnd, lParam, 4
            CASE ELSE
        END SELECT
    CASE %WM_MOUSEMOVE
        SELECT CASE AS LONG ZGetWindowLong(hWnd, 2)
            CASE 1,2
                zDoSplitter hWnd, lParam, 2
            CASE ELSE
        END SELECT
    CASE %WM_PAINT
        ShapeClassPaint hWnd, 0, wParam, lParam, 1
        FUNCTION=0
        EXIT FUNCTION
    CASE %WM_ERASEBKGND
'         EXWS&=GetWindowLong(hWnd,%GWL_EXSTYLE)
'         IF (EXWS& AND %WS_EX_TRANSPARENT)=0 THEN
            ' draw background now
'            zEraseFrame hWnd, wParam,1
'         end if
         FUNCTION=1
         EXIT FUNCTION
    CASE %WM_PRINTCLIENT
        LOCAL OKFlag&
        IF (lParam AND %PRF_CLIENT)=%PRF_CLIENT THEN
            OKFlag&=1
            IF (lParam AND %PRF_CHECKVISIBLE)=%PRF_CHECKVISIBLE THEN
                IF IsWindowVisible(hWnd)=0 THEN OKFlag&=0
            END IF
            IF OKFlag& THEN ShapeClassPaint hWnd, 0, wParam, lParam, 0
            FUNCTION=0
            EXIT FUNCTION
        END IF
    CASE %WM_CREATE
        SetWindowLong hWnd, %GWL_STYLE, ( GetWindowLong(hWnd, %GWL_STYLE) AND %ControlClassOKStyles)
        SetWindowLong hWnd, %GWL_EXSTYLE, ( GetWindowLong(hWnd, %GWL_EXSTYLE) OR %WS_EX_TRANSPARENT)
        ZSetWindowLong hWnd, 1, 0               ' flag
        ZSetWindowLong hWnd, 2, 0               ' Splitter Bar Flag
        ZSetWindowLong hWnd, 3, 0               ' Splitter Bar left or Top Buddy
        ZSetWindowLong hWnd, 4, 0               ' Splitter Bar right or bottom Buddy
    CASE %WM_DESTROY
    CASE %WM_SIZING, %WM_MOVING
        FUNCTION=1
        EXIT FUNCTION
    CASE %WM_SETTEXT
        FUNCTION=DefWindowProc(hWnd,Msg,wParam,lParam)
        InvalidateRect hWnd, BYVAL %NULL, 1
        EXIT FUNCTION
    CASE %WM_SIZE
        InvalidateRect hWnd, BYVAL %NULL, 1
    CASE %WM_SETFOCUS, %WM_KILLFOCUS
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            SendMessage hParent, %WM_COMMAND, MAKLNG(GetWindowLong(hWnd,%GWL_ID),Msg), hWnd
        END IF
    CASE ELSE
END SELECT
FUNCTION = DefWindowProc(hWnd,Msg,wParam,lParam)
EXIT FUNCTION
END FUNCTION

' -------------------------------------------------------------------------------------------
'sub zGetClientSize(byval hCtrl&, W&, H&)
'    local R as RECT
'    GetClientRect hCtrl&, R
'    W&=R.nRight-R.nLeft
'    H&=R.nBottom-R.nTop
'end sub


' these two routines are never used so can be removed
SUB zStartMemDCDraw(BYVAL W&, BYVAL H&, hDC&, hBmp&, hOldBmp&)
    LOCAL hDC1&
    hDC1&=GetDC(%HWND_DESKTOP)
    hDC&=CreateCompatibleDC(hDC1&)
    hBmp&=CreateCompatibleBitmap(hDC1&, W&, H&)
    ReleaseDC %HWND_DESKTOP, hDC1&
    hOldBmp&=SelectObject(hDC&, hBmp&)
END SUB
' these two routines are never used so can be removed
SUB zEndMemDCDraw(BYVAL hDC&, BYVAL hBmp&, BYVAL hOldBmp&)
    SelectObject hDC&,hOldBmp&
    DeleteObject hBmp&
    DeleteDC hDC&
END SUB

SUB ShapeClassPaint(BYVAL hWnd AS LONG, BYVAL PFlag&, BYVAL wParam&, BYVAL lParam&, BYVAL Mode&)
LOCAL PS AS PAINTSTRUCT, PT AS POINTAPI
LOCAL hDC AS LONG, R AS RECT, hParent AS LONG
LOCAL W&,H&, LW&, Style&, X&,Y&, C&, DX1&, DY1&, DX2&, DY2&, BW&, BH&
LOCAL TL&,DT$,ATL&, SFlag&, BGFlag&, BR&, NewPen&, SPFlag&, THM&
IF IsWindow(hWnd) THEN
        SFlag&=0
        BGFlag&=GetWindowLong(hWnd, %GWL_STYLE) AND 64
        LW&=GetWindowLong(hWnd, %GWL_STYLE) AND 24
        SHIFT RIGHT LW&,3
        Style&=GetWindowLong(hWnd, %GWL_STYLE) AND 7
        IF Mode&=1 THEN
            hDC=BeginPaint(hWnd, PS)
        ELSE
            hDC=wParam&
        END IF
        SaveDC hDC
        hParent=GetParent(hWnd)
        IF hParent<>0 THEN
            BR&=SendMessage(hParent, %WM_CTLCOLORSTATIC, hDC, hWnd)
        ELSE
            BR&=GetStockObject(%WHITE_BRUSH)
        END IF
        C&=GetTextColor(hDC)
        GetClientRect hWnd, R
        SPFlag&=ZGetWindowLong(hWnd, 2)
        IF SPFlag&<>0 THEN Style&=4 ' force it to be be a splitter control
        SELECT CASE AS LONG Style&
            CASE 1      ' Vline
                GOSUB MakePen
                FOR X&=0 TO LW&
                    MoveToEx hDC, X&, 0, PT
                    LineTo hDC, X&, R.nBottom
                NEXT X&
            CASE 2      ' \ line
                IF LW&>0 THEN SFlag&=1
                GOSUB MakePen
                MoveToEx hDC, 0, 0, PT
                LineTo hDC, R.nRight, R.nBottom
            CASE 3      ' / line
                IF LW&>0 THEN SFlag&=1
                GOSUB MakePen
                MoveToEx hDC, 0, R.nBottom-1, PT
                LineTo hDC, R.nRight, -1
            CASE 4
                SELECT CASE AS LONG SPFlag&
                    CASE 1,2,3,4
                         IF LW&>0 THEN SFlag&=1
                         GOSUB MakePen
                         IF ZCustomErase(hWnd, hDC, 1)=0 THEN    ' not custom painted
                             BW&=GetSystemMetrics(%SM_CXEDGE)
                             BH&=GetSystemMetrics(%SM_CYEDGE)
                             EZ_StartThemeI hWnd&
                             IF SPFlag&=1 OR SPFlag&=3 THEN ' vertical
                                  ezDrawEdge hDC, R, %EDGE_SUNKEN, %BF_TOP
                                  ezDrawEdge hDC, R, %EDGE_RAISED, %BF_BOTTOM
                             ELSE
                                  ezDrawEdge hDC, R, %EDGE_SUNKEN, %BF_LEFT
                                  ezDrawEdge hDC, R, %EDGE_RAISED, %BF_RIGHT
                             END IF
                             IF SPFlag&=1 OR SPFlag&=3 THEN ' vertical
                                   EZ_DCDraw hDC,%EZ_DROPRT, R.nLeft, R.nTop+BH&, R.nRight-1, R.nBottom-1-BH&,0,0
                             ELSE                           ' horizontal
                                   EZ_DCDraw hDC,%EZ_DROPDN,R.nLeft+BW&, R.nTop, R.nRight-1-BW&, R.nBottom-1,0,0
                             END IF
                             EZ_EndTheme
                         END IF
                    CASE ELSE
                        IF LW&>0 THEN SFlag&=1
                        GOSUB MakePen
                        Rectangle hDC, R.nLeft, R.nTop, R.nRight, R.nBottom
                END SELECT
            CASE 5
                W&=(R.nRight-R.nLeft)\8
                H&=(R.nBottom-R.nTop)\8
                IF LW&>0 THEN SFlag&=1
                GOSUB MakePen
                RoundRect hDC, R.nLeft, R.nTop, R.nRight, R.nBottom, W&, H&
            CASE 6
                IF LW&>0 THEN SFlag&=1
                GOSUB MakePen
                ELLIPSE hDC, R.nLeft, R.nTop, R.nRight, R.nBottom
            CASE 7
                GOSUB MakePen
                ' hot spot (no drawing)
            CASE ELSE   ' Hline
                GOSUB MakePen
                FOR Y&=0 TO LW&
                    MoveToEx hDC, 0, Y&, PT
                    LineTo hDC, R.nRight, Y&
                NEXT Y&
        END SELECT
        RestoreDC hDC, -1
        DeleteObject NewPen&
        IF Mode&=1 THEN
            EndPaint hWnd, PS
        END IF
END IF
EXIT SUB

MakePen:
IF DT$="" THEN
    IF SFlag&=0 THEN
        TL&=SendMessage(hWnd, %WM_GETTEXTLENGTH, 0, 0)
        DT$=SPACE$(TL&+1)
        ATL&=GetWindowText(hWnd, BYVAL STRPTR(DT$), TL&+1)
        DT$=LEFT$(DT$,ATL&)
    ELSE
        DT$=""
    END IF
END IF
SELECT CASE AS CONST$ TRIM$(DT$)
    CASE "-"
        NewPen&=CreatePen(%PS_DASH, 1, C&)
        SelectObject hDC, NewPen&
    CASE "."
        NewPen&=CreatePen(%PS_DOT, 1, C&)
        SelectObject hDC, NewPen&
    CASE "-."
        NewPen&=CreatePen(%PS_DASHDOT, 1, C&)
        SelectObject hDC, NewPen&
    CASE "-.."
        NewPen&=CreatePen(%PS_DASHDOTDOT, 1, C&)
        SelectObject hDC, NewPen&
    CASE ELSE
        IF SFlag&=0 THEN
            NewPen&=CreatePen(%PS_SOLID, 1, C&)
            SelectObject hDC, NewPen&
        ELSE
            NewPen&=CreatePen(%PS_INSIDEFRAME, LW&+1, C&)
            SelectObject hDC, NewPen&
        END IF
END SELECT
IF BGFlag&=0 THEN
    SelectObject hDC, GetStockObject(%NULL_BRUSH)
    SetBkMode hDC, %TRANSPARENT
ELSE
    SelectObject hDC, BR&
    SetBkMode hDC, %OPAQUE
END IF
RETURN

END SUB

' -------------------------------------------------------------------------------------------

'FUNCTION GetShapeLong(BYVAL hWnd AS LONG, BYVAL N&) AS LONG
'LOCAL I&, RV&
'RV&=0
'IF N&>=1 AND N&<=%ShapeClassExtraData THEN
'    I&=(N&-1)*4
'    IF IsWindow(hWnd) THEN
'        RV&=GetWindowLong(hWnd, I&)
'    END IF
'END IF
'FUNCTION=RV&
'END FUNCTION

' -------------------------------------------------------------------------------------------

'SUB SetShapeLong(BYVAL hWnd AS LONG, BYVAL N&, BYVAL V&)
'LOCAL I&
'IF N&>=1 AND N&<=%ShapeClassExtraData THEN
'    I&=(N&-1)*4
'    IF IsWindow(hWnd) THEN
'        SetWindowLong hWnd, I&, V&
'    END IF
'END IF
'END SUB

' -------------------------------------------------------------------------------------------

GLOBAL MBOX_Text$
GLOBAL MBOX_Pict$
GLOBAL MBOX_B1$
GLOBAL MBOX_B2$
GLOBAL MBOX_B3$
GLOBAL MBOX_Prop$
GLOBAL MBOX_Return&
GLOBAL MBOX_AllowESC&
GLOBAL MBOX_Font1&
GLOBAL MBOX_Font2&
GLOBAL MBOX_TileForm&
GLOBAL MBOX_Bitmap&
GLOBAL MBOX_ODColor4&
GLOBAL MBOX_ODTColor&
GLOBAL MBOX_BStyle&
GLOBAL INTERNAL_Flag&
GLOBAL INTERNAL_ADD2 AS DWORD
GLOBAL INTERNAL_ADD3 AS DWORD

SUB INTERNAL_START()
INTERNAL_Flag&=1
INTERNAL_ADD2=PBVAddress(2)
INTERNAL_ADD3=PBVAddress(3)
PBVAddress(2)=CODEPTR(INTERNAL_Events)
PBVAddress(3)=CODEPTR(INTERNAL_DesignWindow)
END SUB

SUB INTERNAL_END()
PBVAddress(2)=INTERNAL_ADD2
PBVAddress(3)=INTERNAL_ADD3
INTERNAL_Flag&=0
END SUB

FUNCTION EZ_MsgBoxEx(BYVAL FormName$, BYVAL MText$, BYVAL MTitle$, BYVAL B1$, BYVAL B2$, BYVAL B3$, BYVAL Pict$, BYVAL Prop$, BYVAL Font1&, BYVAL Font2&) EXPORT10 AS LONG
LOCAL RV&, P$, C$, N&
IF INTERNAL_Flag&=0 THEN
    INTERNAL_START
    MBOX_Return&=0
    REPLACE "|" WITH CHR$(13)+CHR$(10) IN MText$
    MBOX_Text$=MText$
    MBOX_B1$=B1$
    MBOX_B2$=B2$
    MBOX_B3$=B3$
    MBOX_Font1&=Font1&
    MBOX_Font2&=Font2&
    MBOX_TileForm&=0
    MBOX_Bitmap&=0
    MBOX_BStyle&=0
    MBOX_ODTColor&=0
    IF B1$="" AND B2$="" AND B3$="" THEN
        MBOX_B3$="OK"
    END IF
    MBOX_AllowESC&=0
    MBOX_Prop$=UCASE$(Prop$)
    FOR N&=0 TO 31
        C$="{BC"+LTRIM$(STR$(N&))+"}"
        IF INSTR(MBOX_Prop$, C$) THEN
            MBOX_Prop$=REMOVE$(MBOX_Prop$,C$)
            MBOX_BStyle&=1
            MBOX_ODColor4&=N&
            EXIT FOR
        END IF
    NEXT N&
    IF MBOX_BStyle&=0 THEN
        IF INSTR(MBOX_Prop$, "{O}") THEN
            MBOX_Prop$=REMOVE$(MBOX_Prop$,"{O}")
            MBOX_BStyle&=2
        END IF
        IF INSTR(MBOX_Prop$, "{OE}") THEN   ' ellipse
            MBOX_Prop$=REMOVE$(MBOX_Prop$,"{OE}")
            MBOX_BStyle&=3
        END IF
        IF INSTR(MBOX_Prop$, "{ORR}") THEN    ' rrect
            MBOX_Prop$=REMOVE$(MBOX_Prop$,"{ORR}")
            MBOX_BStyle&=4
        END IF
        IF INSTR(MBOX_Prop$, "{ORRD}") THEN    ' rrect
            MBOX_Prop$=REMOVE$(MBOX_Prop$,"{ORRD}")
            MBOX_BStyle&=5
        END IF
    END IF
    FOR N&=0 TO 31
        C$="{BTC"+LTRIM$(STR$(N&))+"}"
        IF INSTR(MBOX_Prop$, C$) THEN
            MBOX_Prop$=REMOVE$(MBOX_Prop$,C$)
            MBOX_ODTColor&=N&
            EXIT FOR
        END IF
    NEXT N&
    IF INSTR(MBOX_Prop$,"{TP}") THEN
        MBOX_Prop$=REMOVE$(MBOX_Prop$,"{TP}")
        IF Pict$<>"" THEN
            MBOX_Bitmap&=EZ_ImageHandle(Pict$)
            IF MBOX_Bitmap&<>0 THEN
                MBOX_TileForm&=1
            END IF
        END IF
        Pict$=""
    END IF
    MBOX_Pict$=Pict$
    IF INSTR(MBOX_Prop$,"E") THEN MBOX_AllowESC&=1
    P$="CMRN"
    EZ_Form "{MSGBOX}", FormName$, MTitle$, 0, 0, 40, 8.5, P$
    RV&=MBOX_Return&
    INTERNAL_END
END IF
FUNCTION=RV&
END FUNCTION

SUB ZStoreMinMax(BYVAL FormName$, BYVAL MaxW&, BYVAL MaxH&, BYVAL Mode&)
    LOCAL N&
    STATIC OMinW&, OMinH&, OMaxW&, OMaxH&
    N&=ZFormNum(FormName$)
    IF N&<>0 THEN
        IF Mode&=1 THEN
            OMaxW&=AppForms(N&).FMaxW
            OMaxH&=AppForms(N&).FMaxH
            OMinW&=AppForms(N&).FMinW
            OMinH&=AppForms(N&).FMinH
            AppForms(N&).FMaxW=MaxW&
            AppForms(N&).FMaxH=MaxH&
            AppForms(N&).FMinW=32
            AppForms(N&).FMinH=32
        ELSE
            AppForms(N&).FMaxW=OMaxW&
            AppForms(N&).FMaxH=OMaxH&
            AppForms(N&).FMinW=OMinW&
            AppForms(N&).FMinH=OMinH&
        END IF
    END IF
END SUB

SUB ZChangeMaximize(BYVAL hWnd&, BYVAL Mode&)
    LOCAL WS&
    WS&=GetWindowLong(hWnd&,%GWL_STYLE)
    WS&=WS& AND NOT(%WS_MAXIMIZE)
    IF Mode&=0 THEN
        ' leave bit unset
    ELSE
        WS&=WS& OR %WS_MAXIMIZE
    END IF
    SetWindowLong hWnd&, %GWL_STYLE, WS&
END SUB


SUB EZ_MaxByClient(BYVAL FormName$, BYVAL Offset&, BYVAL DFlag&) EXPORT10
    LOCAL hForm&, SR AS RECT, WR AS RECT, CR AS RECT
    hForm&=ezHandle(FormName$,0,1)
    IF hForm&<>0 THEN
        IF ZIsChildForm(hForm&) THEN EXIT SUB
        ZGetWorkArea hForm&, SR, 0
        GetWindowRect hForm&, WR
        GetClientRect hForm&, CR
        ClientToScreen hForm&, BYVAL VARPTR(CR)
        ClientToScreen hForm&, BYVAL VARPTR(CR)+8
        SR.nLeft=SR.nLeft-(CR.nLeft-WR.nLeft)
        SR.nRight=SR.nRight+(WR.nRight-CR.nRight)
        SR.nTop=SR.nTop-(CR.nTop-WR.nTop)
        SR.nBottom=SR.nBottom+(WR.nBottom-CR.nBottom)
        IF DFlag&<>0 THEN DFlag&=1
        SR.nLeft=SR.nLeft+Offset&
        SR.nRight=SR.nRight-Offset&
        SR.nTop=SR.nTop+Offset&
        SR.nBottom=SR.nBottom-Offset&
        App_NoCheckMax&=1
        App_MaxTrackX&=SR.nLeft
        App_MaxTrackY&=SR.nTop
        ZChangeMaximize hForm&, 0
        ZStoreMinMax FormName$, SR.nRight-SR.nLeft, SR.nBottom-SR.nTop, 1
        MoveWindow hForm&, SR.nLeft, SR.nTop, SR.nRight-SR.nLeft, SR.nBottom-SR.nTop, DFlag&
        ZStoreMinMax FormName$, 0,0,0
        App_NoCheckMax&=0
    END IF
END SUB

SUB EZ_MaxByScreen(BYVAL FormName$, BYVAL Offset&, BYVAL DFlag&) EXPORT10
    LOCAL hForm&, SR AS RECT
    hForm&=ezHandle(FormName$,0,1)
    IF hForm&<>0 THEN
        IF ZIsChildForm(hForm&) THEN EXIT SUB
        ZGetWorkArea hForm&, SR, 0
        IF DFlag&<>0 THEN DFlag&=1
        SR.nLeft=SR.nLeft+Offset&
        SR.nRight=SR.nRight-Offset&
        SR.nTop=SR.nTop+Offset&
        SR.nBottom=SR.nBottom-Offset&
        App_NoCheckMax&=1
        App_MaxTrackX&=SR.nLeft
        App_MaxTrackY&=SR.nTop
        ZChangeMaximize hForm&, 0
        ZStoreMinMax FormName$, SR.nRight-SR.nLeft, SR.nBottom-SR.nTop, 1
        MoveWindow hForm&, SR.nLeft, SR.nTop, SR.nRight-SR.nLeft, SR.nBottom-SR.nTop,DFlag&
        ZStoreMinMax FormName$, 0,0,0
        App_NoCheckMax&=0
    END IF
END SUB


SUB EZ_FitFormInScreen(BYVAL FormName$, BYVAL DFlag&) EXPORT10
    LOCAL hForm&, WR AS RECT, SR AS RECT, Dif&, AW&, AH&
    hForm&=ezHandle(FormName$,0,1)
    IF hForm&<>0 THEN
        IF ZIsChildForm(hForm&) THEN EXIT SUB
        ZGetWorkArea hForm&, SR, 0
        GetWindowRect hForm&, WR
        IF WR.nLeft<SR.nLeft THEN
            Dif&=SR.nLeft-WR.nLeft
            WR.nLeft=WR.nLeft+Dif&
            WR.nRight=WR.nRight+Dif&
        END IF
        IF WR.nRight>SR.nRight THEN
            Dif&=WR.nRight-SR.nRight
            WR.nLeft=WR.nLeft-Dif&
            WR.nRight=WR.nRight-Dif&
        END IF
        IF WR.nTop<SR.nTop THEN
            Dif&=SR.nTop-WR.nTop
            WR.nTop=WR.nTop+Dif&
            WR.nBottom=WR.nBottom+Dif&
        END IF
        IF WR.nBottom>SR.nBottom THEN
            Dif&=WR.nBottom-SR.nBottom
            WR.nTop=WR.nTop-Dif&
            WR.nBottom=WR.nBottom-Dif&
        END IF
        IF DFlag&<>0 THEN DFlag&=1
        AW&=WR.nRight-WR.nLeft
        AH&=WR.nBottom-WR.nTop
        MoveWindow hForm&, WR.nLeft, WR.nTop, AW&, AH&, DFlag&
    END IF
END SUB

SUB MSGBOX_Design()
    LOCAL PFlag&, P$, PT$, P1$, P2$, P3$, CT&, DF&, FG&, TC!, AC!, AR!, AW!, AH!, BC!, BN&, RG&
    EZ_FitFormInScreen "{MSGBOX}",0
    ' uses font and color defined previously
    BC!=1
    BN&=3
    IF MBOX_B3$="" THEN
        BN&=2
        IF MBOX_B2$="" THEN BN&=1
    END IF
    IF BN&=1 THEN
        BC!=(40-11)/2
    ELSEIF BN&=2 THEN
        BC!=(40-24.5)/2
    END IF
    FG&=EZ_FG&
    EZ_Color -1,-1
    CT&=0
    P1$="H"
    P2$="H"
    P3$="H"
    IF INSTR(MBOX_Prop$,"3") THEN DF&=3
    IF INSTR(MBOX_Prop$,"2") THEN DF&=2
    IF INSTR(MBOX_Prop$,"1") THEN DF&=1
    IF MBOX_B1$<>"" THEN
        IF DF&<=1 THEN P1$="T@" ELSE P1$="T
    END IF
    IF MBOX_B2$<>"" THEN
        IF MBOX_B1$="" THEN
            P2$="T@"
            IF DF&=3 THEN P2$="T"
        ELSE
            P2$="T"
            IF DF&=2 THEN CT&=1
        END IF
    END IF
    IF MBOX_B3$<>"" THEN
        IF MBOX_B1$="" AND MBOX_B2$="" THEN
            P3$="T@"
        ELSEIF MBOX_B1$="" OR MBOX_B2$="" THEN
            P3$="T"
            IF DF&=3 THEN CT&=1
        ELSE
            P3$="T"
            IF DF&=3 THEN CT&=2
        END IF
    END IF
    EZ_UseFont MBOX_Font2&
    IF MBOX_BStyle&=0 THEN
        EZ_Button 200, BC!, 6.625, 11, 1.5, MBOX_B1$, P1$
        EZ_Button 201, BC!+13.5, 6.625, 11, 1.5, MBOX_B2$, P2$
        EZ_Button 202, BC!+27, 6.625, 11, 1.5, MBOX_B3$, P3$
    ELSE
        EZ_ODButton 200, BC!, 6.625, 11, 1.5, MBOX_B1$, P1$
        EZ_ODButton 201, BC!+13.5, 6.625, 11, 1.5, MBOX_B2$, P2$
        EZ_ODButton 202, BC!+27, 6.625, 11, 1.5, MBOX_B3$, P3$
        RG&=0
        SELECT CASE AS LONG MBOX_BStyle&
            CASE 3  ' ellipse
                RG&=1
            CASE 4  ' rrect
                RG&=2
            CASE 5  ' rrect
                RG&=-2
            CASE ELSE
        END SELECT
        IF RG&<>0 THEN
            EZ_SetRegion "{MSGBOX}", 200, RG&,0
            EZ_SetRegion "{MSGBOX}", 201, RG&,0
            EZ_SetRegion "{MSGBOX}", 202, RG&,0
        END IF
    END IF
    IF INSTR(MBOX_Prop$,"+") THEN P$="+"
    IF INSTR(MBOX_Prop$,"F") THEN
        P$=P$+"F"
    ELSE
        IF INSTR(MBOX_Prop$,"S") THEN P$=P$+"S"
        IF INSTR(MBOX_Prop$,"R") THEN P$=P$+"R"
    END IF
    IF MBOX_Pict$<>"" THEN
        PFlag&=1
    END IF
    EZ_UseFont MBOX_Font1&
    IF INSTR(MBOX_Prop$,"C") THEN PT$="C"
    TC!=1
    IF PFlag& THEN
        IF EZ_ImageHandle(MBOX_Pict$)<>0 THEN
            EZ_Picture 120, 1, 1, 11, 5, MBOX_Pict$, P$
        END IF
        IF EZ_IconHandle(MBOX_Pict$)<>0 THEN
            EZ_Icon 120, 1, 1, 11, 5, MBOX_Pict$, P$
        END IF
        EZ_GetSizeC "{MSGBOX}", 120, AC!, AR!, AW!, AH!
        TC!=AW!+2
    END IF
    IF INSTR(MBOX_Prop$,"T") THEN
        EZ_Color FG&, 15

'        IF PFlag& THEN
'            EZ_Text 100, 13, 1, 26, 5, MBOX_Text$, "MSV"+PT$
'        ELSE
'            EZ_Text 100, 1, 1, 38, 5, MBOX_Text$, "MSV"+PT$
'        END IF
        EZ_Text 100, TC!, 1, 39-TC!, 5, MBOX_Text$, "MSV"+PT$
    ELSE
        IF INSTR(MBOX_Prop$,"L") THEN PT$="L"
        EZ_Color FG&, -1
'        IF PFlag& THEN
'            EZ_Label 100, 13, 1, 26, 5, MBOX_Text$, "I"+PT$
'        ELSE
'            EZ_Label 100, 1, 1, 38, 5, MBOX_Text$, "I"+PT$
'        END IF
         EZ_Label 100, TC!, 1, 39-TC!, 5, MBOX_Text$, "I"+PT$
    END IF
    EZ_PostEvent "{MSGBOX}", 500, CT&
END SUB

SUB INTERNAL_DesignWindow(FormName$)
    SELECT CASE AS CONST$ FormName$
        CASE "{MSGBOX}"
            MSGBOX_Design
        CASE ELSE
    END SELECT
    IF INTERNAL_ADD3<>0 THEN
        CALL DWORD INTERNAL_ADD3 USING EZ_DesignWindowX(FormName$)
    END IF
END SUB

SUB MSGBOX_EraseBG(BYVAL CVal&, Cancel&)
LOCAL hDC&, X2&, Y2&
IF MBOX_TileForm&<>0 THEN
    IF MBOX_Bitmap&<>0 THEN
        IF EZ_StartEraseBG(CVal&, hDC&, X2&, Y2&) THEN
            EZ_DCTilePicture hDC&,0,0, X2&,Y2&,MBOX_Bitmap&
            EZ_EndEraseBG Cancel&
        END IF
    END IF
END IF
END SUB

'TYPE ColorLong
'   red AS BYTE
'   green AS BYTE
'   blue AS BYTE
'   hb AS BYTE
'END TYPE

'UNION ColorCode
'   n AS LONG
'   b AS ColorLong
'END UNION

SUB ZCalcShades(CD&, CDL&, V&, CLD&, CL&)
LOCAL C AS ColorCode, DF1!
IF V&=0 THEN
    CD&=0
    CDL&=RGB(32,32,32)
    V&=RGB(64,64,64)
    CLD&=RGB(96,96,96)
    CL&=RGB(128,128,128)
    EXIT SUB
END IF
' CL&
C.n=V&
DF1!=MAX(255-C.b.red, 255-C.b.green, 255-C.b.blue)
DF1!=INT(DF1!/2)
C.b.red=MIN(C.b.red+DF1!, 255)
C.b.green=MIN(C.b.green+DF1!,255)
C.b.blue=MIN(C.b.blue+DF1!, 255)
CL&=C.n
' CLD&
C.n=V&
DF1!=INT(DF1!/2)
C.b.red=MIN(C.b.red+DF1!, 255)
C.b.green=MIN(C.b.green+DF1!,255)
C.b.blue=MIN(C.b.blue+DF1!, 255)
CLD&=C.n
' CD&
C.n=V&
DF1!=MAX(C.b.red, C.b.green, C.b.blue)
DF1!=INT(DF1!/2)
C.b.red=MAX(C.b.red-DF1!, 0)
C.b.green=MAX(C.b.green-DF1!,0)
C.b.blue=MAX(C.b.blue-DF1!, 0)
CD&=C.n
' CDL&
C.n=V&
DF1!=INT(DF1!/2)
C.b.red=MAX(C.b.red-DF1!, 0)
C.b.green=MAX(C.b.green-DF1!,0)
C.b.blue=MAX(C.b.blue-DF1!, 0)
CDL&=C.n

END SUB

' App_ExtraColorAFlag&=1   to allow extra colors up to 25 beyond max limit
' App_TopColor& is top color number for end user
' C&= EZ_ColorVal(N&,0)

FUNCTION EZ_GetDrawMacro(BYVAL T$) EXPORT10 AS LONG
    LOCAL RV&, BFlag&, DFlag&, FFlag&
    RV&=0
    BFlag&=0
    DFlag&=0
    FFlag&=0
    IF INSTR(T$,"{{") THEN
        T$=UCASE$(REMOVE$(T$, ANY " {}_"))
        IF LEFT$(T$,3)="BIG" THEN
            T$=MID$(T$,4)
            BFlag&=1
        END IF
        IF LEFT$(T$,6)="DOUBLE" THEN
            T$=MID$(T$,7)
            DFlag&=1
        END IF
        IF LEFT$(T$,4)="SAME" THEN
            T$=MID$(T$,5)
            FFlag&=1
        END IF
        SELECT CASE AS CONST$ T$
            CASE "RECT":RV&=1
            CASE "ELLIPSE":RV&=2
            CASE "SRECT":RV&=3
            CASE "ARROWUP":RV&=4
            CASE "ARROWDN":RV&=5
            CASE "ARROWLF":RV&=6
            CASE "ARROWRT":RV&=7
            CASE "RRECT":RV&=8
            CASE ELSE
        END SELECT
        IF RV&<>0 THEN
            IF BFlag& THEN RV&=RV& OR 256&
            IF DFlag& THEN RV&=RV& OR 512&
            IF FFlag& THEN RV&=RV& OR 1024&
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

GLOBAL App_DrawGrad1&
GLOBAL App_DrawGrad2&
GLOBAL App_DrawGrad3&


FUNCTION EZ_CheckGradMacro(T$) EXPORT10 AS LONG
    LOCAL P1&, P2&, RV&, M$
    RV&=0
    P1&=INSTR(T$,"[[")
    IF P1&<>0 THEN
        P2&=INSTR(P1&+1, T$,"]]")
        IF P2&<>0 THEN
            M$=MID$(T$,P1&+2, (P2&-P1&)-2)
            T$=LEFT$(T$,P1&-1)+MID$(T$,P2&+2)
            App_DrawGrad1&=0
            App_DrawGrad2&=15
            App_DrawGrad3&=0
            P1&=INSTR(M$,",")
            IF P1&<>0 THEN
                App_DrawGrad1&=VAL(TRIM$(LEFT$(M$,P1&-1)))
                M$=MID$(M$, P1&+1)
                P1&=INSTR(M$,",")
                IF P1&<>0 THEN
                    App_DrawGrad2&=VAL(TRIM$(LEFT$(M$,P1&-1)))
                    M$=MID$(M$, P1&+1)
                    App_DrawGrad3&=VAL(TRIM$(M$))
                    IF App_DrawGrad3&<0 OR App_DrawGrad3&>7 THEN App_DrawGrad3&=0
                    RV&=1
                END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB EZ_DCDrawGradMacro(BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&) EXPORT10
    EZ_Color App_DrawGrad1&,App_DrawGrad2&
    EZ_DCDrawGradient hDC&, X1&, Y1&, X2&, Y2&,App_DrawGrad3&
END SUB

SUB EZ_DCDrawMacro(BYVAL hDC&, BYVAL Obj&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL TC&, BYVAL LC&) EXPORT10
    LOCAL DifX&, DifY&, SZ&, OldShape$, AX1&, AY1&, AX2&, AY2&, I&, LP&, DFlag&, XH&, FFlag&    ', AObj&
    LOCAL Style&, DifXY&
    SZ&=3
    LP&=1
    DFlag&=0
    FFlag&=0
    Style&=Obj& AND &HFFFFF00
    Obj&=Obj& AND 255&
    IF (Style& AND 256&) THEN SZ&=4  ' big size
    IF (Style& AND 512&) THEN ' Double sideways
        LP&=2
        DFlag&=1
    END IF
    IF (Style& AND 1024&) THEN '
        FFlag&=1
    END IF
    GOSUB CalcOSize
    FOR I&=1 TO LP&
      AX1&=X1&+DifX&
      AY1&=Y1&+DifY&
      AX2&=X2&-DifX&
      AY2&=Y2&-DifY&
      XH&=((AX2&-AX1&)/5)*2
      IF DFlag& THEN
          IF I&=1 THEN
             AX2&=AX1&+XH&
          ELSE
             AX1&=AX2&-XH&
          END IF
      END IF
      SELECT CASE AS LONG Obj&
        CASE 1
            EZ_Color LC&, TC&
            EZ_DCDraw hDC&, %EZ_RECT, AX1&, AY1&, AX2&, AY2&,1,1
        CASE 2
            EZ_Color LC&, TC&
            EZ_DCDraw hDC&, %EZ_ELLIPSE, AX1&, AY1&, AX2&, AY2&,1,1
        CASE 3
            EZ_Color TC&, TC&
            EZ_DCDraw hDC&, %EZ_RECT, AX1&, AY1&, AX2&, AY2&,1,1
            EZ_DCDraw hDC&, %EZ_EDGE_S, AX1&, AY1&, AX2&, AY2&,0,0
        CASE 4,5,6,7
            OldShape$=App_PolyStyle$
            IF Obj&=4 THEN App_PolyStyle$="(0,1)(.5,0)(1,1)(0,1)"
            IF Obj&=5 THEN App_PolyStyle$="(0,0)(.5,1)(1,0)(0,0)"
            IF Obj&=6 THEN App_PolyStyle$="(0,.5)(1,0)(1,1)(0,.5)"
            IF Obj&=7 THEN App_PolyStyle$="(0,0)(1,.5)(0,1)(0,0)"
            EZ_Color LC&, TC&
            EZ_DCDraw hDC&, %EZ_POLY, AX1&, AY1&, AX2&, AY2&,1,1
            App_PolyStyle$=OldShape$
        CASE 8
            EZ_Color LC&, TC&
            EZ_DCDraw hDC&, %EZ_RRECT, AX1&, AY1&, AX2&, AY2&,1,1
        CASE ELSE
      END SELECT
    NEXT I&
    EXIT SUB

    CalcOSize:
    IF FFlag& THEN
        DifXY&=((X2&-X1&)-(Y2&-Y1&))/2
        IF DifXY&>0 THEN        ' X is bigger
            X1&=X1&+DifXY&
            X2&=X2&-DifXY&
        ELSEIF DifXY&<0 THEN    ' Y is bigger
            DifXY&=ABS(DifXY&)
            Y1&=Y1&+DifXY&
            Y2&=Y2&-DifXY&
        END IF
    END IF
    DifX&=(X2&-X1&)/SZ&
    DifY&=(Y2&-Y1&)/SZ&
    RETURN

END SUB

FUNCTION EZ_AverageColor(BYVAL C1&, BYVAL C2&) EXPORT10 AS LONG
    LOCAL B1 AS BYTE PTR, B2 AS BYTE PTR, N&, V1&, V2&
    B1=VARPTR(C1&)-1
    B2=VARPTR(C2&)-1
    FOR N&=0 TO 2
        INCR B1
        INCR B2
        V1&=@B1
        V2&=@B2
        @B1=(V1&+V2&)/2
    NEXT N&
    FUNCTION=C1&
END FUNCTION

SUB EZ_DCDrawLight(BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL LColorN&) EXPORT10
    LOCAL XDif&, YDif&, SZ&
    XDif&=(X2&-X1&)+1
    YDif&=(Y2&-Y1&)+1
    SZ&=INT(YDif&/4)*2
    IF SZ&>12 THEN SZ&=12
    X1&=X1&+(GetSystemMetrics(%SM_CXEDGE)*2)
    Y1&=Y1&+((YDif&-SZ&)/2)
    X2&=X1&+SZ&-1
    Y2&=Y1&+SZ&-1
    EZ_Color LColorN&,LColorN&
    EZ_DCDraw hDC&, %EZ_RECT, X1&, Y1&, X2&, Y2&,1,1
    EZ_DCDraw hDC&, %EZ_EDGE_S, X1&, Y1&, X2&, Y2&,0,0
END SUB

FUNCTION EZ_CheckLight(T$, LColorN&) EXPORT10 AS LONG
    LOCAL RV&, P1&, P2&, CN$
    RV&=0
    P1&=INSTR(T$,"[[")
    IF P1&<>0 THEN
        P2&=INSTR(T$,"]]")
        IF P2&>P1& THEN
            CN$=MID$(T$,P1&,(P2&+2)-P1&)
            T$=LEFT$(T$,P1&-1)+MID$(T$,P2&+2)
            CN$=REMOVE$(CN$, ANY "[]")
            LColorN&=VAL(TRIM$(CN$))
            IF LColorN&>=0 AND LColorN&<=UBOUND(AppBrush) THEN
               IF AppBrush(LColorN&)<>0 THEN
                   RV&=1      ' color exists
               ELSE
                   IF LColorN&<=31 THEN RV&=1 ' let EZGUI create color
               END IF
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

SUB ZDraw3DButton(FormName$, CID&, CVal&, DKColor&, TXColor&, FontN&, BYVAL BShape&)
LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&
LOCAL T$, C2&, C3&, C4&, C3b&, C2b&, V&, VD&,VDL&, VLD&, VL&, LColorN&
LOCAL OldFG&, OldBG&, OldFont&, DrawFlag&, CA&, CAV&, FX&, FY&, OldCorner&, FCL&
LOCAL THFlag&, BCheck&, HotFlag&
THFlag&=0
IF DKColor&=-1 THEN     ' assume themed
    IF BShape&=%EZ_RECT THEN    ' only allowed on rectangular button
        THFlag&=1
    END IF
END IF
OldFG&=EZ_FG
OldBG&=EZ_BG
OldFont&=EZ_Font
IF DKColor&<0 THEN DKColor&=0
V&= EZ_ColorVal(DKColor&,0)
ZCalcShades VD&,VDL&, V&, VLD&, VL&
App_ExtraColorAFlag&=1
C4& =App_TopColor&+1
C3b&=App_TopColor&+2
C3& =App_TopColor&+3
C2b&=App_TopColor&+4
C2& =App_TopColor&+5
CA& =App_TopColor&+6
FCL& =App_TopColor&+7

CAV&=EZ_AverageColor(VDL&, EZ_ColorVal(TXColor&,0))

EZ_DefColorL C4&, VD&
EZ_DefColorL C3b&, VDL&
EZ_DefColorL C3&, V&
EZ_DefColorL C2b&, VLD&
EZ_DefColorL C2&, VL&
EZ_DefColorL CA&, CAV&
EZ_DefColorL FCL&, VL&

OldCorner&=App_FixedCorner&
IF App_FixedCorner&<=0 THEN App_FixedCorner&=%DefaultCorner

IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
    HotFlag&=EZ_IsHot(FormName$, CID&)
    IF IsSel&<>0 THEN
        ' button down
        SELECT CASE AS LONG BShape&
            CASE %EZ_RECT
                IF THFlag& THEN
                    EZ_StartTheme FormName$, CID&
                    EZ_DCDraw hMyDC&, %EZ_BTNDN,0, 0, X2&, Y2&, 1, 0
                    EZ_EndTheme
                ELSE
                    EZ_Color C2&, C3b&
                    EZ_DCDrawGradient   hMyDC&, 0, 0,  X2&,  Y2&, 6
                    EZ_Color C4&,0
                    EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 0
                END IF
            CASE ELSE
                EZ_Color C3b&,C2&
                EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 1
        END SELECT
    ELSE
        ' button Up
        IF (IsFoc&<>0) OR (HotFlag&<>0) THEN
            SELECT CASE AS LONG BShape&
                CASE %EZ_RECT
                    IF THFlag& THEN
                        EZ_StartTheme FormName$, CID&
                        IF HotFlag& THEN
                             EZ_DCDraw hMyDC&, %EZ_BTNHOT,0, 0, X2&, Y2&, 1, 0
                        ELSE
                             EZ_DCDraw hMyDC&, %EZ_BTNDEF,0, 0, X2&, Y2&, 1, 0
                        END IF
                        EZ_EndTheme
                    ELSE
                        EZ_Color C3b&,C2&
                        EZ_DCDrawGradient   hMyDC&, 0, 0,  X2&,  Y2&, 6
                        EZ_Color C3b&,0
                        EZ_DCDraw  hMyDC&, BShape&, 1, 1, X2&-1, Y2&-1, 1, 0
                        EZ_Color C4&,0
                        EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 0
                        IF HotFlag& THEN
                             EZ_Color FCL&,0
                             EZ_DCDraw  hMyDC&, BShape&, 2, 2, X2-2, Y2&-2, 2, 0
                        END IF
                    END IF
                CASE ELSE
                    EZ_Color C3b&,C2&
                    EZ_DCDrawGradient   hMyDC&, 0, 0,  X2&,  Y2&, 6
                    EZ_Color C3b&,0
                    EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 0
                    EZ_Color FCL&,0
                    IF HotFlag& THEN
                         EZ_DCDraw  hMyDC&, BShape&, 3, 3, X2&-3, Y2&-3, 1, 0
                         EZ_DCDraw  hMyDC&, BShape&, 4, 4, X2&-4, Y2&-4, 1, 0
                    ELSE
                         EZ_DCDraw  hMyDC&, BShape&, 2, 2, X2&-2, Y2&-2, 1, 0
                    END IF
                    IF BShape&=%EZ_ELLIPSE THEN
                         EZ_Color C3&,0
                         IF HotFlag& THEN
                              EZ_DCDraw  hMyDC&, BShape&, 2, 2, X2&-2, Y2&-2, 1, 0
                              EZ_DCDraw  hMyDC&, BShape&, 5, 5, X2&-5, Y2&-5, 1, 0
                         ELSE
                              EZ_DCDraw  hMyDC&, BShape&, 1, 1, X2&-1, Y2&-1, 1, 0
                              EZ_DCDraw  hMyDC&, BShape&, 3, 3, X2&-3, Y2&-3, 1, 0
                         END IF
                    END IF
            END SELECT
        ELSE
            SELECT CASE AS LONG BShape&
                CASE %EZ_RECT
                    IF THFlag& THEN
                        EZ_StartTheme FormName$, CID&
                        IF IsDis& THEN
                             EZ_DCDraw hMyDC&, %EZ_BTNDIS,0, 0, X2&, Y2&, 1, 0
                        ELSE
                             IF HotFlag& THEN
                                  EZ_DCDraw hMyDC&, %EZ_BTNHOT,0, 0, X2&, Y2&, 1, 0
                             ELSE
                                  EZ_DCDraw hMyDC&, %EZ_BTNUP,0, 0, X2&, Y2&, 1, 0
                             END IF
                        END IF
                        EZ_EndTheme
                    ELSE
                        EZ_Color C4&,C2b&
                        EZ_DCDrawGradient   hMyDC&, 0, 0,  X2&,  Y2&, 6
                        EZ_Color C4&,0
                        EZ_DCDraw  hMyDC&, BShape&, 1, 1, X2&-1, Y2&-1, 1, 0
                        EZ_Color C4&,0
                        EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 0
                    END IF
                CASE ELSE
                    EZ_Color C3b&,C3&
                    EZ_DCDrawGradient   hMyDC&, 0, 0,  X2&,  Y2&, 6
                    EZ_Color C3b&,0
                    EZ_DCDraw  hMyDC&, BShape&, 0, 0, X2&, Y2&, 1, 0
            END SELECT
        END IF
    END IF
    EZ_UseFont FontN&
    T$=EZ_GetText(FormName$, CID&)
    DrawFlag&=EZ_GetDrawMacro(T$)
    IF IsDis& THEN
        IF DrawFlag&=0 THEN
            IF EZ_CheckLight(T$, LColorN&) THEN
                EZ_DCDrawLight hMyDC&, 0, 0, X2&, Y2&, LColorN&
            END IF
            EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
            EZ_Color C2&,-1
            EZ_DCPrint hMyDC&, 2,2, T$
            EZ_Color C3&,-1
            EZ_DCPrint hMyDC&, 0,0, T$
        ELSE
            EZ_DCDrawMacro hMyDC&, DrawFlag&, 0,0,X2&,Y2&, C3&, CA&
        END IF
    ELSE
        IF DrawFlag&=0 THEN
            IF EZ_CheckLight(T$, LColorN&) THEN
                EZ_DCDrawLight hMyDC&, 0, 0, X2&, Y2&, LColorN&
            END IF
            EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
            EZ_Color TXColor&, -1
            EZ_DCPrint hMyDC&, 0,0, T$
        ELSE
            EZ_DCDrawMacro hMyDC&, DrawFlag&, 0,0,X2&,Y2&, TXColor&, CA&
        END IF
    END IF
    EZ_SetPrintFormat 0,0,0,0,0
    EZ_Color OldFG&,OldBG&
    EZ_UseFont OldFont&
    EZ_EndOwnerDraw
END IF
App_FixedCorner&=OldCorner&
EZ_FreeColor C4&
EZ_FreeColor C3b&
EZ_FreeColor C3&
EZ_FreeColor C2b&
EZ_FreeColor C2&
EZ_FreeColor CA&
EZ_FreeColor FCL&
App_ExtraColorAFlag&=0
END SUB

SUB EZ_Draw3DButton(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL DKColor&, BYVAL TXColor&, BYVAL FontN&) EXPORT10
    ZDraw3DButton FormName$, CID&, CVal&, DKColor&, TXColor&, FontN&, %EZ_RECT
END SUB

SUB EZ_Draw3DButtonRR(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL DKColor&, BYVAL TXColor&, BYVAL FontN&) EXPORT10
    ZDraw3DButton FormName$, CID&, CVal&, DKColor&, TXColor&, FontN&, %EZ_RRECT
END SUB


SUB EZ_Draw3DButtonE(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL DKColor&, BYVAL TXColor&, BYVAL FontN&) EXPORT10
    ZDraw3DButton FormName$, CID&, CVal&, DKColor&, TXColor&, FontN&, %EZ_ELLIPSE
END SUB

SUB EZ_DrawColorButton(BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL BColor&, BYVAL TXColor&, BYVAL FontN&) EXPORT10
LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&
LOCAL T$, C2&, C3&, C4&, N&, EW&, R AS RECT
LOCAL C3b&, C2b&, V&, VD&, VDL&, VLD&, VL&
LOCAL OldFG&, OldBG&, OldFont&, DrawFlag&, LColorN&
LOCAL C AS ColorCode, CA&, CAV&, BCheck&, HotFlag&
OldFG&=EZ_FG
OldBG&=EZ_BG
OldFont&=EZ_Font
IF BColor&<0 THEN BColor&=0
V&= EZ_ColorVal(BColor&,0)
ZCalcShades VD&,VDL&, V&, VLD&, VL&
App_ExtraColorAFlag&=1
C4& =App_TopColor&+1
C3b&=App_TopColor&+2
C3& =App_TopColor&+3
C2b&=App_TopColor&+4
C2& =App_TopColor&+5

CA& =App_TopColor&+6
CAV&=EZ_AverageColor(V&, EZ_ColorVal(TXColor&,0))

EZ_DefColorL C4&, VD&
EZ_DefColorL C3b&, VDL&
EZ_DefColorL C3&, V&
EZ_DefColorL C2b&, VLD&
EZ_DefColorL CA&, CAV&

C.n=V&
IF C.b.green>200 THEN VL&=RGB(255,255,255)
EZ_DefColorL C2&, VL&
'BCheck&=PBVGetCheck(FormName$, CID&)
IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
    HotFlag&=EZ_IsHot(FormName$, CID&)
    IF IsSel&<>0 THEN
        ' button down
        EZ_Color 0, C3&
        EZ_DCDraw  hMyDC&, %EZ_RECT, 0, 0, X2&, Y2&, 1, 1
    ELSE
        ' button Up
        EW&=GetSystemMetrics(%SM_CXEDGE)
        IF IsFoc& THEN
             EW&=EW&+1
        ELSE
             IF HotFlag& THEN EW&=EW&+1
        END IF
        IF (2*EW&)>=X2& THEN EW&=X2&/2
        IF (2*EW&)>=Y2& THEN EW&=Y2&/2
        EZ_Color C4&,C3&
        EZ_DCDraw  hMyDC&, %EZ_RECT, 0, 0, X2&, Y2&, EW&, 1
        FOR N&=0 TO (EW&-1)
            EZ_Color C2&,0
            EZ_DCDraw  hMyDC&, %EZ_LINE, N&, N&, X2&-N&, N&, 1, 0
            EZ_DCDraw  hMyDC&, %EZ_LINE, N&, N&, N&, Y2&-N&, 1, 0
        NEXT N&
        IF IsFoc&<>0 OR HotFlag&<>0 THEN
            IF HotFlag& THEN
'                 EZ_Color C2&,0
'                 EZ_DCDraw  hMyDC&, %EZ_RECT, 0, 0, X2&, Y2&, 1, 0
            ELSE
                 EZ_Color C4&,0
                 EZ_DCDraw  hMyDC&, %EZ_RECT, 0, 0, X2&, Y2&, 1, 0
            END IF
            IF IsFoc& THEN
                 R.nLeft=EW&+1
                 R.nTop=EW+1
                 R.nRight=X2&-EW&
                 R.nBottom=Y2&-EW&
                 DrawFocusRect hMyDC&, R
            END IF
        END IF
    END IF
    EZ_UseFont FontN&
    T$=EZ_GetText(FormName$, CID&)
    DrawFlag&=EZ_GetDrawMacro(T$)
    IF IsDis& THEN
        IF DrawFlag&=0 THEN
            IF EZ_CheckLight(T$, LColorN&) THEN
                EZ_DCDrawLight hMyDC&, 0, 0, X2&, Y2&, LColorN&
            END IF
            EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
            EZ_Color C2&, -1
            EZ_DCPrint hMyDC&, 2,2, T$
            EZ_Color C3b&, -1
            EZ_DCPrint hMyDC&, 0,0, T$
        ELSE
            EZ_DCDrawMacro hMyDC&, DrawFlag&, 0,0,X2&,Y2&, C3b&, CA&
        END IF
    ELSE
        IF DrawFlag&=0 THEN
            IF EZ_CheckLight(T$, LColorN&) THEN
                EZ_DCDrawLight hMyDC&, 0, 0, X2&, Y2&, LColorN&
            END IF
            EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
            EZ_Color TXColor&, -1
            EZ_DCPrint hMyDC&, 0,0, T$
        ELSE
            EZ_DCDrawMacro hMyDC&, DrawFlag&, 0,0,X2&,Y2&, TXColor&, CA&
        END IF
    END IF
    EZ_SetPrintFormat 0,0,0,0,0
    EZ_Color OldFG&,OldBG&
    EZ_UseFont OldFont&
    EZ_EndOwnerDraw
END IF
EZ_FreeColor C4&
EZ_FreeColor C3b&
EZ_FreeColor C3&
EZ_FreeColor C2b&
EZ_FreeColor C2&
EZ_FreeColor CA&
App_ExtraColorAFlag&=0
END SUB


' ---------------------------------------------------------------------
'    Easy Drawing routines for ownerdraw
' ---------------------------------------------------------------------


' properties are G - Gradient (3D), > Gradient left/right < Gradient right to left ^ Gradient Bottom to Top
'

SUB ZDraw_ODBG(BYVAL hDC&, BYVAL X1&, BYVAL Y1&, BYVAL X2&, BYVAL Y2&, BYVAL FG&, BYVAL BG&, BYVAL DProp$)
     LOCAL GFlag&, DFlag&, Obj&, P&, T$, C&, C1&
     DFlag&=6
     P&=INSTR(DProp$, "|")
     T$=""
     IF P&<>0 THEN
          T$=MID$(DProp$,P&+1)
          DProp$=LEFT$(DProp$,P&-1)
     END IF
     DProp$=UCASE$(DProp$)
     IF INSTR(DProp$,"G") THEN GFlag&=1
     IF INSTR(DProp$,">") THEN DFlag&=0
     IF INSTR(DProp$,"<") THEN DFlag&=1
     IF INSTR(DProp$,"^") THEN DFlag&=3

     IF GFlag& THEN
          EZ_SaveState
          EZ_Color FG&, BG&
          IF BG&=-1 THEN
               C&=GetSysColor(%COLOR_3DFACE)
               C1&=GetSysColor(%COLOR_3DSHADOW)
               EZ_ColorRGB C1&,C&
          END IF
          EZ_DCDrawGradient hDC&, X1&, Y1&, X2&, Y2&, DFlag&
          EZ_Color FG&, BG&
          EZ_RestoreState
     ELSE
          EZ_SaveState
          EZ_Color FG&, BG&
          Obj&=%EZ_FILL
          IF INSTR(DProp$,"{AC}") THEN Obj&=%EZ_CAPA
          IF INSTR(DProp$,"{IC}") THEN Obj&=%EZ_CAPI
          IF INSTR(DProp$,"{TB}") THEN Obj&=%EZ_TABBG
          IF INSTR(DProp$,"{TBF}") THEN Obj&=%EZ_TABBGF
          IF INSTR(DProp$,"{RB}") THEN Obj&=%EZ_REBARBG
          IF Obj&=%EZ_FILL THEN
               IF BG&=-1 THEN
                    C&=GetSysColor(%COLOR_3DFACE)
                    EZ_ColorRGB C&,C&
               END IF
          END IF
          EZ_DCDraw hDC&, Obj&, X1&, Y1&, X2&, Y2&, 1, 1
          EZ_Color FG&, BG&
          EZ_RestoreState
     END IF
     IF T$<>"" THEN
          EZ_SetPrintFormat 2, X2&,Y2&, %EZ_CENTER OR %EZ_VCENTER, %EZ_NOPREFIX
          EZ_DCPrint hDC&,0,0, T$
          EZ_SetPrintFormat 0,0,0,0,0
     END IF

END SUB

FUNCTION ZGetColorText(BYVAL MText$, BYVAL Mode&) AS STRING
    LOCAL P1&,P2&, AText$, AColor$, EZN&, FG&, BG&, RFlag&
    AText$=MText$
    AColor$=""
    IF INSTR(MText$,"<R>")=0 THEN
        RFlag&=1
        REPLACE "<R>" WITH CHR$(1) IN MText$
    END IF
    P1&=INSTR(MText$,"<")
    IF P1&<>0 THEN
        P2&=INSTR(P1&+1,MText$,">")
        IF P2&<>0 THEN
            AText$=LEFT$(MText$,P1&-1)+MID$(MText$,P2&+1)
            AColor$=MID$(MText$,P1&+1, (P2&-P1&)-1)
            IF LEFT$(AColor$,1)="#" THEN ' EZGUI color number
                EZN&=VAL(MID$(AColor$,2))
                IF EZN&>=0 AND EZN&<=100 THEN
                    FG&=EZ_FG
                    BG&=EZ_BG&
                    EZ_Color EZN&, EZN&     ' create EZGUI default colors
                    EZ_Color FG&, BG&
                    IF EZ_BrushHandle(EZN&)<>0 THEN     ' color exists
                        AColor$=TRIM$(STR$(EZ_ColorVal(EZN&,0)))
                    END IF
                END IF
            END IF
        END IF
    END IF
    IF Mode&=1 THEN
        IF RFlag& THEN REPLACE CHR$(1) WITH "<R>" IN AText$
        FUNCTION=AText$
    ELSE
        FUNCTION=AColor$
    END IF
END FUNCTION
'
FUNCTION ZGetImgNumText(BYVAL MText$, BYVAL Mode&) AS STRING
    LOCAL P1&,P2&, AText$, Img$ ', EZN&, FG&, BG& , RFlag&
    AText$=MText$
    Img$="-1"
    P1&=INSTR(MText$,"{")
    IF P1&<>0 THEN
        P2&=INSTR(P1&+1,MText$,"}")
        IF P2&<>0 THEN
            AText$=LEFT$(MText$,P1&-1)+MID$(MText$,P2&+1)
            Img$=MID$(MText$,P1&+1, (P2&-P1&)-1)
        END IF
    END IF
    IF Mode&=1 THEN
        FUNCTION=AText$
    ELSE
        FUNCTION=Img$
    END IF
END FUNCTION
'
SUB ZSizeItem (CVal&, IFont&, IText$, IProp$, BYVAL IType&)
    LOCAL W&, H&, Item1&, Item2&, NW!, NH!, RFlag&, Offset&
    IF EZ_StartOwnerSize(CVal&, W&, H&, Item1&, Item2&) THEN
        IProp$=UCASE$(IProp$)
        Offset&=4+(TALLY(IProp$, "+")*8)
        SELECT CASE AS LONG IType&
            CASE 1
                IF INSTR(IProp$,"C") THEN
                    IText$=ZGetColorText(IText$, 1)
                END IF
                IF INSTR(IText$,"<R>") THEN
                    IText$=REMOVE$(IText$,"<R>")
                    RFlag&=1
                END IF
            CASE ELSE
                IText$="XX" ' dummy text for getting height
        END SELECT
        EZ_GetTextSize IFont&, IText$, NW!, NH!,10  ' mode 10 same as mode 0 but no space added
        NH!=NH!*1.25
        SELECT CASE AS LONG IType&
            CASE 1
                NW!=NW!+NH!+(NH!/2)+Offset&
                IF INSTR(IProp$,"W") THEN NW!=NW!+NH!
                IF INSTR(IProp$,"C") THEN NW!=NW!+(4*NH!)
                IF RFlag& THEN NW!=NW!+NH!  ' add extra spacing
                IF INSTR(IProp$,"F") THEN NW!=NW!*1.5   ' make wider to compensate for different fonts
            CASE ELSE
                NW!=W&
        END SELECT
        EZ_EndOwnerSize CVal&, NW!, NH!
    END IF
END SUB

GLOBAL App_ODListviewColumns&

FUNCTION ZGetODLVData(BYVAL FormName$, BYVAL CID&, BYVAL AItem&, IProp$, ColW$) AS STRING
    LOCAL AText$, ImgN&, I&, AI&, CP$
    LOCAL IText$, IPictNum&, LVProp$, TmpProp$, Tmp$
    ImgN&=-1
    CP$=EZ_GetLVColOrder(FormName$, CID&,App_ODListviewColumns&)
    IText$=""
    TmpProp$=IProp$
    IProp$=""
    ColW$=""
    FOR I&=1 TO App_ODListviewColumns&
        IF CP$<>"" THEN
            AI&=VAL(PARSE$(CP$, App_EZ_DChar$, I&))  ' returns zero indexed value
        ELSE
            AI&=I&-1    ' zero indexed
        END IF
        ColW$=ColW$+TRIM$(STR$(EZ_GetLVColWidth(FormName$, CID&, AI&)))+App_EZ_DChar$
        IF EZ_GetLVItem(FormName$, CID&, AText$, IPictNum&, AItem&, AI&, LVProp$ ) THEN
            IText$=IText$+AText$+App_EZ_DChar$
        ELSE
            IText$=IText$+""+App_EZ_DChar$
        END IF
        Tmp$=PARSE$(TmpProp$,App_EZ_DChar$,AI&+1)
        IF Tmp$<>"" THEN
            IProp$=IProp$+Tmp$+App_EZ_DChar$
        ELSE
            IProp$=IProp$+App_EZ_DChar$
        END IF
    NEXT I&
    FUNCTION=IText$
END FUNCTION

SUB ZDrawItemOD (BYVAL FormName$, BYVAL CID&, CVal&, IFont&, IText$, ImgList&, ImgN&, IProp$, BYVAL IType&)
    LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&, hImgList&, ImgX&, ImgY&
    LOCAL AX1&, AY1&, TopColor&, FG&, BG&, BG2&, NW!, NH!, BW&, BW2&, IX&, IY&, CFlag&, X0&, CBG&, ImgSize&
    LOCAL BFlag& , BG3&, XFlag&, GFlag&, LBW&, BTint&, GDirFlag&, BG4&, RFlag&, MText2$, Offset&, CLWidth&
    LOCAL X1&, Y1&, Item1&, IsEdit&, BXFlag&, FntFlag&, Font2&, FontFace$, FontSize!, FontProp$, P&, hTmpDC&, YI!
    LOCAL LVSubItem&, LVLastItem&, LVText$, LVX1&, LVX2&, LVCW&, LVIProp$, LVEXS&, LVImgList&, Tmp$, LNC& ', GridFlag&
    LOCAL LastImage&, LVColW$
    IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
        EZ_SaveState
        App_ExtraFontAFlag&=1
        IF IType&=4 THEN ' listview
            LVSubItem&=0
            LVLastItem&=App_ODListviewColumns&-1
            EZ_GetODItem CVal&, X1&, Y1&, Item1&, IsEdit&
            LVIProp$=IProp$
            LVText$=ZGetODLVData(FormName$, CID&, Item1&, LVIProp$, LVColW$)   ' delineated list
            LVX1&=0
            LVX2&=X2&
            LVEXS&=EZ_SendMessageR(FormName$, CID&, %LVM_GETEXTENDEDLISTVIEWSTYLE,0,0)
        END IF
        ImgSize&=0
        LVImgList&=ImgList&
        IF ImgList&<>0 THEN
            hImgList&=EZ_ImgListHandle(ImgList&)
            IF hImgList&<>0 THEN     ' image list exists
                IF ImageList_GetIconSize(hImgList&, ImgX&, ImgY&) THEN
                    ImgSize&=MAX(ImgX&,ImgY&)
                END IF
                LastImage&=ImageList_GetImageCount&(hImgList&)
            END IF
        END IF

        StartDrawLoop:


        IProp$=UCASE$(IProp$)
        Offset&=4+(TALLY(IProp$, "+")*8)
        SELECT CASE AS LONG IType&
            CASE 1  ' menus
                X1&=0
                Y1&=0
            CASE 2,3    ' listbox and combobox
                EZ_GetODItem CVal&, X1&, Y1&, Item1&, IsEdit&
                IF Item1&>=0 THEN
                    IText$=EZ_GetItemText(FormName$, CID&, Item1&)
                ELSE
                    IText$=EZ_GetText(FormName$, CID&)
                END IF
                IF INSTR(IProp$,"X") THEN
                    IsChk&=IsSel&
                    IsSel&=0
                END IF
                IF ImgList&>0 THEN
                    ImgN&=VAL(ZGetImgNumText(IText$,0))
                    IF ImgN&=-1 THEN ImgN&=0
                    IText$=ZGetImgNumText(IText$,1)
                END IF
            CASE 4  ' listview
                IsChk&=0
                ImgList&=LVImgList&
                IText$=PARSE$(LVText$, App_EZ_DChar$,LVSubItem&+1)
                IProp$=PARSE$(LVIProp$,App_EZ_DChar$,LVSubItem&+1)
                Tmp$=ZGetImgNumText(IText$,0)
                SELECT CASE AS CONST$ UCASE$(Tmp$)
                    CASE "X"
                        ImgList&=0
                        IsChk&=1
                    CASE "_"
                        ImgList&=0
                        IsChk&=0
                    CASE ELSE
                        ImgN&=VAL(Tmp$)
                        IF ImgN&<=-1 THEN
                            ImgList&=0
                        END IF
                END SELECT
                IText$=ZGetImgNumText(IText$,1)
                LVCW&=VAL(PARSE$(LVColW$,App_EZ_DChar$,LVSubItem&+1))
                X1&=LVX1&
                LVX1&=LVX1&+LVCW&
                X2&=LVX1&-1
                IF X2&>LVX2& THEN X2&=LVX2&
                BXFlag&=0
                RFlag&=0
                MText2$=""
                CFlag&=0
                BFlag&=0
                FntFlag&=0
                GFlag&=0
                GDirFlag&=0
                XFlag&=0
            CASE ELSE
                X1&=0
                Y1&=0
        END SELECT
        IF ImgN&>LastImage& THEN ImgN&=LastImage&
        IF INSTR(IProp$,"-") THEN BXFlag&=1
        RFlag&=INSTR(IText$,"<R>")
        IF RFlag&>0 THEN
            MText2$=MID$(IText$,RFlag&+3)
            IText$=LEFT$(IText$,RFlag&-1)
        END IF
        IF INSTR(IProp$,"C") THEN CFlag&=1
        IF INSTR(IProp$,"B") THEN BFlag&=1
        IF INSTR(IProp$,"F") THEN
            FntFlag&=1
        END IF
        IF INSTR(IProp$,"G") THEN
            BFlag&=1
            GFlag&=1
            GDirFlag&=5
            IF INSTR(IProp$,">") THEN GDirFlag&=1
            IF INSTR(IProp$,"<") THEN GDirFlag&=0
        END IF
        BTint&=INSTR(IProp$, ANY "01234567")
        IF BTint&>0 THEN
            BTint&=VAL(MID$(IProp$,BTint&,1))
        ELSE
            BTint&=-1
        END IF
        IF INSTR(IProp$,"X") THEN XFlag&=1
        EZ_GetTextSize IFont&, IText$, NW!, NH!,10  ' mode 10 same as mode 0 but no space added

        IF INSTR(IProp$, ANY "BGX")<>0 OR ImgList&>0 THEN
            BW&=NH!*1.5
            CLWidth&=2
        ELSE
            BW&=NH!*.25
            CLWidth&=12
        END IF
        LBW&=BW&
        BW2&=BW&/2
        IF INSTR(IProp$,"W") THEN
            LBW&=2*LBW&
        END IF
        AX1&=X1&+LBW&+Offset&
        X0&=AX1&
        IF CFlag& THEN AX1&=AX1&+((CLWidth&+1)*BW&)
        AY1&=Y1&
        TopColor& = App_TopColor&
        App_ExtraColorAFlag&=1
        IF FntFlag& THEN
            Font2&=App_TopFont&
            P&=INSTR(IText$,",")
            FontSize!=0
            FontProp$=""
            FontFace$=IText$
            IF P&<>0 THEN
                FontFace$=LEFT$(IText$,P&-1)
                IText$=MID$(IText$,P&+1)
                P&=INSTR(IText$,",")
                IF P&<>0 THEN
                    FontSize!=VAL(LEFT$(IText$,P&-1))
                    IText$=MID$(IText$,P&+1)
                    P&=INSTR(IText$,",")
                    IF P&<>0 THEN
                        FontProp$=IText$
                    END IF
                END IF
            END IF
            IF FontSize!<=0 THEN    ' calculate font size
                P&=ABS(Y2&-Y1&)
                hTmpDC& = GetDC(%HWND_DESKTOP)
                YI!=GetDeviceCaps(hTmpDC&, %LOGPIXELSY) ' Pixels per Inch
                IF YI!=0 THEN YI!=1
                ReleaseDC %HWND_DESKTOP, hTmpDC&
                FontSize!=(P&/YI!)*72
            END IF
            FontProp$=FontProp$+"A"
            EZ_DefFont Font2&, FontFace$, FontSize!, FontProp$
            IText$=FontFace$
        END IF
        FG&=TopColor&
        BG&=FG&+1
        BG2&=FG&+2
        BG3&=FG&+3
        BG4&=FG&+4
        CBG&=FG&+5
        LNC&=FG&+6
        IF CFlag& THEN
            EZ_DefColorL CBG&,VAL(ZGetColorText(IText$, 0))
            IText$=ZGetColorText(IText$, 1)
        ELSE
            EZ_DefColorL CBG&,0
        END IF
        EZ_DefColorL BG4&, RGB(255,255,255)
        SELECT CASE AS LONG BTint&
            CASE 0
                EZ_DefColorL BG2&, RGB(164,164,164)
                EZ_DefColorL BG3&, RGB(0,0,0)
            CASE 1
                EZ_DefColorL BG2&, RGB(128,160,255)
                EZ_DefColorL BG3&, RGB(0,0,128)
            CASE 2
                EZ_DefColorL BG2&, RGB(160,255,160)
                EZ_DefColorL BG3&, RGB(0,128,0)
            CASE 3
                EZ_DefColorL BG2&, RGB(160,255,255)
                EZ_DefColorL BG3&, RGB(0,128,128)
            CASE 4
                EZ_DefColorL BG2&, RGB(255,160,160)
                EZ_DefColorL BG3&, RGB(196,0,0)
            CASE 5
                EZ_DefColorL BG2&, RGB(255,160,255)
                EZ_DefColorL BG3&, RGB(128,0,128)
            CASE 6
                EZ_DefColorL BG2&, RGB(255,255,160)
                EZ_DefColorL BG3&, RGB(128,64,0)
            CASE 7
                IF GFlag& THEN
                    EZ_DefColorL BG2&, RGB(255,255,255)
                ELSE
                    EZ_DefColorL BG2&, RGB(212,212,212)
                END IF
                EZ_DefColorL BG3&, RGB(196,196,196)
            CASE ELSE
                EZ_DefColorL BG2&, GetSysColor(%COLOR_3DFACE)
                EZ_DefColorL BG3&, GetSysColor(%COLOR_3DSHADOW)
        END SELECT
        EZ_DefColorL LNC&, GetSysColor(%COLOR_3DSHADOW)
        IF IsSel& THEN
            IF IsDis& THEN
                EZ_DefColorL FG&, GetSysColor(%COLOR_GRAYTEXT)
            ELSE
                EZ_DefColorL FG&, GetSysColor(%COLOR_HIGHLIGHTTEXT)
            END IF
            EZ_DefColorL BG&, GetSysColor(%COLOR_HIGHLIGHT)
        ELSE
            IF IsDis& THEN
                EZ_DefColorL FG&, GetSysColor(%COLOR_GRAYTEXT)
            ELSE
                EZ_DefColorL FG&, GetSysColor(%COLOR_MENUTEXT)
            END IF
            EZ_DefColorL BG&, GetSysColor(%COLOR_MENU)
        END IF
        EZ_Color FG&, BG&
        EZ_DCDraw hMyDC&, %EZ_FILL,X1&,Y1&, X2&, Y2&,0,1
        IF BXFlag& THEN
            EZ_Color LNC&, LNC&
            EZ_DCDraw hMyDC&, %EZ_LINE,X1&,Y2&, X2&, Y2&,1,0
        END IF
        IF CFlag& THEN
            EZ_Color 0,CBG&
            EZ_DCDraw hMyDC&, %EZ_RECT, X0&+2, AY1&+2,X0&+(CLWidth&*BW&), Y2&-2,1,1
        END IF
        IF BFlag& THEN
            IF IsSel&=0 THEN
                IF GFlag& THEN
                    EZ_Color BG2&, BG3&
                    EZ_DCDrawGradient hMyDC&,X1&, Y1&,X1&+LBW&, Y2&,GDirFlag&
                ELSE
                    EZ_Color 0,BG2&
                    EZ_DCDraw hMyDC&, %EZ_FILL, X1&, Y1&,X1&+LBW&, Y2&,0,1
                END IF
            ELSE
                IF GFlag& THEN
                    EZ_Color BG4&, BG&
                    IF GDirFlag&=5 THEN
                        EZ_DCDrawGradient hMyDC&,X1&, Y1&,X1&+LBW&, Y2&,GDirFlag&
                    END IF
                END IF
            END IF
        END IF
        EZ_Color FG&, BG&
        IF FntFlag&<>0 AND RFlag&=0 THEN
            EZ_UseFont Font2&
        ELSE
            EZ_UseFont IFont&
        END IF
        EZ_SetPrintFormat 2, X2&-BW2&, Y2&, %EZ_VCenter, 0
        EZ_DCPrint hMyDC&, AX1&,AY1&, IText$
        IF RFlag& THEN
            IF FntFlag& THEN
                EZ_UseFont Font2&
            ELSE
                EZ_UseFont IFont&
            END IF
            EZ_SetPrintFormat 2, X2&-BW2&, Y2&, %EZ_RIGHT OR %EZ_VCenter, 0
            EZ_DCPrint hMyDC&, AX1&,AY1&, MText2$
        END IF
        EZ_SetPrintFormat 0,0,0,0,0
        IF ImgList&<>0 THEN
            IF EZ_ImgListHandle(ImgList&)=0 THEN ImgList&=0
        END IF
        IF ImgList&=0 THEN
            IF XFlag& THEN
                IF IsChk& THEN
                    EZ_DCDraw hMyDC&, %EZ_CHECK_1,X1&+1,Y1&+1,X1&+LBW&-1,Y2-1&,0,0
                ELSE
                    EZ_DCDraw hMyDC&, %EZ_CHECK_0,X1&+1,Y1&+1,X1&+LBW&-1,Y2&-1,0,0
                END IF
            ELSE
                IF IsChk& THEN
                    EZ_DCDraw hMyDC&, %EZ_MCHECK,X1&+1,Y1&+1,X1&+LBW&-1,Y2&-1,0,0
                    IF IsSel=0 AND BFlag&<>0 THEN
                        IF GFlag&=0 THEN
                            EZ_Color BG2&, BG2&
                            EZ_DCDraw hMyDC&, %EZ_RECT, X1&,Y1&,X1&+LBW&,Y2&,1,0
                        END IF
                        EZ_Color BG3&, BG3&
                        EZ_DCDraw hMyDC&, %EZ_RECT, X1&+1,Y1&+1,X1&+LBW&-1,Y2&-1,1,0
                    ELSE
                        EZ_Color BG&, BG&
                        EZ_DCDraw hMyDC&, %EZ_RECT, X1&,Y1&,X1&+LBW&,Y2&,2,0
                    END IF
                END IF
            END IF
        ELSE
            IF IsChk& THEN
                ImgN&=ImgN&+1    ' use next image
                IF ImgN&>LastImage& THEN ImgN&=LastImage&
            END IF
            IX&=X1&+((LBW&-ImgSize&)/2)
            IY&=Y1&+(((Y2&-Y1&)-ImgSize&)/2)
            EZ_DCDrawImage hMyDC&,IX&,IY&, ImgList&, ImgN&, 0
        END IF
        EZ_EndOwnerDraw
        EZ_FreeColor FG&
        EZ_FreeColor BG&
        EZ_FreeColor BG2&
        EZ_FreeColor BG3&
        EZ_FreeColor BG4&
        EZ_FreeColor CBG&
        EZ_FreeColor LNC&
        IF FntFlag& THEN
            EZ_FreeFont Font2&
        END IF
        App_ExtraColorAFlag&=0
        App_ExtraFontAFlag&=0
        IF IType&=4 THEN ' listview
            LVSubItem&=LVSubItem&+1
            IF LVSubItem&<=LVLastItem& THEN GOTO StartDrawLoop
        END IF
        EZ_RestoreState
    END IF
END SUB


' ------------------------------------------------------------------------

GLOBAL App_BGD_hWnd&
GLOBAL App_BGD_Color1&
GLOBAL App_BGD_Color2&
GLOBAL App_BGD_DProp$

SUB EZ_DefTopHalfBGDraw(BYVAL FormName$, BYVAL IDNum&, BYVAL Color1&, BYVAL Color2&, BYVAL DProp$) EXPORT10
     LOCAL hWnd&
     hWnd&=ezHandle(FormName$,IDNum&,1)
     IF hWnd&<>0 THEN
          App_BGD_hWnd&=hWnd&
          App_BGD_Color1&=Color1&
          App_BGD_Color2&=Color2&
          App_BGD_DProp$=DProp$
     END IF
END SUB

SUB EZ_DrawBG(BYVAL CVal&, Cancel&, BYVAL FGC&, BYVAL BGC&, BYVAL DProp$) EXPORT10
     LOCAL hDC&, X2&, Y2&, Y1&
     DProp$=UCASE$(DProp$)
     EZ_SaveState
     IF EZ_StartEraseBG(CVal&, hDC&, X2&, Y2&) THEN
          IF App_BGD_hWnd&<>0 THEN
               Y1&=(Y2&+1)\2
               SELECT CASE zGetClass(App_BGD_hWnd&)
                    CASE "SYSTABCONTROL32"   ' Tab control
                         LOCAL CT&, R AS RECT, I&
                         Y1&=0
                         CT&=SendMessage(App_BGD_hWnd&, %TCM_GETITEMCOUNT,0,0)
                         IF CT&>=1 THEN
                              FOR I&=0 TO (CT&-1)
                                   IF SendMessage(App_BGD_hWnd&, %TCM_GETITEMRECT, I&, VARPTR(R))<>0 THEN
                                        IF R.nBottom>Y1& THEN Y1&=R.nBottom
                                   END IF
                              NEXT I&
                              IF Y1&<>0 THEN Y1&=Y1&+1
                         END IF
                    CASE ELSE
               END SELECT
               IF Y1&>0 THEN ZDraw_ODBG hDC&,0,0,X2&,Y1&-1,App_BGD_Color1&, App_BGD_Color2&, App_BGD_DProp$
               ZDraw_ODBG hDC&,0,Y1&,X2&,Y2&,FGC&, BGC&, DProp$
          ELSE
               ZDraw_ODBG hDC&,0,0,X2&,Y2&,FGC&, BGC&, DProp$
          END IF
          EZ_EndEraseBG Cancel&
     END IF
     EZ_RestoreState
     App_BGD_hWnd&=0
     App_BGD_Color1&=0
     App_BGD_Color2&=0
     App_BGD_DProp$=""
END SUB

' ------------------------------------------------------------------------

SUB zGetTextSize(BYVAL hDC&, BYVAL FontNum&, T$, TW&, TH&)
    LOCAL hFont&, W!,H!
    W!=0
    H!=0
    IF (FontNum&>=0) AND (FontNum&<=UBOUND(AppFont)) THEN
        hFont&=AppFont(FontNum&)
        IF hFont&<>0 THEN
            EZ_GetAPITextSize hDC&, hFont&, T$, W!, H!, 0
        END IF
    END IF
    TW&=W!
    TH&=H!
END SUB

SUB EZ_DrawTab(BYVAL CVal&, BYVAL FGC&, BYVAL BGC&, BYVAL TXC&, BYVAL FntNum&, BYVAL TabText$, BYVAL DFlag&, BYVAL DProp$) EXPORT10
     LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&, ShadowFlag&, TW&,TH&
     LOCAL T$,  X1&, Y1&, Item1&, IsEdit&, ShadowL&, ShadowD&, ShadowT&, XO&,YO&, WFlag&
     EZ_SaveState
     IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
          EZ_GetODItem CVal&, X1&, Y1&, Item1&, IsEdit&
          IF Item1&>=0 THEN
               ShadowFlag&=0
               IF INSTR(DProp$, "{S}") THEN
                    DProp$=REMOVE$(DProp$,"{S}")
                    ShadowFlag&=1
               END IF
               IF INSTR(TabText$, "{S}") THEN
                    TabText$=REMOVE$(TabText$,"{S}")
                    ShadowFlag&=1
               END IF
               IF ShadowFlag& THEN
                    IF BGC&>=-1 THEN
                         App_ExtraColorAFlag&=1
                         ShadowL&=App_TopColor&+1
                         ShadowD&=App_TopColor&+2
                         ShadowT&=App_TopColor&+3
                         IF TXC&=15 THEN
                              WFlag&=1
                         ELSE
                              WFlag&=0
                         END IF
                         EZ_DefColorL ShadowL&,EZ_AverageColor(EZ_AverageColor(EZ_AverageColor(EZ_ColorVal(BGC&,0),RGB(255,255,255)),RGB(255,255,255)),RGB(255,255,255))
                         EZ_DefColorL ShadowD&,EZ_AverageColor(EZ_AverageColor(EZ_AverageColor(EZ_ColorVal(BGC&,0),RGB(0,0,0)),RGB(0,0,0)),RGB(0,0,0))
                         EZ_DefColorL ShadowT&,EZ_ColorVal(TXC&,1)

                         XO&=1
                         YO&=1
                         TXC&=ShadowT&
                    ELSE
                         ShadowFlag&=0
                    END IF
               END IF
               ZDraw_ODBG hMyDC&, X1&,Y1&,X2&,Y2&,FGC&, BGC&, DProp$
               EZ_Color FGC&, BGC&
               IF IsEdit&<>0 AND IsFoc&<>0 THEN
                    EZ_Color 0,0
                    EZ_DCDraw  hMyDC&, %EZ_RECT, X1&+1, Y1&+1, X2-1&, Y2&-1, 1,0
               END IF
               EZ_UseFont FntNum&
               T$=PARSE$(TabText$, App_EZ_DChar$, Item1&+1)

               IF DFlag&=1 THEN
                    IF ShadowFlag& THEN
                         IF WFlag&=1 THEN
                              EZ_Color ShadowD&, BGC&
                              EZ_DCPrintVText hMyDC&, T$, X1&, Y1&, X2&-XO&, Y2&-YO&, 0
                         ELSE
                              EZ_Color ShadowL&, BGC&
                              EZ_DCPrintVText hMyDC&, T$, X1&+XO&, Y1&+YO&, X2&, Y2&, 0
                         END IF
                    END IF
                    EZ_Color TXC&, BGC&
                    EZ_DCPrintVText hMyDC&, T$, X1&, Y1&, X2&, Y2&, 0
               ELSEIF DFlag&=2 THEN
                    IF ShadowFlag& THEN
                         IF WFlag&=1 THEN
                              EZ_Color ShadowD&, BGC&
                              EZ_DCPrintVText hMyDC&, T$, X1&, Y1&, X2&-XO&, Y2&-YO&, 1
                         ELSE
                              EZ_Color ShadowL&, BGC&
                              EZ_DCPrintVText hMyDC&, T$, X1&+XO&, Y1&+YO&, X2&, Y2&, 1
                         END IF
                    END IF
                    EZ_Color TXC&, BGC&
                    EZ_DCPrintVText hMyDC&, T$, X1&, Y1&, X2&, Y2&, 1
               ELSE
                    IF ShadowFlag& THEN
                         EZ_SetPrintFormat 0,0,0,0,0
                         zGetTextSize hMyDC&, FntNum&, T$,TW&,TH&
                         X1&=X1&+(((1+X2&-X1&)-TW&)/2)
                         Y1&=Y1&+(((1+Y2&-Y1&)-TH&)/2)
                         IF WFlag&=1 THEN
                              EZ_Color ShadowD&, -1    ' -1 makes BG transparent
                              EZ_DCPrint hMyDC&, X1&-XO&,Y1&-YO&, T$
                         ELSE
                              EZ_Color ShadowL&, -1
                              EZ_DCPrint hMyDC&, X1&+XO&,Y1&+YO&, T$
                         END IF
                         EZ_Color TXC&, -1
                         EZ_DCPrint hMyDC&, X1&,Y1&, T$


'                         EZ_SetPrintFormat 2, X2&-XO&, Y2&-YO&, %EZ_Center OR %EZ_VCenter, 0
'                         EZ_Color ShadowD&, BGC&
'                         EZ_DCPrint hMyDC&, X1&,Y1&, T$
'                         EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
'                         EZ_Color ShadowL&, BGC&
'                         EZ_DCPrint hMyDC&, X1&+XO&,Y1&+YO&, T$
'                         EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
'                         EZ_Color TXC&, BGC&
'                         EZ_DCPrint hMyDC&, X1&,Y1&, T$
                    ELSE
                         EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
                         EZ_Color TXC&, -1
                         EZ_DCPrint hMyDC&, X1&,Y1&, T$
                    END IF
                    EZ_SetPrintFormat 0,0,0,0,0
               END IF
               IF ShadowFlag& THEN
                    EZ_FreeColor ShadowL&
                    EZ_FreeColor ShadowD&
                    EZ_FreeColor ShadowT&
                    App_ExtraColorAFlag&=0
               END IF
          END IF
          EZ_EndOwnerDraw
     END IF
     EZ_RestoreState
END SUB

' ------------------------------------------------------------------------

SUB EZ_DrawLabel(BYVAL CVal&, BYVAL FG&, BYVAL BG&, BYVAL T$) EXPORT10
     LOCAL hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&, GFlag&
     IF EZ_StartOwnerDraw(CVal&, hMyDC&, X2&, Y2&, IsSel&, IsGry&, IsDis&, IsChk&, IsFoc&, IsDef&) THEN
          EZ_SaveState
          EZ_Color FG&, BG&
'          EZ_UseFont 4
          EZ_UseFont EZ_ODIFont
          GFlag&=EZ_CheckGradMacro(T$)
          IF INSTR(T$,App_EZ_DChar$) THEN REPLACE App_EZ_DChar$ WITH CHR$(13)+CHR$(10) IN T$
          IF GFlag&=0 THEN
               EZ_DCDraw  hMyDC&, %EZ_FILL, 0, 0, X2&, Y2&, 1, 1
          ELSE
               EZ_DCDrawGradMacro hMyDC&, 0, 0, X2&, Y2&
          END IF
          EZ_Color FG&, BG&
          EZ_SetPrintFormat 2, X2&, Y2&, %EZ_Center OR %EZ_VCenter, 0
          EZ_DCPrint hMyDC&,0,0,T$
          EZ_SetPrintFormat 0,0,0,0,0
          EZ_RestoreState
          EZ_EndOwnerDraw
     END IF
END SUB

' ------------------------------------------------------------------------

FUNCTION EZ_GetLVItemText(BYVAL FormName$, BYVAL IDNum&, BYVAL LVRow&, BYVAL LVCol&) EXPORT10 AS STRING
    LOCAL OKFlag&, IText$, IPictNum&,LVProp$, RV$
    OKFlag& = EZ_GetLVItem(FormName$, IDNum&, IText$, IPictNum&,LVRow&,LVCol&, LVProp$)
    IF OKFlag& THEN RV$=IText$
    FUNCTION=RV$
END FUNCTION

' ------------------------------------------------------------------------

SUB EZ_SetLVItemText(BYVAL FormName$, BYVAL IDNum&, BYVAL LVRow&, BYVAL LVCol&, BYVAL LVText$) EXPORT10
    LOCAL OKFlag&, IText$, IPictNum&,LVProp$    ', RV$
    OKFlag& = EZ_GetLVItem(FormName$, IDNum&, IText$, IPictNum&,LVRow&,LVCol&, LVProp$)
    IF OKFlag& THEN
        EZ_SetLVItem FormName$, IDNum&, LVText$, IPictNum&,LVRow&,LVCol&, "{T}"
    END IF
END SUB

' ------------------------------------------------------------------------

FUNCTION EZ_ToggleCheckMacro(BYVAL IText$) EXPORT10 AS STRING
    LOCAL P&
    P&=INSTR(IText$,"{X}")
    IF P&<>0 THEN
        REPLACE "{X}" WITH "{_}" IN IText$
    ELSE
        P&=INSTR(IText$,"{_}")
        IF P&<>0 THEN
            REPLACE "{_}" WITH "{X}" IN IText$
        END IF
    END IF
    FUNCTION=IText$
END FUNCTION

' ------------------------------------------------------------------------

FUNCTION EZ_ToggleImageMacro(BYVAL IText$, BYVAL IMin&, BYVAL IMax&, BYVAL DFlag&) EXPORT10 AS STRING
    LOCAL P1&, P2&, M1$, M2$
    P1&=INSTR(IText$,"{")
    IF P1&>0 THEN
        P2&=INSTR(P1&,IText$, "}")
        IF P2&>P1& THEN
            M1$=MID$(IText$,P1&,(P2&-P1&)+1)
            P1&=VAL(REMOVE$(M1$, ANY "{ }"))
            P1&=P1&+DFlag&
            IF P1&<IMin& THEN P1&=IMax&
            IF P1&>IMax& THEN P1&=IMin&
            M2$="{"+TRIM$(STR$(P1&))+"}"
            IF M1$<>M2$ THEN REPLACE M1$ WITH M2$ IN IText$
        END IF
    END IF
    FUNCTION=IText$
END FUNCTION

' ------------------------------------------------------------------------

SUB EZ_SizeMenu (BYVAL CVal&, BYVAL MFont&, BYVAL MText$, BYVAL MProp$) EXPORT10
    ZSizeItem CVal&, MFont&, MText$, MProp$, 1
END SUB

' ------------------------------------------------------------------------


' ------------------------------------------------------------------------
' properties:   (note: text supports <R> macro)
' C - Show Color Block (put color in <> in item text.  ie. <&HFF00FF> or <#23> for EZGUI numbers)
' B - Show Side Bar
' G - Show Gradient Side Bar (default 3D)
' > - Make Gradient Left to Right
' < - Make Gradient Right to Left
' 0 to 7 - Define Color (Based on EZGUI colors)
' X - Display CheckBox
' W - Make Side Bar Wide
' F - Text is Font Name. Draw text in that font.  ie. "Arial|Arial Black" or "Arial,10,V|Arial Black,10,V"
' + - add 8 pixels to margin between Bar and Text (each + character adds 8 more pixels) (ie. "++")
' - - Add Line below item
'
'     Image Numbers are in {}   (ie.  {2})
' <R>  Macro right justfies text after it (affects fonts since the text after used font)
' ------------------------------------------------------------------------

SUB EZ_DrawMenu (BYVAL CVal&, BYVAL MFont&, BYVAL MText$, BYVAL ImgList&, BYVAL ImgN&, BYVAL MProp$) EXPORT10
    ZDrawItemOD "", 0, CVal&, MFont&, MText$, ImgList&, ImgN&, MProp$, 1
END SUB

' ------------------------------------------------------------------------

' ImgList image indexes are put into text fields using {} characters. (ie.   {2} is index 2)
' checkboxes are {X} or {_}
SUB EZ_DrawListBox (BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL MFont&, BYVAL ImgList&, BYVAL MProp$) EXPORT10
    LOCAL MText$, ImgN&
    ImgN&=0
    ZDrawItemOD FormName$, CID&, CVal&, MFont&, MText$, ImgList&, ImgN&, MProp$, 2
END SUB

' ------------------------------------------------------------------------

SUB EZ_SizeListBox (BYVAL CVal&, BYVAL MFont&) EXPORT10
    LOCAL MText$, MProp$
    ZSizeItem CVal&, MFont&, "X", MProp$, 2
END SUB

' ------------------------------------------------------------------------

' ImgList image indexes are put into text fields using {} characters. (ie.   {2} is index 2)
SUB EZ_DrawComboBox (BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL MFont&, BYVAL ImgList&, BYVAL MProp$) EXPORT10
    LOCAL MText$, ImgN&
    ImgN&=-1
    ZDrawItemOD FormName$, CID&, CVal&, MFont&, MText$, ImgList&, ImgN&, MProp$, 3
END SUB

' ------------------------------------------------------------------------

SUB EZ_SizeComboBox (BYVAL CVal&, BYVAL MFont&) EXPORT10
    LOCAL MText$, MProp$
    ZSizeItem CVal&, MFont&, "X", MProp$, 3
END SUB

' ------------------------------------------------------------------------

SUB EZ_DrawListview (BYVAL FormName$, BYVAL CID&, BYVAL CVal&, BYVAL MFont&, BYVAL ImgList&, BYVAL MProp$, BYVAL Columns&) EXPORT10
    LOCAL IText$, ImgN&
    App_ODListviewColumns&=Columns&
    ImgN&=-1
    IText$=""
    ZDrawItemOD FormName$, CID&, CVal&, MFont&, IText$, ImgList&, ImgN&, MProp$, 4
END SUB

' ------------------------------------------------------------------------

SUB EZ_SizeListview (BYVAL CVal&, BYVAL MFont&) EXPORT10
    LOCAL MText$, MProp$
    ZSizeItem CVal&, MFont&, "X", MProp$, 4
END SUB

' ---------------------------------------------------------------------





SUB INTERNAL_Events(FormName$, CID&, CMsg&, CVal&, Cancel&)
    LOCAL N&

    SELECT CASE AS CONST$ FormName$
        CASE "{MSGBOX}"
            GOSUB DoOtherForms
            IF Cancel&<>0 THEN EXIT SUB
            IF CID&=%EZ_Window THEN
                IF CMsg&=%EZ_PaintBG THEN
                    MSGBOX_EraseBG CVal&, Cancel&
                END IF
            END IF
            IF CID&=2 THEN  ' cancel
                IF MBOX_AllowESC&<>0 THEN
                    IF CMsg&=%EZ_Click THEN
                        MBOX_Return&=-1
                        EZ_UnloadForm "{MSGBOX}"
                    END IF
                END IF
            END IF
            IF CID&>=200 AND CID&<=202 THEN
                IF CMsg&=%EZ_Click THEN
                    MBOX_Return&=CID&-199
                    EZ_UnloadForm "{MSGBOX}"
                END IF
                IF CMsg&=%EZ_OwnerDraw THEN
                    IF MBOX_BStyle&=1 THEN
                        EZ_Draw3DButton "{MSGBOX}", CID&, CVal&, MBOX_ODColor4&, MBOX_ODTColor&, MBOX_Font2&
                    END IF
                END IF
            END IF
            IF CID&=500 THEN
                IF CMsg&=%EZ_Post THEN
                    FOR N&=1 TO CVal&
                        EZ_SetNextTab "{MSGBOX}"
                    NEXT N&
                END IF
            END IF
        CASE ELSE
            GOSUB DoOtherForms
    END SELECT
    EXIT SUB

    DoOtherForms:
    IF INTERNAL_ADD2<>0 THEN
        CALL DWORD INTERNAL_ADD2 USING EZ_EventsX(FormName$, CID&, CMsg&, CVal&, Cancel&)
    END IF
    RETURN

END SUB

' -------------------------------------------------------------------------------------------

FUNCTION EZ_GetOS(BYVAL Mode&) EXPORT10 AS LONG
LOCAL RV&, OSI AS OSVERSIONINFO, X&
RV&=0
OSI.dwOSVersionInfoSize=SIZEOF(OSI)
IF GetVersionEx(OSI)<>0 THEN
    SELECT CASE AS LONG Mode&
        CASE 1  ' platform  1=95, 2=NT
            RV&=OSI.dwPlatformId
        CASE ELSE
            X&=OSI.dwMinorVersion MOD 100
            RV&=(OSI.dwMajorVersion*100)+X&
    END SELECT
END IF
FUNCTION=RV&
END FUNCTION

FUNCTION EZ_IsProcessReady(BYVAL hProcessID&) EXPORT10 AS LONG
     LOCAL RV&, hProcess&
     RV&=0
     IF hProcessID&<>0 THEN
          hProcess&=OpenProcess(%PROCESS_ALL_ACCESS, 0, hProcessID&)
          IF hProcess&<>0 THEN
               RV&=WaitForInputIdle(hProcess&, 5000)
               IF RV&=0 THEN RV&=1 ELSE RV&=-1
               CloseHandle hProcess&
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB ZFindModal(BYVAL hWnd&)
    LOCAL Msg AS tagMsg, OKFlag&
    DO
       IF PeekMessage(Msg,%NULL,0,0, %PM_REMOVE) THEN
           OKFlag&=0
           IF hWnd&=Msg.hwnd THEN
               OKFlag&=1
           ELSE
                ' test for child of dialog
                IF IsChild(hWnd&, Msg.hwnd) THEN
                    OKFlag&=1
                END IF
           END IF
           IF OKFlag& THEN
               IF App_UseIsDialogMessage& THEN
                   IF IsDialogMessage(hWnd&, Msg)=0 THEN
                       TranslateMessage Msg
                       DispatchMessage Msg
                   END IF
               ELSE
                   TranslateMessage Msg
                   DispatchMessage Msg
               END IF
           ELSE
               ZProcessMsg Msg
           END IF
       ELSE
           ' test and see if dlg still exists
           IF App_FindReplaceActive&=0 THEN EXIT DO
       END IF
    LOOP
    IF App_FindhParentClose&<>0 THEN
        PostMessage App_FindhParentClose&, %WM_CLOSE, 0,0
    END IF
END SUB

SUB EZ_FindTextDlg(BYVAL ParentForm$, BYVAL FText$, BYVAL RText$, BYVAL DProp$) EXPORT10
    LOCAL F AS FINDREPLACE
    LOCAL hWnd&, OFlag&, RFlag&, L&, P1&, P2&, UMW$, hFindWindow&
    IF App_FindReplaceActive&<>0 THEN EXIT SUB  ' don't allow multiple instances
    IF App_FindReplaceMsg&=0 THEN
        App_FindReplaceMsg&=RegisterWindowMessage($FINDMSGSTRING)
    END IF
    hWnd&=ezHandle(ParentForm$,0,1)
    L&=SIZEOF(App_FindBuffer)-1
    IF LEN(FText$)>L& THEN FText$=LEFT$(FText$,L&)
    L&=SIZEOF(App_ReplaceBuffer)-1
    IF LEN(RText$)>L& THEN RText$=LEFT$(RText$,L&)
    App_FindBuffer=FText$
    App_FindBufferStr$=FText$
    App_ReplaceBuffer=RText$
    App_ReplaceBufferStr$=RText$
    IF hWnd&<>0 THEN
        RFlag&=0
        DProp$=UCASE$(DProp$)
        IF INSTR(DProp$,"R") THEN RFlag&=1
        OFlag&=%FR_ENABLEHOOK
        IF INSTR(DProp$,"^")=0 THEN OFlag&=OFlag& OR %FR_DOWN
        IF INSTR(DProp$,"M") THEN OFlag&=OFlag& OR %FR_MATCHCASE
        IF INSTR(DProp$,"W") THEN OFlag&=OFlag& OR %FR_WHOLEWORD
        UMW$=""
        P1&=INSTR(DProp$,"{")
        IF P1&>0 THEN
            P2&=INSTR(P1&+1,DProp$,"}")
            IF P2&>0 THEN
                UMW$=MID$(DProp$,P1&+1, P2&-(P1&+1))
                UMW$=LEFT$(UMW$+"---",3)
                SELECT CASE AS CONST$ MID$(UMW$,1,1)
                    CASE "H"
                        OFlag&=OFlag& OR %FR_HIDEUPDOWN
                    CASE "D"
                        OFlag&=OFlag& OR %FR_NOUPDOWN
                    CASE ELSE
                END SELECT
                SELECT CASE AS CONST$ MID$(UMW$,2,1)
                    CASE "H"
                        OFlag&=OFlag& OR %FR_HIDEMATCHCASE
                    CASE "D"
                        OFlag&=OFlag& OR %FR_NOMATCHCASE
                    CASE ELSE
                END SELECT
                SELECT CASE AS CONST$ MID$(UMW$,3,1)
                    CASE "H"
                        OFlag&=OFlag& OR %FR_HIDEWHOLEWORD
                    CASE "D"
                        OFlag&=OFlag& OR %FR_NOWHOLEWORD
                    CASE ELSE
                END SELECT
            END IF
        END IF
        F.lStructSize=SIZEOF(F)
        F.hWndOwner=hWnd&
        F.hInstance=%NULL
        F.Flags=OFlag&
        F.lpstrFindWhat=VARPTR(App_FindBuffer)
        F.lpstrReplaceWith=VARPTR(App_ReplaceBuffer)
        F.wFindWhatLen=SIZEOF(App_FindBuffer)
        F.wReplaceWithLen=SIZEOF(App_ReplaceBuffer)
        F.lCustData=%NULL
        F.lpfnHook=CODEPTR(CustDlgProc)
        F.lpTemplateName=%NULL
        App_FindReplaceActive&=1
        App_FindMsgBoxStr$="Error !"
        App_FindMsgBoxCaption$="Find Dialog"
        App_CommonDlgInitType& =  7  ' "{FINDDLG}"
        App_SystemDlgFreeze=1
        IF RFlag& THEN
            hFindWindow&=ReplaceText(F)
        ELSE
            hFindWindow&=FindText(F)
        END IF
        App_CommonDlgInitType&=0
        App_CommonDlgHandle_FT& = 0
        IF hFindWindow&<>0 THEN
            App_FindhWnd&=hFindWindow&
            ZFindModal hFindWindow&
        END IF
        App_SystemDlgFreeze=0
        App_FindhWnd&=0
        App_FindMsgBoxStr$=""
        App_FindMsgBoxCaption$=""
        App_FindReplaceActive&=0
        App_FindhParentClose&=0
    END IF
END SUB

FUNCTION ZFindReplace(BYVAL hDlg AS LONG, BYVAL wParam AS LONG, BYVAL lParam AS LONG) AS LONG
    LOCAL Cancel&, CVal&, CMsg&, F AS FINDREPLACE PTR, Flag&, AFlag&
    F=lParam
    Flag&=@F.Flags
    AFlag&=Flag& AND &H78
    CVal&=Flag& AND &H07
    CMsg&=0
    IF @F.lpstrFindWhat<>VARPTR(App_FindBuffer) THEN
        IF @F.lpstrFindWhat<>0 THEN
            App_FindBuffer=PEEK$(@F.lpstrFindWhat,@F.wFindWhatLen)
        END IF
    END IF
    App_FindBufferStr$=App_FindBuffer
    IF @F.lpstrReplaceWith<>VARPTR(App_ReplaceBuffer) THEN
        IF @F.lpstrReplaceWith<>0 THEN
            App_ReplaceBuffer=PEEK$(@F.lpstrReplaceWith,@F.wReplaceWithLen)
        END IF
    END IF
    App_ReplaceBufferStr$=App_ReplaceBuffer
    SELECT CASE AS LONG AFlag&
        CASE %FR_DIALOGTERM     ' dialog terminates
            CMsg&=%EZ_FindDlgTerminate
            App_FindReplaceActive&=0    ' stops modal loop
        CASE %FR_FINDNEXT       ' Find Next Button clicked
            CMsg&=%EZ_FindDlgFindNext
        CASE %FR_REPLACE        ' Replace button clicked
            CMsg&=%EZ_FindDlgReplace
        CASE %FR_REPLACEALL     ' Replace All button clicked
            CMsg&=%EZ_FindDlgReplaceAll
        CASE ELSE
    END SELECT
    IF CMsg&<>0 THEN
        Cancel&=ProcessEZCommands(hDlg, CMsg&, 0, CVal&)
        IF AFlag&=%FR_DIALOGTERM THEN
            App_FindBufferStr$=""
            App_ReplaceBufferStr$=""
        ELSE
            IF Cancel& THEN     ' display message box
                MessageBox 0, BYVAL STRPTR(App_FindMsgBoxStr$),BYVAL STRPTR(App_FindMsgBoxCaption$), %MB_OK OR %MB_TASKMODAL OR %MB_TOPMOST
            END IF
        END IF
    END IF
    FUNCTION=0
END FUNCTION

SUB EZ_SetFindTextError(BYVAL EMsg$, BYVAL ECaption$) EXPORT10
    App_FindBufferStr$=EMsg$
    App_ReplaceBufferStr$=ECaption$
END SUB

FUNCTION EZ_GetFindText() EXPORT10 AS STRING
    FUNCTION=App_FindBufferStr$
END FUNCTION

FUNCTION EZ_GetReplaceText() EXPORT10 AS STRING
    FUNCTION=App_ReplaceBufferStr$
END FUNCTION

FUNCTION EZ_FindDlgVal(BYVAL CVal&, BYVAL DProp$) EXPORT10 AS LONG
    LOCAL RV&
    RV&=0
    DProp$=UCASE$(LEFT$(DProp$,1))
    IF DProp$="^" THEN
        IF (CVal& AND %FR_DOWN)=0 THEN RV&=1
    END IF
    IF DProp$="M" THEN
        IF (CVal& AND %FR_MATCHCASE) = %FR_MATCHCASE THEN RV&=1
    END IF
    IF DProp$="W" THEN
        IF (CVal& AND %FR_WHOLEWORD) = %FR_WHOLEWORD THEN RV&=1
    END IF
    FUNCTION=RV&
END FUNCTION

' -------------------------------------------------------------------------------------------
'            Child SubClass Routines
' -------------------------------------------------------------------------------------------

GLOBAL App_ChildSubClassAtom&

SUB ZSubClassChildren(BYVAL hWnd&)
    EnumChildWindows hWnd&, CODEPTR(ZChildrenSubclass), 0
END SUB

FUNCTION ZChildrenSubclass(BYVAL hChild&, BYVAL lParam&) AS LONG
    LOCAL OrigAddress&
    OrigAddress&=SetWindowLong(hChild&, %GWL_WNDPROC, BYVAL CODEPTR(ZChildSubClassProc))
    SetProp hChild&, BYVAL MAKLNG(App_ChildSubClassAtom&,0), OrigAddress&
    FUNCTION=1
END FUNCTION

SUB ZMakeSCAtom()
    LOCAL CN AS ASCIIZ*32
    CN="EZGUI_CHILD_SUBCLASS"+CHR$(0)
    App_ChildSubClassAtom&=GlobalAddAtom(CN)
END SUB

SUB ZDelSCAtom()
    GlobalDeleteAtom App_ChildSubClassAtom&
END SUB


FUNCTION ZChildSubClassProc(BYVAL hCtrl AS LONG, _
                       BYVAL Msg    AS LONG, _
                       BYVAL wParam AS LONG, _
                       BYVAL lParam AS LONG) AS LONG

    LOCAL OldAddress&   ', hWndP AS LONG
    OldAddress&=GetProp(hCtrl,BYVAL MAKLNG(App_ChildSubClassAtom&,0))
    IF OldAddress&=0 THEN
        FUNCTION=0
        EXIT FUNCTION
    END IF
    SELECT CASE AS LONG Msg
        CASE %WM_NCHITTEST
            IF App_EZ_SubClassMode&=1 THEN
'                IF App_EZ_SubClassStyle&<=3 THEN
                    FUNCTION=%HTTRANSPARENT
                    EXIT FUNCTION

'                END IF
            END IF
        CASE %WM_DESTROY
            RemoveProp hCtrl, BYVAL MAKLNG(App_ChildSubClassAtom&,0)
            SetWindowLong hCtrl, %GWL_WNDPROC, BYVAL OldAddress&
        CASE ELSE
    END SELECT
    FUNCTION=CallWindowProc(BYVAL OldAddress&, hCtrl, Msg, wParam, lParam)
END FUNCTION

' -------------------------------------------------------------------------------------------


GLOBAL App_CustomClassAtom() AS LONG
GLOBAL App_CustomClassAddr() AS DWORD
GLOBAL App_CustomClassName() AS STRING
GLOBAL App_CustomClassSuper() AS STRING
GLOBAL App_CustomClassEZPTR() AS LONG
GLOBAL App_CustomClassProps() AS STRING

' -------------------------------------------------------------------------------------------


SUB SetControlBlock(BYVAL hWnd AS LONG, D AS CDataInfo, BYVAL N&)
    LOCAL hData AS LONG, lpAddress AS LONG, A AS LONG
    IF N&=0 THEN A=App_CustomPrivateAtom1& ELSE A=App_CustomUserDataAtom1&
    IF IsWindow(hWnd) THEN
        hData=GetProp(hWnd,BYVAL MAKLNG(A,0))
        IF hData<>0 THEN
            GlobalFree hData
        END IF
        hData=GlobalAlloc(%GMEM_MOVEABLE, SIZEOF(D))
        lpAddress=GlobalLock(hData)
        MoveMemory lpAddress, VARPTR(D), SIZEOF(D)
        GlobalUnlock hData
        SetProp hWnd, BYVAL MAKLNG(A,0), hData
    END IF
END SUB

' -------------------------------------------------------------------------------------------


SUB zInitUserdata(BYVAL hCtrl&)
    LOCAL CData AS CDataInfo
    SetProp hCtrl&, BYVAL MAKLNG(App_CustomUserDataAtom1&,0), 0  ' for user instance data
    SetControlBlock hCtrl&, CData, %EZ_IsUserData
END SUB


SUB GetControlBlock(BYVAL hWnd AS LONG, D AS CDataInfo, BYVAL N&)
    LOCAL hData AS LONG, lpAddress AS LONG, A AS LONG
    LOCAL L&    ', P&
    IF N&=0 THEN A=App_CustomPrivateAtom1& ELSE A=App_CustomUserDataAtom1&
    IF IsWindow(hWnd) THEN
        hData=GetProp(hWnd,BYVAL MAKLNG(A,0))
        IF hData<>0 THEN
            lpAddress=GlobalLock(hData)
            L&=GlobalSize(hData)
            MoveMemory VARPTR(D),lpAddress, L&
            GlobalUnlock hData
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

SUB FreeControlBlock(BYVAL hWnd AS LONG, BYVAL N&)
    LOCAL hData AS LONG , A AS LONG
    IF N&=0 THEN A=App_CustomPrivateAtom1& ELSE A=App_CustomUserDataAtom1&
    IF IsWindow(hWnd) THEN
        hData=GetProp(hWnd,BYVAL MAKLNG(A,0))
        IF hData<>0 THEN
            GlobalFree hData
            SetProp hWnd, BYVAL MAKLNG(A,0), hData
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

FUNCTION RegisterCustomControlClass(BYVAL OClass$, BYVAL NClass$, CP AS DWORD) AS LONG
    LOCAL OCP AS DWORD
    IF OClass$<>"" THEN
        OCP= zRegisterSuperClass(OClass$, NClass$, 0, CP, 0,0,0,0)
    ELSE
        zRegisterClass NClass$, %CS_HREDRAW OR %CS_VREDRAW OR %CS_DBLCLKS, CP, 0,0,0,0
        OCP=CP
'                             sCN$, MyCN$, MyStyle&, CP, MyCExtra&, MyWExtra&, MyCursor&, MyhBrush&
    END IF
    FUNCTION=OCP
END FUNCTION

' -------------------------------------------------------------------------------------------

SUB UnRegisterCustomControlClass(BYVAL N&, BYVAL NClass$)
    zUnRegisterClass NClass$
END SUB

' -------------------------------------------------------------------------------------------

SUB InitCustomClass(BYVAL N&, BYVAL OClass$, BYVAL NClass$, BYVAL DProp$, BYVAL CP AS DWORD, BYVAL EZAddress AS DWORD)
    LOCAL CN AS ASCIIZ*32
    App_CustomClassAddr(N&)=RegisterCustomControlClass(OClass$, NClass$, CP)
    App_CustomClassAtom(N&)=App_RegisterClassAtom&   ' zRegisterClass fills in this global variable
    App_CustomClassName(N&)=NClass$
    App_CustomClassSuper(N&)=OClass$
    App_CustomClassEZPTR(N&)=EZAddress
    App_CustomClassProps(N&)=DProp$
END SUB

' -------------------------------------------------------------------------------------------
%PLB_Notify1    =   99

FUNCTION PropListChildWndProc(BYVAL hCtrl&, BYVAL Msg&, BYVAL wParam&, BYVAL lParam&) AS LONG
    LOCAL OldProc AS DWORD
    LOCAL LastIndex&, L&,T$, OKFlag&
    OldProc=GetProp(hCtrl&,BYVAL MAKLNG(AppControlGAtom4&,0))
    SELECT CASE AS LONG Msg&
        CASE %WM_SETFOCUS
            LastIndex&=GetSelListBoxVal(GetParent(hCtrl&))
            GOSUB SetLastIndex
            SendMessage GetParent(hCtrl&),%PLB_CHILDFOCUS, hCtrl&,LastIndex&
        CASE %WM_KILLFOCUS
            GOSUB GetLastIndex
            SendMessage GetParent(hCtrl&),%PLB_CHILDNOFOCUS, hCtrl&,LastIndex&
            LastIndex&=-1
            GOSUB SetLastIndex
        CASE %WM_KEYUP
            IF zGetClass(hCtrl&)="EDIT" THEN
                 SELECT CASE AS LONG wParam&
                     CASE 13
                         GOSUB GetLastIndex
                         SendMessage GetParent(hCtrl&),%PLB_CHILDRETURN, hCtrl&,LastIndex&
'                         SetFocus GetParent(hCtrl&)
'                         SendMessage GetParent(hCtrl&), %LB_SETCURSEL, LastIndex&,0
                     CASE 27
                         GOSUB GetLastIndex
                         SendMessage GetParent(hCtrl&),%PLB_CHILDESCAPE, hCtrl&,LastIndex&
                         SetFocus GetParent(hCtrl&)
                     CASE ELSE
                 END SELECT
            END IF
        CASE %WM_CHAR
             IF GetDlgCtrlID(hCtrl&)=102 THEN     ' numeric text only
                    L&=GetWindowTextLength(hCtrl&)
                    IF L&>0 THEN
                         T$=SPACE$(L&+1)
                         GetWindowText hCtrl&,BYVAL STRPTR(T$),L&+1
                         T$=LEFT$(T$,L&)
                    ELSE
                         T$=""
                    END IF
                    OKFlag&=0
                    SELECT CASE wParam&
                         CASE 48 TO 57  ' 0 to 9
                              OKFlag&=1
                         CASE 45   ' -
                              IF T$="" THEN OKFlag&=1
                         CASE 46   ' .
                              IF INSTR(T$,".")=0 THEN OKFlag&=1
                         CASE 8    ' backspace
                              OKFlag&=1
                         CASE ELSE
                    END SELECT
                    IF OKFlag&=0 THEN
                         FUNCTION=0
                         EXIT FUNCTION
                    END IF
             END IF
        CASE %WM_KEYDOWN
            IF zGetClass(hCtrl&)="EDIT" THEN
                 SELECT CASE AS LONG wParam&
                      CASE &H26&,&H28&       ' arrow Up and down
                         GOSUB GetLastIndex
                         SetFocus GetParent(hCtrl&)
                         SendMessage GetParent(hCtrl&), %LB_SETCURSEL, LastIndex&,0
                         PostMessage GetParent(hCtrl&), Msg&, wParam&,lParam&
                         FUNCTION=0
                         EXIT FUNCTION
                      CASE ELSE
                 END SELECT
            END IF
        CASE %WM_SHOWWINDOW
            IF lParam&=0 THEN   ' only process if showwindow called to show the window
                IF wParam&<>0 THEN
                    LastIndex&=GetSelListBoxVal(GetParent(hCtrl&))
                    GOSUB SetLastIndex
                    SendMessage GetParent(hCtrl&),%PLB_CHILDSHOW, hCtrl&,LastIndex&
                ELSE
                    GOSUB GetLastIndex
                    SendMessage GetParent(hCtrl&),%PLB_CHILDHIDE, hCtrl&,LastIndex&
                    LastIndex&=-1
                    GOSUB SetLastIndex
                END IF
            END IF
        CASE %WM_DESTROY
            RemoveProp hCtrl&,BYVAL MAKLNG(AppControlGAtom4&,0)
            RemoveProp hCtrl&,BYVAL MAKLNG(AppPropListAtom1&,0)
            SetWindowLong hCtrl&, %GWL_WNDPROC, OldProc
        CASE ELSE
    END SELECT
    FUNCTION=CallWindowProc(OldProc, hCtrl&, Msg&, wParam&, lParam&)
    EXIT FUNCTION

GetLastIndex:
    LastIndex&=GetProp(hCtrl&,BYVAL MAKLNG(AppPropListAtom1&,0))
RETURN

SetLastIndex:
    SetProp hCtrl&,BYVAL MAKLNG(AppPropListAtom1&,0),LastIndex&
RETURN

END FUNCTION

' -------------------------------------------------------------------------------------------
FUNCTION ZMakeChildCtrl(BYVAL hCtrl&, BYVAL CType&) AS LONG
    LOCAL WS&, EWS&, CName AS ASCIIZ*32, CText AS ASCIIZ*32, ID&, hCtrl2&, OldProc&
    SELECT CASE AS LONG CType&
        CASE 1,2  '   edit
            CName="EDIT
            WS&=%WS_CHILD OR %ES_LEFT OR %ES_AUTOHSCROLL
            EWS&=%WS_EX_CLIENTEDGE
'            IF CType&=2 THEN WS&=WS& OR %ES_NUMBER
            ID&=100+CType&
        CASE 3
            CName="COMBOBOX"
            WS&=%WS_CHILD OR %CBS_DROPDOWNLIST OR %WS_VSCROLL OR %CBS_NOINTEGRALHEIGHT
            EWS&=%WS_EX_CLIENTEDGE
            ID&=103
        CASE 4
            CName="BUTTON"
            WS&=%WS_CHILD OR %BS_PUSHBUTTON
            CText="..."
            ID&=104
        CASE ELSE
            FUNCTION=0
            EXIT FUNCTION
    END SELECT
    hCtrl2&=CreateWindowEx(EWS&, CName, CText,WS&,0,0, 64,20,hCtrl&,ID&,GetModulehandle(BYVAL %NULL), BYVAL %NULL)
    IF hCtrl2&<>0 THEN
        OldProc&=GetWindowLong(hCtrl2&,%GWL_WNDPROC)
        SetProp hCtrl2&, BYVAL MAKLNG(AppControlGAtom4&,0),OldProc&
        SetWindowLong hCtrl2&, %GWL_WNDPROC, CODEPTR(PropListChildWndProc)
        SetProp hCtrl2&,BYVAL MAKLNG(AppPropListAtom1&,0), -1
    END IF
    FUNCTION=hCtrl2&
END FUNCTION

SUB ZAddComboItems(BYVAL hWnd&, BYVAL IText$, BYVAL LText$)
    LOCAL P&, P2&, CText$, I&
    SendMessage hWnd&, %CB_RESETCONTENT, 0,0
    IF RIGHT$(LText$,1)<>App_EZ_DChar$ THEN LText$=LText$+App_EZ_DChar$
    P&=1
    DO
        P2&=INSTR(P&, LText$, App_EZ_DChar$)
        IF P2&=0 THEN EXIT DO
        CText$=LEFT$(LText$, P2&-1)
        LText$=MID$(LText$, P2&+1)
        SendMessage hWnd&, %CB_ADDSTRING, 0, STRPTR(CText$)
    LOOP
    I&=SendMessage(hWnd&,%CB_FINDSTRING,-1, STRPTR(IText$))
    IF I&<0 THEN I&=0
    SendMessage hWnd&, %CB_SETCURSEL, I&,0
END SUB

FUNCTION ZGetPListText(BYVAL hCtrl&, BYVAL I&) AS STRING
    LOCAL T$, L&
    L&=SendMessage(hCtrl&,%LB_GETTEXTLEN,I&,0)
    IF L&>0 THEN
        T$=SPACE$(L&+1)
        SendMessage hCtrl&, %LB_GETTEXT, I&, STRPTR(T$)
        T$=LEFT$(T$,L&)
    END IF
    FUNCTION=T$
END FUNCTION

FUNCTION zGetPCodeN(BYVAL PCode$) AS LONG
    LOCAL N&
        SELECT CASE AS CONST$ PCode$
            CASE "C", "F", "?", "E", "B"
                N&=4
            CASE "D"
                N&=3
            CASE "N"
                N&=2
            CASE "T"
                N&=1
            CASE ELSE
                N&=-1
        END SELECT
    FUNCTION=N&
END FUNCTION

SUB ZFocusChildCtrl(BYVAL hCtrl&, BYVAL I&, CData AS CDataInfo)
    LOCAL T$, N&, hWnd&,T1$, T2$, T3$, PCode$
    T$=ZGetPListText(hCtrl&, I&)
    IF LEN(T$)>0 THEN
        EZ_GetPLInfo T$, T1$, T2$, T3$, PCode$
        N&=zGetPCodeN(PCode$)
        SELECT CASE AS LONG N&
            CASE 1
                hWnd&=CData.PL.hEdit
            CASE 2
                hWnd&=CData.PL.hEditN
            CASE 3
                hWnd&=CData.PL.hCombo
            CASE 4
                hWnd&=CData.PL.hButton
            CASE ELSE
                hWnd&=0
        END SELECT
        IF hWnd&<>0 THEN
            IF IsWindow(hWnd&) THEN
                IF IsWindowVisible(hWnd&) THEN
                    SetFocus hWnd&
                END IF
            END IF
        END IF
    END IF
END SUB

SUB ZMoveChildCtrl(BYVAL hCtrl&, BYVAL I&, CData AS CDataInfo)
    LOCAL T$, T1$, T2$, T3$, PCode$, N&, LP&, hWnd& ' ,L&
    LOCAL X&, Y&, W&, H&, Dif&, R AS RECT, hFont&   ', BWY&, BWX&
    T$=ZGetPListText(hCtrl&, I&)
    IF LEN(T$)>0 THEN
        EZ_GetPLInfo T$, T1$, T2$, T3$, PCode$
        N&=zGetPCodeN(PCode$)
        CData.PL.CurrentI=I&
        CData.PL.CurrentType=N&
        SendMessage hCtrl&, %LB_GETITEMRECT, I&, VARPTR(R)
        FOR LP&=1 TO 4
            GOSUB CalcChildSize
            SELECT CASE AS LONG LP&
                CASE 1
                    hWnd&=CData.PL.hEdit
                    ShowWindow hWnd&, %SW_HIDE
                    IF LP&=N& THEN
                        SendMessage hWnd&, %WM_SETTEXT, 0,STRPTR(T2$)
                    END IF
                CASE 2
                    hWnd&=CData.PL.hEditN
                    ShowWindow hWnd&, %SW_HIDE
                    IF LP&=N& THEN
                        SendMessage hWnd&, %WM_SETTEXT, 0,STRPTR(T2$)
                    END IF
                CASE 3
                    hWnd&=CData.PL.hCombo
                    ShowWindow hWnd&, %SW_HIDE
                    H&=H&*5
                    IF LP&=N& THEN
                        REPLACE ";" WITH App_EZ_DChar$ IN T3$
                        ZAddComboItems hWnd&, T2$, T3$
                    END IF
                CASE 4
                    ' Here is where I control size of button for child button
                    hWnd&=CData.PL.hButton
                    ShowWindow hWnd&, %SW_HIDE
                    Dif&=W&/6
                    IF Dif&>32 THEN Dif&=32
                    Dif&=W&-Dif&
                    X&=X&+Dif&+1
                    W&=W&-Dif&-1
            END SELECT
            IF LP&=N& THEN
                hFont&=SendMessage(hCtrl&,%WM_GETFONT,0,0)
                SendMessage hWnd&, %WM_SETFONT,hFont&,0
                MoveWindow hWnd&,X&, Y&, W&, H&, 0
                ShowWindow hWnd&, %SW_SHOW
            END IF
        NEXT LP&
    END IF
    EXIT SUB

    CalcChildSize:
    X&=R.nLeft
    Y&=R.nTop
    W&=R.nRight-R.nLeft
    H&=R.nBottom-R.nTop


    ' PLIST WIDTH

    Dif&=W&/2

    X&=X&+Dif&+1
    W&=W&-Dif&-1
    RETURN

END SUB

SUB ZChangePLText(BYVAL hCtrl&, BYVAL I&, BYVAL T$)
    SendMessage hCtrl&, %PLB_SETERASEFLAG ,0,1
    SendMessage hCtrl&, %LB_DELETESTRING,I&,0
    SendMessage hCtrl&, %LB_INSERTSTRING,I&, STRPTR(T$)
END SUB



FUNCTION EZ_DefPLInfo(BYVAL PName$, BYVAL PVal$, BYVAL PList$, BYVAL PCode$, BYVAL DCFlag&) EXPORT10 AS STRING
    LOCAL RV$
    PCode$=UCASE$(PCode$)
    PName$=LTRIM$(RTRIM$(PName$))
    SELECT CASE AS CONST$ PCode$
        CASE "C", "?", "E", "B"
            RV$=PName$+$LeftCurl+PCode$+$RightCurl+PVal$
        CASE "T","N"
            RV$=PName$+$LeftCurl+PCode$+$RightCurl+PVal$
        CASE "F", "D"
            RV$=PName$+$LeftCurl+PCode$+$RightCurl+PVal$+$LeftBracket+PList$+$RightBracket
        CASE ELSE
            RV$=PName$
    END SELECT
    IF DCFlag& THEN RV$=RV$+App_EZ_DChar$
    FUNCTION=RV$
END FUNCTION

SUB EZ_SetPLProp(BYVAL Form$, BYVAL ID&, BYVAL PName$, BYVAL PVal$) EXPORT10
    LOCAL hCtrl&, I&, T$, T1$, T2$, T3$,PC$
    hCtrl&=ezHandle(Form$, ID&,1)
    IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=$PLISTCLASS THEN
            IF LEFT$(PName$,1)="#" THEN
                I&=VAL(MID$(PName$,2))
                IF I&>EZ_FindLast(Form$, ID&) THEN I&=-1
            ELSE
                PName$=PName$+"{"
                I&=EZ_FindNextLeftNC(Form$, ID&, PName$, 0)
            END IF
            IF I&>=0 THEN
                T$=EZ_GetItemText(Form$, ID&, I&)
                EZ_GetPLInfo T$, T1$, T2$, T3$, PC$
                T$=EZ_DefPLInfo(T1$, PVal$, T3$, PC$, 0)
                ZChangePLText hCtrl&, I&, T$
            END IF
        END IF
    END IF
END SUB

SUB EZ_HidePLChildren(BYVAL Form$, BYVAL ID&) EXPORT10
     LOCAL hCtrl&
     hCtrl&=ezHandle(Form$, ID&,1)
     IF hCtrl&<>0 THEN
        IF ZGetClass(hCtrl&)=$PLISTCLASS THEN
             SendMessage hCtrl&, %PLB_SETCURSEL,0,-1  ' hide child controls
        END IF
     END IF
END SUB

FUNCTION ZGetText(BYVAL hCtrl&) AS STRING
    LOCAL L&, T$
    L&=SendMessage(hCtrl&,%WM_GETTEXTLENGTH,0,0)
    IF L&>0 THEN
        T$=SPACE$(L&+1)
        SendMessage hCtrl&, %WM_GETTEXT, L&+1, STRPTR(T$)
        T$=LEFT$(T$,L&)
    END IF
    FUNCTION=T$
END FUNCTION

GLOBAL App_InitPropDlgVal$
GLOBAL App_InitPropDlgName$
GLOBAL App_InitPropDlgIndex&

SUB EZ_SetCurrentProp(BYVAL T$) EXPORT10
    App_InitPropDlgVal$=T$
END SUB

FUNCTION EZ_GetCurrentProp() EXPORT10 AS STRING
    FUNCTION=App_InitPropDlgVal$
END FUNCTION

FUNCTION EZ_GetCurrentPropName() EXPORT10 AS STRING
    FUNCTION=App_InitPropDlgName$
END FUNCTION

FUNCTION EZ_GetCurrentPropIndex() EXPORT10 AS LONG
    FUNCTION=App_InitPropDlgIndex&
END FUNCTION

SUB ZDoPropCommand(BYVAL hCtrl&, CData AS CDataInfo, BYVAL wParam&, BYVAL lParam&, BYVAL EMode&)
    LOCAL NCode&, T$, T1$, T2$, T3$, PCode$, I&, hParent&, FormName$, MyColor&
    LOCAL CFlag&, AF$, FT$, DlgMode&
    CFlag&=0
    I&=CData.PL.CurrentI
    T$=ZGetPListText(hCtrl&, I&)
    EZ_GetPLInfo T$, T1$, T2$, T3$, PCode$
    NCode&=HIWRD(wParam&)
    IF IsWindowVisible(lParam&) THEN
        SELECT CASE AS LONG CData.PL.CurrentType
            CASE 1,2    ' text
                IF NCode&=%EN_CHANGE THEN
                    IF EMode&=1 THEN
                         T2$=ZGetText(lParam&)
                         CFlag&=1
                    END IF
                END IF
            CASE 3  ' drop down
                IF NCode&=%CBN_SELCHANGE THEN
                    T2$=ZGetText(lParam&)
                    CFlag&=1
                END IF
            CASE 4  ' button
                IF NCode&=%BN_CLICKED THEN
                    App_InitPropDlgVal$=""
                    App_InitPropDlgName$=""
                    App_InitPropDlgIndex&=0
                    hParent&=ZGetParentForm(hCtrl&)
                    FormName$=ZFormNameH(hParent&)
                    DlgMode&=0
                    IF PCode$="?" OR PCode$="E" OR PCode$="B" THEN
                        DlgMode&=1
                        IF PCode$="E" THEN DlgMode&=2
                        IF PCode$="B" THEN DlgMode&=3
                        App_InitPropDlgVal$=T2$
                        App_InitPropDlgName$=T1$
                        App_InitPropDlgIndex&=I&
                    END IF
                    IF ProcessEZCommands(hParent&, %EZ_InitPropDlg, hCtrl&, DlgMode&)=0 THEN
                        IF DlgMode&=0 THEN
                            EZ_Color -1,-1          ' if Cancel& zero assume defaults
                        END IF
                    END IF
                    IF PCode$="?" OR PCode$="E" OR PCode$="B" THEN
                        T2$=App_InitPropDlgVal$
                        CFlag&=1
                    END IF
                    App_InitPropDlgVal$=""
                    App_InitPropDlgName$=""
                    App_InitPropDlgIndex&=0
                    IF PCode$="C" THEN
                         ' add custom color dialog to be added here
                        MyColor&=VAL(T2$)
                        IF EZ_ChooseColor(FormName$, MyColor&, "") THEN
                            T2$="&H"+HEX$(MyColor&,6)
                            CFlag&=1
                        END IF
                    END IF
                    IF PCode$="F" THEN
                         ' add custom files dialog to be added here
                        FT$=T3$
                        REPLACE ";" WITH "|" IN FT$
                        AF$=EZ_OpenFile(FormName$, T1$, "", FT$, "R")
                        IF AF$<>"" THEN
                            T2$=AF$
                            CFlag&=1
                        ELSE
                            T2$="(None)"
                            CFlag&=1
                        END IF
                    END IF
                END IF
            CASE ELSE
        END SELECT
    END IF
    IF CFlag& THEN
        T$=T1$+$LeftCurl+PCode$+$RightCurl+T2$
        IF T3$<>"" THEN
            T$=T$+$LeftBracket+T3$+$RightBracket
        END IF
        ZChangePLText hCtrl&, I&, T$
        T$=ZGetPListText(hCtrl&, I&)
        EZ_GetPLInfo T$, T1$, T2$, T3$, PCode$
        App_InitPropDlgVal$=T2$
        App_InitPropDlgName$=T1$
        App_InitPropDlgIndex&=I&
        SendMessage hCtrl&, %LB_SETCURSEL, I&,0
        SendMessage hCtrl&, %PLB_CHILDUPDATE, I&,0
    END IF
END SUB

SUB ZHideAllChildren(CData AS CDataInfo)
    LOCAL N&, hWnd&
    FOR N&=1 TO 4
        SELECT CASE AS LONG N&
            CASE 1
                hWnd&=CData.PL.hEdit
            CASE 2
                hWnd&=CData.PL.hEditN
            CASE 3
                hWnd&=CData.PL.hCombo
            CASE 4
                hWnd&=CData.PL.hButton
            CASE ELSE
        END SELECT
        IF IsWindowVisible(hWnd&) THEN
            ShowWindow hWnd&, %SW_HIDE
        END IF
    NEXT N&
END SUB

' -------------------------------------------------------------------------------------------
%MaxCustomControlBld    =   110
%MinCustomControlBld    =   11

SUB RegisterAllCustom()
    LOCAL MX&, CN AS ASCIIZ * 32
    MX&=%MaxCustomControlBld
    REDIM App_CustomClassAtom(1 TO MX&) AS LONG
    REDIM App_CustomClassAddr(1 TO MX&) AS DWORD
    REDIM App_CustomClassName(1 TO MX&) AS STRING
    REDIM App_CustomClassSuper(1 TO MX&) AS STRING
    REDIM App_CustomClassEZPTR(1 TO MX&) AS LONG    ' pointer to EZ Event routine for custom class
    REDIM App_CustomClassProps(1 TO MX&) AS STRING
    App_CustomUniversalAtom1&=GlobalAddAtom("EZGUICUSINDEX")
    App_CustomPrivateAtom1&=GlobalAddAtom("EZGUICUSPRIDATA")
    App_CustomUserDataAtom1&=GlobalAddAtom("EZGUIUSERDATA")
    ' -------------------------------
    InitCustomClass 1,"LISTBOX",$PLISTCLASS,"", CODEPTR(ControlClass01WndProc),0
    ' -------------------------------
    InitCustomClass 2,"LISTBOX",$FLISTCLASS,"", CODEPTR(ControlClass02WndProc),0
    ' -------------------------------
    ' up to 8 more of my own custom controls can be defined in positions 3 to 10
'  Class names must start with EZC_01 (combo), EZC_02 (listbox), EZC_03 (label), EZC_04 (tab), EZC_05 (listview)
'                       {}  = Original class name
'                           {}  = new class name which must start with EZC_##
'                               {} = Initial Properties
'                                     {}  = CODEPTR(MyClassEvents)
'    InitCustomClass 3, "", "", "", codeptr(ControlClassEngineWndProc),0
'    InitCustomClass 4, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 5, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 6, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 7, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 8, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 9, "", "", "", CODEPTR(ControlClassEngineWndProc),0
'    InitCustomClass 10, "", "", "", CODEPTR(ControlClassEngineWndProc),0   ' last parameter is address of custom control EZ Event routine just like EZ_Events

'     use EZ_MatchClass NClass$, MatchClass$ for each class which uses custom control engine
END SUB

' The syntax for the Event routine for the custom control class is:
' SUB EZ_MyEvents(FormName$, CID&, CMsg&, CVal&, Cancel&)
' use CODEPTR(EZ_MyEvents) for last parameter of command

SUB EZ_DefCustomControl(BYVAL N&, BYVAL CName$, BYVAL CType&, BYVAL DProp$, BYVAL CP AS DWORD) EXPORT10
    LOCAL OName$, CName2$, CT&, NFlag&, ShortName$
    N&=N&+%MinCustomControlBld-1
    IF N&>=%MinCustomControlBld AND N&<=%MaxCustomControlBld THEN
        IF App_CustomClassName(N&)="" THEN  ' this control number not defined yet
            SELECT CASE AS LONG CType&
                CASE 1
                    OName$="COMBOBOX"
                    ShortName$="01"
                CASE 2
                    OName$="LISTBOX"
                    ShortName$="02"
                CASE 3
                    OName$="STATIC"
                    ShortName$="03"
                CASE 4
                    OName$="SysTabControl32"
                    ShortName$="04"
                CASE 5
                    OName$="SysListView32"
                    ShortName$="05"
                CASE ELSE
                    EXIT SUB
            END SELECT
            CName$="EZC_"+ShortName$+"_"+UCASE$(TRIM$(CName$))
            CName2$=CName$
            CT&=0
            DO
                ARRAY SCAN App_CustomClassName(1), = CName$, TO NFlag&
                IF NFlag&=0 THEN EXIT DO
                CT&=CT&+1
                IF CT&>10 THEN EXIT DO
                CName2$=CName$+"_"+TRIM$(STR$(CT&))
            LOOP
            IF CT&<=10 THEN
                InitCustomClass N&, OName$, CName$, DProp$, CODEPTR(ControlClassEngineWndProc),CP
                EZ_MatchClass CName$, OName$
            END IF
        END IF
    END IF
END SUB

' -------------------------------------------------------------------------------------------

' EZ_ComboBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
' EZ_ListBox (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
' EZ_Label (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
' EZ_TabControl (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)
' EZ_ListView (BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$)

FUNCTION zParseCustProps(BYVAL CType&, CProp$) AS STRING
    LOCAL P$, CMP$, N&, L$
    SELECT CASE AS LONG CType&
        CASE 1  ' combobox
            CMP$="DGHTV"
        CASE 2  ' listbox
            CMP$="DGHTVRSF"
        CASE 3  ' label
            CMP$="DGHTRSF"
        CASE 4  ' tab
            CMP$="DGHTRSF!MU+"
        CASE 5  ' listview
            CMP$="DGHTVRSF!-#M"
        CASE ELSE
            CMP$=""
    END SELECT
    FOR N&=1 TO LEN(CProp$)
        L$=MID$(CProp$,N&,1)
        IF INSTR(CMP$, L$) THEN P$=P$+L$
    NEXT N&
    FUNCTION=P$
END FUNCTION

SUB EZ_CustControl(BYVAL N&,BYVAL IDNum&, BYVAL C!, BYVAL R!, BYVAL W!, BYVAL H!, BYVAL CText$, BYVAL CProp$) EXPORT10
    LOCAL CType&, OldApp_EZ_SubClass&, P$
    N&=N&+%MinCustomControlBld-1
    IF N&>=%MinCustomControlBld AND N&<=%MaxCustomControlBld THEN
        IF LEN(App_CustomClassName(N&))<>0 THEN  ' this control number exists
            ' syntax of custom control class names are:
            ' EZC_##_Classname    where ## are digits 0 to 9 which tell me what type control it is
            CType&=VAL(MID$(App_CustomClassName(N&), 5,2))
            App_CustomClassReplace$=App_CustomClassName(N&)
            CProp$=App_CustomClassProps(N&)+zParseCustProps(CType&,CProp$)
            OldApp_EZ_SubClass&=App_EZ_SubClass&
            IF OldApp_EZ_SubClass&=0 THEN App_EZ_SubClass&=2
            IF OldApp_EZ_SubClass&=1 THEN App_EZ_SubClass&=1
            IF OldApp_EZ_SubClass&=2 THEN App_EZ_SubClass&=2
            IF OldApp_EZ_SubClass&=3 THEN App_EZ_SubClass&=1
            IF OldApp_EZ_SubClass&=4 THEN App_EZ_SubClass&=2
            App_CustomControlFlag&=1
            App_NewCustomControlIndex&=N&
            SELECT CASE AS LONG CType&
                CASE 1
                    EZ_ComboBox IDNum&, C!, R!, W!, H!, CText$, CProp$
                CASE 2
                    IF INSTR(CProp$,"O") THEN
                        EZ_ODListBox  IDNum&, C!, R!, W!, H!, CText$, CProp$
                    ELSE
                        EZ_ListBox  IDNum&, C!, R!, W!, H!, CText$, CProp$
                    END IF
                CASE 3
                    EZ_Label IDNum&, C!, R!, W!, H!, CText$, CProp$
                CASE 4
                    EZ_TabControl IDNum&, C!, R!, W!, H!, CText$, CProp$
                CASE 5
                    EZ_ListView IDNum&, C!, R!, W!, H!, CText$, CProp$
                CASE ELSE
            END SELECT
            App_NewCustomControlIndex&=0
            App_EZ_SubClass&=OldApp_EZ_SubClass&
            App_CustomClassReplace$=""
        END IF
    END IF
END SUB


' -------------------------------------------------------------------------------------------

SUB UnRegisterAllCustom()
    LOCAL N&
    GlobalDeleteAtom App_CustomUniversalAtom1&
    GlobalDeleteAtom App_CustomPrivateAtom1&
    GlobalDeleteAtom App_CustomUserDataAtom1&
    FOR N&=1 TO %MaxCustomControlBld
        IF App_CustomClassName(N&)<>"" THEN
            UnRegisterCustomControlClass N&, App_CustomClassName(N&)
        END IF
    NEXT N&
    ERASE App_CustomClassAtom
    ERASE App_CustomClassAddr
    ERASE App_CustomClassName
    ERASE App_CustomClassSuper
    ERASE App_CustomClassEZPTR
    ERASE App_CustomClassProps
END SUB

' -------------------------------------------------------------------------------------------

' -------------------------------------------------------------------------------------------
'                       EZGUI 5.0 Custom Control Builder Engine
' -------------------------------------------------------------------------------------------

'TYPE CREATESTRUCT
'  lpCreateParams AS LONG
'  hInstance AS LONG
'  hMenu AS LONG
'  hWndParent AS LONG
'  cy AS LONG
'  cx AS LONG
'  y AS LONG
'  x AS LONG
'  winSTYLE AS LONG
'  lpszName AS ASCIIZ PTR
'  lpszClass AS ASCIIZ PTR
'  ExStyle AS LONG
'END TYPE

FUNCTION zIsControlCustom(BYVAL hCtrl&) AS LONG
    FUNCTION=GetProp(hCtrl&,BYVAL MAKLNG(AppControlGAtom3&,0))
END FUNCTION

FUNCTION zCustomEventAddress(BYVAL hCtrl&) AS DWORD
    LOCAL I&
    I&=GetProp(hCtrl&, BYVAL MAKLNG(App_CustomUniversalAtom1&,0))
    IF I&<>0 THEN
        FUNCTION=App_CustomClassEZPTR(I&)
    ELSE
        FUNCTION=0
    END IF
END FUNCTION


FUNCTION ControlClassEngineWndProc(BYVAL hCtrl AS LONG, _
                               BYVAL Msg    AS LONG, _
                               BYVAL wParam AS LONG, _
                               BYVAL lParam AS LONG) AS LONG
    LOCAL CData AS CDataInfo
    LOCAL CtrlIndex&
    IF Msg=%WM_NCCREATE OR Msg=%WM_CREATE THEN
        SetProp hCtrl, BYVAL MAKLNG(App_CustomUniversalAtom1&,0), App_NewCustomControlIndex&
    END IF
    CtrlIndex&=GetProp(hCtrl, BYVAL MAKLNG(App_CustomUniversalAtom1&,0))
    IF CtrlIndex&=0 THEN CtrlIndex&=App_NewCustomControlIndex&

    ' use GetControlBlock hCtrl, CData, %EZ_IsPrivateData
    ' to get instance data
    ' data can be accessed using:
    '  CDataInfo.CC.CCVal(#)  index 1 to %MaxCDataItems (currently 7 longs)

    ' WM_CREATE will come to this routine first before subclass routine
    ' all other messages will goto subclass routine before this routine
    SELECT CASE AS LONG Msg
        CASE %WM_CREATE
            SetProp hCtrl, BYVAL MAKLNG(App_CustomUniversalAtom1&,0), CtrlIndex&
            SetProp hCtrl, BYVAL MAKLNG(App_CustomPrivateAtom1&,0), 0  ' for private data handle
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
        CASE %WM_GetEZPrivateData
            FUNCTION=zGetEZGUIUserData(hCtrl, wParam,%EZ_IsPrivateData)
            EXIT FUNCTION
        CASE %WM_SetEZPrivateData
            zSetEZGUIUserData hCtrl, wParam, lParam, %EZ_IsPrivateData
            FUNCTION=1
            EXIT FUNCTION
        CASE %WM_DESTROY
            FreeControlBlock hCtrl, %EZ_IsPrivateData
            RemoveProp hCtrl,BYVAL MAKLNG(App_CustomPrivateAtom1&,0)
            RemoveProp hCtrl,BYVAL MAKLNG(App_CustomUniversalAtom1&,0)
            IF CtrlIndex&<>0 THEN
                SetWindowLong hCtrl, %DWL_DLGPROC,App_CustomClassAddr(CtrlIndex&)
            END IF
        CASE ELSE
    END SELECT
    IF CtrlIndex&<>0 THEN
        FUNCTION = CallWindowProc(BYVAL App_CustomClassAddr(CtrlIndex&),hCtrl,Msg,wParam,lParam)
    ELSE    ' error no index found
        FUNCTION=DefWindowProc(hCtrl,Msg,wParam,lParam)
    END IF
END FUNCTION

' -------------------------------------------------------------------------------------------

%PListNum       =   1

FUNCTION ControlClass01WndProc(BYVAL hCtrl AS LONG, _
                               BYVAL Msg    AS LONG, _
                               BYVAL wParam AS LONG, _
                               BYVAL lParam AS LONG) AS LONG
    LOCAL CData AS CDataInfo, I&, E&
    LOCAL OKFlag&

    SELECT CASE AS LONG Msg
        CASE %WM_KEYUP
            SELECT CASE AS LONG wParam
                CASE 13, 32
                    I&=SendMessage(hCtrl, %LB_GETCURSEL,0,0)
                    IF I&>=0 THEN
                        GetControlBlock hCtrl, CData, %EZ_IsPrivateData
                        ZFocusChildCtrl hCtrl, I&, CData
                    END IF
                CASE ELSE
            END SELECT
        CASE %WM_HSCROLL, %WM_VSCROLL
             I&=SendMessage(hCtrl, %LB_GETCURSEL,0,0)
             IF I&>=0 THEN
                  GetControlBlock hCtrl, CData, %EZ_IsPrivateData
                  ZHideAllChildren CData
                  SendMessage hCtrl, %LB_SETCURSEL, -1,0
             END IF
        CASE %PLB_SETERASEFLAG
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            CData.PL.EFlag=lParam
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=1
            EXIT FUNCTION
        CASE %PLB_GETERASEFLAG
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=CData.PL.EFlag
            EXIT FUNCTION
        CASE %PLB_SETCURSEL
            IF lParam=-1 THEN
                  GetControlBlock hCtrl, CData, %EZ_IsPrivateData
                  ZHideAllChildren CData
                  SendMessage hCtrl, %LB_SETCURSEL, -1,0
            ELSE
                GetControlBlock hCtrl, CData, %EZ_IsPrivateData
                ZMoveChildCtrl hCtrl, lParam, CData
                SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            END IF
            FUNCTION=1
            EXIT FUNCTION
        CASE %WM_ERASEBKGND
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            IF CData.PL.EFlag<>0 THEN
                CData.PL.EFlag=0
                SetControlBlock hCtrl, CData, %EZ_IsPrivateData
                FUNCTION=1
                EXIT FUNCTION
            END IF
            IF ZIsLastBlock(hCtrl)=0 THEN
                FUNCTION=1
                EXIT FUNCTION
            END IF
        CASE %WM_CREATE
            ' this property is for data storage
'            beep
            SetProp hCtrl, BYVAL MAKLNG(App_CustomPrivateAtom1&,0), 0
            CData.PL.CurrentI=-1
            CData.PL.hEdit=ZMakeChildCtrl(hCtrl,1)
            CData.PL.hEditN=ZMakeChildCtrl(hCtrl,2)
            CData.PL.hCombo=ZMakeChildCtrl(hCtrl,3)
            CData.PL.hButton=ZMakeChildCtrl(hCtrl,4)
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
'            MSGBOX "PListBox WM_CREATE finished"
        CASE %WM_COMMAND
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            ZDoPropCommand  hCtrl, CData, wParam, lParam, 0 ' ignore edit controls
'        case %PLB_CHILDVERIFY
'            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
'            ZDoPropCommand  hCtrl, CData, wParam, lParam, 1
        CASE %WM_DESTROY
            FreeControlBlock hCtrl, %EZ_IsPrivateData
            RemoveProp hCtrl,BYVAL MAKLNG(App_CustomPrivateAtom1&,0)


        CASE %WM_KILLFOCUS
            OKFlag&=1
            IF wParam<>0 THEN
                IF GetParent(wParam)=hCtrl THEN OKFlag&=0
            END IF
            IF OKFlag& THEN
                SendMessage hCtrl, %PLB_SETCURSEL,0,-1  ' hide child controls
            END IF
        CASE %WM_SIZE
            SendMessage hCtrl, %PLB_SETCURSEL,0,-1  ' hide child controls
        CASE %PLB_CHILDFOCUS,%PLB_CHILDNOFOCUS,%PLB_CHILDRETURN,%PLB_CHILDESCAPE, %PLB_CHILDSHOW, %PLB_CHILDHIDE,%PLB_CHILDUPDATE
            E&=%EZ_CHILDFOCUS+(Msg-%PLB_CHILDFOCUS)    '%EZ_CHILDFOCUS,%EZ_CHILDNOFOCUS,%EZ_CHILDRETURN,%EZ_CHILDESCAPE, %EZ_CHILDSHOW, %EZ_CHILDHIDE
            IF Msg=%PLB_CHILDRETURN THEN
                 GetControlBlock hCtrl, CData, %EZ_IsPrivateData
                 ZDoPropCommand  hCtrl, CData, MAKLNG(GetDlgCtrlID(wParam), %EN_CHANGE), wParam, 1      ' wParam of message has control handle so pass it as lParam for this call
            END IF
            ProcessEZCommands  GetParent(hCtrl), E&, hCtrl, lParam
            IF Msg=%PLB_CHILDNOFOCUS OR Msg=%PLB_CHILDESCAPE OR Msg=%PLB_CHILDRETURN THEN
                SendMessage hCtrl, %PLB_SETCURSEL,0,-1  ' hide child controls
            END IF
            FUNCTION=1
            EXIT FUNCTION
        CASE ELSE
    END SELECT
    FUNCTION = CallWindowProc(BYVAL App_CustomClassAddr(%PListNum),hCtrl,Msg,wParam,lParam)
END FUNCTION

' -------------------------------------------------------------------------------------------

FUNCTION ZGetSystemImageIndex(BYVAL F$, BYVAL Mode&) AS LONG
    LOCAL FPath AS ASCIIZ*%MAX_PATH, FA&, I&
    LOCAL SH AS SHFILEINFO
    SELECT CASE AS LONG Mode&
        CASE 1  ' drives
            FA&=%FILE_ATTRIBUTE_DEVICE
        CASE 2  ' folders
            FA&=%FILE_ATTRIBUTE_DIRECTORY
        CASE ELSE   ' files
            FA&=%FILE_ATTRIBUTE_NORMAL
            DIM P&, AP&, LP&
            AP&=1
            LP&=0
            DO
                P&=INSTR(AP&,F$,".")
                IF P&=0 THEN
                     EXIT DO
                ELSE
                    AP&=P&+1
                    LP&=P&
                END IF
            LOOP
            IF LP&>0 THEN
                F$=MID$(F$,LP&)
            ELSE
                F$="."+F$
            END IF
    END SELECT
    FPath=F$
    SH.iIcon=0
    SH.hIcon=0
    I&=SHGetFileInfo(FPath,FA&,SH, SIZEOF(SH),%SHGFI_ICON OR %SHGFI_SYSICONINDEX OR %SHGFI_USEFILEATTRIBUTES)
    IF SH.hIcon<>0 THEN
        DestroyIcon SH.hIcon
    END IF
    FUNCTION=SH.iIcon
END FUNCTION

FUNCTION ZGetSystemImageList(BYVAL hCtrl&, BYVAL SZ&, BYVAL hFont&) AS LONG
    LOCAL H&, MaxHSmall&, MaxHBig&, ImgL&
    LOCAL FPath AS ASCIIZ*%MAX_PATH, SH AS SHFILEINFO
    IF hFont&=0 THEN
          IF hCtrl&<>0 THEN hFont&=SendMessage(hCtrl&, %WM_GETFONT,0,0)
    END IF
    IF hFont&=0 THEN hFont&=EZ_FontHandle(0)
    H&=ZGetFontSize(hFont&)
    IF SZ&>0 THEN
         H&=H&+(H&/SZ&)
    END IF
    MaxHSmall&=GetSystemMetrics(%SM_CYSMICON)
    MaxHBig&=GetSystemMetrics(%SM_CYICON)
    FPath=EZ_GetAppPathName
    SH.hIcon=0

'    if hCtrl&=0 then msgbox str$(H&)+str$(MaxHSmall&)+str$(MaxHBig&)

    IF MaxHBig&>H& THEN
        IF MaxHSmall&<=H& THEN
            ImgL&=SHGetFileInfo(FPath,0,SH, SIZEOF(SH),%SHGFI_SYSICONINDEX OR %SHGFI_SMALLICON)
        END IF
    ELSE
        ImgL&=SHGetFileInfo(FPath,0,SH, SIZEOF(SH),%SHGFI_SYSICONINDEX OR %SHGFI_LARGEICON)
    END IF
    FUNCTION=ImgL&
END FUNCTION

FUNCTION EZ_DefSysImageList(BYVAL N&, BYVAL FontNum&, BYVAL ExPixels&) EXPORT10 AS LONG
     LOCAL hImg&, RV&
     RV&=0
     IF N&>=1 AND N&<=UBOUND(App_ImgList) THEN
          IF App_ImgList(N&).hImg=0 THEN
               IF FontNum&>=0 AND FontNum&<=UBOUND(AppFont) THEN
                    IF AppFont(FontNum&)<>0 THEN
                         hImg&=ZGetSystemImageList(0, ExPixels&, AppFont(FontNum&))
                         RV&=ImageList_Duplicate(hImg&)
                         IF RV&<>0 THEN
                              App_ImgList(N&).hImg=RV&
                              RV&=ImageList_GetImageCount(RV&)-1
                         END IF
                    END IF
               END IF
          END IF
     END IF
     FUNCTION=RV&
END FUNCTION

FUNCTION EZ_GetSysImgIndex(BYVAL F$) EXPORT10 AS LONG
     LOCAL RV&, Mode&
     IF LEFT$(F$,1)="[" THEN
          F$=REMOVE$(F$, ANY "[]")
          IF RIGHT$(F$,1)=":" AND LEN(F$)=2 THEN
               Mode&=1
               F$=F$+"\"
          ELSE
               Mode&=2
          END IF
     ELSE
          Mode&=0
     END IF
     RV&=ZGetSystemImageIndex(F$, Mode&)
     FUNCTION=RV&
END FUNCTION

SUB EZ_FillSysImageList(BYVAL ExtList$) EXPORT10
     LOCAL CT&, E$, N&
     CT&=PARSECOUNT(ExtList$,"|")
     FOR N&=1 TO CT&
          E$=TRIM$(PARSE$(ExtList$,"|",N&))
          IF E$<>"" THEN
               IF LEFT$(E$,1)<>"[" THEN
                    IF LEFT$(E$,1)<>"." THEN E$="."+E$
               END IF
               EZ_GetSysImgIndex E$
          END IF
     NEXT N&
END SUB


%FListNum       =   2

FUNCTION ZIsLastBlock(BYVAL hCtrl&) AS LONG
    LOCAL TopI&, LastI&, H&, R AS RECT, RV&
    RV&=1
    TopI&=SendMessage(hCtrl&, %LB_GETTOPINDEX,0,0)
    LastI&=SendMessage(hCtrl&,%LB_GETCOUNT,0,0)
    IF LastI&>0 THEN
        IF TopI&>=0 THEN
            H&=SendMessage(hCtrl&, %LB_GETITEMHEIGHT, TopI&,0)
            H&=(LastI&-TopI&)*H&
            GetClientRect hCtrl&, R
            IF H&>=(R.nBottom-R.nTop) THEN RV&=0
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION ControlClass02WndProc(BYVAL hCtrl AS LONG, _
                               BYVAL Msg    AS LONG, _
                               BYVAL wParam AS LONG, _
                               BYVAL lParam AS LONG) AS LONG
    LOCAL CData AS CDataInfo, EFlag&
    SELECT CASE AS LONG Msg
        CASE %FLB_GETIMAGELIST
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=CData.FL.DIRImageList
            EXIT FUNCTION
        CASE %FLB_SETIMAGELIST
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            IF wParam&=0 THEN
                CData.FL.DIRImageList=lParam
                CData.FL.CustFlag=1    ' uses custom imagelist
            ELSE
                CData.FL.CustFlag=-1
                CData.FL.DIRImageList=ZGetSystemImageList(hCtrl,4,0)
            END IF
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=1
            EXIT FUNCTION
        CASE %FLB_GETDIRFILTER
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            IF lParam=0 THEN
                FUNCTION=CData.FL.DIRFilter1
            ELSE
                FUNCTION=CData.FL.DIRFilter2
            END IF
            EXIT FUNCTION
        CASE %FLB_SETDIRFILTER
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            CData.FL.DIRFilter1=wParam
            CData.FL.DIRFilter2=lParam
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=1
            EXIT FUNCTION
        CASE %FLB_GETCUSTOMFLAG
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=CData.FL.CustFlag
            EXIT FUNCTION
        CASE %FLB_SETREMOVEFLAG
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            CData.FL.RemoveFlag=lParam
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=1
            EXIT FUNCTION
        CASE %FLB_GETREMOVEFLAG
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            FUNCTION=CData.FL.RemoveFlag
            EXIT FUNCTION
        CASE %FLB_DCLICKON  ' lparam& contains item index
            DIM TL&, I&, T$, WT$, P$, F$, EP$
            I&=lParam&
            TL&=SendMessage(hCtrl, %LB_GETTEXTLEN,I&,0)
            IF TL&>0 THEN
                T$=SPACE$(TL&+1)
                SendMessage hCtrl, %LB_GETTEXT, I&, STRPTR(T$)
                T$=LEFT$(T$,TL&)
                TL&=SendMessage(hCtrl, %WM_GETTEXTLENGTH,0,0)
                IF TL&>0 THEN
                    WT$=SPACE$(TL&+1)
                    SendMessage hCtrl, %WM_GETTEXT, TL&+1, STRPTR(WT$)
                    WT$=LEFT$(WT$,TL&)
                    P$=EZ_GetPathText(WT$)
                    F$=EZ_GetFileText(WT$)
                    IF T$="[..]" THEN
                        IF RIGHT$(P$,1)="\" THEN P$=LEFT$(P$,LEN(P$)-1)
                        P$=EZ_GetPathText(P$)+F$
                        SendMessage hCtrl, %WM_SETTEXT, 0, STRPTR(P$)
                    ELSEIF LEFT$(T$,2)="[-" THEN    ' drive letter
                        P$=MID$(T$,3,1)
                        EP$=CURDIR$(P$)
                        IF EP$<>"" THEN ' Drive exists
                            P$=P$+":\"+F$
                            SendMessage hCtrl, %WM_SETTEXT, 0, STRPTR(P$)
                        ELSE
                            ProcessEZCommands GetParent(hCtrl), %EZ_CtrlError, hCtrl, 0
                        END IF
                    ELSEIF LEFT$(T$,1)="[" THEN     ' sub folder
                        T$=REMOVE$(T$, ANY "[]")
                        IF RIGHT$(P$,1)<>"\" THEN P$=P$+"\"
                        P$=P$+T$+"\"+F$
                        SendMessage hCtrl, %WM_SETTEXT, 0, STRPTR(P$)
                    END IF
                END IF
            END IF
            FUNCTION=1
            EXIT FUNCTION
        CASE %WM_CREATE
            ' this property is for data storage
            SetProp hCtrl, BYVAL MAKLNG(App_CustomPrivateAtom1&,0), 0
            CData.FL.CustFlag=0
            CData.FL.DIRImageList=0
            CData.FL.DIRFilter1=%DDL_DIRECTORY OR %DDL_EXCLUSIVE
            CData.FL.DIRFilter2=%DDL_READWRITE
            CData.FL.RemoveFlag=0
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
        CASE %WM_SETTEXT
            EFlag&=0
            GOSUB SetNewDIRList
            InvalidateRect hCtrl, BYVAL %NULL, 1
            IF EFlag& THEN
                FUNCTION=0
                EXIT FUNCTION
            END IF
        CASE %WM_ERASEBKGND
            IF ZIsLastBlock(hCtrl)=0 THEN
                FUNCTION=1
                EXIT FUNCTION
            END IF
        CASE %WM_SETFONT
            FUNCTION = CallWindowProc(BYVAL App_CustomClassAddr(%FListNum),hCtrl,Msg,wParam,lParam)
            GetControlBlock hCtrl, CData, %EZ_IsPrivateData
            IF CData.FL.CustFlag=-1 THEN
                ' get new system imagelist
                CData.FL.DIRImageList=ZGetSystemImageList(hCtrl,4,0)
            END IF
            SetControlBlock hCtrl, CData, %EZ_IsPrivateData
            EXIT FUNCTION
        CASE %WM_DESTROY
            FreeControlBlock hCtrl, %EZ_IsPrivateData
            RemoveProp hCtrl,BYVAL MAKLNG(App_CustomPrivateAtom1&,0)
        CASE ELSE
    END SELECT
    FUNCTION = CallWindowProc(BYVAL App_CustomClassAddr(%FListNum),hCtrl,Msg,wParam,lParam)
    EXIT FUNCTION


    SetNewDIRList:              ' lparam must contain pointer to null terminated string
        DIM FV&, FV2&, FT$, TMPT AS ASCIIZ PTR, PT$, Cmp$, II&, RFlag&
        TMPT=lParam
        SendMessage hCtrl, %LB_RESETCONTENT,0,0
        FV&=SendMessage(hCtrl,%FLB_GETDIRFILTER,0,0)
        FV2&=SendMessage(hCtrl,%FLB_GETDIRFILTER,0,1)
        PT$=@TMPT

'        msgbox "Inside: "+PT$

        IF FV&>=0 THEN
            IF (FV& AND %DDL_DRIVES) = %DDL_DRIVES THEN
                FT$=EZ_GetPathText(PT$)+"*.*"
                IF SendMessage(hCtrl,%LB_DIR, %DDL_DRIVES OR %DDL_EXCLUSIVE, STRPTR(FT$)) <0 THEN
                    EFlag&=1
'                    msgbox "Fail #1"+chr$(13)+chr$(10)+FT$
                    RETURN
                END IF
                IF FV2&>=0 THEN
                    RFlag&=SendMessage(hCtrl,%FLB_GETREMOVEFLAG,0,0)
                    IF RFlag&<>0 THEN
                        IF LEFT$(PT$,2)<>"\\" THEN
                            Cmp$="[-"+LCASE$(LEFT$(PT$,1))+"-]"
                            II&=SendMessage(hCtrl,%LB_FINDSTRINGEXACT,-1, STRPTR(Cmp$))
                            IF II&>=0 THEN
                                SendMessage hCtrl, %LB_DELETESTRING,II&,0
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF (FV& AND %DDL_DIRECTORY) = %DDL_DIRECTORY THEN
                FT$=EZ_GetPathText(PT$)+"*.*"
                IF SendMessage(hCtrl,%LB_DIR, %DDL_DIRECTORY OR %DDL_EXCLUSIVE, STRPTR(FT$)) < 0 THEN
                    EFlag&=1
'                    MSGBOX "Fail #2"+CHR$(13)+CHR$(10)+FT$
                    RETURN
                END IF
            END IF
        END IF
        IF FV2&>=0 THEN
            FT$=PT$
            IF SendMessage(hCtrl,%LB_DIR, FV2&, STRPTR(FT$))<0 THEN
'                MSGBOX "Fail #3"+CHR$(13)+CHR$(10)+FT$
                EFlag&=1
                RETURN
            END IF
        END IF
    RETURN

END FUNCTION

' -------------------------------------------------------------------------------------
'                               Component Engine Processing
' -------------------------------------------------------------------------------------
' Globals in front of EZ_AddComponent

SUB zInitCMPData()
    App_MaxCMP&=100
    REDIM App_CMPName(1 TO App_MaxCMP&) AS STRING
    REDIM App_CMPLibHandle(1 TO App_MaxCMP&) AS DWORD
    REDIM App_CMPInitData(1 TO App_MaxCMP&) AS STRING
    REDIM App_CMPEventsA(1 TO App_MaxCMP&) AS DWORD
    REDIM App_CMPDesignA(1 TO App_MaxCMP&) AS DWORD
    App_LastCMP&=0
END SUB

SUB zClearCMPData()
    LOCAL N&
    ' free DLL's library
    FOR N&=1 TO App_LastCMPDLL&
        IF App_CMPLibHandle(N&)<>0 THEN
            FreeLibrary App_CMPLibHandle(N&)
            App_CMPLibHandle(N&)=0
        END IF
    NEXT N&
    ERASE App_CMPName
    ERASE App_CMPLibHandle
    ERASE App_CMPInitData
    ERASE App_CMPEventsA
    ERASE App_CMPDesignA
END SUB

FUNCTION EZ_E() EXPORT10 AS STRING
    FUNCTION=CHR$(1)
END FUNCTION

SUB EZ_DefComponent(BYVAL CMPName$, BYVAL InitData$, BYVAL DESIGNA AS DWORD, BYVAL EVENTA AS DWORD) EXPORT10
    LOCAL N&
    IF App_LastCMP&<App_MaxCMP& THEN
        N&=App_LastCMP&+1
        App_CMPName(N&)=TRIM$(UCASE$(CMPName$))
        App_CMPEventsA(N&)=EVENTA
        App_CMPDesignA(N&)=DESIGNA
        ' separate items with EZ_E function always
        ' current data is:   "Default properties"+EZ_E+"Default text"+EZ_E+"Include name (must be in component folder) without path"
        IF RIGHT$(InitData$,1)<>"|" THEN InitData$=InitData$+"|"
        REPLACE "|" WITH CHR$(1) IN InitData$
        App_CMPInitData(N&)=InitData$
        App_LastCMP&=N&
    END IF
END SUB

SUB  EZ_GetComponentData(BYVAL N&, CMPName$, InitData$) EXPORT10
    IF N&>=1 AND N&<=App_LastCMP& THEN
        CMPName$=App_CMPName(N&)
        InitData$=App_CMPInitData(N&)
    ELSE
        CMPName$=""
        InitData$=""
    END IF
END SUB

FUNCTION zGetCmpAttr(BYVAL FormName$, BYVAL IDNum&, BYVAL Attr&) AS LONG
    LOCAL RV&, hDlg&
    hDlg&=ezHandle(FormName$, IDNum&,1)
    IF hDlg&<>0 THEN
        IF zIsFormComponent(hDlg&) THEN
              RV&=SendMessage(hDlg, %WM_GETCMPVAL, Attr&, 0)
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION

FUNCTION EZ_CmpFG() EXPORT10 AS LONG
    FUNCTION=zGetCmpAttr("{ME}", 0,1)
END FUNCTION

FUNCTION EZ_CmpBG() EXPORT10 AS LONG
    FUNCTION=zGetCmpAttr("{ME}", 0,2)
END FUNCTION


FUNCTION EZ_CmpFont() EXPORT10 AS LONG
    FUNCTION=zGetCmpAttr("{ME}", 0,3)
END FUNCTION

DECLARE SUB EZ_InitComponentX2(BYVAL CMPPrefix$)

FUNCTION EZ_LoadComponent(BYVAL CMPPath$, BYVAL CMPPrefix$) EXPORT10 AS LONG
    LOCAL hLib&, P AS ASCIIZ * 256, IAddress AS DWORD, RV&
    P=CmpPath$
    ' get extrance routine address and call
    IF App_LastCMP&<App_MaxCMP& THEN
        hLib&=LoadLibrary(P)
        IF hLib&<>0 THEN
            IAddress=GetProcAddress(hLib&, "EZ_INITCOMPONENT")
            IF IAddress<>0 THEN
                App_LastCMPDLL&=App_LastCMPDLL&+1
                App_CMPLibHandle(App_LastCMPDLL&)=hLib&
                CALL DWORD IAddress USING EZ_InitComponentX2(CMPPrefix$)
                RV&=App_LastCMPDLL&
            ELSE
                FreeLibrary hLib&
            END IF
        END IF
    END IF
    FUNCTION=RV&
END FUNCTION


DECLARE SUB EZ_MainX2(VerNum&)
' this uses the syntax of the Designer generated subroutines
' no form name required
DECLARE SUB EZ_DesignWindowX2()
DECLARE SUB EZ_EventsX2(CID&, CMsg&, CVal&, Cancel&)
DECLARE SUB EZ_DesignWindowX3(FormName$)
DECLARE SUB EZ_EventsX3(FormName$, CID&, CMsg&, CVal&, Cancel&)

SUB CMP_EZ_Main(VerNum&)
    ' call all EZ_Main routines for all components here
    CALL DWORD App_EXEAddress1 USING EZ_MainX2(VerNum&)
END SUB

' -------------------------------------------------------------------------------------

FUNCTION zFindAddress(FormName$, BYVAL WFlag&) AS DWORD
    LOCAL P&, CName$, CA AS DWORD, N&
    P&=INSTR(FormName$, "|")
    IF P&<>0 THEN
        CName$=MID$(FormName$,2, P&-2)
        ' do component name search here
        FOR N&=1 TO App_LastCMP&
            IF CName$=App_CMPName(N&) THEN
                ' mode 1 is EZ_Events
                ' mode 2 is EZ_DesignWindow
                IF WFlag&=1 THEN CA=App_CMPEventsA(N&)
                IF WFlag&=2 THEN CA=App_CMPDesignA(N&)
                EXIT FOR
            END IF
        NEXT N&
    END IF
    FUNCTION=CA
END FUNCTION

' Does not support {ME} but Internal anyway
SUB CMP_EZ_Events(FormName$, CID&, CMsg&, CVal&, Cancel&)
    LOCAL SubAddress AS DWORD, I&, hDlg&
    LOCAL FirstFormChar AS BYTE PTR, JumpAddress AS DWORD
    hDlg&=ezHandle(FormName$,0,0)
    JumpAddress=0
    I&=App_MeFormIndex&
    IF App_MeFormIndex& < UBOUND(App_MeFormHandle) THEN
        App_MeFormIndex&=App_MeFormIndex&+1
        App_MeFormHandle(App_MeFormIndex&)=hDlg&
    END IF
'    IF LEFT$(FormName$,1)="[" THEN
    FirstFormChar=STRPTR(FormName$)
    IF @FirstFormChar=91 THEN   ' is character [
        ' must be a component
        SubAddress=zFindAddress(FormName$,1)
        IF SubAddress<>0 THEN
            ' uses simpler syntax with no form name
            CALL DWORD SubAddress USING EZ_EventsX2(CID&, CMsg&, CVal&, Cancel&)
            App_MeFormIndex&=I&
            EXIT SUB
        END IF
    ELSE
        ' now test for stored pointers used by EZ_FormEx
        JumpAddress=GetProp(hDlg&, BYVAL MAKLNG(AppFormGAtom2&,0))
    END IF
    IF JumpAddress=0 THEN
        CALL DWORD App_EXEAddress2 USING EZ_EventsX3(FormName$, CID&, CMsg&, CVal&, Cancel&)
    ELSE    ' Form has unique jump address
        CALL DWORD JumpAddress USING EZ_EventsX2(CID&, CMsg&, CVal&, Cancel&)
    END IF
    App_MeFormIndex&=I&
END SUB

' -------------------------------------------------------------------------------------

FUNCTION EZ_SendEvent(BYVAL FormName$, BYVAL CID&, BYVAL CMsg&, BYVAL CVal&) EXPORT10 AS LONG
    LOCAL Cancel&
    Cancel&=0
    FormName$=UCASE$(FormName$)
    CMP_EZ_Events FormName$, CID&, CMsg&, CVal&, Cancel&
    FUNCTION=Cancel&
END FUNCTION

FUNCTION EZ_SendMEEvent(BYVAL CMsg&, BYVAL CVal&) EXPORT10 AS LONG
    LOCAL Cancel&, FormName$, CID&, hDlg&
    Cancel&=0
    hDlg&=ezHandle("{ME}",0,1)
    IF hDlg&<>0 THEN
        IF zIsFormComponent(hDlg&) THEN
            FormName$=zFormNameH(GetParent(hDlg&))
            IF LEN(FormName$)<>0 THEN
                CID&=GetDlgCtrlID(hDlg&)
                CMP_EZ_Events FormName$, CID&, CMsg&, CVal&, Cancel&
            END IF
        END IF
    END IF
    FUNCTION=Cancel&
END FUNCTION



' Does not support {ME} but internal anyway
SUB CMP_EZ_DesignWindow(FormName$)
    LOCAL SubAddress AS DWORD, I&, JumpAddress AS DWORD, hDlg&
    LOCAL FirstFormChar AS BYTE PTR
    JumpAddress=0
    hDlg&=ezHandle(FormName$,0,0)
    I&=App_MeFormIndex&
    IF App_MeFormIndex& < UBOUND(App_MeFormHandle) THEN
        App_MeFormIndex&=App_MeFormIndex&+1
        App_MeFormHandle(App_MeFormIndex&)=hDlg&
    END IF
'    IF LEFT$(FormName$,1)="[" THEN
    FirstFormChar=STRPTR(FormName$)
    IF @FirstFormChar=91 THEN   ' is character [
        ' must be a component
        SubAddress=zFindAddress(FormName$,2)
        ' uses simpler syntax with no form name
        IF SubAddress<>0 THEN
            CALL DWORD SubAddress USING EZ_DesignWindowX2()
            App_MeFormIndex&=I&
            EXIT SUB
        END IF
    ELSE
        JumpAddress=GetProp(hDlg&, BYVAL MAKLNG(AppFormGAtom1&,0))
    END IF
    IF JumpAddress=0 THEN
        CALL DWORD App_EXEAddress3 USING EZ_DesignWindowX3(FormName$)
    ELSE
        CALL DWORD JumpAddress USING EZ_DesignWindowX2()
    END IF
    App_MeFormIndex&=I&
END SUB

' -------------------------------------------------------------------------------------
