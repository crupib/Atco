#include "stm32f7xx_hal.h"
#include "tim.h"
#include "adc.h"
#include "math.h"
#include "mcu16.h"
#include "mcu16_extrn.h"


/*
// Analog Input
AnalogIn ain6(PA_6);               // Remote control analog input
*/


// **********************************************************
// Turn remote control ON/OFF
// Assumes motiion is stopped
// **********************************************************
void CheckRemote() {

    if(HAL_GPIO_ReadPin(REMOTE_ON_i_GPIO_Port,REMOTE_ON_i_Pin)==PRESSED) remote_sw=ON;  // remote switch on
    else remote_sw=OFF;                       // remote switch off        

    if((remote_dis==0)&&(motion==OFF)) {      // if remote enabled and motion off
                               
        if((remote_sw==ON) && (remote_mode==OFF)) {
            remote_mode=ON;                   // turn on remode mode
            HAL_ADC_Start(&hadc1);             // start ADC 1
            StartRemote();                    // start remote mode                
        }

        if((remote_sw==OFF) && (remote_mode==ON)) {
            remote_mode=OFF;                  // turn off remode mode
            HAL_ADC_Stop(&hadc1);             // start ADC 1
            StopRemote();                     // stop remote mode                
        }   
    }

}

// **********************************************************
// Start remote control 
// **********************************************************
void StartRemote() {

        HAL_TIM_Base_Stop_IT(&htim9); 
        TIM9->CNT=0;                          // clear timer
        TIM9->ARR=REMOTE_TIMER;               // initialize remote interrupt rate                           
        HAL_TIM_Base_Start_IT(&htim9);        // start channel 9 interrupt
    
}

// **********************************************************
// Stop remote control 
// **********************************************************
void StopRemote() {       

        remote_mode=OFF;                    // turn off remode mode
        HAL_TIM_Base_Stop_IT(&htim9);       // stop channel 9 interrupt

        HAL_TIM_Base_Stop_IT(&htim10);      // stop channel 1 interrupt 
        HAL_TIM_Base_Stop_IT(&htim11);      // stop channel 2 interrupt 
        HAL_TIM_Base_Stop_IT(&htim12);      // stop channel 3 interrupt 
        HAL_TIM_Base_Stop_IT(&htim13);      // stop channel 4 interrupt
        HAL_TIM_Base_Stop_IT(&htim14);      // stop channel 5 interrupt 
             
} 

// **********************************************************
// New Remote values
// **********************************************************
void NewRemote() {
uint32_t speed;
uint32_t x;                               

//speed=1000;
// !!!!       speed=ain6.read_u16()>>4;              // right justify
HAL_ADC_Start(&hadc1);             // start ADC 1
       speed=HAL_ADC_GetValue(&hadc1);          // get speed control
//testit=speed;

       PCount1=speed-2048;
       
        if(PCount1<0){
            Dir1=NEG;                           // set direction negative
            Dir2=NEG;
            Dir3=NEG;
            Dir4=NEG;
            Dir5=NEG;
        }
        else {
            Dir1=POS;                           // set direction positive
            Dir2=POS;
            Dir3=POS;
            Dir4=POS;
            Dir5=POS;
        }
        
        PCount1=abs(PCount1);                   // Make Path position positive, scale max
        if(PCount1>2048) PCount1=2048;          // clamp high
        PCount2=PCount1*Y_SCALE;                // scale counts
        PCount3=PCount1*Z_SCALE;                // scale counts
        PCount1=PCount1*X_SCALE;                // scale counts
               

        if(HAL_GPIO_ReadPin(REMOTE_X_i_GPIO_Port,REMOTE_X_i_Pin)==PRESSED) {  // Xasis pressed    
                                
            if(PCount1<=X_DEADBAND) {
                    HAL_TIM_Base_Stop_IT(&htim10);      // path is 0, disable chan 1 
                    HAL_TIM_Base_Stop_IT(&htim13);      // image system, chan 4
            }       
            else {
                PCount1-=X_DEADBAND;
                if(PCount1<=0) PCount1=1;

                PCount4=PCount1;                    // image system                                    
                x=(REMOTE_TIMER-50)/PCount1;        // calculate time spacing between positions

                HAL_TIM_Base_Stop_IT(&htim10);      // channel 1                                
                TIM10->CNT=0;                       // clear timer
                TIM10->ARR=x-10;                    // initialize remote interrupt rate                           
                HAL_TIM_Base_Start_IT(&htim10);     // start channel 1 interrupt

                HAL_TIM_Base_Stop_IT(&htim13);      // channel 4, image sys                                
                TIM13->CNT=0;                       // clear timer
                TIM13->ARR=x-10;                    // initialize remote interrupt rate                           
                HAL_TIM_Base_Start_IT(&htim13);     // start channel 4 interrupt

            }    
        } //end Xaxis

        if(HAL_GPIO_ReadPin(REMOTE_Y_i_GPIO_Port,REMOTE_Y_i_Pin)==PRESSED) {     // Y asis pressed

            if(PCount2<=Y_DEADBAND){
                    HAL_TIM_Base_Stop_IT(&htim11);      // path is 0, disable chan 2 
                    HAL_TIM_Base_Stop_IT(&htim14);      // image system, chan 5
            }       
            else {
                PCount2-=Y_DEADBAND;
                if(PCount2<=0) PCount2=1;

                PCount5=PCount2;                    // image system                 
                x=(REMOTE_TIMER-50)/PCount2;        // calculate time spacing between positions 
                                 
                HAL_TIM_Base_Stop_IT(&htim11);      // channel 2                                
                TIM11->CNT=0;                       // clear timer
                TIM11->ARR=x-10;                    // initialize remote interrupt rate                           
                HAL_TIM_Base_Start_IT(&htim11);     // start channel 2 interrupt

                HAL_TIM_Base_Stop_IT(&htim14);      // channel 5, image sys                                
                TIM14->CNT=0;                       // clear timer
                TIM14->ARR=x-10;                    // initialize remote interrupt rate                           
                HAL_TIM_Base_Start_IT(&htim14);     // start channel 4 interrupt

            }    
        } //end Yaxis

        if(HAL_GPIO_ReadPin(REMOTE_Z_i_GPIO_Port,REMOTE_Z_i_Pin)==PRESSED) {   // Z asis pressed

            if(PCount3<=Z_DEADBAND) {
                    HAL_TIM_Base_Stop_IT(&htim12);      // path is 0, disable chan 3 
            }
            else {
                PCount3-=Z_DEADBAND;
                if(PCount3<=0) PCount3=1;
                
                x=(REMOTE_TIMER-50)/PCount3;        // calculate time spacing between positions               
                HAL_TIM_Base_Stop_IT(&htim12);      // channel 3                                
                TIM12->CNT=0;                       // clear timer
                TIM12->ARR=x-10;                    // initialize remote interrupt rate                           
                HAL_TIM_Base_Start_IT(&htim12);     // start channel 3 interrupt                                     

            }    
        } //end Zaxis

                  
}

             
